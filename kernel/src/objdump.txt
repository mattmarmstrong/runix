warning: unused import: `tss::*`
  --> kernel/src/interrupts/mod.rs:15:5
   |
15 |     tss::*,
   |     ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: 1 warning emitted


kernel:	file format elf64-x86-64

Disassembly of section .text:

0000000000014640 <kernel::kmain::h642b56d3d8e8e966>:
   14640:      	subq	$0x18, %rsp
   14644:      	movq	%rdi, 0x8(%rsp)
   14649:      	movq	%rdi, 0x10(%rsp)
   1464e:      	movq	0x2679b(%rip), %rax     # 0x3adf0 <zlgk82z0l71lvh9+0x3adf0>
   14655:      	callq	*%rax
   14657:      	movq	0x2679a(%rip), %rax     # 0x3adf8 <zlgk82z0l71lvh9+0x3adf8>
   1465e:      	callq	*%rax
   14660:      	movq	0x8(%rsp), %rdi
   14665:      	movq	0x26794(%rip), %rax     # 0x3ae00 <zlgk82z0l71lvh9+0x3ae00>
   1466c:      	callq	*%rax
   1466e:      	movq	$0x5, %rax
   14675:      	movq	$0x0, %rcx
   1467c:      	divq	%rcx
   1467f:      	jmp	0x1467f <kernel::kmain::h642b56d3d8e8e966+0x3f>
   14681:      	int3
   14682:      	int3
   14683:      	int3
   14684:      	int3
   14685:      	int3
   14686:      	int3
   14687:      	int3
   14688:      	int3
   14689:      	int3
   1468a:      	int3
   1468b:      	int3
   1468c:      	int3
   1468d:      	int3
   1468e:      	int3
   1468f:      	int3

0000000000014690 <rust_begin_unwind>:
   14690:      	pushq	%rax
   14691:      	movq	%rdi, (%rsp)
   14695:      	jmp	0x14695 <rust_begin_unwind+0x5>
   14697:      	int3
   14698:      	int3
   14699:      	int3
   1469a:      	int3
   1469b:      	int3
   1469c:      	int3
   1469d:      	int3
   1469e:      	int3
   1469f:      	int3

00000000000146a0 <_start>:
   146a0:      	subq	$0x18, %rsp
   146a4:      	movq	%rdi, (%rsp)
   146a8:      	movq	%rdi, 0x8(%rsp)
   146ad:      	leaq	-0x74(%rip), %rax       # 0x14640 <kernel::kmain::h642b56d3d8e8e966>
   146b4:      	movq	%rax, 0x10(%rsp)
   146b9:      	leaq	-0x63c0(%rip), %rdi     # 0xe300 <kernel::_::__BOOTLOADER_CONFIG::h6f520b419f41b747>
   146c0:      	movq	0x26741(%rip), %rax     # 0x3ae08 <zlgk82z0l71lvh9+0x3ae08>
   146c7:      	movl	$0x7c, %esi
   146cc:      	callq	*%rax
   146ce:      	movq	(%rsp), %rdi
   146d2:      	callq	0x14640 <kernel::kmain::h642b56d3d8e8e966>
   146d7:      	ud2
   146d9:      	int3
   146da:      	int3
   146db:      	int3
   146dc:      	int3
   146dd:      	int3
   146de:      	int3
   146df:      	int3

00000000000146e0 <kernel::framebuffer::init_kernel_logging::heea6f9aaf6e9b399>:
   146e0:      	subq	$0x148, %rsp            # imm = 0x148
   146e7:      	movq	%rdi, 0x108(%rsp)
   146ef:      	addq	$0x18, %rdi
   146f3:      	movq	%rdi, 0x110(%rsp)
   146fb:      	movq	0x26726(%rip), %rax     # 0x3ae28 <zlgk82z0l71lvh9+0x3ae28>
   14702:      	callq	*%rax
   14704:      	movq	%rax, %rdi
   14707:      	movq	%rdi, 0x118(%rsp)
   1470f:      	leaq	0x1eada(%rip), %rsi     # 0x331f0 <zlgk82z0l71lvh9+0x331f0>
   14716:      	movq	0x26713(%rip), %rax     # 0x3ae30 <zlgk82z0l71lvh9+0x3ae30>
   1471d:      	callq	*%rax
   1471f:      	movq	%rax, %rsi
   14722:      	movq	%rsi, 0x8(%rsp)
   14727:      	movq	%rsi, 0x120(%rsp)
   1472f:      	movq	0x26702(%rip), %rax     # 0x3ae38 <zlgk82z0l71lvh9+0x3ae38>
   14736:      	leaq	0x40(%rsp), %rdi
   1473b:      	callq	*%rax
   1473d:      	leaq	0x10(%rsp), %rdi
   14742:      	leaq	0x40(%rsp), %rsi
   14747:      	callq	0x17000 <<bootloader_api::info::FrameBufferInfo as core::clone::Clone>::clone::hf21ffe5443e6c66d>
   1474c:      	movq	0x8(%rsp), %rdi
   14751:      	movq	0x266e8(%rip), %rax     # 0x3ae40 <zlgk82z0l71lvh9+0x3ae40>
   14758:      	callq	*%rax
   1475a:      	movq	%rax, 0x128(%rsp)
   14762:      	movq	%rdx, 0x130(%rsp)
   1476a:      	movq	%rax, 0x70(%rsp)
   1476f:      	movq	%rdx, 0x78(%rsp)
   14774:      	leaq	0x70(%rsp), %rax
   14779:      	addq	$0x10, %rax
   1477d:      	movq	0x38(%rsp), %rcx
   14782:      	movq	%rcx, 0x28(%rax)
   14786:      	movq	0x30(%rsp), %rcx
   1478b:      	movq	%rcx, 0x20(%rax)
   1478f:      	movq	0x28(%rsp), %rcx
   14794:      	movq	%rcx, 0x18(%rax)
   14798:      	movq	0x20(%rsp), %rcx
   1479d:      	movq	%rcx, 0x10(%rax)
   147a1:      	movq	0x10(%rsp), %rcx
   147a6:      	movq	0x18(%rsp), %rdx
   147ab:      	movq	%rdx, 0x8(%rax)
   147af:      	movq	%rcx, (%rax)
   147b2:      	movq	0x2668f(%rip), %rdi     # 0x3ae48 <zlgk82z0l71lvh9+0x3ae48>
   147b9:      	movq	0x26690(%rip), %rax     # 0x3ae50 <zlgk82z0l71lvh9+0x3ae50>
   147c0:      	leaq	0x70(%rsp), %rsi
   147c5:      	callq	*%rax
   147c7:      	movq	%rax, %rdi
   147ca:      	movq	%rdi, 0x138(%rsp)
   147d2:      	leaq	0x1ea2f(%rip), %rsi     # 0x33208 <zlgk82z0l71lvh9+0x33208>
   147d9:      	movq	0x26678(%rip), %rax     # 0x3ae58 <zlgk82z0l71lvh9+0x3ae58>
   147e0:      	callq	*%rax
   147e2:      	movzbl	%al, %edi
   147e5:      	andl	$0x1, %edi
   147e8:      	leaq	-0x6456(%rip), %rsi     # 0xe399 <zlgk82z0l71lvh9+0xe399>
   147ef:      	leaq	0x1ea42(%rip), %rcx     # 0x33238 <zlgk82z0l71lvh9+0x33238>
   147f6:      	movq	0x26663(%rip), %rax     # 0x3ae60 <zlgk82z0l71lvh9+0x3ae60>
   147fd:      	movl	$0x12, %edx
   14802:      	callq	*%rax
   14804:      	movq	$0x5, 0xb0(%rsp)
   14810:      	movq	0xb0(%rsp), %rdi
   14818:      	callq	0x17040 <log::set_max_level::h195defec6340c49d>
   1481d:      	movq	$0x3, 0xb8(%rsp)
   14829:      	leaq	-0x6478(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   14830:      	movq	0x26631(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   14837:      	leaq	0xb8(%rsp), %rdi
   1483f:      	callq	*%rax
   14841:      	testb	$0x1, %al
   14843:      	jne	0x1484d <kernel::framebuffer::init_kernel_logging::heea6f9aaf6e9b399+0x16d>
   14845:      	addq	$0x148, %rsp            # imm = 0x148
   1484c:      	retq
   1484d:      	movb	$0x0, 0x147(%rsp)
   14855:      	movb	0x147(%rsp), %al
   1485c:      	movzbl	%al, %esi
   1485f:      	movq	0x2660a(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   14866:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   1486b:      	movq	%rax, 0xc0(%rsp)
   14873:      	movq	0x265ee(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1487a:      	leaq	0xb8(%rsp), %rdi
   14882:      	leaq	0xc0(%rsp), %rsi
   1488a:      	callq	*%rax
   1488c:      	testb	$0x1, %al
   1488e:      	jne	0x14892 <kernel::framebuffer::init_kernel_logging::heea6f9aaf6e9b399+0x1b2>
   14890:      	jmp	0x14845 <kernel::framebuffer::init_kernel_logging::heea6f9aaf6e9b399+0x165>
   14892:      	leaq	0x1e9b7(%rip), %rsi     # 0x33250 <zlgk82z0l71lvh9+0x33250>
   14899:      	leaq	0xc8(%rsp), %rdi
   148a1:      	movl	$0x1, %edx
   148a6:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   148ab:      	movq	0xb8(%rsp), %rsi
   148b3:      	movq	$0x0, 0xf8(%rsp)
   148bf:      	movq	0xf8(%rsp), %r8
   148c7:      	movq	0x100(%rsp), %r9
   148cf:      	leaq	0x1e98a(%rip), %rdx     # 0x33260 <zlgk82z0l71lvh9+0x33260>
   148d6:      	movq	0x2659b(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   148dd:      	leaq	0xc8(%rsp), %rdi
   148e5:      	movl	$0x13, %ecx
   148ea:      	callq	*%rax
   148ec:      	jmp	0x14845 <kernel::framebuffer::init_kernel_logging::heea6f9aaf6e9b399+0x165>
   148f1:      	int3
   148f2:      	int3
   148f3:      	int3
   148f4:      	int3
   148f5:      	int3
   148f6:      	int3
   148f7:      	int3
   148f8:      	int3
   148f9:      	int3
   148fa:      	int3
   148fb:      	int3
   148fc:      	int3
   148fd:      	int3
   148fe:      	int3
   148ff:      	int3

0000000000014900 <core::ptr::const_ptr::<impl *const T>::is_aligned::h84bbd9b642c2ad18>:
   14900:      	pushq	%rax
   14901:      	movq	%rdi, (%rsp)
   14905:      	movq	0x2657c(%rip), %rax     # 0x3ae88 <zlgk82z0l71lvh9+0x3ae88>
   1490c:      	movl	$0x8, %esi
   14911:      	callq	*%rax
   14913:      	andb	$0x1, %al
   14915:      	movzbl	%al, %eax
   14918:      	popq	%rcx
   14919:      	retq
   1491a:      	int3
   1491b:      	int3
   1491c:      	int3
   1491d:      	int3
   1491e:      	int3
   1491f:      	int3

0000000000014920 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h680bb380d910763a>:
   14920:      	subq	$0x88, %rsp
   14927:      	movq	%rsi, %rcx
   1492a:      	movq	%rcx, 0x8(%rsp)
   1492f:      	movq	%rdi, 0x10(%rsp)
   14934:      	movq	%rdi, 0x58(%rsp)
   14939:      	movq	%rcx, 0x60(%rsp)
   1493e:      	movq	%rcx, 0x68(%rsp)
   14943:      	movq	%rcx, 0x70(%rsp)
   14948:      	movq	%rcx, %rax
   1494b:      	shrq	%rax
   1494e:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   14958:      	andq	%rdx, %rax
   1495b:      	subq	%rax, %rcx
   1495e:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   14968:      	movq	%rcx, %rax
   1496b:      	andq	%rdx, %rax
   1496e:      	shrq	$0x2, %rcx
   14972:      	andq	%rdx, %rcx
   14975:      	addq	%rcx, %rax
   14978:      	movq	%rax, %rcx
   1497b:      	shrq	$0x4, %rcx
   1497f:      	addq	%rcx, %rax
   14982:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   1498c:      	andq	%rcx, %rax
   1498f:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   14999:      	imulq	%rcx, %rax
   1499d:      	shrq	$0x38, %rax
   149a1:      	movq	%rax, 0x78(%rsp)
   149a6:      	movq	0x78(%rsp), %rax
   149ab:      	cmpl	$0x1, %eax
   149ae:      	je	0x149e0 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h680bb380d910763a+0xc0>
   149b0:      	leaq	0x1e8d9(%rip), %rsi     # 0x33290 <zlgk82z0l71lvh9+0x33290>
   149b7:      	leaq	0x18(%rsp), %rdi
   149bc:      	movq	%rdi, (%rsp)
   149c0:      	movl	$0x1, %edx
   149c5:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   149ca:      	movq	(%rsp), %rdi
   149ce:      	leaq	0x1e8cb(%rip), %rsi     # 0x332a0 <zlgk82z0l71lvh9+0x332a0>
   149d5:      	movq	0x264e4(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   149dc:      	callq	*%rax
   149de:      	ud2
   149e0:      	movq	0x8(%rsp), %rax
   149e5:      	movq	0x10(%rsp), %rcx
   149ea:      	movq	%rcx, 0x80(%rsp)
   149f2:      	movq	%rcx, 0x48(%rsp)
   149f7:      	movq	%rax, 0x50(%rsp)
   149fc:      	movq	0x48(%rsp), %rdi
   14a01:      	movq	0x50(%rsp), %rsi
   14a06:      	callq	0x17d60 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::h229bcaf8503748a6>
   14a0b:      	andb	$0x1, %al
   14a0d:      	movzbl	%al, %eax
   14a10:      	addq	$0x88, %rsp
   14a17:      	retq
   14a18:      	int3
   14a19:      	int3
   14a1a:      	int3
   14a1b:      	int3
   14a1c:      	int3
   14a1d:      	int3
   14a1e:      	int3
   14a1f:      	int3

0000000000014a20 <core::ptr::const_ptr::<impl *const T>::is_null::ha3276e4d1d5d36e0>:
   14a20:      	subq	$0x18, %rsp
   14a24:      	movq	%rdi, 0x10(%rsp)
   14a29:      	movq	%rdi, 0x8(%rsp)
   14a2e:      	movq	0x8(%rsp), %rdi
   14a33:      	callq	0x17dd0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h2fcdfb0c0b6389ca>
   14a38:      	andb	$0x1, %al
   14a3a:      	movzbl	%al, %eax
   14a3d:      	addq	$0x18, %rsp
   14a41:      	retq
   14a42:      	int3
   14a43:      	int3
   14a44:      	int3
   14a45:      	int3
   14a46:      	int3
   14a47:      	int3
   14a48:      	int3
   14a49:      	int3
   14a4a:      	int3
   14a4b:      	int3
   14a4c:      	int3
   14a4d:      	int3
   14a4e:      	int3
   14a4f:      	int3

0000000000014a50 <core::option::Option<T>::take::hfba1d98da4a5dfcb>:
   14a50:      	subq	$0x58, %rsp
   14a54:      	movq	%rdi, %rax
   14a57:      	movq	%rax, 0x8(%rsp)
   14a5c:      	movq	%rsi, 0x50(%rsp)
   14a61:      	movl	$0x4, 0x38(%rsp)
   14a69:      	movq	0x26458(%rip), %rax     # 0x3aec8 <zlgk82z0l71lvh9+0x3aec8>
   14a70:      	leaq	0x10(%rsp), %rdx
   14a75:      	callq	*%rax
   14a77:      	movq	0x8(%rsp), %rax
   14a7c:      	addq	$0x58, %rsp
   14a80:      	retq
   14a81:      	int3
   14a82:      	int3
   14a83:      	int3
   14a84:      	int3
   14a85:      	int3
   14a86:      	int3
   14a87:      	int3
   14a88:      	int3
   14a89:      	int3
   14a8a:      	int3
   14a8b:      	int3
   14a8c:      	int3
   14a8d:      	int3
   14a8e:      	int3
   14a8f:      	int3

0000000000014a90 <core::option::Option<T>::as_ref::h30b24560c17f04c3>:
   14a90:      	subq	$0x20, %rsp
   14a94:      	movq	%rdi, (%rsp)
   14a98:      	movq	%rdi, 0x10(%rsp)
   14a9d:      	movb	(%rdi), %al
   14a9f:      	andb	$0x1, %al
   14aa1:      	movzbl	%al, %eax
   14aa4:      	cmpq	$0x0, %rax
   14aa8:      	jne	0x14ab5 <core::option::Option<T>::as_ref::h30b24560c17f04c3+0x25>
   14aaa:      	movq	$0x0, 0x8(%rsp)
   14ab3:      	jmp	0x14ac7 <core::option::Option<T>::as_ref::h30b24560c17f04c3+0x37>
   14ab5:      	movq	(%rsp), %rax
   14ab9:      	addq	$0x10, %rax
   14abd:      	movq	%rax, 0x18(%rsp)
   14ac2:      	movq	%rax, 0x8(%rsp)
   14ac7:      	movq	0x8(%rsp), %rax
   14acc:      	addq	$0x20, %rsp
   14ad0:      	retq
   14ad1:      	int3
   14ad2:      	int3
   14ad3:      	int3
   14ad4:      	int3
   14ad5:      	int3
   14ad6:      	int3
   14ad7:      	int3
   14ad8:      	int3
   14ad9:      	int3
   14ada:      	int3
   14adb:      	int3
   14adc:      	int3
   14add:      	int3
   14ade:      	int3
   14adf:      	int3

0000000000014ae0 <core::option::Option<T>::as_ref::hac66012f111bad28>:
   14ae0:      	subq	$0x20, %rsp
   14ae4:      	movq	%rdi, (%rsp)
   14ae8:      	movq	%rdi, 0x10(%rsp)
   14aed:      	movzwl	(%rdi), %eax
   14af0:      	cmpq	$0x0, %rax
   14af4:      	jne	0x14b01 <core::option::Option<T>::as_ref::hac66012f111bad28+0x21>
   14af6:      	movq	$0x0, 0x8(%rsp)
   14aff:      	jmp	0x14b13 <core::option::Option<T>::as_ref::hac66012f111bad28+0x33>
   14b01:      	movq	(%rsp), %rax
   14b05:      	addq	$0x2, %rax
   14b09:      	movq	%rax, 0x18(%rsp)
   14b0e:      	movq	%rax, 0x8(%rsp)
   14b13:      	movq	0x8(%rsp), %rax
   14b18:      	addq	$0x20, %rsp
   14b1c:      	retq
   14b1d:      	int3
   14b1e:      	int3
   14b1f:      	int3

0000000000014b20 <core::option::Option<T>::as_ref::hbe8f76d9de3c9ec9>:
   14b20:      	subq	$0x20, %rsp
   14b24:      	movq	%rdi, (%rsp)
   14b28:      	movq	%rdi, 0x10(%rsp)
   14b2d:      	movl	(%rdi), %eax
   14b2f:      	cmpq	$0x0, %rax
   14b33:      	jne	0x14b40 <core::option::Option<T>::as_ref::hbe8f76d9de3c9ec9+0x20>
   14b35:      	movq	$0x0, 0x8(%rsp)
   14b3e:      	jmp	0x14b52 <core::option::Option<T>::as_ref::hbe8f76d9de3c9ec9+0x32>
   14b40:      	movq	(%rsp), %rax
   14b44:      	addq	$0x4, %rax
   14b48:      	movq	%rax, 0x18(%rsp)
   14b4d:      	movq	%rax, 0x8(%rsp)
   14b52:      	movq	0x8(%rsp), %rax
   14b57:      	addq	$0x20, %rsp
   14b5b:      	retq
   14b5c:      	int3
   14b5d:      	int3
   14b5e:      	int3
   14b5f:      	int3

0000000000014b60 <core::option::Option<T>::unwrap::h46ca72a90d2f60bb>:
   14b60:      	subq	$0x28, %rsp
   14b64:      	movq	%rdx, 0x8(%rsp)
   14b69:      	movq	%rsi, 0x10(%rsp)
   14b6e:      	movq	%rdi, 0x18(%rsp)
   14b73:      	movq	%rdi, 0x20(%rsp)
   14b78:      	movl	$0x1, %eax
   14b7d:      	xorl	%ecx, %ecx
   14b7f:      	cmpl	$0x4, 0x28(%rsi)
   14b83:      	cmoveq	%rcx, %rax
   14b87:      	cmpq	$0x0, %rax
   14b8b:      	jne	0x14ba9 <core::option::Option<T>::unwrap::h46ca72a90d2f60bb+0x49>
   14b8d:      	movq	0x8(%rsp), %rdx
   14b92:      	leaq	-0x6702(%rip), %rdi     # 0xe497 <zlgk82z0l71lvh9+0xe497>
   14b99:      	movq	0x26330(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   14ba0:      	movl	$0x2b, %esi
   14ba5:      	callq	*%rax
   14ba7:      	ud2
   14ba9:      	movq	0x20(%rsp), %rax
   14bae:      	movq	0x18(%rsp), %rcx
   14bb3:      	movq	0x10(%rsp), %rsi
   14bb8:      	movq	0x38(%rsi), %rdx
   14bbc:      	movq	%rdx, 0x38(%rcx)
   14bc0:      	movq	0x30(%rsi), %rdx
   14bc4:      	movq	%rdx, 0x30(%rcx)
   14bc8:      	movq	0x28(%rsi), %rdx
   14bcc:      	movq	%rdx, 0x28(%rcx)
   14bd0:      	movq	0x20(%rsi), %rdx
   14bd4:      	movq	%rdx, 0x20(%rcx)
   14bd8:      	movq	0x18(%rsi), %rdx
   14bdc:      	movq	%rdx, 0x18(%rcx)
   14be0:      	movq	0x10(%rsi), %rdx
   14be4:      	movq	%rdx, 0x10(%rcx)
   14be8:      	movq	(%rsi), %rdx
   14beb:      	movq	0x8(%rsi), %rsi
   14bef:      	movq	%rsi, 0x8(%rcx)
   14bf3:      	movq	%rdx, (%rcx)
   14bf6:      	addq	$0x28, %rsp
   14bfa:      	retq
   14bfb:      	int3
   14bfc:      	int3
   14bfd:      	int3
   14bfe:      	int3
   14bff:      	int3

0000000000014c00 <core::option::Option<T>::unwrap::h6153bda898e48b6f>:
   14c00:      	subq	$0x18, %rsp
   14c04:      	movq	%rsi, (%rsp)
   14c08:      	movq	%rdi, 0x8(%rsp)
   14c0d:      	movq	0x8(%rsp), %rdx
   14c12:      	movl	$0x1, %eax
   14c17:      	xorl	%ecx, %ecx
   14c19:      	cmpq	$0x0, %rdx
   14c1d:      	cmoveq	%rcx, %rax
   14c21:      	cmpq	$0x0, %rax
   14c25:      	jne	0x14c42 <core::option::Option<T>::unwrap::h6153bda898e48b6f+0x42>
   14c27:      	movq	(%rsp), %rdx
   14c2b:      	leaq	-0x679b(%rip), %rdi     # 0xe497 <zlgk82z0l71lvh9+0xe497>
   14c32:      	movq	0x26297(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   14c39:      	movl	$0x2b, %esi
   14c3e:      	callq	*%rax
   14c40:      	ud2
   14c42:      	movq	0x8(%rsp), %rax
   14c47:      	movq	%rax, 0x10(%rsp)
   14c4c:      	addq	$0x18, %rsp
   14c50:      	retq
   14c51:      	int3
   14c52:      	int3
   14c53:      	int3
   14c54:      	int3
   14c55:      	int3
   14c56:      	int3
   14c57:      	int3
   14c58:      	int3
   14c59:      	int3
   14c5a:      	int3
   14c5b:      	int3
   14c5c:      	int3
   14c5d:      	int3
   14c5e:      	int3
   14c5f:      	int3

0000000000014c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>:
   14c60:      	subq	$0x50, %rsp
   14c64:      	movq	%r9, %r10
   14c67:      	movq	%rdi, %rax
   14c6a:      	movq	0x58(%rsp), %r9
   14c6f:      	movq	%rsi, 0x18(%rsp)
   14c74:      	movq	%rdx, 0x20(%rsp)
   14c79:      	movq	%rcx, 0x28(%rsp)
   14c7e:      	movq	%r8, 0x30(%rsp)
   14c83:      	movq	%r10, 0x38(%rsp)
   14c88:      	movq	%r9, 0x40(%rsp)
   14c8d:      	movq	%r10, 0x8(%rsp)
   14c92:      	movq	%r9, 0x10(%rsp)
   14c97:      	movq	%rsi, (%rdi)
   14c9a:      	movq	%rdx, 0x8(%rdi)
   14c9e:      	movq	0x8(%rsp), %rsi
   14ca3:      	movq	0x10(%rsp), %rdx
   14ca8:      	movq	%rsi, 0x20(%rdi)
   14cac:      	movq	%rdx, 0x28(%rdi)
   14cb0:      	movq	%rcx, 0x10(%rdi)
   14cb4:      	movq	%r8, 0x18(%rdi)
   14cb8:      	addq	$0x50, %rsp
   14cbc:      	retq
   14cbd:      	int3
   14cbe:      	int3
   14cbf:      	int3

0000000000014cc0 <core::fmt::Arguments::new_v1::h3e37eaae9534818a>:
   14cc0:      	subq	$0xa8, %rsp
   14cc7:      	movq	%r8, 0x18(%rsp)
   14ccc:      	movq	%rcx, 0x20(%rsp)
   14cd1:      	movq	%rdx, 0x28(%rsp)
   14cd6:      	movq	%rsi, 0x30(%rsp)
   14cdb:      	movq	%rdi, 0x38(%rsp)
   14ce0:      	movq	%rdi, 0x40(%rsp)
   14ce5:      	movq	%rsi, 0x88(%rsp)
   14ced:      	movq	%rdx, 0x90(%rsp)
   14cf5:      	movq	%rcx, 0x98(%rsp)
   14cfd:      	movq	%r8, 0xa0(%rsp)
   14d05:      	cmpq	%r8, %rdx
   14d08:      	jb	0x14d21 <core::fmt::Arguments::new_v1::h3e37eaae9534818a+0x61>
   14d0a:      	movq	0x18(%rsp), %rax
   14d0f:      	addq	$0x1, %rax
   14d13:      	movq	%rax, 0x10(%rsp)
   14d18:      	setb	%al
   14d1b:      	testb	$0x1, %al
   14d1d:      	jne	0x14d64 <core::fmt::Arguments::new_v1::h3e37eaae9534818a+0xa4>
   14d1f:      	jmp	0x14d53 <core::fmt::Arguments::new_v1::h3e37eaae9534818a+0x93>
   14d21:      	leaq	0x1e5a8(%rip), %rsi     # 0x332d0 <zlgk82z0l71lvh9+0x332d0>
   14d28:      	leaq	0x48(%rsp), %rdi
   14d2d:      	movq	%rdi, 0x8(%rsp)
   14d32:      	movl	$0x1, %edx
   14d37:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   14d3c:      	movq	0x8(%rsp), %rdi
   14d41:      	leaq	0x1e598(%rip), %rsi     # 0x332e0 <zlgk82z0l71lvh9+0x332e0>
   14d48:      	movq	0x26171(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   14d4f:      	callq	*%rax
   14d51:      	ud2
   14d53:      	movq	0x28(%rsp), %rax
   14d58:      	movq	0x10(%rsp), %rcx
   14d5d:      	cmpq	%rcx, %rax
   14d60:      	ja	0x14d21 <core::fmt::Arguments::new_v1::h3e37eaae9534818a+0x61>
   14d62:      	jmp	0x14d82 <core::fmt::Arguments::new_v1::h3e37eaae9534818a+0xc2>
   14d64:      	leaq	-0x682b(%rip), %rdi     # 0xe540 <str.0>
   14d6b:      	leaq	0x1e546(%rip), %rdx     # 0x332b8 <zlgk82z0l71lvh9+0x332b8>
   14d72:      	movq	0x26157(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   14d79:      	movl	$0x1c, %esi
   14d7e:      	callq	*%rax
   14d80:      	ud2
   14d82:      	movq	0x40(%rsp), %rax
   14d87:      	movq	0x38(%rsp), %rcx
   14d8c:      	movq	0x18(%rsp), %rdx
   14d91:      	movq	0x20(%rsp), %rsi
   14d96:      	movq	0x28(%rsp), %rdi
   14d9b:      	movq	0x30(%rsp), %r8
   14da0:      	movq	$0x0, 0x78(%rsp)
   14da9:      	movq	%r8, (%rcx)
   14dac:      	movq	%rdi, 0x8(%rcx)
   14db0:      	movq	0x78(%rsp), %r8
   14db5:      	movq	0x80(%rsp), %rdi
   14dbd:      	movq	%r8, 0x20(%rcx)
   14dc1:      	movq	%rdi, 0x28(%rcx)
   14dc5:      	movq	%rsi, 0x10(%rcx)
   14dc9:      	movq	%rdx, 0x18(%rcx)
   14dcd:      	addq	$0xa8, %rsp
   14dd4:      	retq
   14dd5:      	int3
   14dd6:      	int3
   14dd7:      	int3
   14dd8:      	int3
   14dd9:      	int3
   14dda:      	int3
   14ddb:      	int3
   14ddc:      	int3
   14ddd:      	int3
   14dde:      	int3
   14ddf:      	int3

0000000000014de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>:
   14de0:      	subq	$0x78, %rsp
   14de4:      	movq	%rdx, 0x8(%rsp)
   14de9:      	movq	%rsi, 0x10(%rsp)
   14dee:      	movq	%rdi, 0x18(%rsp)
   14df3:      	movq	%rdi, 0x20(%rsp)
   14df8:      	movq	%rsi, 0x68(%rsp)
   14dfd:      	movq	%rdx, 0x70(%rsp)
   14e02:      	cmpq	$0x1, %rdx
   14e06:      	ja	0x14e56 <core::fmt::Arguments::new_const::he1efe09b6f92a0da+0x76>
   14e08:      	movq	0x20(%rsp), %rax
   14e0d:      	movq	0x18(%rsp), %rcx
   14e12:      	movq	0x8(%rsp), %rdx
   14e17:      	movq	0x10(%rsp), %rsi
   14e1c:      	movq	$0x0, 0x58(%rsp)
   14e25:      	movq	%rsi, (%rcx)
   14e28:      	movq	%rdx, 0x8(%rcx)
   14e2c:      	movq	0x58(%rsp), %rsi
   14e31:      	movq	0x60(%rsp), %rdx
   14e36:      	movq	%rsi, 0x20(%rcx)
   14e3a:      	movq	%rdx, 0x28(%rcx)
   14e3e:      	leaq	-0x68dd(%rip), %rdx     # 0xe568 <str.0+0x28>
   14e45:      	movq	%rdx, 0x10(%rcx)
   14e49:      	movq	$0x0, 0x18(%rcx)
   14e51:      	addq	$0x78, %rsp
   14e55:      	retq
   14e56:      	leaq	0x1e473(%rip), %rsi     # 0x332d0 <zlgk82z0l71lvh9+0x332d0>
   14e5d:      	leaq	0x28(%rsp), %rdi
   14e62:      	movq	%rdi, (%rsp)
   14e66:      	movl	$0x1, %edx
   14e6b:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   14e70:      	movq	(%rsp), %rdi
   14e74:      	leaq	0x1e47d(%rip), %rsi     # 0x332f8 <zlgk82z0l71lvh9+0x332f8>
   14e7b:      	movq	0x2603e(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   14e82:      	callq	*%rax
   14e84:      	ud2
   14e86:      	int3
   14e87:      	int3
   14e88:      	int3
   14e89:      	int3
   14e8a:      	int3
   14e8b:      	int3
   14e8c:      	int3
   14e8d:      	int3
   14e8e:      	int3
   14e8f:      	int3

0000000000014e90 <core::ops::function::FnOnce::call_once{{vtable.shim}}::hd2ddfb7adec6ec95>:
   14e90:      	subq	$0x18, %rsp
   14e94:      	movq	%rdi, %rax
   14e97:      	movq	%rax, (%rsp)
   14e9b:      	movq	%rsi, 0x10(%rsp)
   14ea0:      	movq	(%rsi), %rsi
   14ea3:      	callq	0x15570 <core::ops::function::FnOnce::call_once::h640ecabfef482ab4>
   14ea8:      	movq	(%rsp), %rax
   14eac:      	addq	$0x18, %rsp
   14eb0:      	retq
   14eb1:      	int3
   14eb2:      	int3
   14eb3:      	int3
   14eb4:      	int3
   14eb5:      	int3
   14eb6:      	int3
   14eb7:      	int3
   14eb8:      	int3
   14eb9:      	int3
   14eba:      	int3
   14ebb:      	int3
   14ebc:      	int3
   14ebd:      	int3
   14ebe:      	int3
   14ebf:      	int3

0000000000014ec0 <core::ops::function::FnOnce::call_once::h072943bd4876520a>:
   14ec0:      	subq	$0x138, %rsp            # imm = 0x138
   14ec7:      	movq	%rdi, 0x10(%rsp)
   14ecc:      	movq	%rdi, 0x18(%rsp)
   14ed1:      	movq	0x26000(%rip), %rax     # 0x3aed8 <zlgk82z0l71lvh9+0x3aed8>
   14ed8:      	leaq	0x24(%rsp), %rdi
   14edd:      	callq	*%rax
   14edf:      	xorl	%eax, %eax
   14ee1:      	movq	0x26000(%rip), %rax     # 0x3aee8 <zlgk82z0l71lvh9+0x3aee8>
   14ee8:      	xorl	%ecx, %ecx
   14eea:      	movl	%ecx, %esi
   14eec:      	leaq	0x24(%rsp), %rdi
   14ef1:      	callq	*%rax
   14ef3:      	movw	%ax, 0x4(%rsp)
   14ef8:      	movw	%ax, 0xe6(%rsp)
   14f00:      	movq	0x26011(%rip), %rax     # 0x3af18 <zlgk82z0l71lvh9+0x3af18>
   14f07:      	callq	*%rax
   14f09:      	movq	%rax, 0xe8(%rsp)
   14f11:      	movq	0xe8(%rsp), %rax
   14f19:      	movq	%rax, 0x5c(%rsp)
   14f1e:      	movq	0x5c(%rsp), %rdx
   14f23:      	xorl	%eax, %eax
   14f25:      	movq	0x25fd4(%rip), %rax     # 0x3af00 <zlgk82z0l71lvh9+0x3af00>
   14f2c:      	leaq	0x24(%rsp), %rdi
   14f31:      	movl	$0x1, %esi
   14f36:      	xorl	%ecx, %ecx
   14f38:      	callq	*%rax
   14f3a:      	movw	%ax, 0x6(%rsp)
   14f3f:      	movw	%ax, 0xf6(%rsp)
   14f47:      	movq	0x25fd2(%rip), %rax     # 0x3af20 <zlgk82z0l71lvh9+0x3af20>
   14f4e:      	callq	*%rax
   14f50:      	movq	%rax, 0xf8(%rsp)
   14f58:      	movq	0xf8(%rsp), %rax
   14f60:      	movq	%rax, 0x64(%rsp)
   14f65:      	movq	0x64(%rsp), %rdx
   14f6a:      	xorl	%eax, %eax
   14f6c:      	movq	0x25f8d(%rip), %rax     # 0x3af00 <zlgk82z0l71lvh9+0x3af00>
   14f73:      	leaq	0x24(%rsp), %rdi
   14f78:      	movl	$0x2, %esi
   14f7d:      	xorl	%ecx, %ecx
   14f7f:      	callq	*%rax
   14f81:      	movw	%ax, 0x8(%rsp)
   14f86:      	movw	%ax, 0x106(%rsp)
   14f8e:      	movq	0x25f93(%rip), %rax     # 0x3af28 <zlgk82z0l71lvh9+0x3af28>
   14f95:      	callq	*%rax
   14f97:      	movq	%rax, 0x108(%rsp)
   14f9f:      	movq	0x108(%rsp), %rax
   14fa7:      	movq	%rax, 0x6c(%rsp)
   14fac:      	movq	0x6c(%rsp), %rdx
   14fb1:      	movq	0x25f48(%rip), %rax     # 0x3af00 <zlgk82z0l71lvh9+0x3af00>
   14fb8:      	leaq	0x24(%rsp), %rdi
   14fbd:      	movl	$0x3, %esi
   14fc2:      	movl	$0x3, %ecx
   14fc7:      	callq	*%rax
   14fc9:      	movw	%ax, 0xa(%rsp)
   14fce:      	movw	%ax, 0x116(%rsp)
   14fd6:      	movq	0x25f53(%rip), %rax     # 0x3af30 <zlgk82z0l71lvh9+0x3af30>
   14fdd:      	callq	*%rax
   14fdf:      	movq	%rax, 0x118(%rsp)
   14fe7:      	movq	0x118(%rsp), %rax
   14fef:      	movq	%rax, 0x74(%rsp)
   14ff4:      	movq	0x74(%rsp), %rdx
   14ff9:      	movq	0x25f00(%rip), %rax     # 0x3af00 <zlgk82z0l71lvh9+0x3af00>
   15000:      	leaq	0x24(%rsp), %rdi
   15005:      	movl	$0x4, %esi
   1500a:      	movl	$0x3, %ecx
   1500f:      	callq	*%rax
   15011:      	movw	%ax, 0xc(%rsp)
   15016:      	movw	%ax, 0x124(%rsp)
   1501e:      	movq	0x25f6b(%rip), %rdi     # 0x3af90 <zlgk82z0l71lvh9+0x3af90>
   15025:      	movq	0x25f6c(%rip), %rax     # 0x3af98 <zlgk82z0l71lvh9+0x3af98>
   1502c:      	callq	*%rax
   1502e:      	movq	%rax, %rsi
   15031:      	movq	0x25f00(%rip), %rax     # 0x3af38 <zlgk82z0l71lvh9+0x3af38>
   15038:      	leaq	0x8c(%rsp), %rdi
   15040:      	callq	*%rax
   15042:      	movq	0x8c(%rsp), %rax
   1504a:      	movq	%rax, 0x7c(%rsp)
   1504f:      	movq	0x94(%rsp), %rax
   15057:      	movq	%rax, 0x84(%rsp)
   1505f:      	movq	0x7c(%rsp), %rax
   15064:      	movq	%rax, 0x126(%rsp)
   1506c:      	movq	0x126(%rsp), %rdx
   15074:      	xorl	%eax, %eax
   15076:      	movq	0x25e83(%rip), %rax     # 0x3af00 <zlgk82z0l71lvh9+0x3af00>
   1507d:      	leaq	0x24(%rsp), %rdi
   15082:      	movl	$0x5, %esi
   15087:      	xorl	%ecx, %ecx
   15089:      	callq	*%rax
   1508b:      	movw	%ax, 0xe(%rsp)
   15090:      	movw	%ax, 0x12e(%rsp)
   15098:      	movq	0x84(%rsp), %rax
   150a0:      	movq	%rax, 0x130(%rsp)
   150a8:      	movq	0x130(%rsp), %rdx
   150b0:      	xorl	%eax, %eax
   150b2:      	movq	0x25e47(%rip), %rax     # 0x3af00 <zlgk82z0l71lvh9+0x3af00>
   150b9:      	leaq	0x24(%rsp), %rdi
   150be:      	movl	$0x6, %esi
   150c3:      	xorl	%ecx, %ecx
   150c5:      	callq	*%rax
   150c7:      	movw	0x4(%rsp), %r10w
   150cd:      	movw	0x6(%rsp), %r9w
   150d3:      	movw	0x8(%rsp), %r8w
   150d9:      	movw	0xa(%rsp), %si
   150de:      	movw	0xc(%rsp), %dx
   150e3:      	movw	0xe(%rsp), %cx
   150e8:      	movq	0x10(%rsp), %rdi
   150ed:      	movq	0x18(%rsp), %rax
   150f2:      	movw	%r10w, 0x9c(%rsp)
   150fb:      	movw	%r9w, 0x9e(%rsp)
   15104:      	movw	%r8w, 0xa0(%rsp)
   1510d:      	movw	%si, 0xa2(%rsp)
   15115:      	movw	%dx, 0xa4(%rsp)
   1511d:      	movw	%cx, 0xa6(%rsp)
   15125:      	movq	0x54(%rsp), %rcx
   1512a:      	movq	%rcx, 0xd8(%rsp)
   15132:      	movq	0x4c(%rsp), %rcx
   15137:      	movq	%rcx, 0xd0(%rsp)
   1513f:      	movq	0x44(%rsp), %rcx
   15144:      	movq	%rcx, 0xc8(%rsp)
   1514c:      	movq	0x3c(%rsp), %rcx
   15151:      	movq	%rcx, 0xc0(%rsp)
   15159:      	movq	0x34(%rsp), %rcx
   1515e:      	movq	%rcx, 0xb8(%rsp)
   15166:      	movq	0x24(%rsp), %rcx
   1516b:      	movq	0x2c(%rsp), %rdx
   15170:      	movq	%rdx, 0xb0(%rsp)
   15178:      	movq	%rcx, 0xa8(%rsp)
   15180:      	movq	0xd8(%rsp), %rcx
   15188:      	movq	%rcx, 0x30(%rdi)
   1518c:      	movq	0xd0(%rsp), %rcx
   15194:      	movq	%rcx, 0x28(%rdi)
   15198:      	movq	0xc8(%rsp), %rcx
   151a0:      	movq	%rcx, 0x20(%rdi)
   151a4:      	movq	0xc0(%rsp), %rcx
   151ac:      	movq	%rcx, 0x18(%rdi)
   151b0:      	movq	0xb8(%rsp), %rcx
   151b8:      	movq	%rcx, 0x10(%rdi)
   151bc:      	movq	0xa8(%rsp), %rcx
   151c4:      	movq	0xb0(%rsp), %rdx
   151cc:      	movq	%rdx, 0x8(%rdi)
   151d0:      	movq	%rcx, (%rdi)
   151d3:      	movq	0x9c(%rsp), %rcx
   151db:      	movq	%rcx, 0x38(%rdi)
   151df:      	movl	0xa4(%rsp), %ecx
   151e6:      	movl	%ecx, 0x40(%rdi)
   151e9:      	addq	$0x138, %rsp            # imm = 0x138
   151f0:      	retq
   151f1:      	int3
   151f2:      	int3
   151f3:      	int3
   151f4:      	int3
   151f5:      	int3
   151f6:      	int3
   151f7:      	int3
   151f8:      	int3
   151f9:      	int3
   151fa:      	int3
   151fb:      	int3
   151fc:      	int3
   151fd:      	int3
   151fe:      	int3
   151ff:      	int3

0000000000015200 <core::ops::function::FnOnce::call_once::h4291707c6673a4bb>:
   15200:      	subq	$0x1000, %rsp           # imm = 0x1000
   15207:      	movq	$0x0, (%rsp)
   1520f:      	subq	$0x128, %rsp            # imm = 0x128
   15216:      	movq	%rdi, 0x8(%rsp)
   1521b:      	movq	%rdi, 0x10(%rsp)
   15220:      	movq	0x25d79(%rip), %rax     # 0x3afa0 <zlgk82z0l71lvh9+0x3afa0>
   15227:      	leaq	0x20(%rsp), %rdi
   1522c:      	callq	*%rax
   1522e:      	movq	0x25d73(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   15235:      	movq	0x25d74(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   1523c:      	callq	*%rax
   1523e:      	movw	0x3a(%rax), %ax
   15242:      	movw	%ax, (%rsp)
   15246:      	movq	0x25d6b(%rip), %rax     # 0x3afb8 <zlgk82z0l71lvh9+0x3afb8>
   1524d:      	callq	*%rax
   1524f:      	movw	(%rsp), %cx
   15253:      	movw	%cx, %si
   15256:      	movw	%ax, %dx
   15259:      	movq	0x25d60(%rip), %rax     # 0x3afc0 <zlgk82z0l71lvh9+0x3afc0>
   15260:      	leaq	0x1028(%rsp), %rdi
   15268:      	callq	*%rax
   1526a:      	movq	0x1028(%rsp), %rax
   15272:      	movq	%rax, 0x1048(%rsp)
   1527a:      	movq	0x1030(%rsp), %rax
   15282:      	movq	%rax, 0x1050(%rsp)
   1528a:      	movq	0x25d37(%rip), %rdi     # 0x3afc8 <zlgk82z0l71lvh9+0x3afc8>
   15291:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   15296:      	movq	%rax, %rdx
   15299:      	movq	0x25d30(%rip), %rax     # 0x3afd0 <zlgk82z0l71lvh9+0x3afd0>
   152a0:      	leaq	0x1038(%rsp), %rdi
   152a8:      	leaq	0x1048(%rsp), %rsi
   152b0:      	callq	*%rax
   152b2:      	movq	0x25cef(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   152b9:      	movq	0x25cf0(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   152c0:      	callq	*%rax
   152c2:      	movw	0x3a(%rax), %ax
   152c6:      	movw	%ax, 0x2(%rsp)
   152cb:      	movq	0x25ce6(%rip), %rax     # 0x3afb8 <zlgk82z0l71lvh9+0x3afb8>
   152d2:      	callq	*%rax
   152d4:      	movw	0x2(%rsp), %cx
   152d9:      	movw	%cx, %si
   152dc:      	movw	%ax, %dx
   152df:      	movq	0x25cda(%rip), %rax     # 0x3afc0 <zlgk82z0l71lvh9+0x3afc0>
   152e6:      	leaq	0x1058(%rsp), %rdi
   152ee:      	callq	*%rax
   152f0:      	movq	0x1058(%rsp), %rax
   152f8:      	movq	%rax, 0x1078(%rsp)
   15300:      	movq	0x1060(%rsp), %rax
   15308:      	movq	%rax, 0x1080(%rsp)
   15310:      	movq	0x25cc1(%rip), %rdi     # 0x3afd8 <zlgk82z0l71lvh9+0x3afd8>
   15317:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   1531c:      	movq	%rax, %rdx
   1531f:      	movq	0x25caa(%rip), %rax     # 0x3afd0 <zlgk82z0l71lvh9+0x3afd0>
   15326:      	leaq	0x1068(%rsp), %rdi
   1532e:      	leaq	0x1078(%rsp), %rsi
   15336:      	callq	*%rax
   15338:      	movq	0x25c69(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   1533f:      	movq	0x25c6a(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   15346:      	callq	*%rax
   15348:      	movw	0x3a(%rax), %ax
   1534c:      	movw	%ax, 0x4(%rsp)
   15351:      	movq	0x25c60(%rip), %rax     # 0x3afb8 <zlgk82z0l71lvh9+0x3afb8>
   15358:      	callq	*%rax
   1535a:      	movw	0x4(%rsp), %cx
   1535f:      	movw	%cx, %si
   15362:      	movw	%ax, %dx
   15365:      	movq	0x25c54(%rip), %rax     # 0x3afc0 <zlgk82z0l71lvh9+0x3afc0>
   1536c:      	leaq	0x1088(%rsp), %rdi
   15374:      	callq	*%rax
   15376:      	movq	0x1088(%rsp), %rax
   1537e:      	movq	%rax, 0x10a8(%rsp)
   15386:      	movq	0x1090(%rsp), %rax
   1538e:      	movq	%rax, 0x10b0(%rsp)
   15396:      	movq	0x25c43(%rip), %rdi     # 0x3afe0 <zlgk82z0l71lvh9+0x3afe0>
   1539d:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   153a2:      	movq	%rax, %rdx
   153a5:      	movq	0x25c24(%rip), %rax     # 0x3afd0 <zlgk82z0l71lvh9+0x3afd0>
   153ac:      	leaq	0x1098(%rsp), %rdi
   153b4:      	leaq	0x10a8(%rsp), %rsi
   153bc:      	callq	*%rax
   153be:      	movq	0x25be3(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   153c5:      	movq	0x25be4(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   153cc:      	callq	*%rax
   153ce:      	movw	0x3a(%rax), %ax
   153d2:      	movw	%ax, 0x6(%rsp)
   153d7:      	movq	0x25bda(%rip), %rax     # 0x3afb8 <zlgk82z0l71lvh9+0x3afb8>
   153de:      	callq	*%rax
   153e0:      	movw	0x6(%rsp), %cx
   153e5:      	movw	%cx, %si
   153e8:      	movw	%ax, %dx
   153eb:      	movq	0x25bce(%rip), %rax     # 0x3afc0 <zlgk82z0l71lvh9+0x3afc0>
   153f2:      	leaq	0x10b8(%rsp), %rdi
   153fa:      	callq	*%rax
   153fc:      	movq	0x10b8(%rsp), %rax
   15404:      	movq	%rax, 0x10d8(%rsp)
   1540c:      	movq	0x10c0(%rsp), %rax
   15414:      	movq	%rax, 0x10e0(%rsp)
   1541c:      	movq	0x25bc5(%rip), %rdi     # 0x3afe8 <zlgk82z0l71lvh9+0x3afe8>
   15423:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   15428:      	movq	%rax, %rdx
   1542b:      	movq	0x25b9e(%rip), %rax     # 0x3afd0 <zlgk82z0l71lvh9+0x3afd0>
   15432:      	leaq	0x10c8(%rsp), %rdi
   1543a:      	leaq	0x10d8(%rsp), %rsi
   15442:      	callq	*%rax
   15444:      	movq	0x8(%rsp), %rdi
   15449:      	movq	0x1028(%rsp), %rax
   15451:      	movq	%rax, 0x10e8(%rsp)
   15459:      	movq	0x1030(%rsp), %rax
   15461:      	movq	%rax, 0x10f0(%rsp)
   15469:      	movq	0x10e8(%rsp), %rax
   15471:      	movq	%rax, 0x20(%rsp)
   15476:      	movq	0x10f0(%rsp), %rax
   1547e:      	movq	%rax, 0x28(%rsp)
   15483:      	movq	0x1058(%rsp), %rax
   1548b:      	movq	%rax, 0x10f8(%rsp)
   15493:      	movq	0x1060(%rsp), %rax
   1549b:      	movq	%rax, 0x1100(%rsp)
   154a3:      	movq	0x10f8(%rsp), %rax
   154ab:      	movq	%rax, 0xf0(%rsp)
   154b3:      	movq	0x1100(%rsp), %rax
   154bb:      	movq	%rax, 0xf8(%rsp)
   154c3:      	movq	0x1088(%rsp), %rax
   154cb:      	movq	%rax, 0x1108(%rsp)
   154d3:      	movq	0x1090(%rsp), %rax
   154db:      	movq	%rax, 0x1110(%rsp)
   154e3:      	movq	0x1108(%rsp), %rax
   154eb:      	movq	%rax, 0x100(%rsp)
   154f3:      	movq	0x1110(%rsp), %rax
   154fb:      	movq	%rax, 0x108(%rsp)
   15503:      	movq	0x10b8(%rsp), %rax
   1550b:      	movq	%rax, 0x1118(%rsp)
   15513:      	movq	0x10c0(%rsp), %rax
   1551b:      	movq	%rax, 0x1120(%rsp)
   15523:      	movq	0x1118(%rsp), %rax
   1552b:      	movq	%rax, 0xa0(%rsp)
   15533:      	movq	0x1120(%rsp), %rax
   1553b:      	movq	%rax, 0xa8(%rsp)
   15543:      	leaq	0x20(%rsp), %rsi
   15548:      	movl	$0x1000, %edx           # imm = 0x1000
   1554d:      	movq	0x25a9c(%rip), %rax     # 0x3aff0 <zlgk82z0l71lvh9+0x3aff0>
   15554:      	callq	*%rax
   15556:      	movq	0x10(%rsp), %rax
   1555b:      	addq	$0x1128, %rsp           # imm = 0x1128
   15562:      	retq
   15563:      	int3
   15564:      	int3
   15565:      	int3
   15566:      	int3
   15567:      	int3
   15568:      	int3
   15569:      	int3
   1556a:      	int3
   1556b:      	int3
   1556c:      	int3
   1556d:      	int3
   1556e:      	int3
   1556f:      	int3

0000000000015570 <core::ops::function::FnOnce::call_once::h640ecabfef482ab4>:
   15570:      	subq	$0x18, %rsp
   15574:      	movq	%rdi, %rax
   15577:      	movq	%rax, (%rsp)
   1557b:      	movq	%rsi, 0x8(%rsp)
   15580:      	movq	0x25a71(%rip), %rax     # 0x3aff8 <zlgk82z0l71lvh9+0x3aff8>
   15587:      	leaq	0x8(%rsp), %rsi
   1558c:      	callq	*%rax
   1558e:      	movq	(%rsp), %rax
   15592:      	addq	$0x18, %rsp
   15596:      	retq
   15597:      	int3
   15598:      	int3
   15599:      	int3
   1559a:      	int3
   1559b:      	int3
   1559c:      	int3
   1559d:      	int3
   1559e:      	int3
   1559f:      	int3

00000000000155a0 <core::ops::function::FnOnce::call_once::h6aaf0299628ed695>:
   155a0:      	subq	$0x88, %rsp
   155a7:      	movq	%rdi, (%rsp)
   155ab:      	movq	%rdi, 0x8(%rsp)
   155b0:      	movq	0x25859(%rip), %rax     # 0x3ae10 <zlgk82z0l71lvh9+0x3ae10>
   155b7:      	leaq	0x18(%rsp), %rdi
   155bc:      	callq	*%rax
   155be:      	movb	$0x0, 0x80(%rsp)
   155c6:      	movb	0x80(%rsp), %al
   155cd:      	xorl	%ecx, %ecx
   155cf:      	movzbl	%al, %edx
   155d2:      	andl	$0x1, %edx
   155d5:      	movq	0x25844(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   155dc:      	xorl	%ecx, %ecx
   155de:      	movl	%ecx, %esi
   155e0:      	leaq	0x18(%rsp), %rdi
   155e5:      	callq	*%rax
   155e7:      	movb	$0x0, 0x81(%rsp)
   155ef:      	movb	0x81(%rsp), %al
   155f6:      	movzbl	%al, %edx
   155f9:      	andl	$0x1, %edx
   155fc:      	movq	0x2581d(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   15603:      	leaq	0x18(%rsp), %rdi
   15608:      	movl	$0x2, %esi
   1560d:      	callq	*%rax
   1560f:      	movb	$0x1, 0x82(%rsp)
   15617:      	movb	0x82(%rsp), %al
   1561e:      	xorl	%ecx, %ecx
   15620:      	movzbl	%al, %edx
   15623:      	andl	$0x1, %edx
   15626:      	movq	0x257f3(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   1562d:      	xorl	%ecx, %ecx
   1562f:      	movl	%ecx, %esi
   15631:      	leaq	0x18(%rsp), %rdi
   15636:      	callq	*%rax
   15638:      	movb	$0x1, 0x83(%rsp)
   15640:      	movb	0x83(%rsp), %al
   15647:      	movzbl	%al, %edx
   1564a:      	andl	$0x1, %edx
   1564d:      	movq	0x257cc(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   15654:      	leaq	0x18(%rsp), %rdi
   15659:      	movl	$0x1, %esi
   1565e:      	callq	*%rax
   15660:      	movb	$0x1, 0x84(%rsp)
   15668:      	movb	0x84(%rsp), %al
   1566f:      	movzbl	%al, %edx
   15672:      	andl	$0x1, %edx
   15675:      	movq	0x257a4(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   1567c:      	leaq	0x18(%rsp), %rdi
   15681:      	movl	$0x2, %esi
   15686:      	callq	*%rax
   15688:      	movb	$0x1, 0x85(%rsp)
   15690:      	movb	0x85(%rsp), %al
   15697:      	movzbl	%al, %edx
   1569a:      	andl	$0x1, %edx
   1569d:      	movq	0x2577c(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   156a4:      	leaq	0x18(%rsp), %rdi
   156a9:      	movl	$0x3, %esi
   156ae:      	callq	*%rax
   156b0:      	movb	$0x1, 0x86(%rsp)
   156b8:      	movb	0x86(%rsp), %al
   156bf:      	movzbl	%al, %edx
   156c2:      	andl	$0x1, %edx
   156c5:      	movq	0x25754(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   156cc:      	leaq	0x18(%rsp), %rdi
   156d1:      	movl	$0x4, %esi
   156d6:      	callq	*%rax
   156d8:      	movb	$0x1, 0x87(%rsp)
   156e0:      	movb	0x87(%rsp), %al
   156e7:      	movzbl	%al, %edx
   156ea:      	andl	$0x1, %edx
   156ed:      	movq	0x2572c(%rip), %rax     # 0x3ae20 <zlgk82z0l71lvh9+0x3ae20>
   156f4:      	leaq	0x18(%rsp), %rdi
   156f9:      	movl	$0x5, %esi
   156fe:      	callq	*%rax
   15700:      	movq	(%rsp), %rdi
   15704:      	movq	0x8(%rsp), %rax
   15709:      	movl	$0x1a, %ecx
   1570e:      	leaq	0x18(%rsp), %rsi
   15713:      	rep		movsl	(%rsi), %es:(%rdi)
   15715:      	addq	$0x88, %rsp
   1571c:      	retq
   1571d:      	int3
   1571e:      	int3
   1571f:      	int3

0000000000015720 <core::ptr::drop_in_place<conquer_once::cell::OnceCell<bootloader_x86_64_common::logger::LockedLogger,conquer_once::spin::internal::Spin>::try_get_or_init<kernel::framebuffer::init_kernel_logging::{{closure}}>::{{closure}}>::hed78aa812a642014>:
   15720:      	pushq	%rax
   15721:      	movq	%rdi, (%rsp)
   15725:      	popq	%rax
   15726:      	retq
   15727:      	int3
   15728:      	int3
   15729:      	int3
   1572a:      	int3
   1572b:      	int3
   1572c:      	int3
   1572d:      	int3
   1572e:      	int3
   1572f:      	int3

0000000000015730 <core::ptr::drop_in_place<&u64>::hc0cb1720e2890355>:
   15730:      	pushq	%rax
   15731:      	movq	%rdi, (%rsp)
   15735:      	popq	%rax
   15736:      	retq
   15737:      	int3
   15738:      	int3
   15739:      	int3
   1573a:      	int3
   1573b:      	int3
   1573c:      	int3
   1573d:      	int3
   1573e:      	int3
   1573f:      	int3

0000000000015740 <core::ptr::drop_in_place<spin::once::Finish>::hf47d3544ef5529c3>:
   15740:      	pushq	%rax
   15741:      	movq	%rdi, (%rsp)
   15745:      	movq	0x258b4(%rip), %rax     # 0x3b000 <zlgk82z0l71lvh9+0x3b000>
   1574c:      	callq	*%rax
   1574e:      	popq	%rax
   1574f:      	retq

0000000000015750 <core::ptr::drop_in_place<conquer_once::state::PoisonError>::h4af99b84e195dd10>:
   15750:      	pushq	%rax
   15751:      	movq	%rdi, (%rsp)
   15755:      	popq	%rax
   15756:      	retq
   15757:      	int3
   15758:      	int3
   15759:      	int3
   1575a:      	int3
   1575b:      	int3
   1575c:      	int3
   1575d:      	int3
   1575e:      	int3
   1575f:      	int3

0000000000015760 <core::ptr::drop_in_place<kernel::vmm::InvalidVirtualAddress>::h43660fd2dde74d2d>:
   15760:      	pushq	%rax
   15761:      	movq	%rdi, (%rsp)
   15765:      	popq	%rax
   15766:      	retq
   15767:      	int3
   15768:      	int3
   15769:      	int3
   1576a:      	int3
   1576b:      	int3
   1576c:      	int3
   1576d:      	int3
   1576e:      	int3
   1576f:      	int3

0000000000015770 <core::ptr::drop_in_place<bootloader_x86_64_common::logger::LockedLogger>::h8b75ab0be8d8a4cc>:
   15770:      	pushq	%rax
   15771:      	movq	%rdi, (%rsp)
   15775:      	popq	%rax
   15776:      	retq
   15777:      	int3
   15778:      	int3
   15779:      	int3
   1577a:      	int3
   1577b:      	int3
   1577c:      	int3
   1577d:      	int3
   1577e:      	int3
   1577f:      	int3

0000000000015780 <core::ptr::drop_in_place<conquer_once::cell::PanicGuard<conquer_once::spin::internal::Spin>>::hf9be3b17429dd6b5>:
   15780:      	pushq	%rax
   15781:      	movq	%rdi, (%rsp)
   15785:      	movq	0x25884(%rip), %rax     # 0x3b010 <zlgk82z0l71lvh9+0x3b010>
   1578c:      	callq	*%rax
   1578e:      	popq	%rax
   1578f:      	retq

0000000000015790 <<conquer_once::cell::PanicGuard<B> as core::ops::drop::Drop>::drop::h13ad90d41cb64d49>:
   15790:      	subq	$0x38, %rsp
   15794:      	movq	%rdi, 0x8(%rsp)
   15799:      	movq	%rdi, 0x20(%rsp)
   1579e:      	testb	$0x1, 0x8(%rdi)
   157a2:      	jne	0x157af <<conquer_once::cell::PanicGuard<B> as core::ops::drop::Drop>::drop::h13ad90d41cb64d49+0x1f>
   157a4:      	movq	$0x2, 0x10(%rsp)
   157ad:      	jmp	0x157b8 <<conquer_once::cell::PanicGuard<B> as core::ops::drop::Drop>::drop::h13ad90d41cb64d49+0x28>
   157af:      	movq	$0x3, 0x10(%rsp)
   157b8:      	movq	0x8(%rsp), %rax
   157bd:      	movq	(%rax), %rdi
   157c0:      	movq	0x10(%rsp), %rsi
   157c5:      	movb	$0x3, 0x1f(%rsp)
   157ca:      	movb	0x1f(%rsp), %al
   157ce:      	movzbl	%al, %edx
   157d1:      	callq	0x16ba0 <conquer_once::state::AtomicOnceState::unblock::h80124e748e4a8923>
   157d6:      	movq	%rax, 0x28(%rsp)
   157db:      	movq	%rax, 0x30(%rsp)
   157e0:      	addq	$0x38, %rsp
   157e4:      	retq
   157e5:      	int3
   157e6:      	int3
   157e7:      	int3
   157e8:      	int3
   157e9:      	int3
   157ea:      	int3
   157eb:      	int3
   157ec:      	int3
   157ed:      	int3
   157ee:      	int3
   157ef:      	int3

00000000000157f0 <kernel::segmentation::gdt::GlobalDescriptorTable::new::hec56e240dd1d019b>:
   157f0:      	subq	$0x68, %rsp
   157f4:      	movq	%rdi, 0x8(%rsp)
   157f9:      	movq	%rdi, 0x10(%rsp)
   157fe:      	movq	0x256db(%rip), %rax     # 0x3aee0 <zlgk82z0l71lvh9+0x3aee0>
   15805:      	callq	*%rax
   15807:      	movq	%rax, 0x60(%rsp)
   1580c:      	movq	0x60(%rsp), %rax
   15811:      	movq	%rax, 0x58(%rsp)
   15816:      	xorl	%eax, %eax
   15818:      	movq	%rax, 0x18(%rsp)
   1581d:      	movq	0x18(%rsp), %rax
   15822:      	movq	%rax, (%rsp)
   15826:      	cmpq	$0x7, %rax
   1582a:      	jae	0x15845 <kernel::segmentation::gdt::GlobalDescriptorTable::new::hec56e240dd1d019b+0x55>
   1582c:      	movq	(%rsp), %rax
   15830:      	movq	0x58(%rsp), %rcx
   15835:      	movq	%rcx, 0x20(%rsp,%rax,8)
   1583a:      	addq	$0x1, %rax
   1583e:      	movq	%rax, 0x18(%rsp)
   15843:      	jmp	0x1581d <kernel::segmentation::gdt::GlobalDescriptorTable::new::hec56e240dd1d019b+0x2d>
   15845:      	movq	0x10(%rsp), %rax
   1584a:      	movq	0x8(%rsp), %rcx
   1584f:      	movq	0x50(%rsp), %rdx
   15854:      	movq	%rdx, 0x30(%rcx)
   15858:      	movq	0x48(%rsp), %rdx
   1585d:      	movq	%rdx, 0x28(%rcx)
   15861:      	movq	0x40(%rsp), %rdx
   15866:      	movq	%rdx, 0x20(%rcx)
   1586a:      	movq	0x38(%rsp), %rdx
   1586f:      	movq	%rdx, 0x18(%rcx)
   15873:      	movq	0x30(%rsp), %rdx
   15878:      	movq	%rdx, 0x10(%rcx)
   1587c:      	movq	0x20(%rsp), %rdx
   15881:      	movq	0x28(%rsp), %rsi
   15886:      	movq	%rsi, 0x8(%rcx)
   1588a:      	movq	%rdx, (%rcx)
   1588d:      	addq	$0x68, %rsp
   15891:      	retq
   15892:      	int3
   15893:      	int3
   15894:      	int3
   15895:      	int3
   15896:      	int3
   15897:      	int3
   15898:      	int3
   15899:      	int3
   1589a:      	int3
   1589b:      	int3
   1589c:      	int3
   1589d:      	int3
   1589e:      	int3
   1589f:      	int3

00000000000158a0 <kernel::segmentation::gdt::GlobalDescriptorTable::get_entry::he0f9e83c465a8bd0>:
   158a0:      	subq	$0x38, %rsp
   158a4:      	movq	%rsi, 0x8(%rsp)
   158a9:      	movq	%rdi, 0x10(%rsp)
   158ae:      	movq	%rdi, 0x20(%rsp)
   158b3:      	movq	%rsi, 0x28(%rsp)
   158b8:      	cmpq	$0x7, %rsi
   158bc:      	setb	%al
   158bf:      	testb	$0x1, %al
   158c1:      	jne	0x158c5 <kernel::segmentation::gdt::GlobalDescriptorTable::get_entry::he0f9e83c465a8bd0+0x25>
   158c3:      	jmp	0x15903 <kernel::segmentation::gdt::GlobalDescriptorTable::get_entry::he0f9e83c465a8bd0+0x63>
   158c5:      	movq	0x8(%rsp), %rcx
   158ca:      	movq	0x10(%rsp), %rax
   158cf:      	movq	(%rax,%rcx,8), %rax
   158d3:      	movq	%rax, 0x18(%rsp)
   158d8:      	movq	0x25611(%rip), %rax     # 0x3aef0 <zlgk82z0l71lvh9+0x3aef0>
   158df:      	leaq	0x18(%rsp), %rdi
   158e4:      	callq	*%rax
   158e6:      	movq	0x8(%rsp), %rcx
   158eb:      	movb	%al, 0x37(%rsp)
   158ef:      	movw	%cx, %di
   158f2:      	movzbl	%al, %esi
   158f5:      	movq	0x255fc(%rip), %rax     # 0x3aef8 <zlgk82z0l71lvh9+0x3aef8>
   158fc:      	callq	*%rax
   158fe:      	addq	$0x38, %rsp
   15902:      	retq
   15903:      	movq	0x8(%rsp), %rdi
   15908:      	leaq	0x1da01(%rip), %rdx     # 0x33310 <zlgk82z0l71lvh9+0x33310>
   1590f:      	movq	0x25702(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   15916:      	movl	$0x7, %esi
   1591b:      	callq	*%rax
   1591d:      	ud2
   1591f:      	int3

0000000000015920 <kernel::segmentation::gdt::GlobalDescriptorTable::set_entry::h89369dbb454e2cf2>:
   15920:      	subq	$0x48, %rsp
   15924:      	movq	%rsi, 0x8(%rsp)
   15929:      	movq	%rdi, 0x10(%rsp)
   1592e:      	movb	%cl, %al
   15930:      	movb	%al, 0x1f(%rsp)
   15934:      	movq	%rdx, 0x28(%rsp)
   15939:      	movq	0x28(%rsp), %rcx
   1593e:      	movq	%rcx, 0x20(%rsp)
   15943:      	movq	%rdi, 0x30(%rsp)
   15948:      	movq	%rsi, 0x38(%rsp)
   1594d:      	movb	%al, 0x47(%rsp)
   15951:      	cmpq	$0x7, %rsi
   15955:      	setb	%al
   15958:      	testb	$0x1, %al
   1595a:      	jne	0x1595e <kernel::segmentation::gdt::GlobalDescriptorTable::set_entry::h89369dbb454e2cf2+0x3e>
   1595c:      	jmp	0x15989 <kernel::segmentation::gdt::GlobalDescriptorTable::set_entry::h89369dbb454e2cf2+0x69>
   1595e:      	movb	0x1f(%rsp), %al
   15962:      	movq	0x8(%rsp), %rcx
   15967:      	movq	0x10(%rsp), %rdx
   1596c:      	movq	0x20(%rsp), %rsi
   15971:      	movq	%rsi, (%rdx,%rcx,8)
   15975:      	movw	%cx, %di
   15978:      	movzbl	%al, %esi
   1597b:      	movq	0x25576(%rip), %rax     # 0x3aef8 <zlgk82z0l71lvh9+0x3aef8>
   15982:      	callq	*%rax
   15984:      	addq	$0x48, %rsp
   15988:      	retq
   15989:      	movq	0x8(%rsp), %rdi
   1598e:      	leaq	0x1d993(%rip), %rdx     # 0x33328 <zlgk82z0l71lvh9+0x33328>
   15995:      	movq	0x2567c(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   1599c:      	movl	$0x7, %esi
   159a1:      	callq	*%rax
   159a3:      	ud2
   159a5:      	int3
   159a6:      	int3
   159a7:      	int3
   159a8:      	int3
   159a9:      	int3
   159aa:      	int3
   159ab:      	int3
   159ac:      	int3
   159ad:      	int3
   159ae:      	int3
   159af:      	int3

00000000000159b0 <kernel::segmentation::gdt::GlobalDescriptorTable::pointer::hd19c89e48e57e997>:
   159b0:      	subq	$0x58, %rsp
   159b4:      	movq	%rsi, 0x10(%rsp)
   159b9:      	movq	%rdi, 0x18(%rsp)
   159be:      	movq	%rdi, 0x20(%rsp)
   159c3:      	movq	%rsi, 0x30(%rsp)
   159c8:      	movl	$0x7, %eax
   159cd:      	movl	$0x8, %ecx
   159d2:      	mulq	%rcx
   159d5:      	movq	%rax, 0x28(%rsp)
   159da:      	seto	%al
   159dd:      	testb	$0x1, %al
   159df:      	jne	0x159ff <kernel::segmentation::gdt::GlobalDescriptorTable::pointer::hd19c89e48e57e997+0x4f>
   159e1:      	movq	0x28(%rsp), %rax
   159e6:      	movq	%rax, %rcx
   159e9:      	subq	$0x1, %rcx
   159ed:      	movq	%rcx, 0x8(%rsp)
   159f2:      	cmpq	$0x1, %rax
   159f6:      	setb	%al
   159f9:      	testb	$0x1, %al
   159fb:      	jne	0x15a67 <kernel::segmentation::gdt::GlobalDescriptorTable::pointer::hd19c89e48e57e997+0xb7>
   159fd:      	jmp	0x15a1d <kernel::segmentation::gdt::GlobalDescriptorTable::pointer::hd19c89e48e57e997+0x6d>
   159ff:      	leaq	-0x7476(%rip), %rdi     # 0xe590 <str.0>
   15a06:      	leaq	0x1d933(%rip), %rdx     # 0x33340 <zlgk82z0l71lvh9+0x33340>
   15a0d:      	movq	0x254bc(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   15a14:      	movl	$0x21, %esi
   15a19:      	callq	*%rax
   15a1b:      	ud2
   15a1d:      	movq	0x10(%rsp), %rdi
   15a22:      	movq	0x8(%rsp), %rax
   15a27:      	movw	%ax, 0x6(%rsp)
   15a2c:      	movw	%ax, 0x3e(%rsp)
   15a31:      	movq	%rdi, 0x48(%rsp)
   15a36:      	movq	$0x7, 0x50(%rsp)
   15a3f:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   15a44:      	movw	0x6(%rsp), %si
   15a49:      	movq	0x18(%rsp), %rcx
   15a4e:      	movq	%rax, %rdx
   15a51:      	movq	0x20(%rsp), %rax
   15a56:      	movq	%rdx, 0x40(%rsp)
   15a5b:      	movw	%si, (%rcx)
   15a5e:      	movq	%rdx, 0x2(%rcx)
   15a62:      	addq	$0x58, %rsp
   15a66:      	retq
   15a67:      	leaq	-0x74ae(%rip), %rdi     # 0xe5c0 <str.1>
   15a6e:      	leaq	0x1d8e3(%rip), %rdx     # 0x33358 <zlgk82z0l71lvh9+0x33358>
   15a75:      	movq	0x25454(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   15a7c:      	movl	$0x21, %esi
   15a81:      	callq	*%rax
   15a83:      	ud2
   15a85:      	int3
   15a86:      	int3
   15a87:      	int3
   15a88:      	int3
   15a89:      	int3
   15a8a:      	int3
   15a8b:      	int3
   15a8c:      	int3
   15a8d:      	int3
   15a8e:      	int3
   15a8f:      	int3

0000000000015a90 <kernel::segmentation::gdt::GlobalDescriptorTable::load_gdt::haff0e6f52ae5b91c>:
   15a90:      	pushq	%rax
   15a91:      	movq	%rdi, (%rsp)
   15a95:      	lgdtq	(%rdi)
   15a98:      	popq	%rax
   15a99:      	retq
   15a9a:      	int3
   15a9b:      	int3
   15a9c:      	int3
   15a9d:      	int3
   15a9e:      	int3
   15a9f:      	int3

0000000000015aa0 <kernel::segmentation::gdt::SegmentDescriptor::null_segment_descriptor::h6b709cbb26ddf4c1>:
   15aa0:      	pushq	%rax
   15aa1:      	movw	$0x0, (%rsp)
   15aa7:      	movw	$0x0, 0x2(%rsp)
   15aae:      	movb	$0x0, 0x4(%rsp)
   15ab3:      	movb	$0x0, 0x5(%rsp)
   15ab8:      	movb	$0x0, 0x6(%rsp)
   15abd:      	movb	$0x0, 0x7(%rsp)
   15ac2:      	movq	(%rsp), %rax
   15ac6:      	popq	%rcx
   15ac7:      	retq
   15ac8:      	int3
   15ac9:      	int3
   15aca:      	int3
   15acb:      	int3
   15acc:      	int3
   15acd:      	int3
   15ace:      	int3
   15acf:      	int3

0000000000015ad0 <kernel::segmentation::gdt::SegmentDescriptor::kernel_code_segment_descriptor::h20ce6f27bb8378c5>:
   15ad0:      	pushq	%rax
   15ad1:      	movw	$0xffff, (%rsp)         # imm = 0xFFFF
   15ad7:      	movw	$0x0, 0x2(%rsp)
   15ade:      	movb	$0x0, 0x4(%rsp)
   15ae3:      	movb	$-0x66, 0x5(%rsp)
   15ae8:      	movb	$-0x51, 0x6(%rsp)
   15aed:      	movb	$0x0, 0x7(%rsp)
   15af2:      	movq	(%rsp), %rax
   15af6:      	popq	%rcx
   15af7:      	retq
   15af8:      	int3
   15af9:      	int3
   15afa:      	int3
   15afb:      	int3
   15afc:      	int3
   15afd:      	int3
   15afe:      	int3
   15aff:      	int3

0000000000015b00 <kernel::segmentation::gdt::SegmentDescriptor::kernel_data_segment_descriptor::ha408609b02e41779>:
   15b00:      	pushq	%rax
   15b01:      	movw	$0xffff, (%rsp)         # imm = 0xFFFF
   15b07:      	movw	$0x0, 0x2(%rsp)
   15b0e:      	movb	$0x0, 0x4(%rsp)
   15b13:      	movb	$-0x6e, 0x5(%rsp)
   15b18:      	movb	$-0x51, 0x6(%rsp)
   15b1d:      	movb	$0x0, 0x7(%rsp)
   15b22:      	movq	(%rsp), %rax
   15b26:      	popq	%rcx
   15b27:      	retq
   15b28:      	int3
   15b29:      	int3
   15b2a:      	int3
   15b2b:      	int3
   15b2c:      	int3
   15b2d:      	int3
   15b2e:      	int3
   15b2f:      	int3

0000000000015b30 <kernel::segmentation::gdt::SegmentDescriptor::user_code_segment_descriptor::hcb3b7364c9e04f74>:
   15b30:      	pushq	%rax
   15b31:      	movw	$0xffff, (%rsp)         # imm = 0xFFFF
   15b37:      	movw	$0x0, 0x2(%rsp)
   15b3e:      	movb	$0x0, 0x4(%rsp)
   15b43:      	movb	$-0x6, 0x5(%rsp)
   15b48:      	movb	$-0x51, 0x6(%rsp)
   15b4d:      	movb	$0x0, 0x7(%rsp)
   15b52:      	movq	(%rsp), %rax
   15b56:      	popq	%rcx
   15b57:      	retq
   15b58:      	int3
   15b59:      	int3
   15b5a:      	int3
   15b5b:      	int3
   15b5c:      	int3
   15b5d:      	int3
   15b5e:      	int3
   15b5f:      	int3

0000000000015b60 <kernel::segmentation::gdt::SegmentDescriptor::user_data_segment_descriptor::hf8a5d471f6bc648b>:
   15b60:      	pushq	%rax
   15b61:      	movw	$0xffff, (%rsp)         # imm = 0xFFFF
   15b67:      	movw	$0x0, 0x2(%rsp)
   15b6e:      	movb	$0x0, 0x4(%rsp)
   15b73:      	movb	$-0xe, 0x5(%rsp)
   15b78:      	movb	$-0x51, 0x6(%rsp)
   15b7d:      	movb	$0x0, 0x7(%rsp)
   15b82:      	movq	(%rsp), %rax
   15b86:      	popq	%rcx
   15b87:      	retq
   15b88:      	int3
   15b89:      	int3
   15b8a:      	int3
   15b8b:      	int3
   15b8c:      	int3
   15b8d:      	int3
   15b8e:      	int3
   15b8f:      	int3

0000000000015b90 <kernel::segmentation::gdt::SegmentDescriptor::tss_system_segment::he4841e16f9bd8dab>:
   15b90:      	subq	$0x48, %rsp
   15b94:      	movq	%rsi, (%rsp)
   15b98:      	movq	%rdi, %rax
   15b9b:      	movq	(%rsp), %rdi
   15b9f:      	movq	%rax, 0x8(%rsp)
   15ba4:      	movq	%rax, 0x10(%rsp)
   15ba9:      	movq	%rdi, 0x38(%rsp)
   15bae:      	movq	0x25263(%rip), %rax     # 0x3ae18 <zlgk82z0l71lvh9+0x3ae18>
   15bb5:      	callq	*%rax
   15bb7:      	movq	%rax, 0x18(%rsp)
   15bbc:      	movq	%rax, 0x40(%rsp)
   15bc1:      	movl	$0x68, %eax
   15bc6:      	subq	$0x1, %rax
   15bca:      	movq	%rax, 0x20(%rsp)
   15bcf:      	movl	$0x68, %eax
   15bd4:      	cmpq	$0x1, %rax
   15bd8:      	setb	%al
   15bdb:      	testb	$0x1, %al
   15bdd:      	jne	0x15ca7 <kernel::segmentation::gdt::SegmentDescriptor::tss_system_segment::he4841e16f9bd8dab+0x117>
   15be3:      	movq	0x10(%rsp), %rax
   15be8:      	movq	0x8(%rsp), %rcx
   15bed:      	movq	0x18(%rsp), %rdx
   15bf2:      	movq	0x20(%rsp), %rsi
   15bf7:      	movw	%si, %r9w
   15bfb:      	movq	%rdx, %rsi
   15bfe:      	andq	$0xffff, %rsi           # imm = 0xFFFF
   15c05:      	movw	%si, %r8w
   15c09:      	movq	%rdx, %rsi
   15c0c:      	andq	$0xff0000, %rsi         # imm = 0xFF0000
   15c13:      	shrq	$0x10, %rsi
   15c17:      	movb	%sil, %dil
   15c1a:      	movabsq	$0xff000000, %r10       # imm = 0xFF000000
   15c24:      	movq	%rdx, %rsi
   15c27:      	andq	%r10, %rsi
   15c2a:      	shrq	$0x18, %rsi
   15c2e:      	movw	%r9w, 0x28(%rsp)
   15c34:      	movw	%r8w, 0x2a(%rsp)
   15c3a:      	movb	%dil, 0x2c(%rsp)
   15c3f:      	movb	$-0x17, 0x2d(%rsp)
   15c44:      	movb	$0x0, 0x2e(%rsp)
   15c49:      	movb	%sil, 0x2f(%rsp)
   15c4e:      	movabsq	$0xffff00000000, %rdi   # imm = 0xFFFF00000000
   15c58:      	movq	%rdx, %rsi
   15c5b:      	andq	%rdi, %rsi
   15c5e:      	shrq	$0x20, %rsi
   15c62:      	movabsq	$-0x1000000000000, %rdi # imm = 0xFFFF000000000000
   15c6c:      	andq	%rdi, %rdx
   15c6f:      	shrq	$0x30, %rdx
   15c73:      	movw	%si, 0x30(%rsp)
   15c78:      	movw	%dx, 0x32(%rsp)
   15c7d:      	movb	$0x0, 0x34(%rsp)
   15c82:      	movb	$0x0, 0x35(%rsp)
   15c87:      	movb	$0x0, 0x36(%rsp)
   15c8c:      	movb	$0x0, 0x37(%rsp)
   15c91:      	movq	0x28(%rsp), %rdx
   15c96:      	movq	%rdx, (%rcx)
   15c99:      	movq	0x30(%rsp), %rdx
   15c9e:      	movq	%rdx, 0x8(%rcx)
   15ca2:      	addq	$0x48, %rsp
   15ca6:      	retq
   15ca7:      	leaq	-0x76ee(%rip), %rdi     # 0xe5c0 <str.1>
   15cae:      	leaq	0x1d6bb(%rip), %rdx     # 0x33370 <zlgk82z0l71lvh9+0x33370>
   15cb5:      	movq	0x25214(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   15cbc:      	movl	$0x21, %esi
   15cc1:      	callq	*%rax
   15cc3:      	ud2
   15cc5:      	int3
   15cc6:      	int3
   15cc7:      	int3
   15cc8:      	int3
   15cc9:      	int3
   15cca:      	int3
   15ccb:      	int3
   15ccc:      	int3
   15ccd:      	int3
   15cce:      	int3
   15ccf:      	int3

0000000000015cd0 <kernel::segmentation::gdt::SegmentDescriptor::get_requested_privilege_level::he78e8e7c668cb6a9>:
   15cd0:      	subq	$0x10, %rsp
   15cd4:      	movb	$0x60, 0x7(%rsp)
   15cd9:      	movq	%rdi, 0x8(%rsp)
   15cde:      	movb	0x5(%rdi), %al
   15ce1:      	andb	$0x60, %al
   15ce3:      	addq	$0x10, %rsp
   15ce7:      	retq
   15ce8:      	int3
   15ce9:      	int3
   15cea:      	int3
   15ceb:      	int3
   15cec:      	int3
   15ced:      	int3
   15cee:      	int3
   15cef:      	int3

0000000000015cf0 <kernel::segmentation::gdt::SegmentSelector::new::h10b8758ef6db358c>:
   15cf0:      	subq	$0x6, %rsp
   15cf4:      	movb	%sil, %cl
   15cf7:      	movw	%di, %ax
   15cfa:      	movw	%ax, 0x2(%rsp)
   15cff:      	movb	%cl, 0x5(%rsp)
   15d03:      	shlw	$0x3, %ax
   15d07:      	movzbl	%cl, %ecx
   15d0a:      	orw	%cx, %ax
   15d0d:      	movw	%ax, (%rsp)
   15d11:      	movw	(%rsp), %ax
   15d15:      	addq	$0x6, %rsp
   15d19:      	retq
   15d1a:      	int3
   15d1b:      	int3
   15d1c:      	int3
   15d1d:      	int3
   15d1e:      	int3
   15d1f:      	int3

0000000000015d20 <kernel::vmm::VirtualAddress::zero::hfed3772b5ed0a033>:
   15d20:      	pushq	%rax
   15d21:      	movq	$0x0, (%rsp)
   15d29:      	movq	(%rsp), %rax
   15d2d:      	popq	%rcx
   15d2e:      	retq
   15d2f:      	int3

0000000000015d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>:
   15d30:      	pushq	%rax
   15d31:      	movq	%rdi, (%rsp)
   15d35:      	callq	0x15d60 <kernel::vmm::VirtualAddress::try_new::h98c65a24d4030473>
   15d3a:      	movq	%rax, %rdi
   15d3d:      	movq	%rdx, %rsi
   15d40:      	leaq	0x1d641(%rip), %rdx     # 0x33388 <zlgk82z0l71lvh9+0x33388>
   15d47:      	movq	0x252da(%rip), %rax     # 0x3b028 <zlgk82z0l71lvh9+0x3b028>
   15d4e:      	callq	*%rax
   15d50:      	popq	%rcx
   15d51:      	retq
   15d52:      	int3
   15d53:      	int3
   15d54:      	int3
   15d55:      	int3
   15d56:      	int3
   15d57:      	int3
   15d58:      	int3
   15d59:      	int3
   15d5a:      	int3
   15d5b:      	int3
   15d5c:      	int3
   15d5d:      	int3
   15d5e:      	int3
   15d5f:      	int3

0000000000015d60 <kernel::vmm::VirtualAddress::try_new::h98c65a24d4030473>:
   15d60:      	subq	$0x38, %rsp
   15d64:      	movq	%rdi, (%rsp)
   15d68:      	movq	%rdi, 0x30(%rsp)
   15d6d:      	shrq	$0x30, %rdi
   15d71:      	movq	%rdi, 0x8(%rsp)
   15d76:      	testq	%rdi, %rdi
   15d79:      	je	0x15daa <kernel::vmm::VirtualAddress::try_new::h98c65a24d4030473+0x4a>
   15d7b:      	jmp	0x15d7d <kernel::vmm::VirtualAddress::try_new::h98c65a24d4030473+0x1d>
   15d7d:      	movq	0x8(%rsp), %rax
   15d82:      	subq	$0xffff, %rax           # imm = 0xFFFF
   15d88:      	je	0x15daa <kernel::vmm::VirtualAddress::try_new::h98c65a24d4030473+0x4a>
   15d8a:      	jmp	0x15d8c <kernel::vmm::VirtualAddress::try_new::h98c65a24d4030473+0x2c>
   15d8c:      	movq	(%rsp), %rax
   15d90:      	movq	%rax, 0x28(%rsp)
   15d95:      	movq	0x28(%rsp), %rax
   15d9a:      	movq	%rax, 0x18(%rsp)
   15d9f:      	movq	$0x1, 0x10(%rsp)
   15da8:      	jmp	0x15dc6 <kernel::vmm::VirtualAddress::try_new::h98c65a24d4030473+0x66>
   15daa:      	movq	(%rsp), %rax
   15dae:      	movq	%rax, 0x20(%rsp)
   15db3:      	movq	0x20(%rsp), %rax
   15db8:      	movq	%rax, 0x18(%rsp)
   15dbd:      	movq	$0x0, 0x10(%rsp)
   15dc6:      	movq	0x10(%rsp), %rax
   15dcb:      	movq	0x18(%rsp), %rdx
   15dd0:      	addq	$0x38, %rsp
   15dd4:      	retq
   15dd5:      	int3
   15dd6:      	int3
   15dd7:      	int3
   15dd8:      	int3
   15dd9:      	int3
   15dda:      	int3
   15ddb:      	int3
   15ddc:      	int3
   15ddd:      	int3
   15dde:      	int3
   15ddf:      	int3

0000000000015de0 <<kernel::vmm::InvalidVirtualAddress as core::fmt::Debug>::fmt::hdc6c86e1ff09f02a>:
   15de0:      	subq	$0x28, %rsp
   15de4:      	movq	%rsi, 0x8(%rsp)
   15de9:      	movq	%rdi, %rax
   15dec:      	movq	0x8(%rsp), %rdi
   15df1:      	movq	%rax, 0x18(%rsp)
   15df6:      	movq	%rdi, 0x20(%rsp)
   15dfb:      	movq	%rax, 0x10(%rsp)
   15e00:      	leaq	0x1d599(%rip), %rcx     # 0x333a0 <zlgk82z0l71lvh9+0x333a0>
   15e07:      	movq	%rsp, %rax
   15e0a:      	movq	%rcx, (%rax)
   15e0d:      	leaq	-0x7819(%rip), %rsi     # 0xe5fb <str.1+0x3b>
   15e14:      	leaq	-0x7825(%rip), %rcx     # 0xe5f6 <str.1+0x36>
   15e1b:      	movq	0x251fe(%rip), %rax     # 0x3b020 <zlgk82z0l71lvh9+0x3b020>
   15e22:      	movl	$0x15, %edx
   15e27:      	movl	$0x5, %r8d
   15e2d:      	leaq	0x10(%rsp), %r9
   15e32:      	callq	*%rax
   15e34:      	andb	$0x1, %al
   15e36:      	movzbl	%al, %eax
   15e39:      	addq	$0x28, %rsp
   15e3d:      	retq
   15e3e:      	int3
   15e3f:      	int3

0000000000015e40 <kernel::segmentation::tss::TaskStateSegment::new::h7bac991869ff41e5>:
   15e40:      	subq	$0x98, %rsp
   15e47:      	movq	%rdi, 0x28(%rsp)
   15e4c:      	movq	%rdi, 0x30(%rsp)
   15e51:      	callq	0x15d20 <kernel::vmm::VirtualAddress::zero::hfed3772b5ed0a033>
   15e56:      	movq	%rax, 0x38(%rsp)
   15e5b:      	xorl	%eax, %eax
   15e5d:      	movq	%rax, 0x40(%rsp)
   15e62:      	movq	0x40(%rsp), %rax
   15e67:      	movq	%rax, 0x20(%rsp)
   15e6c:      	cmpq	$0x3, %rax
   15e70:      	jae	0x15e8c <kernel::segmentation::tss::TaskStateSegment::new::h7bac991869ff41e5+0x4c>
   15e72:      	movq	0x20(%rsp), %rax
   15e77:      	movq	0x38(%rsp), %rcx
   15e7c:      	movq	%rcx, 0x48(%rsp,%rax,8)
   15e81:      	addq	$0x1, %rax
   15e85:      	movq	%rax, 0x40(%rsp)
   15e8a:      	jmp	0x15e62 <kernel::segmentation::tss::TaskStateSegment::new::h7bac991869ff41e5+0x22>
   15e8c:      	callq	0x15d20 <kernel::vmm::VirtualAddress::zero::hfed3772b5ed0a033>
   15e91:      	movq	%rax, 0x10(%rsp)
   15e96:      	xorl	%eax, %eax
   15e98:      	movq	%rax, 0x18(%rsp)
   15e9d:      	movq	0x18(%rsp), %rax
   15ea2:      	movq	%rax, 0x8(%rsp)
   15ea7:      	cmpq	$0x7, %rax
   15eab:      	jae	0x15ec7 <kernel::segmentation::tss::TaskStateSegment::new::h7bac991869ff41e5+0x87>
   15ead:      	movq	0x8(%rsp), %rax
   15eb2:      	movq	0x10(%rsp), %rcx
   15eb7:      	movq	%rcx, 0x60(%rsp,%rax,8)
   15ebc:      	addq	$0x1, %rax
   15ec0:      	movq	%rax, 0x18(%rsp)
   15ec5:      	jmp	0x15e9d <kernel::segmentation::tss::TaskStateSegment::new::h7bac991869ff41e5+0x5d>
   15ec7:      	movl	$0x68, %eax
   15ecc:      	subq	$0x1, %rax
   15ed0:      	movq	%rax, (%rsp)
   15ed4:      	movl	$0x68, %eax
   15ed9:      	cmpq	$0x1, %rax
   15edd:      	setb	%al
   15ee0:      	testb	$0x1, %al
   15ee2:      	jne	0x15f87 <kernel::segmentation::tss::TaskStateSegment::new::h7bac991869ff41e5+0x147>
   15ee8:      	movq	0x30(%rsp), %rax
   15eed:      	movq	0x28(%rsp), %rcx
   15ef2:      	movq	(%rsp), %rdx
   15ef6:      	movl	$0x0, (%rcx)
   15efc:      	movq	0x48(%rsp), %rsi
   15f01:      	movq	%rsi, 0x4(%rcx)
   15f05:      	movq	0x50(%rsp), %rsi
   15f0a:      	movq	%rsi, 0xc(%rcx)
   15f0e:      	movq	0x58(%rsp), %rsi
   15f13:      	movq	%rsi, 0x14(%rcx)
   15f17:      	movq	$0x0, 0x1c(%rcx)
   15f1f:      	movq	%rcx, %rsi
   15f22:      	addq	$0x24, %rsi
   15f26:      	movq	0x90(%rsp), %rdi
   15f2e:      	movq	%rdi, 0x30(%rsi)
   15f32:      	movq	0x88(%rsp), %rdi
   15f3a:      	movq	%rdi, 0x28(%rsi)
   15f3e:      	movq	0x80(%rsp), %rdi
   15f46:      	movq	%rdi, 0x20(%rsi)
   15f4a:      	movq	0x78(%rsp), %rdi
   15f4f:      	movq	%rdi, 0x18(%rsi)
   15f53:      	movq	0x70(%rsp), %rdi
   15f58:      	movq	%rdi, 0x10(%rsi)
   15f5c:      	movq	0x60(%rsp), %rdi
   15f61:      	movq	0x68(%rsp), %r8
   15f66:      	movq	%r8, 0x8(%rsi)
   15f6a:      	movq	%rdi, (%rsi)
   15f6d:      	movq	$0x0, 0x5c(%rcx)
   15f75:      	movw	$0x0, 0x64(%rcx)
   15f7b:      	movw	%dx, 0x66(%rcx)
   15f7f:      	addq	$0x98, %rsp
   15f86:      	retq
   15f87:      	leaq	-0x795e(%rip), %rdi     # 0xe630 <str.0>
   15f8e:      	leaq	0x1d42b(%rip), %rdx     # 0x333c0 <zlgk82z0l71lvh9+0x333c0>
   15f95:      	movq	0x24f34(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   15f9c:      	movl	$0x21, %esi
   15fa1:      	callq	*%rax
   15fa3:      	ud2
   15fa5:      	int3
   15fa6:      	int3
   15fa7:      	int3
   15fa8:      	int3
   15fa9:      	int3
   15faa:      	int3
   15fab:      	int3
   15fac:      	int3
   15fad:      	int3
   15fae:      	int3
   15faf:      	int3

0000000000015fb0 <kernel::segmentation::tss::TaskStateSegment::pointer::h00722a81c276e3db>:
   15fb0:      	pushq	%rax
   15fb1:      	movq	%rdi, (%rsp)
   15fb5:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   15fba:      	popq	%rcx
   15fbb:      	retq
   15fbc:      	int3
   15fbd:      	int3
   15fbe:      	int3
   15fbf:      	int3

0000000000015fc0 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50>:
   15fc0:      	subq	$0x48, %rsp
   15fc4:      	movq	%rsi, 0x8(%rsp)
   15fc9:      	movq	%rdi, 0x10(%rsp)
   15fce:      	movb	%dl, %al
   15fd0:      	andb	$0x1, %al
   15fd2:      	movb	%al, 0x27(%rsp)
   15fd6:      	movq	%rdi, 0x28(%rsp)
   15fdb:      	movq	%rsi, 0x30(%rsp)
   15fe0:      	leaq	0x26ef9(%rip), %rax     # 0x3cee0 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::STACK::h3c0f5d81649372ba>
   15fe7:      	addq	$0x1000, %rax           # imm = 0x1000
   15fed:      	movq	%rax, 0x18(%rsp)
   15ff2:      	setb	%al
   15ff5:      	testb	$0x1, %al
   15ff7:      	jne	0x16022 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x62>
   15ff9:      	movq	0x18(%rsp), %rdi
   15ffe:      	movq	%rdi, 0x38(%rsp)
   16003:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   16008:      	movq	%rax, (%rsp)
   1600c:      	movq	%rax, 0x40(%rsp)
   16011:      	movb	0x27(%rsp), %al
   16015:      	andb	$0x1, %al
   16017:      	movzbl	%al, %eax
   1601a:      	cmpq	$0x0, %rax
   1601e:      	je	0x16040 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x80>
   16020:      	jmp	0x16048 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x88>
   16022:      	leaq	-0x79c9(%rip), %rdi     # 0xe660 <str.1>
   16029:      	leaq	0x1d3a8(%rip), %rdx     # 0x333d8 <zlgk82z0l71lvh9+0x333d8>
   16030:      	movq	0x24e99(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   16037:      	movl	$0x1c, %esi
   1603c:      	callq	*%rax
   1603e:      	ud2
   16040:      	movb	$0x1, %al
   16042:      	testb	$0x1, %al
   16044:      	jne	0x16066 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0xa6>
   16046:      	jmp	0x16054 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x94>
   16048:      	movb	$0x1, %al
   1604a:      	testb	$0x1, %al
   1604c:      	jne	0x160d7 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x117>
   16052:      	jmp	0x160c5 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x105>
   16054:      	movq	0x8(%rsp), %rax
   16059:      	cmpq	$0x3, %rax
   1605d:      	setb	%al
   16060:      	testb	$0x1, %al
   16062:      	jne	0x1608f <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0xcf>
   16064:      	jmp	0x160a4 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0xe4>
   16066:      	movq	0x8(%rsp), %rax
   1606b:      	cmpq	$0x3, %rax
   1606f:      	jb	0x16054 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x94>
   16071:      	leaq	-0x79fc(%rip), %rdi     # 0xe67c <str.1+0x1c>
   16078:      	leaq	0x1d371(%rip), %rdx     # 0x333f0 <zlgk82z0l71lvh9+0x333f0>
   1607f:      	movq	0x24e4a(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   16086:      	movl	$0x27, %esi
   1608b:      	callq	*%rax
   1608d:      	ud2
   1608f:      	movq	0x10(%rsp), %rax
   16094:      	movq	0x8(%rsp), %rcx
   16099:      	movq	(%rsp), %rdx
   1609d:      	movq	%rdx, 0x4(%rax,%rcx,8)
   160a2:      	jmp	0x160c0 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x100>
   160a4:      	movq	0x8(%rsp), %rdi
   160a9:      	leaq	0x1d358(%rip), %rdx     # 0x33408 <zlgk82z0l71lvh9+0x33408>
   160b0:      	movq	0x24f61(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   160b7:      	movl	$0x3, %esi
   160bc:      	callq	*%rax
   160be:      	ud2
   160c0:      	addq	$0x48, %rsp
   160c4:      	retq
   160c5:      	movq	0x8(%rsp), %rax
   160ca:      	cmpq	$0x7, %rax
   160ce:      	setb	%al
   160d1:      	testb	$0x1, %al
   160d3:      	jne	0x16100 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x140>
   160d5:      	jmp	0x16115 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x155>
   160d7:      	movq	0x8(%rsp), %rax
   160dc:      	cmpq	$0x7, %rax
   160e0:      	jb	0x160c5 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x105>
   160e2:      	leaq	-0x7a46(%rip), %rdi     # 0xe6a3 <str.1+0x43>
   160e9:      	leaq	0x1d330(%rip), %rdx     # 0x33420 <zlgk82z0l71lvh9+0x33420>
   160f0:      	movq	0x24dd9(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   160f7:      	movl	$0x27, %esi
   160fc:      	callq	*%rax
   160fe:      	ud2
   16100:      	movq	0x10(%rsp), %rax
   16105:      	movq	0x8(%rsp), %rcx
   1610a:      	movq	(%rsp), %rdx
   1610e:      	movq	%rdx, 0x24(%rax,%rcx,8)
   16113:      	jmp	0x160c0 <kernel::segmentation::tss::TaskStateSegment::init_stack_table::h8cb4bce07201be50+0x100>
   16115:      	movq	0x8(%rsp), %rdi
   1611a:      	leaq	0x1d317(%rip), %rdx     # 0x33438 <zlgk82z0l71lvh9+0x33438>
   16121:      	movq	0x24ef0(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   16128:      	movl	$0x7, %esi
   1612d:      	callq	*%rax
   1612f:      	ud2
   16131:      	int3
   16132:      	int3
   16133:      	int3
   16134:      	int3
   16135:      	int3
   16136:      	int3
   16137:      	int3
   16138:      	int3
   16139:      	int3
   1613a:      	int3
   1613b:      	int3
   1613c:      	int3
   1613d:      	int3
   1613e:      	int3
   1613f:      	int3

0000000000016140 <bootloader_api::info::Optional<T>::as_mut::he4f08d6c8fab32cc>:
   16140:      	subq	$0x20, %rsp
   16144:      	movq	%rdi, (%rsp)
   16148:      	movq	%rdi, 0x10(%rsp)
   1614d:      	movl	(%rdi), %eax
   1614f:      	cmpq	$0x0, %rax
   16153:      	jne	0x16169 <bootloader_api::info::Optional<T>::as_mut::he4f08d6c8fab32cc+0x29>
   16155:      	movq	(%rsp), %rax
   16159:      	addq	$0x8, %rax
   1615d:      	movq	%rax, 0x18(%rsp)
   16162:      	movq	%rax, 0x8(%rsp)
   16167:      	jmp	0x16172 <bootloader_api::info::Optional<T>::as_mut::he4f08d6c8fab32cc+0x32>
   16169:      	movq	$0x0, 0x8(%rsp)
   16172:      	movq	0x8(%rsp), %rax
   16177:      	addq	$0x20, %rsp
   1617b:      	retq
   1617c:      	int3
   1617d:      	int3
   1617e:      	int3
   1617f:      	int3

0000000000016180 <kernel::interrupts::idt::InterruptDescriptorTable::new::h400751903dc42397>:
   16180:      	subq	$0x1000, %rsp           # imm = 0x1000
   16187:      	movq	$0x0, (%rsp)
   1618f:      	subq	$0x38, %rsp
   16193:      	movq	%rdi, 0x8(%rsp)
   16198:      	movq	%rdi, 0x10(%rsp)
   1619d:      	xorl	%eax, %eax
   1619f:      	movq	0x24d52(%rip), %rax     # 0x3aef8 <zlgk82z0l71lvh9+0x3aef8>
   161a6:      	xorl	%esi, %esi
   161a8:      	movl	%esi, %edi
   161aa:      	callq	*%rax
   161ac:      	movw	%ax, 0x1e(%rsp)
   161b1:      	movq	0x24eb0(%rip), %rax     # 0x3b068 <zlgk82z0l71lvh9+0x3b068>
   161b8:      	callq	*%rax
   161ba:      	movw	0x1e(%rsp), %cx
   161bf:      	movw	%cx, %si
   161c2:      	movw	%ax, %dx
   161c5:      	movq	0x24df4(%rip), %rax     # 0x3afc0 <zlgk82z0l71lvh9+0x3afc0>
   161cc:      	leaq	0x1028(%rsp), %rdi
   161d4:      	callq	*%rax
   161d6:      	xorl	%eax, %eax
   161d8:      	movq	%rax, 0x20(%rsp)
   161dd:      	movq	0x20(%rsp), %rax
   161e2:      	movq	%rax, (%rsp)
   161e6:      	cmpq	$0x100, %rax            # imm = 0x100
   161ec:      	jae	0x16223 <kernel::interrupts::idt::InterruptDescriptorTable::new::h400751903dc42397+0xa3>
   161ee:      	movq	(%rsp), %rax
   161f2:      	leaq	0x28(%rsp), %rcx
   161f7:      	movq	%rax, %rdx
   161fa:      	shlq	$0x4, %rdx
   161fe:      	addq	%rdx, %rcx
   16201:      	movq	0x1028(%rsp), %rdx
   16209:      	movq	%rdx, (%rcx)
   1620c:      	movq	0x1030(%rsp), %rdx
   16214:      	movq	%rdx, 0x8(%rcx)
   16218:      	addq	$0x1, %rax
   1621c:      	movq	%rax, 0x20(%rsp)
   16221:      	jmp	0x161dd <kernel::interrupts::idt::InterruptDescriptorTable::new::h400751903dc42397+0x5d>
   16223:      	movq	0x8(%rsp), %rdi
   16228:      	leaq	0x28(%rsp), %rsi
   1622d:      	movl	$0x1000, %edx           # imm = 0x1000
   16232:      	movq	0x24db7(%rip), %rax     # 0x3aff0 <zlgk82z0l71lvh9+0x3aff0>
   16239:      	callq	*%rax
   1623b:      	movq	0x10(%rsp), %rax
   16240:      	addq	$0x1038, %rsp           # imm = 0x1038
   16247:      	retq
   16248:      	int3
   16249:      	int3
   1624a:      	int3
   1624b:      	int3
   1624c:      	int3
   1624d:      	int3
   1624e:      	int3
   1624f:      	int3

0000000000016250 <kernel::interrupts::idt::InterruptDescriptorTable::pointer::hcac4ade1ff9beb5f>:
   16250:      	subq	$0x58, %rsp
   16254:      	movq	%rsi, 0x10(%rsp)
   16259:      	movq	%rdi, 0x18(%rsp)
   1625e:      	movq	%rdi, 0x20(%rsp)
   16263:      	movq	%rsi, 0x30(%rsp)
   16268:      	movl	$0x100, %eax            # imm = 0x100
   1626d:      	movl	$0x10, %ecx
   16272:      	mulq	%rcx
   16275:      	movq	%rax, 0x28(%rsp)
   1627a:      	seto	%al
   1627d:      	testb	$0x1, %al
   1627f:      	jne	0x1629f <kernel::interrupts::idt::InterruptDescriptorTable::pointer::hcac4ade1ff9beb5f+0x4f>
   16281:      	movq	0x28(%rsp), %rax
   16286:      	movq	%rax, %rcx
   16289:      	subq	$0x1, %rcx
   1628d:      	movq	%rcx, 0x8(%rsp)
   16292:      	cmpq	$0x1, %rax
   16296:      	setb	%al
   16299:      	testb	$0x1, %al
   1629b:      	jne	0x16307 <kernel::interrupts::idt::InterruptDescriptorTable::pointer::hcac4ade1ff9beb5f+0xb7>
   1629d:      	jmp	0x162bd <kernel::interrupts::idt::InterruptDescriptorTable::pointer::hcac4ade1ff9beb5f+0x6d>
   1629f:      	leaq	-0x7bb6(%rip), %rdi     # 0xe6f0 <str.0>
   162a6:      	leaq	0x1d1a3(%rip), %rdx     # 0x33450 <zlgk82z0l71lvh9+0x33450>
   162ad:      	movq	0x24c1c(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   162b4:      	movl	$0x21, %esi
   162b9:      	callq	*%rax
   162bb:      	ud2
   162bd:      	movq	0x10(%rsp), %rdi
   162c2:      	movq	0x8(%rsp), %rax
   162c7:      	movw	%ax, 0x6(%rsp)
   162cc:      	movw	%ax, 0x3e(%rsp)
   162d1:      	movq	%rdi, 0x48(%rsp)
   162d6:      	movq	$0x100, 0x50(%rsp)      # imm = 0x100
   162df:      	callq	0x15d30 <kernel::vmm::VirtualAddress::new::hf3d27e0322827adb>
   162e4:      	movw	0x6(%rsp), %si
   162e9:      	movq	0x18(%rsp), %rcx
   162ee:      	movq	%rax, %rdx
   162f1:      	movq	0x20(%rsp), %rax
   162f6:      	movq	%rdx, 0x40(%rsp)
   162fb:      	movw	%si, (%rcx)
   162fe:      	movq	%rdx, 0x2(%rcx)
   16302:      	addq	$0x58, %rsp
   16306:      	retq
   16307:      	leaq	-0x7bee(%rip), %rdi     # 0xe720 <str.1>
   1630e:      	leaq	0x1d153(%rip), %rdx     # 0x33468 <zlgk82z0l71lvh9+0x33468>
   16315:      	movq	0x24bb4(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1631c:      	movl	$0x21, %esi
   16321:      	callq	*%rax
   16323:      	ud2
   16325:      	int3
   16326:      	int3
   16327:      	int3
   16328:      	int3
   16329:      	int3
   1632a:      	int3
   1632b:      	int3
   1632c:      	int3
   1632d:      	int3
   1632e:      	int3
   1632f:      	int3

0000000000016330 <kernel::interrupts::idt::InterruptDescriptorTable::load_idt::h77a2f9805b142a3f>:
   16330:      	pushq	%rax
   16331:      	movq	%rdi, (%rsp)
   16335:      	lidtq	(%rdi)
   16338:      	popq	%rax
   16339:      	retq
   1633a:      	int3
   1633b:      	int3
   1633c:      	int3
   1633d:      	int3
   1633e:      	int3
   1633f:      	int3

0000000000016340 <kernel::interrupts::idt::GateDescriptor::new::ha4551db951f93426>:
   16340:      	subq	$0x4, %rsp
   16344:      	movw	%dx, %cx
   16347:      	movw	%si, %dx
   1634a:      	movq	%rdi, %rax
   1634d:      	movw	%dx, (%rsp)
   16351:      	movw	%cx, 0x2(%rsp)
   16356:      	movw	$0x0, (%rdi)
   1635b:      	movw	%dx, 0x2(%rdi)
   1635f:      	movw	%cx, 0x4(%rdi)
   16363:      	movw	$0x0, 0x6(%rdi)
   16369:      	movl	$0x0, 0x8(%rdi)
   16370:      	movl	$0x0, 0xc(%rdi)
   16377:      	addq	$0x4, %rsp
   1637b:      	retq
   1637c:      	int3
   1637d:      	int3
   1637e:      	int3
   1637f:      	int3

0000000000016380 <kernel::interrupts::idt::GateDescriptor::set_handler_address::haf481942f2a3a6f5>:
   16380:      	pushq	%rax
   16381:      	movq	%rdi, %rax
   16384:      	movq	%rdx, (%rsp)
   16388:      	movw	%dx, %cx
   1638b:      	movw	%cx, (%rsi)
   1638e:      	movq	%rdx, %rcx
   16391:      	shrq	$0x10, %rcx
   16395:      	movw	%cx, 0x6(%rsi)
   16399:      	shrq	$0x20, %rdx
   1639d:      	movl	%edx, %ecx
   1639f:      	movl	%ecx, 0x8(%rsi)
   163a2:      	movq	(%rsi), %rcx
   163a5:      	movq	%rcx, (%rdi)
   163a8:      	movq	0x8(%rsi), %rcx
   163ac:      	movq	%rcx, 0x8(%rdi)
   163b0:      	popq	%rcx
   163b1:      	retq
   163b2:      	int3
   163b3:      	int3
   163b4:      	int3
   163b5:      	int3
   163b6:      	int3
   163b7:      	int3
   163b8:      	int3
   163b9:      	int3
   163ba:      	int3
   163bb:      	int3
   163bc:      	int3
   163bd:      	int3
   163be:      	int3
   163bf:      	int3

00000000000163c0 <kernel::interrupts::idt::GateOptions::minimal::hdb92bddf817d673e>:
   163c0:      	subq	$0x2, %rsp
   163c4:      	movw	$0x0, (%rsp)
   163ca:      	movw	(%rsp), %ax
   163ce:      	addq	$0x2, %rsp
   163d2:      	retq
   163d3:      	int3
   163d4:      	int3
   163d5:      	int3
   163d6:      	int3
   163d7:      	int3
   163d8:      	int3
   163d9:      	int3
   163da:      	int3
   163db:      	int3
   163dc:      	int3
   163dd:      	int3
   163de:      	int3
   163df:      	int3

00000000000163e0 <kernel::interrupts::idt::GateOptions::set_present::h80752feb7519bd3d>:
   163e0:      	subq	$0x2, %rsp
   163e4:      	movw	%di, %ax
   163e7:      	movw	%ax, (%rsp)
   163eb:      	movw	(%rsp), %ax
   163ef:      	orw	$0x8000, %ax            # imm = 0x8000
   163f3:      	movw	%ax, (%rsp)
   163f7:      	movw	(%rsp), %ax
   163fb:      	addq	$0x2, %rsp
   163ff:      	retq

0000000000016400 <kernel::interrupts::idt::GateOptions::dpl_0::hc362fc31010b3002>:
   16400:      	subq	$0x2, %rsp
   16404:      	movw	%di, %ax
   16407:      	movw	%ax, (%rsp)
   1640b:      	movw	(%rsp), %ax
   1640f:      	andw	$0x9fff, %ax            # imm = 0x9FFF
   16413:      	movw	%ax, (%rsp)
   16417:      	movw	(%rsp), %ax
   1641b:      	addq	$0x2, %rsp
   1641f:      	retq

0000000000016420 <kernel::interrupts::idt::GateOptions::default::h1d018e3c5beaa3e1>:
   16420:      	pushq	%rax
   16421:      	movq	0x24c40(%rip), %rax     # 0x3b068 <zlgk82z0l71lvh9+0x3b068>
   16428:      	callq	*%rax
   1642a:      	movw	%ax, %di
   1642d:      	movq	0x24c4c(%rip), %rax     # 0x3b080 <zlgk82z0l71lvh9+0x3b080>
   16434:      	callq	*%rax
   16436:      	movw	%ax, %di
   16439:      	movq	0x24c48(%rip), %rax     # 0x3b088 <zlgk82z0l71lvh9+0x3b088>
   16440:      	callq	*%rax
   16442:      	movw	%ax, %cx
   16445:      	movb	$0x0, 0x7(%rsp)
   1644a:      	movb	0x7(%rsp), %al
   1644e:      	movw	%cx, %di
   16451:      	movzbl	%al, %esi
   16454:      	andl	$0x1, %esi
   16457:      	movq	0x24c32(%rip), %rax     # 0x3b090 <zlgk82z0l71lvh9+0x3b090>
   1645e:      	callq	*%rax
   16460:      	popq	%rcx
   16461:      	retq
   16462:      	int3
   16463:      	int3
   16464:      	int3
   16465:      	int3
   16466:      	int3
   16467:      	int3
   16468:      	int3
   16469:      	int3
   1646a:      	int3
   1646b:      	int3
   1646c:      	int3
   1646d:      	int3
   1646e:      	int3
   1646f:      	int3

0000000000016470 <kernel::interrupts::idt::GateOptions::set_gate_type::h69e4f16bb8430286>:
   16470:      	subq	$0x4, %rsp
   16474:      	movb	%sil, %al
   16477:      	movw	%di, %cx
   1647a:      	movw	%cx, (%rsp)
   1647e:      	andb	$0x1, %al
   16480:      	movb	%al, 0x3(%rsp)
   16484:      	movb	0x3(%rsp), %al
   16488:      	andb	$0x1, %al
   1648a:      	movzbl	%al, %eax
   1648d:      	cmpq	$0x0, %rax
   16491:      	jne	0x164a1 <kernel::interrupts::idt::GateOptions::set_gate_type::h69e4f16bb8430286+0x31>
   16493:      	movw	(%rsp), %ax
   16497:      	orw	$0xe00, %ax             # imm = 0xE00
   1649b:      	movw	%ax, (%rsp)
   1649f:      	jmp	0x164ad <kernel::interrupts::idt::GateOptions::set_gate_type::h69e4f16bb8430286+0x3d>
   164a1:      	movw	(%rsp), %ax
   164a5:      	orw	$0xf00, %ax             # imm = 0xF00
   164a9:      	movw	%ax, (%rsp)
   164ad:      	movw	(%rsp), %ax
   164b1:      	addq	$0x4, %rsp
   164b5:      	retq
   164b6:      	int3
   164b7:      	int3
   164b8:      	int3
   164b9:      	int3
   164ba:      	int3
   164bb:      	int3
   164bc:      	int3
   164bd:      	int3
   164be:      	int3
   164bf:      	int3

00000000000164c0 <conquer_once::cell::PanicGuard<B>::disarm::h2bbadcd1cdd9694f>:
   164c0:      	subq	$0x18, %rsp
   164c4:      	movb	%sil, %al
   164c7:      	movq	%rdi, 0x8(%rsp)
   164cc:      	andb	$0x1, %al
   164ce:      	movb	%al, 0x10(%rsp)
   164d2:      	movb	$0x0, 0x10(%rsp)
   164d7:      	movq	0x8(%rsp), %rdi
   164dc:      	movb	0x10(%rsp), %al
   164e0:      	movzbl	%al, %esi
   164e3:      	andl	$0x1, %esi
   164e6:      	movq	0x24bc3(%rip), %rax     # 0x3b0b0 <zlgk82z0l71lvh9+0x3b0b0>
   164ed:      	callq	*%rax
   164ef:      	addq	$0x18, %rsp
   164f3:      	retq
   164f4:      	int3
   164f5:      	int3
   164f6:      	int3
   164f7:      	int3
   164f8:      	int3
   164f9:      	int3
   164fa:      	int3
   164fb:      	int3
   164fc:      	int3
   164fd:      	int3
   164fe:      	int3
   164ff:      	int3

0000000000016500 <conquer_once::cell::PanicGuard<B>::try_block::h18bbb68d06f7da7e>:
   16500:      	subq	$0x68, %rsp
   16504:      	movq	%rsi, 0x8(%rsp)
   16509:      	movq	%rdi, %rax
   1650c:      	movq	0x8(%rsp), %rdi
   16511:      	movq	%rax, 0x10(%rsp)
   16516:      	movq	%rax, 0x18(%rsp)
   1651b:      	movq	%rdi, 0x50(%rsp)
   16520:      	movb	$0x2, 0x3f(%rsp)
   16525:      	movzbl	0x3f(%rsp), %esi
   1652a:      	callq	0x16bd0 <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7>
   1652f:      	movq	%rax, %rdi
   16532:      	movq	%rdx, %rsi
   16535:      	movq	0x24b7c(%rip), %rax     # 0x3b0b8 <zlgk82z0l71lvh9+0x3b0b8>
   1653c:      	callq	*%rax
   1653e:      	movq	%rdx, 0x30(%rsp)
   16543:      	movq	%rax, 0x28(%rsp)
   16548:      	movl	$0x1, %eax
   1654d:      	xorl	%ecx, %ecx
   1654f:      	cmpq	$0x2, 0x28(%rsp)
   16555:      	cmoveq	%rcx, %rax
   16559:      	cmpq	$0x0, %rax
   1655d:      	jne	0x1658f <conquer_once::cell::PanicGuard<B>::try_block::h18bbb68d06f7da7e+0x8f>
   1655f:      	movq	0x10(%rsp), %rax
   16564:      	movq	0x8(%rsp), %rcx
   16569:      	movq	%rcx, 0x40(%rsp)
   1656e:      	movb	$0x1, 0x48(%rsp)
   16573:      	movq	0x40(%rsp), %rdx
   16578:      	movb	0x48(%rsp), %cl
   1657c:      	movq	%rdx, 0x8(%rax)
   16580:      	andb	$0x1, %cl
   16583:      	movb	%cl, 0x10(%rax)
   16586:      	movq	$0x0, (%rax)
   1658d:      	jmp	0x165b8 <conquer_once::cell::PanicGuard<B>::try_block::h18bbb68d06f7da7e+0xb8>
   1658f:      	movq	0x10(%rsp), %rdi
   16594:      	movq	0x28(%rsp), %rsi
   16599:      	movq	0x30(%rsp), %rdx
   1659e:      	movq	%rsi, 0x58(%rsp)
   165a3:      	movq	%rdx, 0x60(%rsp)
   165a8:      	leaq	0x1ced1(%rip), %rcx     # 0x33480 <zlgk82z0l71lvh9+0x33480>
   165af:      	movq	0x24b0a(%rip), %rax     # 0x3b0c0 <zlgk82z0l71lvh9+0x3b0c0>
   165b6:      	callq	*%rax
   165b8:      	movq	0x18(%rsp), %rax
   165bd:      	addq	$0x68, %rsp
   165c1:      	retq
   165c2:      	int3
   165c3:      	int3
   165c4:      	int3
   165c5:      	int3
   165c6:      	int3
   165c7:      	int3
   165c8:      	int3
   165c9:      	int3
   165ca:      	int3
   165cb:      	int3
   165cc:      	int3
   165cd:      	int3
   165ce:      	int3
   165cf:      	int3

00000000000165d0 <conquer_once::cell::OnceCell<T,B>::get_or_init::h1e505961852b014c>:
   165d0:      	subq	$0x28, %rsp
   165d4:      	movq	%rdi, (%rsp)
   165d8:      	movq	%rdi, 0x18(%rsp)
   165dd:      	movq	0x24af4(%rip), %rax     # 0x3b0d8 <zlgk82z0l71lvh9+0x3b0d8>
   165e4:      	callq	*%rax
   165e6:      	movq	%rax, 0x10(%rsp)
   165eb:      	movq	0x10(%rsp), %rdx
   165f0:      	xorl	%eax, %eax
   165f2:      	movl	$0x1, %ecx
   165f7:      	cmpq	$0x0, %rdx
   165fb:      	cmoveq	%rcx, %rax
   165ff:      	cmpq	$0x0, %rax
   16603:      	jne	0x16616 <conquer_once::cell::OnceCell<T,B>::get_or_init::h1e505961852b014c+0x46>
   16605:      	movq	0x10(%rsp), %rax
   1660a:      	movq	%rax, 0x20(%rsp)
   1660f:      	movq	%rax, 0x8(%rsp)
   16614:      	jmp	0x16635 <conquer_once::cell::OnceCell<T,B>::get_or_init::h1e505961852b014c+0x65>
   16616:      	movq	(%rsp), %rdi
   1661a:      	addq	$0x70, %rdi
   1661e:      	callq	0x16b10 <conquer_once::spin::<impl conquer_once::cell::Block for conquer_once::spin::internal::Spin>::block::hb0f3bcb949b790f8>
   16623:      	movq	(%rsp), %rdi
   16627:      	movq	0x24a9a(%rip), %rax     # 0x3b0c8 <zlgk82z0l71lvh9+0x3b0c8>
   1662e:      	callq	*%rax
   16630:      	movq	%rax, 0x8(%rsp)
   16635:      	movq	0x8(%rsp), %rax
   1663a:      	addq	$0x28, %rsp
   1663e:      	retq
   1663f:      	int3

0000000000016640 <conquer_once::cell::OnceCell<T,B>::get_unchecked::h13445833ca16e0f8>:
   16640:      	subq	$0x20, %rsp
   16644:      	movq	%rdi, %rax
   16647:      	movq	%rax, (%rsp)
   1664b:      	movq	%rax, 0x18(%rsp)
   16650:      	movq	%rax, 0x8(%rsp)
   16655:      	movq	%rax, 0x10(%rsp)
   1665a:      	addq	$0x20, %rsp
   1665e:      	retq
   1665f:      	int3

0000000000016660 <conquer_once::cell::OnceCell<T,B>::try_init_inner::h3d7335ec986cfca9>:
   16660:      	subq	$0x138, %rsp            # imm = 0x138
   16667:      	movq	%rcx, 0x18(%rsp)
   1666c:      	movq	%rdx, 0x20(%rsp)
   16671:      	movq	%rsi, 0x28(%rsp)
   16676:      	movq	%rdi, 0x30(%rsp)
   1667b:      	movq	%rdi, 0x38(%rsp)
   16680:      	movq	%rsi, 0xe0(%rsp)
   16688:      	movq	%rdx, 0xe8(%rsp)
   16690:      	movq	%rcx, 0xf0(%rsp)
   16698:      	addq	$0x70, %rsi
   1669c:      	movq	0x24a05(%rip), %rax     # 0x3b0a8 <zlgk82z0l71lvh9+0x3b0a8>
   166a3:      	leaq	0x58(%rsp), %rdi
   166a8:      	callq	*%rax
   166aa:      	movq	0x24a37(%rip), %rax     # 0x3b0e8 <zlgk82z0l71lvh9+0x3b0e8>
   166b1:      	leaq	0x40(%rsp), %rdi
   166b6:      	leaq	0x58(%rsp), %rsi
   166bb:      	callq	*%rax
   166bd:      	cmpq	$0x0, 0x40(%rsp)
   166c3:      	jne	0x16772 <conquer_once::cell::OnceCell<T,B>::try_init_inner::h3d7335ec986cfca9+0x112>
   166c9:      	movq	0x28(%rsp), %rcx
   166ce:      	movq	0x18(%rsp), %rax
   166d3:      	movq	0x20(%rsp), %rsi
   166d8:      	movq	0x48(%rsp), %rdi
   166dd:      	movq	%rdi, 0x10(%rsp)
   166e2:      	movb	0x50(%rsp), %dl
   166e6:      	movb	%dl, 0xf(%rsp)
   166ea:      	movq	%rdi, 0xf8(%rsp)
   166f2:      	andb	$0x1, %dl
   166f5:      	movb	%dl, 0x100(%rsp)
   166fc:      	movq	%rcx, 0x130(%rsp)
   16704:      	movq	%rcx, 0x108(%rsp)
   1670c:      	movq	%rcx, 0x120(%rsp)
   16714:      	leaq	0x70(%rsp), %rdi
   16719:      	callq	*0x20(%rax)
   1671c:      	movq	0x28(%rsp), %rdi
   16721:      	movq	%rdi, 0x128(%rsp)
   16729:      	movq	0x249c0(%rip), %rax     # 0x3b0f0 <zlgk82z0l71lvh9+0x3b0f0>
   16730:      	leaq	0x70(%rsp), %rsi
   16735:      	callq	*%rax
   16737:      	movb	0xf(%rsp), %al
   1673b:      	movq	0x10(%rsp), %rdi
   16740:      	movzbl	%al, %esi
   16743:      	andl	$0x1, %esi
   16746:      	movq	0x24953(%rip), %rax     # 0x3b0a0 <zlgk82z0l71lvh9+0x3b0a0>
   1674d:      	callq	*%rax
   1674f:      	movq	0x28(%rsp), %rdi
   16754:      	movq	0x2496d(%rip), %rax     # 0x3b0c8 <zlgk82z0l71lvh9+0x3b0c8>
   1675b:      	callq	*%rax
   1675d:      	movq	%rax, %rcx
   16760:      	movq	0x30(%rsp), %rax
   16765:      	movq	%rcx, 0x8(%rax)
   16769:      	movq	$0x2, (%rax)
   16770:      	jmp	0x167a1 <conquer_once::cell::OnceCell<T,B>::try_init_inner::h3d7335ec986cfca9+0x141>
   16772:      	movq	0x30(%rsp), %rdi
   16777:      	movq	0x48(%rsp), %rsi
   1677c:      	movq	0x50(%rsp), %rdx
   16781:      	movq	%rsi, 0x110(%rsp)
   16789:      	movq	%rdx, 0x118(%rsp)
   16791:      	leaq	0x1cd00(%rip), %rcx     # 0x33498 <zlgk82z0l71lvh9+0x33498>
   16798:      	movq	0x24959(%rip), %rax     # 0x3b0f8 <zlgk82z0l71lvh9+0x3b0f8>
   1679f:      	callq	*%rax
   167a1:      	movq	0x38(%rsp), %rax
   167a6:      	addq	$0x138, %rsp            # imm = 0x138
   167ad:      	retq
   167ae:      	int3
   167af:      	int3

00000000000167b0 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9>:
   167b0:      	subq	$0x108, %rsp            # imm = 0x108
   167b7:      	movq	%rsi, 0x8(%rsp)
   167bc:      	movq	%rdi, %rsi
   167bf:      	movq	%rsi, 0x10(%rsp)
   167c4:      	movq	%rsi, 0xe0(%rsp)
   167cc:      	movb	$0x0, 0xdf(%rsp)
   167d4:      	movb	$0x1, 0xdf(%rsp)
   167dc:      	movq	0x2491d(%rip), %rax     # 0x3b100 <zlgk82z0l71lvh9+0x3b100>
   167e3:      	leaq	0x20(%rsp), %rdi
   167e8:      	callq	*%rax
   167ea:      	movb	0x20(%rsp), %al
   167ee:      	andb	$0x1, %al
   167f0:      	movzbl	%al, %eax
   167f3:      	cmpq	$0x0, %rax
   167f7:      	jne	0x1680d <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x5d>
   167f9:      	movq	0x28(%rsp), %rax
   167fe:      	movq	%rax, 0xe8(%rsp)
   16806:      	movq	%rax, 0x18(%rsp)
   1680b:      	jmp	0x16821 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x71>
   1680d:      	movb	0x21(%rsp), %al
   16811:      	andb	$0x1, %al
   16813:      	movzbl	%al, %eax
   16816:      	cmpq	$0x0, %rax
   1681a:      	je	0x16834 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x84>
   1681c:      	jmp	0x16963 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x1b3>
   16821:      	testb	$0x1, 0xdf(%rsp)
   16829:      	jne	0x169cd <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x21d>
   1682f:      	jmp	0x169c0 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x210>
   16834:      	movq	0x10(%rsp), %rsi
   16839:      	movq	0x8(%rsp), %rcx
   1683e:      	movb	$0x0, 0xdf(%rsp)
   16846:      	movq	0x38(%rcx), %rax
   1684a:      	movq	%rax, 0xa8(%rsp)
   16852:      	movq	0x30(%rcx), %rax
   16856:      	movq	%rax, 0xa0(%rsp)
   1685e:      	movq	0x28(%rcx), %rax
   16862:      	movq	%rax, 0x98(%rsp)
   1686a:      	movq	0x20(%rcx), %rax
   1686e:      	movq	%rax, 0x90(%rsp)
   16876:      	movq	0x18(%rcx), %rax
   1687a:      	movq	%rax, 0x88(%rsp)
   16882:      	movq	0x10(%rcx), %rax
   16886:      	movq	%rax, 0x80(%rsp)
   1688e:      	movq	(%rcx), %rax
   16891:      	movq	0x8(%rcx), %rcx
   16895:      	movq	%rcx, 0x78(%rsp)
   1689a:      	movq	%rax, 0x70(%rsp)
   1689f:      	movq	0xa8(%rsp), %rax
   168a7:      	movq	%rax, 0x68(%rsp)
   168ac:      	movq	0xa0(%rsp), %rax
   168b4:      	movq	%rax, 0x60(%rsp)
   168b9:      	movq	0x98(%rsp), %rax
   168c1:      	movq	%rax, 0x58(%rsp)
   168c6:      	movq	0x90(%rsp), %rax
   168ce:      	movq	%rax, 0x50(%rsp)
   168d3:      	movq	0x88(%rsp), %rax
   168db:      	movq	%rax, 0x48(%rsp)
   168e0:      	movq	0x80(%rsp), %rax
   168e8:      	movq	%rax, 0x40(%rsp)
   168ed:      	movq	0x70(%rsp), %rax
   168f2:      	movq	0x78(%rsp), %rcx
   168f7:      	movq	%rcx, 0x38(%rsp)
   168fc:      	movq	%rax, 0x30(%rsp)
   16901:      	leaq	0x30(%rsp), %rax
   16906:      	movq	%rax, 0xd0(%rsp)
   1690e:      	leaq	0x1cb9b(%rip), %rcx     # 0x334b0 <zlgk82z0l71lvh9+0x334b0>
   16915:      	movq	0x247c4(%rip), %rax     # 0x3b0e0 <zlgk82z0l71lvh9+0x3b0e0>
   1691c:      	leaq	0xc0(%rsp), %rdi
   16924:      	leaq	0xd0(%rsp), %rdx
   1692c:      	callq	*%rax
   1692e:      	movq	0x247d3(%rip), %rax     # 0x3b108 <zlgk82z0l71lvh9+0x3b108>
   16935:      	leaq	0xb0(%rsp), %rdi
   1693d:      	leaq	0xc0(%rsp), %rsi
   16945:      	callq	*%rax
   16947:      	movl	$0x1, %eax
   1694c:      	xorl	%ecx, %ecx
   1694e:      	cmpq	$0x2, 0xb0(%rsp)
   16957:      	cmoveq	%rcx, %rax
   1695b:      	cmpq	$0x0, %rax
   1695f:      	je	0x16971 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x1c1>
   16961:      	jmp	0x1698b <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x1db>
   16963:      	movq	$0x0, 0x18(%rsp)
   1696c:      	jmp	0x16821 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x71>
   16971:      	movq	0xb8(%rsp), %rax
   16979:      	movq	%rax, 0xf0(%rsp)
   16981:      	movq	%rax, 0x18(%rsp)
   16986:      	jmp	0x16821 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x71>
   1698b:      	movq	0xb0(%rsp), %rdi
   16993:      	movq	0xb8(%rsp), %rsi
   1699b:      	movq	%rdi, 0xf8(%rsp)
   169a3:      	movq	%rsi, 0x100(%rsp)
   169ab:      	leaq	0x1cb26(%rip), %rdx     # 0x334d8 <zlgk82z0l71lvh9+0x334d8>
   169b2:      	movq	0x24757(%rip), %rax     # 0x3b110 <zlgk82z0l71lvh9+0x3b110>
   169b9:      	callq	*%rax
   169bb:      	movq	%rax, 0x18(%rsp)
   169c0:      	movq	0x18(%rsp), %rax
   169c5:      	addq	$0x108, %rsp            # imm = 0x108
   169cc:      	retq
   169cd:      	jmp	0x169c0 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::h97f0d91740edbeb9+0x210>
   169cf:      	int3

00000000000169d0 <conquer_once::cell::OnceCell<T,B>::try_get_or_init::{{closure}}::h9a35423bda690687>:
   169d0:      	subq	$0x98, %rsp
   169d7:      	movq	%rdi, (%rsp)
   169db:      	movq	%rdi, 0x8(%rsp)
   169e0:      	movq	%rsi, 0x90(%rsp)
   169e8:      	movq	(%rsi), %rsi
   169eb:      	movq	0x244a6(%rip), %rax     # 0x3ae98 <zlgk82z0l71lvh9+0x3ae98>
   169f2:      	leaq	0x50(%rsp), %rdi
   169f7:      	callq	*%rax
   169f9:      	leaq	0x1caf0(%rip), %rdx     # 0x334f0 <zlgk82z0l71lvh9+0x334f0>
   16a00:      	movq	0x244b1(%rip), %rax     # 0x3aeb8 <zlgk82z0l71lvh9+0x3aeb8>
   16a07:      	leaq	0x10(%rsp), %rdi
   16a0c:      	leaq	0x50(%rsp), %rsi
   16a11:      	callq	*%rax
   16a13:      	movq	(%rsp), %rdi
   16a17:      	leaq	0x10(%rsp), %rsi
   16a1c:      	callq	0x17cf0 <kernel::framebuffer::init_kernel_logging::{{closure}}::hb36f04999143a69b>
   16a21:      	movq	0x8(%rsp), %rax
   16a26:      	addq	$0x98, %rsp
   16a2d:      	retq
   16a2e:      	int3
   16a2f:      	int3

0000000000016a30 <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e>:
   16a30:      	subq	$0x48, %rsp
   16a34:      	movq	%rsi, 0x8(%rsp)
   16a39:      	movq	%rdi, %rax
   16a3c:      	movq	0x8(%rsp), %rdi
   16a41:      	movq	%rax, 0x10(%rsp)
   16a46:      	movq	%rax, 0x18(%rsp)
   16a4b:      	movq	%rdi, 0x40(%rsp)
   16a50:      	addq	$0x70, %rdi
   16a54:      	movb	$0x2, 0x3d(%rsp)
   16a59:      	movzbl	0x3d(%rsp), %esi
   16a5e:      	callq	0x16b70 <conquer_once::state::AtomicOnceState::load::h33f773858529cce0>
   16a63:      	movq	%rax, %rdi
   16a66:      	movq	%rdx, %rsi
   16a69:      	leaq	-0x82c4(%rip), %rdx     # 0xe7ac <str.1+0x8c>
   16a70:      	leaq	0x1ca91(%rip), %r8      # 0x33508 <zlgk82z0l71lvh9+0x33508>
   16a77:      	movq	0x2469a(%rip), %rax     # 0x3b118 <zlgk82z0l71lvh9+0x3b118>
   16a7e:      	movl	$0x24, %ecx
   16a83:      	callq	*%rax
   16a85:      	movq	%rdx, 0x30(%rsp)
   16a8a:      	movq	%rax, 0x28(%rsp)
   16a8f:      	movq	0x28(%rsp), %rax
   16a94:      	movq	%rax, 0x20(%rsp)
   16a99:      	testq	%rax, %rax
   16a9c:      	je	0x16ab1 <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e+0x81>
   16a9e:      	jmp	0x16aa0 <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e+0x70>
   16aa0:      	movq	0x20(%rsp), %rax
   16aa5:      	subq	$0x1, %rax
   16aa9:      	je	0x16aca <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e+0x9a>
   16aab:      	jmp	0x16aad <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e+0x7d>
   16aad:      	jmp	0x16ae9 <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e+0xb9>
   16aaf:      	ud2
   16ab1:      	movq	0x10(%rsp), %rax
   16ab6:      	movb	$0x0, 0x3e(%rsp)
   16abb:      	movb	0x3e(%rsp), %cl
   16abf:      	andb	$0x1, %cl
   16ac2:      	movb	%cl, 0x1(%rax)
   16ac5:      	movb	$0x1, (%rax)
   16ac8:      	jmp	0x16b00 <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e+0xd0>
   16aca:      	movq	0x8(%rsp), %rdi
   16acf:      	movq	0x245f2(%rip), %rax     # 0x3b0c8 <zlgk82z0l71lvh9+0x3b0c8>
   16ad6:      	callq	*%rax
   16ad8:      	movq	%rax, %rcx
   16adb:      	movq	0x10(%rsp), %rax
   16ae0:      	movq	%rcx, 0x8(%rax)
   16ae4:      	movb	$0x0, (%rax)
   16ae7:      	jmp	0x16b00 <conquer_once::cell::OnceCell<T,B>::try_get::h21b84a4141d2845e+0xd0>
   16ae9:      	movq	0x10(%rsp), %rax
   16aee:      	movb	$0x1, 0x3f(%rsp)
   16af3:      	movb	0x3f(%rsp), %cl
   16af7:      	andb	$0x1, %cl
   16afa:      	movb	%cl, 0x1(%rax)
   16afd:      	movb	$0x1, (%rax)
   16b00:      	movq	0x18(%rsp), %rax
   16b05:      	addq	$0x48, %rsp
   16b09:      	retq
   16b0a:      	int3
   16b0b:      	int3
   16b0c:      	int3
   16b0d:      	int3
   16b0e:      	int3
   16b0f:      	int3

0000000000016b10 <conquer_once::spin::<impl conquer_once::cell::Block for conquer_once::spin::internal::Spin>::block::hb0f3bcb949b790f8>:
   16b10:      	subq	$0x28, %rsp
   16b14:      	movq	%rdi, (%rsp)
   16b18:      	movq	%rdi, 0x20(%rsp)
   16b1d:      	movq	(%rsp), %rdi
   16b21:      	movb	$0x2, 0x1f(%rsp)
   16b26:      	movzbl	0x1f(%rsp), %esi
   16b2b:      	callq	0x16b70 <conquer_once::state::AtomicOnceState::load::h33f773858529cce0>
   16b30:      	movq	%rax, %rdi
   16b33:      	movq	%rdx, %rsi
   16b36:      	leaq	-0x836d(%rip), %rdx     # 0xe7d0 <str.1+0xb0>
   16b3d:      	leaq	0x1c9dc(%rip), %r8      # 0x33520 <zlgk82z0l71lvh9+0x33520>
   16b44:      	movq	0x245cd(%rip), %rax     # 0x3b118 <zlgk82z0l71lvh9+0x3b118>
   16b4b:      	movl	$0x24, %ecx
   16b50:      	callq	*%rax
   16b52:      	movq	%rdx, 0x10(%rsp)
   16b57:      	movq	%rax, 0x8(%rsp)
   16b5c:      	cmpq	$0x2, 0x8(%rsp)
   16b62:      	jne	0x16b6b <conquer_once::spin::<impl conquer_once::cell::Block for conquer_once::spin::internal::Spin>::block::hb0f3bcb949b790f8+0x5b>
   16b64:      	callq	0x170c0 <core::core_arch::x86::sse2::_mm_pause::h8d69f5cf23ecf930>
   16b69:      	jmp	0x16b1d <conquer_once::spin::<impl conquer_once::cell::Block for conquer_once::spin::internal::Spin>::block::hb0f3bcb949b790f8+0xd>
   16b6b:      	addq	$0x28, %rsp
   16b6f:      	retq

0000000000016b70 <conquer_once::state::AtomicOnceState::load::h33f773858529cce0>:
   16b70:      	subq	$0x18, %rsp
   16b74:      	movb	%sil, %al
   16b77:      	movq	%rdi, 0x8(%rsp)
   16b7c:      	movb	%al, 0x17(%rsp)
   16b80:      	movzbl	%al, %esi
   16b83:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   16b88:      	movq	%rax, %rdi
   16b8b:      	movq	0x244ce(%rip), %rax     # 0x3b060 <zlgk82z0l71lvh9+0x3b060>
   16b92:      	callq	*%rax
   16b94:      	addq	$0x18, %rsp
   16b98:      	retq
   16b99:      	int3
   16b9a:      	int3
   16b9b:      	int3
   16b9c:      	int3
   16b9d:      	int3
   16b9e:      	int3
   16b9f:      	int3

0000000000016ba0 <conquer_once::state::AtomicOnceState::unblock::h80124e748e4a8923>:
   16ba0:      	subq	$0x28, %rsp
   16ba4:      	movb	%dl, %al
   16ba6:      	movq	%rsi, 0x8(%rsp)
   16bab:      	movq	%rdi, 0x18(%rsp)
   16bb0:      	movb	%al, 0x27(%rsp)
   16bb4:      	movq	0x8(%rsp), %rsi
   16bb9:      	movzbl	%al, %edx
   16bbc:      	callq	0x171d0 <core::sync::atomic::AtomicUsize::swap::hfb9a691840091b41>
   16bc1:      	movq	%rax, 0x10(%rsp)
   16bc6:      	movq	0x10(%rsp), %rax
   16bcb:      	addq	$0x28, %rsp
   16bcf:      	retq

0000000000016bd0 <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7>:
   16bd0:      	subq	$0x98, %rsp
   16bd7:      	movb	%sil, %al
   16bda:      	movq	%rdi, 0x70(%rsp)
   16bdf:      	movb	%al, 0x7f(%rsp)
   16be3:      	movb	$0x0, 0x3f(%rsp)
   16be8:      	movzbl	0x3f(%rsp), %r8d
   16bee:      	movzbl	%al, %ecx
   16bf1:      	xorl	%eax, %eax
   16bf3:      	movl	%eax, %edx
   16bf5:      	movl	$0x1, %esi
   16bfa:      	callq	0x17160 <core::sync::atomic::AtomicUsize::compare_exchange::ha1958e7dd1fbde57>
   16bff:      	movq	%rdx, 0x30(%rsp)
   16c04:      	movq	%rax, 0x28(%rsp)
   16c09:      	cmpq	$0x0, 0x28(%rsp)
   16c0f:      	jne	0x16c25 <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0x55>
   16c11:      	movq	0x30(%rsp), %rax
   16c16:      	movq	%rax, 0x80(%rsp)
   16c1e:      	movq	%rax, 0x20(%rsp)
   16c23:      	jmp	0x16c37 <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0x67>
   16c25:      	movq	0x30(%rsp), %rax
   16c2a:      	movq	%rax, 0x88(%rsp)
   16c32:      	movq	%rax, 0x20(%rsp)
   16c37:      	movq	0x20(%rsp), %rdi
   16c3c:      	movq	0x2441d(%rip), %rax     # 0x3b060 <zlgk82z0l71lvh9+0x3b060>
   16c43:      	callq	*%rax
   16c45:      	movq	%rax, %rdi
   16c48:      	movq	%rdx, %rsi
   16c4b:      	leaq	-0x83f3(%rip), %rdx     # 0xe85f <str.1+0x13f>
   16c52:      	leaq	0x1c8df(%rip), %r8      # 0x33538 <zlgk82z0l71lvh9+0x33538>
   16c59:      	movq	0x244b8(%rip), %rax     # 0x3b118 <zlgk82z0l71lvh9+0x3b118>
   16c60:      	movl	$0x24, %ecx
   16c65:      	callq	*%rax
   16c67:      	movq	%rdx, 0x48(%rsp)
   16c6c:      	movq	%rax, 0x40(%rsp)
   16c71:      	movq	0x40(%rsp), %rax
   16c76:      	movq	%rax, 0x8(%rsp)
   16c7b:      	testq	%rax, %rax
   16c7e:      	je	0x16c93 <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0xc3>
   16c80:      	jmp	0x16c82 <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0xb2>
   16c82:      	movq	0x8(%rsp), %rax
   16c87:      	subq	$0x1, %rax
   16c8b:      	je	0x16c9e <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0xce>
   16c8d:      	jmp	0x16c8f <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0xbf>
   16c8f:      	jmp	0x16cbd <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0xed>
   16c91:      	ud2
   16c93:      	movq	$0x2, 0x10(%rsp)
   16c9c:      	jmp	0x16cec <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0x11c>
   16c9e:      	movq	$0x0, 0x50(%rsp)
   16ca7:      	movq	0x50(%rsp), %rcx
   16cac:      	movq	0x58(%rsp), %rax
   16cb1:      	movq	%rcx, 0x10(%rsp)
   16cb6:      	movq	%rax, 0x18(%rsp)
   16cbb:      	jmp	0x16cec <conquer_once::state::AtomicOnceState::try_block::h93b5e301742254e7+0x11c>
   16cbd:      	movq	0x48(%rsp), %rax
   16cc2:      	movq	%rax, 0x90(%rsp)
   16cca:      	movq	%rax, 0x68(%rsp)
   16ccf:      	movq	$0x1, 0x60(%rsp)
   16cd8:      	movq	0x60(%rsp), %rcx
   16cdd:      	movq	0x68(%rsp), %rax
   16ce2:      	movq	%rcx, 0x10(%rsp)
   16ce7:      	movq	%rax, 0x18(%rsp)
   16cec:      	movq	0x10(%rsp), %rax
   16cf1:      	movq	0x18(%rsp), %rdx
   16cf6:      	addq	$0x98, %rsp
   16cfd:      	retq
   16cfe:      	int3
   16cff:      	int3

0000000000016d00 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79>:
   16d00:      	subq	$0x58, %rsp
   16d04:      	movq	%rdi, (%rsp)
   16d08:      	movq	%rdi, 0x50(%rsp)
   16d0d:      	subq	$0x1, %rdi
   16d11:      	je	0x16d6a <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0x6a>
   16d13:      	jmp	0x16d15 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0x15>
   16d15:      	movq	(%rsp), %rax
   16d19:      	subq	$0x2, %rax
   16d1d:      	je	0x16d89 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0x89>
   16d1f:      	jmp	0x16d21 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0x21>
   16d21:      	movq	(%rsp), %rax
   16d25:      	subq	$0x3, %rax
   16d29:      	je	0x16d5f <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0x5f>
   16d2b:      	jmp	0x16d2d <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0x2d>
   16d2d:      	movq	(%rsp), %rax
   16d31:      	movq	%rax, 0x48(%rsp)
   16d36:      	movq	0x48(%rsp), %rax
   16d3b:      	movq	%rax, 0x40(%rsp)
   16d40:      	movq	$0x2, 0x38(%rsp)
   16d49:      	movq	0x38(%rsp), %rcx
   16d4e:      	movq	0x40(%rsp), %rax
   16d53:      	movq	%rcx, 0x8(%rsp)
   16d58:      	movq	%rax, 0x10(%rsp)
   16d5d:      	jmp	0x16da6 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0xa6>
   16d5f:      	movq	$0x3, 0x8(%rsp)
   16d68:      	jmp	0x16da6 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0xa6>
   16d6a:      	movq	$0x0, 0x18(%rsp)
   16d73:      	movq	0x18(%rsp), %rcx
   16d78:      	movq	0x20(%rsp), %rax
   16d7d:      	movq	%rcx, 0x8(%rsp)
   16d82:      	movq	%rax, 0x10(%rsp)
   16d87:      	jmp	0x16da6 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79+0xa6>
   16d89:      	movq	$0x1, 0x28(%rsp)
   16d92:      	movq	0x28(%rsp), %rcx
   16d97:      	movq	0x30(%rsp), %rax
   16d9c:      	movq	%rcx, 0x8(%rsp)
   16da1:      	movq	%rax, 0x10(%rsp)
   16da6:      	movq	0x8(%rsp), %rax
   16dab:      	movq	0x10(%rsp), %rdx
   16db0:      	addq	$0x58, %rsp
   16db4:      	retq
   16db5:      	int3
   16db6:      	int3
   16db7:      	int3
   16db8:      	int3
   16db9:      	int3
   16dba:      	int3
   16dbb:      	int3
   16dbc:      	int3
   16dbd:      	int3
   16dbe:      	int3
   16dbf:      	int3

0000000000016dc0 <<T as core::convert::TryInto<U>>::try_into::hb37d3b410705f8fc>:
   16dc0:      	pushq	%rax
   16dc1:      	movq	%rdi, (%rsp)
   16dc5:      	callq	0x16d00 <<conquer_once::state::OnceState as core::convert::TryFrom<usize>>::try_from::h0d9cec2a9975dc79>
   16dca:      	popq	%rcx
   16dcb:      	retq
   16dcc:      	int3
   16dcd:      	int3
   16dce:      	int3
   16dcf:      	int3

0000000000016dd0 <core::mem::drop::hdfcaea12cafb1d6c>:
   16dd0:      	subq	$0x18, %rsp
   16dd4:      	movb	%sil, %al
   16dd7:      	movq	%rdi, 0x8(%rsp)
   16ddc:      	andb	$0x1, %al
   16dde:      	movb	%al, 0x10(%rsp)
   16de2:      	movq	0x2421f(%rip), %rax     # 0x3b008 <zlgk82z0l71lvh9+0x3b008>
   16de9:      	leaq	0x8(%rsp), %rdi
   16dee:      	callq	*%rax
   16df0:      	addq	$0x18, %rsp
   16df4:      	retq
   16df5:      	int3
   16df6:      	int3
   16df7:      	int3
   16df8:      	int3
   16df9:      	int3
   16dfa:      	int3
   16dfb:      	int3
   16dfc:      	int3
   16dfd:      	int3
   16dfe:      	int3
   16dff:      	int3

0000000000016e00 <core::mem::replace::h785e1c66c327e5c8>:
   16e00:      	subq	$0x68, %rsp
   16e04:      	movq	%rdx, 0x8(%rsp)
   16e09:      	movq	%rsi, (%rsp)
   16e0d:      	movq	%rdi, 0x10(%rsp)
   16e12:      	movq	%rdi, 0x18(%rsp)
   16e17:      	movq	%rsi, 0x60(%rsp)
   16e1c:      	movq	0x2413d(%rip), %rax     # 0x3af60 <zlgk82z0l71lvh9+0x3af60>
   16e23:      	leaq	0x20(%rsp), %rdi
   16e28:      	callq	*%rax
   16e2a:      	movq	(%rsp), %rdi
   16e2e:      	movq	0x8(%rsp), %rsi
   16e33:      	movq	0x2412e(%rip), %rax     # 0x3af68 <zlgk82z0l71lvh9+0x3af68>
   16e3a:      	callq	*%rax
   16e3c:      	movq	0x10(%rsp), %rdi
   16e41:      	movq	0x18(%rsp), %rax
   16e46:      	movq	0x58(%rsp), %rcx
   16e4b:      	movq	%rcx, 0x38(%rdi)
   16e4f:      	movq	0x50(%rsp), %rcx
   16e54:      	movq	%rcx, 0x30(%rdi)
   16e58:      	movq	0x48(%rsp), %rcx
   16e5d:      	movq	%rcx, 0x28(%rdi)
   16e61:      	movq	0x40(%rsp), %rcx
   16e66:      	movq	%rcx, 0x20(%rdi)
   16e6a:      	movq	0x38(%rsp), %rcx
   16e6f:      	movq	%rcx, 0x18(%rdi)
   16e73:      	movq	0x30(%rsp), %rcx
   16e78:      	movq	%rcx, 0x10(%rdi)
   16e7c:      	movq	0x20(%rsp), %rcx
   16e81:      	movq	0x28(%rsp), %rdx
   16e86:      	movq	%rdx, 0x8(%rdi)
   16e8a:      	movq	%rcx, (%rdi)
   16e8d:      	addq	$0x68, %rsp
   16e91:      	retq
   16e92:      	int3
   16e93:      	int3
   16e94:      	int3
   16e95:      	int3
   16e96:      	int3
   16e97:      	int3
   16e98:      	int3
   16e99:      	int3
   16e9a:      	int3
   16e9b:      	int3
   16e9c:      	int3
   16e9d:      	int3
   16e9e:      	int3
   16e9f:      	int3

0000000000016ea0 <core::ptr::read::hb7be1d6b48c9019b>:
   16ea0:      	subq	$0x38, %rsp
   16ea4:      	movq	%rsi, 0x8(%rsp)
   16ea9:      	movq	%rdi, 0x10(%rsp)
   16eae:      	movq	%rdi, 0x18(%rsp)
   16eb3:      	movq	%rsi, 0x28(%rsp)
   16eb8:      	movb	$0x1, %al
   16eba:      	testb	$0x1, %al
   16ebc:      	jne	0x16f10 <core::ptr::read::hb7be1d6b48c9019b+0x70>
   16ebe:      	movq	0x18(%rsp), %rax
   16ec3:      	movq	0x10(%rsp), %rcx
   16ec8:      	movq	0x8(%rsp), %rsi
   16ecd:      	movq	0x38(%rsi), %rdx
   16ed1:      	movq	%rdx, 0x38(%rcx)
   16ed5:      	movq	0x30(%rsi), %rdx
   16ed9:      	movq	%rdx, 0x30(%rcx)
   16edd:      	movq	0x28(%rsi), %rdx
   16ee1:      	movq	%rdx, 0x28(%rcx)
   16ee5:      	movq	0x20(%rsi), %rdx
   16ee9:      	movq	%rdx, 0x20(%rcx)
   16eed:      	movq	0x18(%rsi), %rdx
   16ef1:      	movq	%rdx, 0x18(%rcx)
   16ef5:      	movq	0x10(%rsi), %rdx
   16ef9:      	movq	%rdx, 0x10(%rcx)
   16efd:      	movq	(%rsi), %rdx
   16f00:      	movq	0x8(%rsi), %rsi
   16f04:      	movq	%rsi, 0x8(%rcx)
   16f08:      	movq	%rdx, (%rcx)
   16f0b:      	addq	$0x38, %rsp
   16f0f:      	retq
   16f10:      	movq	0x8(%rsp), %rax
   16f15:      	movq	%rax, 0x20(%rsp)
   16f1a:      	movq	0x20(%rsp), %rdi
   16f1f:      	movq	%rdi, 0x30(%rsp)
   16f24:      	movq	0x2423d(%rip), %rax     # 0x3b168 <zlgk82z0l71lvh9+0x3b168>
   16f2b:      	callq	*%rax
   16f2d:      	testb	$0x1, %al
   16f2f:      	jne	0x16f48 <core::ptr::read::hb7be1d6b48c9019b+0xa8>
   16f31:      	leaq	-0x8649(%rip), %rdi     # 0xe8ef <str.1+0x1cf>
   16f38:      	movq	0x24231(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   16f3f:      	movl	$0x65, %esi
   16f44:      	callq	*%rax
   16f46:      	ud2
   16f48:      	jmp	0x16ebe <core::ptr::read::hb7be1d6b48c9019b+0x1e>
   16f4d:      	int3
   16f4e:      	int3
   16f4f:      	int3

0000000000016f50 <core::ptr::write::h2a11547a67d30f84>:
   16f50:      	subq	$0x28, %rsp
   16f54:      	movq	%rsi, (%rsp)
   16f58:      	movq	%rdi, 0x8(%rsp)
   16f5d:      	movq	%rdi, 0x18(%rsp)
   16f62:      	movb	$0x1, %al
   16f64:      	testb	$0x1, %al
   16f66:      	jne	0x16fb4 <core::ptr::write::h2a11547a67d30f84+0x64>
   16f68:      	movq	0x8(%rsp), %rax
   16f6d:      	movq	(%rsp), %rdx
   16f71:      	movq	0x38(%rdx), %rcx
   16f75:      	movq	%rcx, 0x38(%rax)
   16f79:      	movq	0x30(%rdx), %rcx
   16f7d:      	movq	%rcx, 0x30(%rax)
   16f81:      	movq	0x28(%rdx), %rcx
   16f85:      	movq	%rcx, 0x28(%rax)
   16f89:      	movq	0x20(%rdx), %rcx
   16f8d:      	movq	%rcx, 0x20(%rax)
   16f91:      	movq	0x18(%rdx), %rcx
   16f95:      	movq	%rcx, 0x18(%rax)
   16f99:      	movq	0x10(%rdx), %rcx
   16f9d:      	movq	%rcx, 0x10(%rax)
   16fa1:      	movq	(%rdx), %rcx
   16fa4:      	movq	0x8(%rdx), %rdx
   16fa8:      	movq	%rdx, 0x8(%rax)
   16fac:      	movq	%rcx, (%rax)
   16faf:      	addq	$0x28, %rsp
   16fb3:      	retq
   16fb4:      	movq	0x8(%rsp), %rax
   16fb9:      	movq	%rax, 0x10(%rsp)
   16fbe:      	movq	0x10(%rsp), %rdi
   16fc3:      	movq	%rdi, 0x20(%rsp)
   16fc8:      	movq	0x24199(%rip), %rax     # 0x3b168 <zlgk82z0l71lvh9+0x3b168>
   16fcf:      	callq	*%rax
   16fd1:      	testb	$0x1, %al
   16fd3:      	jne	0x16fec <core::ptr::write::h2a11547a67d30f84+0x9c>
   16fd5:      	leaq	-0x8688(%rip), %rdi     # 0xe954 <str.1+0x234>
   16fdc:      	movq	0x2418d(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   16fe3:      	movl	$0x66, %esi
   16fe8:      	callq	*%rax
   16fea:      	ud2
   16fec:      	jmp	0x16f68 <core::ptr::write::h2a11547a67d30f84+0x18>
   16ff1:      	int3
   16ff2:      	int3
   16ff3:      	int3
   16ff4:      	int3
   16ff5:      	int3
   16ff6:      	int3
   16ff7:      	int3
   16ff8:      	int3
   16ff9:      	int3
   16ffa:      	int3
   16ffb:      	int3
   16ffc:      	int3
   16ffd:      	int3
   16ffe:      	int3
   16fff:      	int3

0000000000017000 <<bootloader_api::info::FrameBufferInfo as core::clone::Clone>::clone::hf21ffe5443e6c66d>:
   17000:      	pushq	%rax
   17001:      	movq	%rdi, %rax
   17004:      	movq	%rsi, (%rsp)
   17008:      	movq	0x28(%rsi), %rcx
   1700c:      	movq	%rcx, 0x28(%rdi)
   17010:      	movq	0x20(%rsi), %rcx
   17014:      	movq	%rcx, 0x20(%rdi)
   17018:      	movq	0x18(%rsi), %rcx
   1701c:      	movq	%rcx, 0x18(%rdi)
   17020:      	movq	0x10(%rsi), %rcx
   17024:      	movq	%rcx, 0x10(%rdi)
   17028:      	movq	(%rsi), %rcx
   1702b:      	movq	0x8(%rsi), %rdx
   1702f:      	movq	%rdx, 0x8(%rdi)
   17033:      	movq	%rcx, (%rdi)
   17036:      	popq	%rcx
   17037:      	retq
   17038:      	int3
   17039:      	int3
   1703a:      	int3
   1703b:      	int3
   1703c:      	int3
   1703d:      	int3
   1703e:      	int3
   1703f:      	int3

0000000000017040 <log::set_max_level::h195defec6340c49d>:
   17040:      	subq	$0x18, %rsp
   17044:      	movq	%rdi, 0x8(%rsp)
   17049:      	movq	0x8(%rsp), %rsi
   1704e:      	movb	$0x0, 0x17(%rsp)
   17053:      	movb	0x17(%rsp), %al
   17057:      	movzbl	%al, %edx
   1705a:      	movq	0x23e0f(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   17061:      	callq	0x17200 <core::sync::atomic::AtomicUsize::store::h4507ff43355492d3>
   17066:      	addq	$0x18, %rsp
   1706a:      	retq
   1706b:      	int3
   1706c:      	int3
   1706d:      	int3
   1706e:      	int3
   1706f:      	int3

0000000000017070 <core::intrinsics::is_aligned_and_not_null::hadc58ebe0eeb5238>:
   17070:      	subq	$0x18, %rsp
   17074:      	movq	%rdi, (%rsp)
   17078:      	movq	%rdi, 0x10(%rsp)
   1707d:      	movq	0x23e0c(%rip), %rax     # 0x3ae90 <zlgk82z0l71lvh9+0x3ae90>
   17084:      	callq	*%rax
   17086:      	testb	$0x1, %al
   17088:      	jne	0x1709f <core::intrinsics::is_aligned_and_not_null::hadc58ebe0eeb5238+0x2f>
   1708a:      	movq	(%rsp), %rdi
   1708e:      	movq	0x23deb(%rip), %rax     # 0x3ae80 <zlgk82z0l71lvh9+0x3ae80>
   17095:      	callq	*%rax
   17097:      	andb	$0x1, %al
   17099:      	movb	%al, 0xf(%rsp)
   1709d:      	jmp	0x170a4 <core::intrinsics::is_aligned_and_not_null::hadc58ebe0eeb5238+0x34>
   1709f:      	movb	$0x0, 0xf(%rsp)
   170a4:      	movb	0xf(%rsp), %al
   170a8:      	andb	$0x1, %al
   170aa:      	movzbl	%al, %eax
   170ad:      	addq	$0x18, %rsp
   170b1:      	retq
   170b2:      	int3
   170b3:      	int3
   170b4:      	int3
   170b5:      	int3
   170b6:      	int3
   170b7:      	int3
   170b8:      	int3
   170b9:      	int3
   170ba:      	int3
   170bb:      	int3
   170bc:      	int3
   170bd:      	int3
   170be:      	int3
   170bf:      	int3

00000000000170c0 <core::core_arch::x86::sse2::_mm_pause::h8d69f5cf23ecf930>:
   170c0:      	pause
   170c2:      	retq
   170c3:      	int3
   170c4:      	int3
   170c5:      	int3
   170c6:      	int3
   170c7:      	int3
   170c8:      	int3
   170c9:      	int3
   170ca:      	int3
   170cb:      	int3
   170cc:      	int3
   170cd:      	int3
   170ce:      	int3
   170cf:      	int3

00000000000170d0 <core::sync::atomic::AtomicUsize::compare_and_swap::hb3cd6f31c8c7111b>:
   170d0:      	subq	$0x68, %rsp
   170d4:      	movq	%rdx, 0x10(%rsp)
   170d9:      	movq	%rsi, 0x8(%rsp)
   170de:      	movq	%rdi, (%rsp)
   170e2:      	movb	%cl, %al
   170e4:      	movq	%rdi, 0x38(%rsp)
   170e9:      	movq	%rsi, 0x40(%rsp)
   170ee:      	movq	%rdx, 0x48(%rsp)
   170f3:      	movb	%al, 0x57(%rsp)
   170f7:      	movzbl	%al, %edi
   170fa:      	movl	%edi, 0x1c(%rsp)
   170fe:      	callq	0x17240 <core::sync::atomic::strongest_failure_ordering::h9c95102a1918dad5>
   17103:      	movq	(%rsp), %rdi
   17107:      	movq	0x8(%rsp), %rsi
   1710c:      	movq	0x10(%rsp), %rdx
   17111:      	movl	0x1c(%rsp), %ecx
   17115:      	movzbl	%al, %r8d
   17119:      	callq	0x17160 <core::sync::atomic::AtomicUsize::compare_exchange::ha1958e7dd1fbde57>
   1711e:      	movq	%rdx, 0x30(%rsp)
   17123:      	movq	%rax, 0x28(%rsp)
   17128:      	cmpq	$0x0, 0x28(%rsp)
   1712e:      	jne	0x17141 <core::sync::atomic::AtomicUsize::compare_and_swap::hb3cd6f31c8c7111b+0x71>
   17130:      	movq	0x30(%rsp), %rax
   17135:      	movq	%rax, 0x58(%rsp)
   1713a:      	movq	%rax, 0x20(%rsp)
   1713f:      	jmp	0x17150 <core::sync::atomic::AtomicUsize::compare_and_swap::hb3cd6f31c8c7111b+0x80>
   17141:      	movq	0x30(%rsp), %rax
   17146:      	movq	%rax, 0x60(%rsp)
   1714b:      	movq	%rax, 0x20(%rsp)
   17150:      	movq	0x20(%rsp), %rax
   17155:      	addq	$0x68, %rsp
   17159:      	retq
   1715a:      	int3
   1715b:      	int3
   1715c:      	int3
   1715d:      	int3
   1715e:      	int3
   1715f:      	int3

0000000000017160 <core::sync::atomic::AtomicUsize::compare_exchange::ha1958e7dd1fbde57>:
   17160:      	subq	$0x28, %rsp
   17164:      	movb	%r8b, %al
   17167:      	movq	%rdi, (%rsp)
   1716b:      	movq	%rsi, 0x8(%rsp)
   17170:      	movq	%rdx, 0x10(%rsp)
   17175:      	movb	%cl, 0x1e(%rsp)
   17179:      	movb	%al, 0x1f(%rsp)
   1717d:      	movq	%rdi, 0x20(%rsp)
   17182:      	movzbl	%cl, %ecx
   17185:      	movzbl	%al, %r8d
   17189:      	movq	0x24020(%rip), %rax     # 0x3b1b0 <zlgk82z0l71lvh9+0x3b1b0>
   17190:      	callq	*%rax
   17192:      	addq	$0x28, %rsp
   17196:      	retq
   17197:      	int3
   17198:      	int3
   17199:      	int3
   1719a:      	int3
   1719b:      	int3
   1719c:      	int3
   1719d:      	int3
   1719e:      	int3
   1719f:      	int3

00000000000171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>:
   171a0:      	subq	$0x18, %rsp
   171a4:      	movb	%sil, %al
   171a7:      	movq	%rdi, (%rsp)
   171ab:      	movb	%al, 0xf(%rsp)
   171af:      	movq	%rdi, 0x10(%rsp)
   171b4:      	movzbl	%al, %esi
   171b7:      	movq	0x23ffa(%rip), %rax     # 0x3b1b8 <zlgk82z0l71lvh9+0x3b1b8>
   171be:      	callq	*%rax
   171c0:      	addq	$0x18, %rsp
   171c4:      	retq
   171c5:      	int3
   171c6:      	int3
   171c7:      	int3
   171c8:      	int3
   171c9:      	int3
   171ca:      	int3
   171cb:      	int3
   171cc:      	int3
   171cd:      	int3
   171ce:      	int3
   171cf:      	int3

00000000000171d0 <core::sync::atomic::AtomicUsize::swap::hfb9a691840091b41>:
   171d0:      	subq	$0x28, %rsp
   171d4:      	movb	%dl, %al
   171d6:      	movq	%rdi, 0x8(%rsp)
   171db:      	movq	%rsi, 0x10(%rsp)
   171e0:      	movb	%al, 0x1f(%rsp)
   171e4:      	movq	%rdi, 0x20(%rsp)
   171e9:      	movzbl	%al, %edx
   171ec:      	movq	0x23fcd(%rip), %rax     # 0x3b1c0 <zlgk82z0l71lvh9+0x3b1c0>
   171f3:      	callq	*%rax
   171f5:      	addq	$0x28, %rsp
   171f9:      	retq
   171fa:      	int3
   171fb:      	int3
   171fc:      	int3
   171fd:      	int3
   171fe:      	int3
   171ff:      	int3

0000000000017200 <core::sync::atomic::AtomicUsize::store::h4507ff43355492d3>:
   17200:      	subq	$0x28, %rsp
   17204:      	movb	%dl, %al
   17206:      	movq	%rdi, 0x8(%rsp)
   1720b:      	movq	%rsi, 0x10(%rsp)
   17210:      	movb	%al, 0x1f(%rsp)
   17214:      	movq	%rdi, 0x20(%rsp)
   17219:      	movzbl	%al, %edx
   1721c:      	movq	0x23fa5(%rip), %rax     # 0x3b1c8 <zlgk82z0l71lvh9+0x3b1c8>
   17223:      	callq	*%rax
   17225:      	addq	$0x28, %rsp
   17229:      	retq
   1722a:      	int3
   1722b:      	int3
   1722c:      	int3
   1722d:      	int3
   1722e:      	int3
   1722f:      	int3

0000000000017230 <core::sync::atomic::spin_loop_hint::h84230f3fcf5d8291>:
   17230:      	pushq	%rax
   17231:      	callq	0x170c0 <core::core_arch::x86::sse2::_mm_pause::h8d69f5cf23ecf930>
   17236:      	popq	%rax
   17237:      	retq
   17238:      	int3
   17239:      	int3
   1723a:      	int3
   1723b:      	int3
   1723c:      	int3
   1723d:      	int3
   1723e:      	int3
   1723f:      	int3

0000000000017240 <core::sync::atomic::strongest_failure_ordering::h9c95102a1918dad5>:
   17240:      	subq	$0x10, %rsp
   17244:      	movb	%dil, %al
   17247:      	movb	%al, 0xe(%rsp)
   1724b:      	movzbl	0xe(%rsp), %eax
   17250:      	movq	%rax, (%rsp)
   17254:      	movq	(%rsp), %rax
   17258:      	leaq	-0x88a3(%rip), %rcx     # 0xe9bc <str.1+0x29c>
   1725f:      	movslq	(%rcx,%rax,4), %rax
   17263:      	addq	%rcx, %rax
   17266:      	jmpq	*%rax
   17268:      	ud2
   1726a:      	movb	$0x0, 0xf(%rsp)
   1726f:      	jmp	0x1728b <core::sync::atomic::strongest_failure_ordering::h9c95102a1918dad5+0x4b>
   17271:      	movb	$0x0, 0xf(%rsp)
   17276:      	jmp	0x1728b <core::sync::atomic::strongest_failure_ordering::h9c95102a1918dad5+0x4b>
   17278:      	movb	$0x2, 0xf(%rsp)
   1727d:      	jmp	0x1728b <core::sync::atomic::strongest_failure_ordering::h9c95102a1918dad5+0x4b>
   1727f:      	movb	$0x2, 0xf(%rsp)
   17284:      	jmp	0x1728b <core::sync::atomic::strongest_failure_ordering::h9c95102a1918dad5+0x4b>
   17286:      	movb	$0x4, 0xf(%rsp)
   1728b:      	movb	0xf(%rsp), %al
   1728f:      	addq	$0x10, %rsp
   17293:      	retq
   17294:      	int3
   17295:      	int3
   17296:      	int3
   17297:      	int3
   17298:      	int3
   17299:      	int3
   1729a:      	int3
   1729b:      	int3
   1729c:      	int3
   1729d:      	int3
   1729e:      	int3
   1729f:      	int3

00000000000172a0 <kernel::segmentation::init_gdt::hff3b64c87315a934>:
   172a0:      	subq	$0x18, %rsp
   172a4:      	movq	0x23cfd(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   172ab:      	movq	0x23cfe(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   172b2:      	callq	*%rax
   172b4:      	movq	%rax, %rsi
   172b7:      	movq	0x23c4a(%rip), %rax     # 0x3af08 <zlgk82z0l71lvh9+0x3af08>
   172be:      	leaq	0xe(%rsp), %rdi
   172c3:      	callq	*%rax
   172c5:      	movq	0x23c44(%rip), %rax     # 0x3af10 <zlgk82z0l71lvh9+0x3af10>
   172cc:      	leaq	0xe(%rsp), %rdi
   172d1:      	callq	*%rax
   172d3:      	movq	0x23cce(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   172da:      	movq	0x23ccf(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   172e1:      	callq	*%rax
   172e3:      	movw	0x3a(%rax), %ax
   172e7:      	movw	%ax, %di
   172ea:      	movq	0x23e87(%rip), %rax     # 0x3b178 <zlgk82z0l71lvh9+0x3b178>
   172f1:      	callq	*%rax
   172f3:      	movq	0x23cae(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   172fa:      	movq	0x23caf(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   17301:      	callq	*%rax
   17303:      	movw	0x3c(%rax), %ax
   17307:      	movw	%ax, %di
   1730a:      	movq	0x23e6f(%rip), %rax     # 0x3b180 <zlgk82z0l71lvh9+0x3b180>
   17311:      	callq	*%rax
   17313:      	movq	0x23c8e(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   1731a:      	movq	0x23c8f(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   17321:      	callq	*%rax
   17323:      	movw	0x3c(%rax), %ax
   17327:      	movw	%ax, %di
   1732a:      	movq	0x23e57(%rip), %rax     # 0x3b188 <zlgk82z0l71lvh9+0x3b188>
   17331:      	callq	*%rax
   17333:      	movq	0x23c6e(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   1733a:      	movq	0x23c6f(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   17341:      	callq	*%rax
   17343:      	movw	0x3c(%rax), %ax
   17347:      	movw	%ax, %di
   1734a:      	movq	0x23e3f(%rip), %rax     # 0x3b190 <zlgk82z0l71lvh9+0x3b190>
   17351:      	callq	*%rax
   17353:      	movq	0x23c4e(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   1735a:      	movq	0x23c4f(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   17361:      	callq	*%rax
   17363:      	movw	0x38(%rax), %ax
   17367:      	movw	%ax, %di
   1736a:      	movq	0x23e2f(%rip), %rax     # 0x3b1a0 <zlgk82z0l71lvh9+0x3b1a0>
   17371:      	callq	*%rax
   17373:      	movq	0x23c2e(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   1737a:      	movq	0x23c2f(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   17381:      	callq	*%rax
   17383:      	movw	0x38(%rax), %ax
   17387:      	movw	%ax, %di
   1738a:      	movq	0x23e17(%rip), %rax     # 0x3b1a8 <zlgk82z0l71lvh9+0x3b1a8>
   17391:      	callq	*%rax
   17393:      	movq	0x23c0e(%rip), %rdi     # 0x3afa8 <zlgk82z0l71lvh9+0x3afa8>
   1739a:      	movq	0x23c0f(%rip), %rax     # 0x3afb0 <zlgk82z0l71lvh9+0x3afb0>
   173a1:      	callq	*%rax
   173a3:      	movw	0x42(%rax), %ax
   173a7:      	movw	%ax, %di
   173aa:      	movq	0x23de7(%rip), %rax     # 0x3b198 <zlgk82z0l71lvh9+0x3b198>
   173b1:      	callq	*%rax
   173b3:      	addq	$0x18, %rsp
   173b7:      	retq
   173b8:      	int3
   173b9:      	int3
   173ba:      	int3
   173bb:      	int3
   173bc:      	int3
   173bd:      	int3
   173be:      	int3
   173bf:      	int3

00000000000173c0 <<kernel::segmentation::TSS as core::ops::deref::Deref>::deref::he911f69769ef37d3>:
   173c0:      	subq	$0x18, %rsp
   173c4:      	movq	%rdi, 0x8(%rsp)
   173c9:      	leaq	0x26b10(%rip), %rax     # 0x3dee0 <<kernel::segmentation::TSS as core::ops::deref::Deref>::deref::__stability::LAZY::h709393b3683ef32d>
   173d0:      	movq	%rax, 0x10(%rsp)
   173d5:      	leaq	0x26b04(%rip), %rdi     # 0x3dee0 <<kernel::segmentation::TSS as core::ops::deref::Deref>::deref::__stability::LAZY::h709393b3683ef32d>
   173dc:      	movq	0x23c4d(%rip), %rax     # 0x3b030 <zlgk82z0l71lvh9+0x3b030>
   173e3:      	callq	*%rax
   173e5:      	addq	$0x18, %rsp
   173e9:      	retq
   173ea:      	int3
   173eb:      	int3
   173ec:      	int3
   173ed:      	int3
   173ee:      	int3
   173ef:      	int3

00000000000173f0 <<kernel::segmentation::GDT as core::ops::deref::Deref>::deref::h344435f500778641>:
   173f0:      	subq	$0x18, %rsp
   173f4:      	movq	%rdi, 0x8(%rsp)
   173f9:      	leaq	0x26b58(%rip), %rax     # 0x3df58 <<kernel::segmentation::GDT as core::ops::deref::Deref>::deref::__stability::LAZY::h570c1c89e1ac5941>
   17400:      	movq	%rax, 0x10(%rsp)
   17405:      	leaq	0x26b4c(%rip), %rdi     # 0x3df58 <<kernel::segmentation::GDT as core::ops::deref::Deref>::deref::__stability::LAZY::h570c1c89e1ac5941>
   1740c:      	movq	0x23c3d(%rip), %rax     # 0x3b050 <zlgk82z0l71lvh9+0x3b050>
   17413:      	callq	*%rax
   17415:      	addq	$0x18, %rsp
   17419:      	retq
   1741a:      	int3
   1741b:      	int3
   1741c:      	int3
   1741d:      	int3
   1741e:      	int3
   1741f:      	int3

0000000000017420 <kernel::segmentation::asm::set_cs::ha9dc136f217baabc>:
   17420:      	subq	$0x18, %rsp
   17424:      	movw	%di, %ax
   17427:      	movw	%ax, 0xe(%rsp)
   1742c:      	movzwl	%ax, %eax
   1742f:      	movq	%rax, 0x10(%rsp)
   17434:      	pushq	%rax
   17435:      	leaq	0x3(%rip), %rax         # 0x1743f <kernel::segmentation::asm::set_cs::ha9dc136f217baabc+0x1f>
   1743c:      	pushq	%rax
   1743d:      	lretq
   1743f:      	addq	$0x18, %rsp
   17443:      	retq
   17444:      	int3
   17445:      	int3
   17446:      	int3
   17447:      	int3
   17448:      	int3
   17449:      	int3
   1744a:      	int3
   1744b:      	int3
   1744c:      	int3
   1744d:      	int3
   1744e:      	int3
   1744f:      	int3

0000000000017450 <kernel::segmentation::asm::set_ss::he691ad747946c235>:
   17450:      	subq	$0x2, %rsp
   17454:      	movw	%di, %ax
   17457:      	movw	%ax, (%rsp)
   1745b:      	movw	%ax, %ss
   1745e:      	addq	$0x2, %rsp
   17462:      	retq
   17463:      	int3
   17464:      	int3
   17465:      	int3
   17466:      	int3
   17467:      	int3
   17468:      	int3
   17469:      	int3
   1746a:      	int3
   1746b:      	int3
   1746c:      	int3
   1746d:      	int3
   1746e:      	int3
   1746f:      	int3

0000000000017470 <kernel::segmentation::asm::set_ds::h039fe11920758464>:
   17470:      	subq	$0x2, %rsp
   17474:      	movw	%di, %ax
   17477:      	movw	%ax, (%rsp)
   1747b:      	movw	%ax, %ds
   1747e:      	addq	$0x2, %rsp
   17482:      	retq
   17483:      	int3
   17484:      	int3
   17485:      	int3
   17486:      	int3
   17487:      	int3
   17488:      	int3
   17489:      	int3
   1748a:      	int3
   1748b:      	int3
   1748c:      	int3
   1748d:      	int3
   1748e:      	int3
   1748f:      	int3

0000000000017490 <kernel::segmentation::asm::set_es::h23d1bc8928095d6b>:
   17490:      	subq	$0x2, %rsp
   17494:      	movw	%di, %ax
   17497:      	movw	%ax, (%rsp)
   1749b:      	movw	%ax, %es
   1749e:      	addq	$0x2, %rsp
   174a2:      	retq
   174a3:      	int3
   174a4:      	int3
   174a5:      	int3
   174a6:      	int3
   174a7:      	int3
   174a8:      	int3
   174a9:      	int3
   174aa:      	int3
   174ab:      	int3
   174ac:      	int3
   174ad:      	int3
   174ae:      	int3
   174af:      	int3

00000000000174b0 <kernel::segmentation::asm::load_task_register::h81684c67210e5147>:
   174b0:      	subq	$0x2, %rsp
   174b4:      	movw	%di, %ax
   174b7:      	movw	%ax, (%rsp)
   174bb:      	ltrw	%ax
   174be:      	addq	$0x2, %rsp
   174c2:      	retq
   174c3:      	int3
   174c4:      	int3
   174c5:      	int3
   174c6:      	int3
   174c7:      	int3
   174c8:      	int3
   174c9:      	int3
   174ca:      	int3
   174cb:      	int3
   174cc:      	int3
   174cd:      	int3
   174ce:      	int3
   174cf:      	int3

00000000000174d0 <kernel::segmentation::asm::set_fs::hdc99396579889037>:
   174d0:      	subq	$0x2, %rsp
   174d4:      	movw	%di, %ax
   174d7:      	movw	%ax, (%rsp)
   174db:      	movw	%ax, %fs
   174de:      	addq	$0x2, %rsp
   174e2:      	retq
   174e3:      	int3
   174e4:      	int3
   174e5:      	int3
   174e6:      	int3
   174e7:      	int3
   174e8:      	int3
   174e9:      	int3
   174ea:      	int3
   174eb:      	int3
   174ec:      	int3
   174ed:      	int3
   174ee:      	int3
   174ef:      	int3

00000000000174f0 <kernel::segmentation::asm::set_gs::h16f0bc052b251233>:
   174f0:      	subq	$0x2, %rsp
   174f4:      	movw	%di, %ax
   174f7:      	movw	%ax, (%rsp)
   174fb:      	movw	%ax, %gs
   174fe:      	addq	$0x2, %rsp
   17502:      	retq
   17503:      	int3
   17504:      	int3
   17505:      	int3
   17506:      	int3
   17507:      	int3
   17508:      	int3
   17509:      	int3
   1750a:      	int3
   1750b:      	int3
   1750c:      	int3
   1750d:      	int3
   1750e:      	int3
   1750f:      	int3

0000000000017510 <spin::once::Once<T>::call_once::h2591b898abe5cd00>:
   17510:      	subq	$0x128, %rsp            # imm = 0x128
   17517:      	movq	%rdi, 0x8(%rsp)
   1751c:      	movq	%rdi, 0x110(%rsp)
   17524:      	movb	$0x0, 0x10f(%rsp)
   1752c:      	movb	$0x1, 0x10f(%rsp)
   17534:      	movb	$0x4, 0x26(%rsp)
   17539:      	movb	0x26(%rsp), %al
   1753d:      	movzbl	%al, %esi
   17540:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   17545:      	movq	%rax, 0x18(%rsp)
   1754a:      	cmpq	$0x0, 0x18(%rsp)
   17550:      	je	0x17579 <spin::once::Once<T>::call_once::h2591b898abe5cd00+0x69>
   17552:      	movq	0x18(%rsp), %rax
   17557:      	movq	%rax, (%rsp)
   1755b:      	subq	$0x3, %rax
   1755f:      	ja	0x17661 <spin::once::Once<T>::call_once::h2591b898abe5cd00+0x151>
   17565:      	movq	(%rsp), %rax
   17569:      	leaq	-0x8ba0(%rip), %rcx     # 0xe9d0 <kernel::segmentation::TSS::hc5260996ab7ae2b7>
   17570:      	movslq	(%rcx,%rax,4), %rax
   17574:      	addq	%rcx, %rax
   17577:      	jmpq	*%rax
   17579:      	movq	0x8(%rsp), %rdi
   1757e:      	movb	$0x4, 0x27(%rsp)
   17583:      	movb	0x27(%rsp), %al
   17587:      	xorl	%ecx, %ecx
   17589:      	movzbl	%al, %ecx
   1758c:      	xorl	%eax, %eax
   1758e:      	movl	%eax, %esi
   17590:      	movl	$0x1, %edx
   17595:      	callq	0x170d0 <core::sync::atomic::AtomicUsize::compare_and_swap::hb3cd6f31c8c7111b>
   1759a:      	movq	%rax, 0x18(%rsp)
   1759f:      	cmpq	$0x0, 0x18(%rsp)
   175a5:      	jne	0x17552 <spin::once::Once<T>::call_once::h2591b898abe5cd00+0x42>
   175a7:      	movq	0x8(%rsp), %rax
   175ac:      	movq	%rax, 0x28(%rsp)
   175b1:      	movb	$0x1, 0x30(%rsp)
   175b6:      	movb	$0x0, 0x10f(%rsp)
   175be:      	movq	0x239bb(%rip), %rax     # 0x3af80 <zlgk82z0l71lvh9+0x3af80>
   175c5:      	leaq	0xa4(%rsp), %rdi
   175cd:      	callq	*%rax
   175cf:      	leaq	0x38(%rsp), %rdi
   175d4:      	addq	$0x4, %rdi
   175d8:      	movl	$0x1a, %ecx
   175dd:      	leaq	0xa4(%rsp), %rsi
   175e5:      	rep		movsl	(%rsi), %es:(%rdi)
   175e7:      	movq	0x8(%rsp), %rdi
   175ec:      	movl	$0x1, 0x38(%rsp)
   175f4:      	addq	$0x8, %rdi
   175f8:      	movq	%rdi, 0x120(%rsp)
   17600:      	movl	$0x1b, %ecx
   17605:      	leaq	0x38(%rsp), %rsi
   1760a:      	rep		movsl	(%rsi), %es:(%rdi)
   1760c:      	movq	0x8(%rsp), %rdi
   17611:      	movb	$0x0, 0x30(%rsp)
   17616:      	movq	$0x2, 0x18(%rsp)
   1761f:      	movq	0x18(%rsp), %rsi
   17624:      	movb	$0x4, 0x10d(%rsp)
   1762c:      	movb	0x10d(%rsp), %al
   17633:      	movzbl	%al, %edx
   17636:      	callq	0x17200 <core::sync::atomic::AtomicUsize::store::h4507ff43355492d3>
   1763b:      	movq	0x8(%rsp), %rdi
   17640:      	movq	0x239f1(%rip), %rax     # 0x3b038 <zlgk82z0l71lvh9+0x3b038>
   17647:      	callq	*%rax
   17649:      	movq	%rax, 0x10(%rsp)
   1764e:      	movq	0x23933(%rip), %rax     # 0x3af88 <zlgk82z0l71lvh9+0x3af88>
   17655:      	leaq	0x28(%rsp), %rdi
   1765a:      	callq	*%rax
   1765c:      	jmp	0x176e2 <spin::once::Once<T>::call_once::h2591b898abe5cd00+0x1d2>
   17661:      	callq	0x17c30 <core::hint::unreachable_unchecked::h43fe988464971cd7>
   17666:      	ud2
   17668:      	leaq	-0x8c6f(%rip), %rdi     # 0xea00 <kernel::segmentation::TSS::hc5260996ab7ae2b7+0x30>
   1766f:      	leaq	0x1beda(%rip), %rdx     # 0x33550 <zlgk82z0l71lvh9+0x33550>
   17676:      	movq	0x23853(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1767d:      	movl	$0x28, %esi
   17682:      	callq	*%rax
   17684:      	ud2
   17686:      	callq	0x17230 <core::sync::atomic::spin_loop_hint::h84230f3fcf5d8291>
   1768b:      	movq	0x8(%rsp), %rdi
   17690:      	movb	$0x4, 0x10e(%rsp)
   17698:      	movb	0x10e(%rsp), %al
   1769f:      	movzbl	%al, %esi
   176a2:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   176a7:      	movq	%rax, 0x18(%rsp)
   176ac:      	jmp	0x17552 <spin::once::Once<T>::call_once::h2591b898abe5cd00+0x42>
   176b1:      	leaq	-0x8c2d(%rip), %rdi     # 0xea8b <kernel::segmentation::TSS::hc5260996ab7ae2b7+0xbb>
   176b8:      	leaq	0x1bea9(%rip), %rdx     # 0x33568 <zlgk82z0l71lvh9+0x33568>
   176bf:      	movq	0x2380a(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   176c6:      	movl	$0x11, %esi
   176cb:      	callq	*%rax
   176cd:      	ud2
   176cf:      	movq	0x8(%rsp), %rdi
   176d4:      	movq	0x2395d(%rip), %rax     # 0x3b038 <zlgk82z0l71lvh9+0x3b038>
   176db:      	callq	*%rax
   176dd:      	movq	%rax, 0x10(%rsp)
   176e2:      	testb	$0x1, 0x10f(%rsp)
   176ea:      	jne	0x176f9 <spin::once::Once<T>::call_once::h2591b898abe5cd00+0x1e9>
   176ec:      	movq	0x10(%rsp), %rax
   176f1:      	addq	$0x128, %rsp            # imm = 0x128
   176f8:      	retq
   176f9:      	jmp	0x176ec <spin::once::Once<T>::call_once::h2591b898abe5cd00+0x1dc>
   176fb:      	int3
   176fc:      	int3
   176fd:      	int3
   176fe:      	int3
   176ff:      	int3

0000000000017700 <spin::once::Once<T>::call_once::h5baadd8fabe90bf0>:
   17700:      	subq	$0x1000, %rsp           # imm = 0x1000
   17707:      	movq	$0x0, (%rsp)
   1770f:      	subq	$0x1000, %rsp           # imm = 0x1000
   17716:      	movq	$0x0, (%rsp)
   1771e:      	subq	$0x78, %rsp
   17722:      	movq	%rdi, 0x10(%rsp)
   17727:      	movq	%rdi, 0x2060(%rsp)
   1772f:      	movb	$0x0, 0x205f(%rsp)
   17737:      	movb	$0x1, 0x205f(%rsp)
   1773f:      	addq	$0x1010, %rdi           # imm = 0x1010
   17746:      	movb	$0x4, 0x2e(%rsp)
   1774b:      	movb	0x2e(%rsp), %al
   1774f:      	movzbl	%al, %esi
   17752:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   17757:      	movq	%rax, 0x20(%rsp)
   1775c:      	cmpq	$0x0, 0x20(%rsp)
   17762:      	je	0x1778d <spin::once::Once<T>::call_once::h5baadd8fabe90bf0+0x8d>
   17764:      	movq	0x20(%rsp), %rax
   17769:      	movq	%rax, 0x8(%rsp)
   1776e:      	subq	$0x3, %rax
   17772:      	ja	0x17890 <spin::once::Once<T>::call_once::h5baadd8fabe90bf0+0x190>
   17778:      	movq	0x8(%rsp), %rax
   1777d:      	leaq	-0x8da4(%rip), %rcx     # 0xe9e0 <kernel::segmentation::TSS::hc5260996ab7ae2b7+0x10>
   17784:      	movslq	(%rcx,%rax,4), %rax
   17788:      	addq	%rcx, %rax
   1778b:      	jmpq	*%rax
   1778d:      	movq	0x10(%rsp), %rdi
   17792:      	addq	$0x1010, %rdi           # imm = 0x1010
   17799:      	movb	$0x4, 0x2f(%rsp)
   1779e:      	movb	0x2f(%rsp), %al
   177a2:      	xorl	%ecx, %ecx
   177a4:      	movzbl	%al, %ecx
   177a7:      	xorl	%eax, %eax
   177a9:      	movl	%eax, %esi
   177ab:      	movl	$0x1, %edx
   177b0:      	callq	0x170d0 <core::sync::atomic::AtomicUsize::compare_and_swap::hb3cd6f31c8c7111b>
   177b5:      	movq	%rax, 0x20(%rsp)
   177ba:      	cmpq	$0x0, 0x20(%rsp)
   177c0:      	jne	0x17764 <spin::once::Once<T>::call_once::h5baadd8fabe90bf0+0x64>
   177c2:      	movq	0x10(%rsp), %rax
   177c7:      	addq	$0x1010, %rax           # imm = 0x1010
   177cd:      	movq	%rax, 0x30(%rsp)
   177d2:      	movb	$0x1, 0x38(%rsp)
   177d7:      	movb	$0x0, 0x205f(%rsp)
   177df:      	movq	0x23792(%rip), %rax     # 0x3af78 <zlgk82z0l71lvh9+0x3af78>
   177e6:      	leaq	0x1050(%rsp), %rdi
   177ee:      	callq	*%rax
   177f0:      	leaq	0x40(%rsp), %rdi
   177f5:      	addq	$0x10, %rdi
   177f9:      	leaq	0x1050(%rsp), %rsi
   17801:      	movl	$0x1000, %edx           # imm = 0x1000
   17806:      	movq	0x237e3(%rip), %rax     # 0x3aff0 <zlgk82z0l71lvh9+0x3aff0>
   1780d:      	callq	*%rax
   1780f:      	movq	0x10(%rsp), %rdi
   17814:      	movb	$0x1, 0x40(%rsp)
   17819:      	movq	%rdi, 0x2070(%rsp)
   17821:      	leaq	0x40(%rsp), %rsi
   17826:      	movl	$0x1010, %edx           # imm = 0x1010
   1782b:      	movq	0x237be(%rip), %rax     # 0x3aff0 <zlgk82z0l71lvh9+0x3aff0>
   17832:      	callq	*%rax
   17834:      	movq	0x10(%rsp), %rdi
   17839:      	movb	$0x0, 0x38(%rsp)
   1783e:      	movq	$0x2, 0x20(%rsp)
   17847:      	addq	$0x1010, %rdi           # imm = 0x1010
   1784e:      	movq	0x20(%rsp), %rsi
   17853:      	movb	$0x4, 0x205d(%rsp)
   1785b:      	movb	0x205d(%rsp), %al
   17862:      	movzbl	%al, %edx
   17865:      	callq	0x17200 <core::sync::atomic::AtomicUsize::store::h4507ff43355492d3>
   1786a:      	movq	0x10(%rsp), %rdi
   1786f:      	movq	0x237d2(%rip), %rax     # 0x3b048 <zlgk82z0l71lvh9+0x3b048>
   17876:      	callq	*%rax
   17878:      	movq	%rax, 0x18(%rsp)
   1787d:      	movq	0x23704(%rip), %rax     # 0x3af88 <zlgk82z0l71lvh9+0x3af88>
   17884:      	leaq	0x30(%rsp), %rdi
   17889:      	callq	*%rax
   1788b:      	jmp	0x17918 <spin::once::Once<T>::call_once::h5baadd8fabe90bf0+0x218>
   17890:      	callq	0x17c30 <core::hint::unreachable_unchecked::h43fe988464971cd7>
   17895:      	ud2
   17897:      	leaq	-0x8e9e(%rip), %rdi     # 0xea00 <kernel::segmentation::TSS::hc5260996ab7ae2b7+0x30>
   1789e:      	leaq	0x1bcab(%rip), %rdx     # 0x33550 <zlgk82z0l71lvh9+0x33550>
   178a5:      	movq	0x23624(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   178ac:      	movl	$0x28, %esi
   178b1:      	callq	*%rax
   178b3:      	ud2
   178b5:      	callq	0x17230 <core::sync::atomic::spin_loop_hint::h84230f3fcf5d8291>
   178ba:      	movq	0x10(%rsp), %rdi
   178bf:      	addq	$0x1010, %rdi           # imm = 0x1010
   178c6:      	movb	$0x4, 0x205e(%rsp)
   178ce:      	movb	0x205e(%rsp), %al
   178d5:      	movzbl	%al, %esi
   178d8:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   178dd:      	movq	%rax, 0x20(%rsp)
   178e2:      	jmp	0x17764 <spin::once::Once<T>::call_once::h5baadd8fabe90bf0+0x64>
   178e7:      	leaq	-0x8e63(%rip), %rdi     # 0xea8b <kernel::segmentation::TSS::hc5260996ab7ae2b7+0xbb>
   178ee:      	leaq	0x1bc73(%rip), %rdx     # 0x33568 <zlgk82z0l71lvh9+0x33568>
   178f5:      	movq	0x235d4(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   178fc:      	movl	$0x11, %esi
   17901:      	callq	*%rax
   17903:      	ud2
   17905:      	movq	0x10(%rsp), %rdi
   1790a:      	movq	0x23737(%rip), %rax     # 0x3b048 <zlgk82z0l71lvh9+0x3b048>
   17911:      	callq	*%rax
   17913:      	movq	%rax, 0x18(%rsp)
   17918:      	testb	$0x1, 0x205f(%rsp)
   17920:      	jne	0x1792f <spin::once::Once<T>::call_once::h5baadd8fabe90bf0+0x22f>
   17922:      	movq	0x18(%rsp), %rax
   17927:      	addq	$0x2078, %rsp           # imm = 0x2078
   1792e:      	retq
   1792f:      	jmp	0x17922 <spin::once::Once<T>::call_once::h5baadd8fabe90bf0+0x222>
   17931:      	int3
   17932:      	int3
   17933:      	int3
   17934:      	int3
   17935:      	int3
   17936:      	int3
   17937:      	int3
   17938:      	int3
   17939:      	int3
   1793a:      	int3
   1793b:      	int3
   1793c:      	int3
   1793d:      	int3
   1793e:      	int3
   1793f:      	int3

0000000000017940 <spin::once::Once<T>::call_once::hdbbc121c34730018>:
   17940:      	subq	$0xe8, %rsp
   17947:      	movq	%rdi, 0x10(%rsp)
   1794c:      	movq	%rdi, 0xd0(%rsp)
   17954:      	movb	$0x0, 0xcf(%rsp)
   1795c:      	movb	$0x1, 0xcf(%rsp)
   17964:      	movb	$0x4, 0x2e(%rsp)
   17969:      	movb	0x2e(%rsp), %al
   1796d:      	movzbl	%al, %esi
   17970:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   17975:      	movq	%rax, 0x20(%rsp)
   1797a:      	cmpq	$0x0, 0x20(%rsp)
   17980:      	je	0x179ab <spin::once::Once<T>::call_once::hdbbc121c34730018+0x6b>
   17982:      	movq	0x20(%rsp), %rax
   17987:      	movq	%rax, 0x8(%rsp)
   1798c:      	subq	$0x3, %rax
   17990:      	ja	0x17aa0 <spin::once::Once<T>::call_once::hdbbc121c34730018+0x160>
   17996:      	movq	0x8(%rsp), %rax
   1799b:      	leaq	-0x8fb2(%rip), %rcx     # 0xe9f0 <kernel::segmentation::TSS::hc5260996ab7ae2b7+0x20>
   179a2:      	movslq	(%rcx,%rax,4), %rax
   179a6:      	addq	%rcx, %rax
   179a9:      	jmpq	*%rax
   179ab:      	movq	0x10(%rsp), %rdi
   179b0:      	movb	$0x4, 0x2f(%rsp)
   179b5:      	movb	0x2f(%rsp), %al
   179b9:      	xorl	%ecx, %ecx
   179bb:      	movzbl	%al, %ecx
   179be:      	xorl	%eax, %eax
   179c0:      	movl	%eax, %esi
   179c2:      	movl	$0x1, %edx
   179c7:      	callq	0x170d0 <core::sync::atomic::AtomicUsize::compare_and_swap::hb3cd6f31c8c7111b>
   179cc:      	movq	%rax, 0x20(%rsp)
   179d1:      	cmpq	$0x0, 0x20(%rsp)
   179d7:      	jne	0x17982 <spin::once::Once<T>::call_once::hdbbc121c34730018+0x42>
   179d9:      	movq	0x10(%rsp), %rax
   179de:      	movq	%rax, 0x30(%rsp)
   179e3:      	movb	$0x1, 0x38(%rsp)
   179e8:      	movb	$0x0, 0xcf(%rsp)
   179f0:      	movq	0x23579(%rip), %rax     # 0x3af70 <zlgk82z0l71lvh9+0x3af70>
   179f7:      	leaq	0x88(%rsp), %rdi
   179ff:      	callq	*%rax
   17a01:      	leaq	0x42(%rsp), %rdi
   17a06:      	addq	$0x2, %rdi
   17a0a:      	leaq	0x88(%rsp), %rsi
   17a12:      	movl	$0x44, %edx
   17a17:      	movq	0x235d2(%rip), %rax     # 0x3aff0 <zlgk82z0l71lvh9+0x3aff0>
   17a1e:      	callq	*%rax
   17a20:      	movq	0x10(%rsp), %rdi
   17a25:      	movw	$0x1, 0x42(%rsp)
   17a2c:      	addq	$0x8, %rdi
   17a30:      	movq	%rdi, 0xe0(%rsp)
   17a38:      	leaq	0x42(%rsp), %rsi
   17a3d:      	movl	$0x46, %edx
   17a42:      	movq	0x235a7(%rip), %rax     # 0x3aff0 <zlgk82z0l71lvh9+0x3aff0>
   17a49:      	callq	*%rax
   17a4b:      	movq	0x10(%rsp), %rdi
   17a50:      	movb	$0x0, 0x38(%rsp)
   17a55:      	movq	$0x2, 0x20(%rsp)
   17a5e:      	movq	0x20(%rsp), %rsi
   17a63:      	movb	$0x4, 0xcd(%rsp)
   17a6b:      	movb	0xcd(%rsp), %al
   17a72:      	movzbl	%al, %edx
   17a75:      	callq	0x17200 <core::sync::atomic::AtomicUsize::store::h4507ff43355492d3>
   17a7a:      	movq	0x10(%rsp), %rdi
   17a7f:      	movq	0x235d2(%rip), %rax     # 0x3b058 <zlgk82z0l71lvh9+0x3b058>
   17a86:      	callq	*%rax
   17a88:      	movq	%rax, 0x18(%rsp)
   17a8d:      	movq	0x234f4(%rip), %rax     # 0x3af88 <zlgk82z0l71lvh9+0x3af88>
   17a94:      	leaq	0x30(%rsp), %rdi
   17a99:      	callq	*%rax
   17a9b:      	jmp	0x17b21 <spin::once::Once<T>::call_once::hdbbc121c34730018+0x1e1>
   17aa0:      	callq	0x17c30 <core::hint::unreachable_unchecked::h43fe988464971cd7>
   17aa5:      	ud2
   17aa7:      	leaq	-0x90ae(%rip), %rdi     # 0xea00 <kernel::segmentation::TSS::hc5260996ab7ae2b7+0x30>
   17aae:      	leaq	0x1ba9b(%rip), %rdx     # 0x33550 <zlgk82z0l71lvh9+0x33550>
   17ab5:      	movq	0x23414(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   17abc:      	movl	$0x28, %esi
   17ac1:      	callq	*%rax
   17ac3:      	ud2
   17ac5:      	callq	0x17230 <core::sync::atomic::spin_loop_hint::h84230f3fcf5d8291>
   17aca:      	movq	0x10(%rsp), %rdi
   17acf:      	movb	$0x4, 0xce(%rsp)
   17ad7:      	movb	0xce(%rsp), %al
   17ade:      	movzbl	%al, %esi
   17ae1:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   17ae6:      	movq	%rax, 0x20(%rsp)
   17aeb:      	jmp	0x17982 <spin::once::Once<T>::call_once::hdbbc121c34730018+0x42>
   17af0:      	leaq	-0x906c(%rip), %rdi     # 0xea8b <kernel::segmentation::TSS::hc5260996ab7ae2b7+0xbb>
   17af7:      	leaq	0x1ba6a(%rip), %rdx     # 0x33568 <zlgk82z0l71lvh9+0x33568>
   17afe:      	movq	0x233cb(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   17b05:      	movl	$0x11, %esi
   17b0a:      	callq	*%rax
   17b0c:      	ud2
   17b0e:      	movq	0x10(%rsp), %rdi
   17b13:      	movq	0x2353e(%rip), %rax     # 0x3b058 <zlgk82z0l71lvh9+0x3b058>
   17b1a:      	callq	*%rax
   17b1c:      	movq	%rax, 0x18(%rsp)
   17b21:      	testb	$0x1, 0xcf(%rsp)
   17b29:      	jne	0x17b38 <spin::once::Once<T>::call_once::hdbbc121c34730018+0x1f8>
   17b2b:      	movq	0x18(%rsp), %rax
   17b30:      	addq	$0xe8, %rsp
   17b37:      	retq
   17b38:      	jmp	0x17b2b <spin::once::Once<T>::call_once::hdbbc121c34730018+0x1eb>
   17b3a:      	int3
   17b3b:      	int3
   17b3c:      	int3
   17b3d:      	int3
   17b3e:      	int3
   17b3f:      	int3

0000000000017b40 <spin::once::Once<T>::force_get::h44303ca0fbd576cc>:
   17b40:      	subq	$0x28, %rsp
   17b44:      	movq	%rdi, 0x10(%rsp)
   17b49:      	addq	$0x8, %rdi
   17b4d:      	movq	%rdi, 0x20(%rsp)
   17b52:      	movq	0x2334f(%rip), %rax     # 0x3aea8 <zlgk82z0l71lvh9+0x3aea8>
   17b59:      	callq	*%rax
   17b5b:      	movq	%rax, 0x8(%rsp)
   17b60:      	movq	0x8(%rsp), %rdx
   17b65:      	movl	$0x1, %eax
   17b6a:      	xorl	%ecx, %ecx
   17b6c:      	cmpq	$0x0, %rdx
   17b70:      	cmoveq	%rcx, %rax
   17b74:      	cmpq	$0x0, %rax
   17b78:      	jne	0x17b81 <spin::once::Once<T>::force_get::h44303ca0fbd576cc+0x41>
   17b7a:      	callq	0x17c30 <core::hint::unreachable_unchecked::h43fe988464971cd7>
   17b7f:      	ud2
   17b81:      	movq	0x8(%rsp), %rax
   17b86:      	movq	%rax, 0x18(%rsp)
   17b8b:      	addq	$0x28, %rsp
   17b8f:      	retq

0000000000017b90 <spin::once::Once<T>::force_get::h6b765a31bfde288f>:
   17b90:      	subq	$0x28, %rsp
   17b94:      	movq	%rdi, 0x10(%rsp)
   17b99:      	addq	$0x8, %rdi
   17b9d:      	movq	%rdi, 0x20(%rsp)
   17ba2:      	movq	0x23307(%rip), %rax     # 0x3aeb0 <zlgk82z0l71lvh9+0x3aeb0>
   17ba9:      	callq	*%rax
   17bab:      	movq	%rax, 0x8(%rsp)
   17bb0:      	movq	0x8(%rsp), %rdx
   17bb5:      	movl	$0x1, %eax
   17bba:      	xorl	%ecx, %ecx
   17bbc:      	cmpq	$0x0, %rdx
   17bc0:      	cmoveq	%rcx, %rax
   17bc4:      	cmpq	$0x0, %rax
   17bc8:      	jne	0x17bd1 <spin::once::Once<T>::force_get::h6b765a31bfde288f+0x41>
   17bca:      	callq	0x17c30 <core::hint::unreachable_unchecked::h43fe988464971cd7>
   17bcf:      	ud2
   17bd1:      	movq	0x8(%rsp), %rax
   17bd6:      	movq	%rax, 0x18(%rsp)
   17bdb:      	addq	$0x28, %rsp
   17bdf:      	retq

0000000000017be0 <spin::once::Once<T>::force_get::h9da2d5b4c528f0a4>:
   17be0:      	subq	$0x28, %rsp
   17be4:      	movq	%rdi, 0x10(%rsp)
   17be9:      	movq	%rdi, 0x20(%rsp)
   17bee:      	movq	0x232ab(%rip), %rax     # 0x3aea0 <zlgk82z0l71lvh9+0x3aea0>
   17bf5:      	callq	*%rax
   17bf7:      	movq	%rax, 0x8(%rsp)
   17bfc:      	movq	0x8(%rsp), %rdx
   17c01:      	movl	$0x1, %eax
   17c06:      	xorl	%ecx, %ecx
   17c08:      	cmpq	$0x0, %rdx
   17c0c:      	cmoveq	%rcx, %rax
   17c10:      	cmpq	$0x0, %rax
   17c14:      	jne	0x17c1d <spin::once::Once<T>::force_get::h9da2d5b4c528f0a4+0x3d>
   17c16:      	callq	0x17c30 <core::hint::unreachable_unchecked::h43fe988464971cd7>
   17c1b:      	ud2
   17c1d:      	movq	0x8(%rsp), %rax
   17c22:      	movq	%rax, 0x18(%rsp)
   17c27:      	addq	$0x28, %rsp
   17c2b:      	retq
   17c2c:      	int3
   17c2d:      	int3
   17c2e:      	int3
   17c2f:      	int3

0000000000017c30 <core::hint::unreachable_unchecked::h43fe988464971cd7>:
   17c30:      	pushq	%rax
   17c31:      	movb	$0x1, %al
   17c33:      	testb	$0x1, %al
   17c35:      	jne	0x17c3b <core::hint::unreachable_unchecked::h43fe988464971cd7+0xb>
   17c37:      	jmp	0x17c39 <core::hint::unreachable_unchecked::h43fe988464971cd7+0x9>
   17c39:      	ud2
   17c3b:      	leaq	-0x91a6(%rip), %rdi     # 0xea9c <kernel::segmentation::TSS::hc5260996ab7ae2b7+0xcc>
   17c42:      	movq	0x23527(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   17c49:      	movl	$0x52, %esi
   17c4e:      	callq	*%rax
   17c50:      	ud2
   17c52:      	int3
   17c53:      	int3
   17c54:      	int3
   17c55:      	int3
   17c56:      	int3
   17c57:      	int3
   17c58:      	int3
   17c59:      	int3
   17c5a:      	int3
   17c5b:      	int3
   17c5c:      	int3
   17c5d:      	int3
   17c5e:      	int3
   17c5f:      	int3

0000000000017c60 <kernel::interrupts::init_idt::hbefbd16ad242b8d4>:
   17c60:      	subq	$0x18, %rsp
   17c64:      	movq	0x2356d(%rip), %rdi     # 0x3b1d8 <zlgk82z0l71lvh9+0x3b1d8>
   17c6b:      	movq	0x2356e(%rip), %rax     # 0x3b1e0 <zlgk82z0l71lvh9+0x3b1e0>
   17c72:      	callq	*%rax
   17c74:      	movq	%rax, %rsi
   17c77:      	movq	0x233f2(%rip), %rax     # 0x3b070 <zlgk82z0l71lvh9+0x3b070>
   17c7e:      	leaq	0xe(%rsp), %rdi
   17c83:      	callq	*%rax
   17c85:      	movq	0x233ec(%rip), %rax     # 0x3b078 <zlgk82z0l71lvh9+0x3b078>
   17c8c:      	leaq	0xe(%rsp), %rdi
   17c91:      	callq	*%rax
   17c93:      	movq	0x23536(%rip), %rax     # 0x3b1d0 <zlgk82z0l71lvh9+0x3b1d0>
   17c9a:      	callq	*%rax
   17c9c:      	addq	$0x18, %rsp
   17ca0:      	retq
   17ca1:      	int3
   17ca2:      	int3
   17ca3:      	int3
   17ca4:      	int3
   17ca5:      	int3
   17ca6:      	int3
   17ca7:      	int3
   17ca8:      	int3
   17ca9:      	int3
   17caa:      	int3
   17cab:      	int3
   17cac:      	int3
   17cad:      	int3
   17cae:      	int3
   17caf:      	int3

0000000000017cb0 <<kernel::interrupts::IDT as core::ops::deref::Deref>::deref::h559566995694df75>:
   17cb0:      	subq	$0x18, %rsp
   17cb4:      	movq	%rdi, 0x8(%rsp)
   17cb9:      	leaq	0x262f0(%rip), %rax     # 0x3dfb0 <<kernel::interrupts::IDT as core::ops::deref::Deref>::deref::__stability::LAZY::h6a301228d51fe6af>
   17cc0:      	movq	%rax, 0x10(%rsp)
   17cc5:      	leaq	0x262e4(%rip), %rdi     # 0x3dfb0 <<kernel::interrupts::IDT as core::ops::deref::Deref>::deref::__stability::LAZY::h6a301228d51fe6af>
   17ccc:      	movq	0x2336d(%rip), %rax     # 0x3b040 <zlgk82z0l71lvh9+0x3b040>
   17cd3:      	callq	*%rax
   17cd5:      	addq	$0x18, %rsp
   17cd9:      	retq
   17cda:      	int3
   17cdb:      	int3
   17cdc:      	int3
   17cdd:      	int3
   17cde:      	int3
   17cdf:      	int3

0000000000017ce0 <kernel::interrupts::asm::enable_interrupts::h2ab58651a432598f>:
   17ce0:      	sti
   17ce1:      	retq
   17ce2:      	int3
   17ce3:      	int3
   17ce4:      	int3
   17ce5:      	int3
   17ce6:      	int3
   17ce7:      	int3
   17ce8:      	int3
   17ce9:      	int3
   17cea:      	int3
   17ceb:      	int3
   17cec:      	int3
   17ced:      	int3
   17cee:      	int3
   17cef:      	int3

0000000000017cf0 <kernel::framebuffer::init_kernel_logging::{{closure}}::hb36f04999143a69b>:
   17cf0:      	subq	$0x38, %rsp
   17cf4:      	movq	%rsi, %rcx
   17cf7:      	movq	%rdi, %rax
   17cfa:      	movq	%rax, (%rsp)
   17cfe:      	movq	(%rcx), %rsi
   17d01:      	movq	0x8(%rcx), %rdx
   17d05:      	addq	$0x10, %rcx
   17d09:      	movq	0x28(%rcx), %rax
   17d0d:      	movq	%rax, 0x30(%rsp)
   17d12:      	movq	0x20(%rcx), %rax
   17d16:      	movq	%rax, 0x28(%rsp)
   17d1b:      	movq	0x18(%rcx), %rax
   17d1f:      	movq	%rax, 0x20(%rsp)
   17d24:      	movq	0x10(%rcx), %rax
   17d28:      	movq	%rax, 0x18(%rsp)
   17d2d:      	movq	(%rcx), %rax
   17d30:      	movq	0x8(%rcx), %rcx
   17d34:      	movq	%rcx, 0x10(%rsp)
   17d39:      	movq	%rax, 0x8(%rsp)
   17d3e:      	xorl	%eax, %eax
   17d40:      	movq	0x234a1(%rip), %rax     # 0x3b1e8 <zlgk82z0l71lvh9+0x3b1e8>
   17d47:      	leaq	0x8(%rsp), %rcx
   17d4c:      	movl	$0x1, %r8d
   17d52:      	xorl	%r9d, %r9d
   17d55:      	callq	*%rax
   17d57:      	movq	(%rsp), %rax
   17d5b:      	addq	$0x38, %rsp
   17d5f:      	retq

0000000000017d60 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::h229bcaf8503748a6>:
   17d60:      	subq	$0x38, %rsp
   17d64:      	movq	%rdi, 0x8(%rsp)
   17d69:      	movq	%rdi, 0x18(%rsp)
   17d6e:      	movq	%rsi, 0x20(%rsp)
   17d73:      	movq	%rdi, 0x28(%rsp)
   17d78:      	movq	%rdi, 0x30(%rsp)
   17d7d:      	movq	%rsi, %rax
   17d80:      	subq	$0x1, %rax
   17d84:      	movq	%rax, 0x10(%rsp)
   17d89:      	cmpq	$0x1, %rsi
   17d8d:      	setb	%al
   17d90:      	testb	$0x1, %al
   17d92:      	jne	0x17db2 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::h229bcaf8503748a6+0x52>
   17d94:      	movq	0x10(%rsp), %rcx
   17d99:      	movq	0x8(%rsp), %rax
   17d9e:      	andq	%rcx, %rax
   17da1:      	cmpq	$0x0, %rax
   17da5:      	sete	%al
   17da8:      	andb	$0x1, %al
   17daa:      	movzbl	%al, %eax
   17dad:      	addq	$0x38, %rsp
   17db1:      	retq
   17db2:      	leaq	-0x9249(%rip), %rdi     # 0xeb70 <str.0>
   17db9:      	leaq	0x1b7c0(%rip), %rdx     # 0x33580 <zlgk82z0l71lvh9+0x33580>
   17dc0:      	movq	0x23109(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   17dc7:      	movl	$0x21, %esi
   17dcc:      	callq	*%rax
   17dce:      	ud2

0000000000017dd0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h2fcdfb0c0b6389ca>:
   17dd0:      	subq	$0x18, %rsp
   17dd4:      	movq	%rdi, (%rsp)
   17dd8:      	movq	%rdi, 0x8(%rsp)
   17ddd:      	movq	%rdi, 0x10(%rsp)
   17de2:      	cmpq	$0x0, %rdi
   17de6:      	sete	%al
   17de9:      	andb	$0x1, %al
   17deb:      	movzbl	%al, %eax
   17dee:      	addq	$0x18, %rsp
   17df2:      	retq
   17df3:      	int3
   17df4:      	int3
   17df5:      	int3
   17df6:      	int3
   17df7:      	int3
   17df8:      	int3
   17df9:      	int3
   17dfa:      	int3
   17dfb:      	int3
   17dfc:      	int3
   17dfd:      	int3
   17dfe:      	int3
   17dff:      	int3

0000000000017e00 <divide_by_zero_secondary_handler>:
   17e00:      	subq	$0x328, %rsp            # imm = 0x328
   17e07:      	movq	%rdi, 0x10(%rsp)
   17e0c:      	movq	%rsi, 0x18(%rsp)
   17e11:      	movq	$0x1, 0x20(%rsp)
   17e1a:      	leaq	-0x9a69(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   17e21:      	movq	0x23040(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   17e28:      	leaq	0x20(%rsp), %rdi
   17e2d:      	callq	*%rax
   17e2f:      	testb	$0x1, %al
   17e31:      	jne	0x17e5e <divide_by_zero_secondary_handler+0x5e>
   17e33:      	movq	$0x1, 0x70(%rsp)
   17e3c:      	leaq	-0x9a8b(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   17e43:      	movq	0x2301e(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   17e4a:      	leaq	0x70(%rsp), %rdi
   17e4f:      	callq	*%rax
   17e51:      	testb	$0x1, %al
   17e53:      	jne	0x17f18 <divide_by_zero_secondary_handler+0x118>
   17e59:      	jmp	0x17ee7 <divide_by_zero_secondary_handler+0xe7>
   17e5e:      	movb	$0x0, 0x267(%rsp)
   17e66:      	movb	0x267(%rsp), %al
   17e6d:      	movzbl	%al, %esi
   17e70:      	movq	0x22ff9(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   17e77:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   17e7c:      	movq	%rax, 0x28(%rsp)
   17e81:      	movq	0x22fe0(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   17e88:      	leaq	0x20(%rsp), %rdi
   17e8d:      	leaq	0x28(%rsp), %rsi
   17e92:      	callq	*%rax
   17e94:      	testb	$0x1, %al
   17e96:      	jne	0x17e9a <divide_by_zero_secondary_handler+0x9a>
   17e98:      	jmp	0x17e33 <divide_by_zero_secondary_handler+0x33>
   17e9a:      	leaq	0x1b6f7(%rip), %rsi     # 0x33598 <zlgk82z0l71lvh9+0x33598>
   17ea1:      	leaq	0x30(%rsp), %rdi
   17ea6:      	movl	$0x1, %edx
   17eab:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   17eb0:      	movq	0x20(%rsp), %rsi
   17eb5:      	movq	$0x0, 0x60(%rsp)
   17ebe:      	movq	0x60(%rsp), %r8
   17ec3:      	movq	0x68(%rsp), %r9
   17ec8:      	leaq	0x1b6d9(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   17ecf:      	movq	0x22fa2(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   17ed6:      	leaq	0x30(%rsp), %rdi
   17edb:      	movl	$0x13, %ecx
   17ee0:      	callq	*%rax
   17ee2:      	jmp	0x17e33 <divide_by_zero_secondary_handler+0x33>
   17ee7:      	movq	$0x1, 0x168(%rsp)
   17ef3:      	leaq	-0x9b42(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   17efa:      	movq	0x22f67(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   17f01:      	leaq	0x168(%rsp), %rdi
   17f09:      	callq	*%rax
   17f0b:      	testb	$0x1, %al
   17f0d:      	jne	0x18161 <divide_by_zero_secondary_handler+0x361>
   17f13:      	jmp	0x18159 <divide_by_zero_secondary_handler+0x359>
   17f18:      	movb	$0x0, 0x266(%rsp)
   17f20:      	movb	0x266(%rsp), %al
   17f27:      	movzbl	%al, %esi
   17f2a:      	movq	0x22f3f(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   17f31:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   17f36:      	movq	%rax, 0x78(%rsp)
   17f3b:      	movq	0x22f26(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   17f42:      	leaq	0x70(%rsp), %rdi
   17f47:      	leaq	0x78(%rsp), %rsi
   17f4c:      	callq	*%rax
   17f4e:      	testb	$0x1, %al
   17f50:      	jne	0x17f54 <divide_by_zero_secondary_handler+0x154>
   17f52:      	jmp	0x17ee7 <divide_by_zero_secondary_handler+0xe7>
   17f54:      	leaq	0x10(%rsp), %rcx
   17f59:      	movq	%rcx, 0x300(%rsp)
   17f61:      	movq	%rcx, 0x318(%rsp)
   17f69:      	movq	0x22fe0(%rip), %rax     # 0x3af50 <zlgk82z0l71lvh9+0x3af50>
   17f70:      	movq	%rax, 0x320(%rsp)
   17f78:      	movq	%rcx, 0x308(%rsp)
   17f80:      	movq	%rax, 0x310(%rsp)
   17f88:      	movq	0x308(%rsp), %rcx
   17f90:      	movq	0x310(%rsp), %rax
   17f98:      	movq	%rcx, 0xb0(%rsp)
   17fa0:      	movq	%rax, 0xb8(%rsp)
   17fa8:      	movb	$0x3, 0x137(%rsp)
   17fb0:      	movq	$0x2, 0x138(%rsp)
   17fbc:      	movq	$0x2, 0x148(%rsp)
   17fc8:      	movb	0x137(%rsp), %dil
   17fd0:      	movq	0x138(%rsp), %rsi
   17fd8:      	movq	0x140(%rsp), %rdx
   17fe0:      	movq	0x148(%rsp), %rcx
   17fe8:      	movq	0x150(%rsp), %rax
   17ff0:      	movq	$0x0, 0x2a0(%rsp)
   17ffc:      	movl	$0x20, 0x2ac(%rsp)
   18007:      	movb	%dil, 0x2b3(%rsp)
   1800f:      	movl	$0x4, 0x2b4(%rsp)
   1801a:      	movq	%rsi, 0x2b8(%rsp)
   18022:      	movq	%rdx, 0x2c0(%rsp)
   1802a:      	movq	%rcx, 0x2c8(%rsp)
   18032:      	movq	%rax, 0x2d0(%rsp)
   1803a:      	movq	$0x0, 0x118(%rsp)
   18046:      	movl	$0x20, 0x120(%rsp)
   18051:      	movb	%dil, 0x128(%rsp)
   18059:      	movl	$0x4, 0x124(%rsp)
   18064:      	movq	%rsi, 0xf8(%rsp)
   1806c:      	movq	%rdx, 0x100(%rsp)
   18074:      	movq	%rcx, 0x108(%rsp)
   1807c:      	movq	%rax, 0x110(%rsp)
   18084:      	leaq	0xc0(%rsp), %rax
   1808c:      	movq	0x128(%rsp), %rcx
   18094:      	movq	%rcx, 0x30(%rax)
   18098:      	movq	0x120(%rsp), %rcx
   180a0:      	movq	%rcx, 0x28(%rax)
   180a4:      	movq	0x118(%rsp), %rcx
   180ac:      	movq	%rcx, 0x20(%rax)
   180b0:      	movq	0x110(%rsp), %rcx
   180b8:      	movq	%rcx, 0x18(%rax)
   180bc:      	movq	0x108(%rsp), %rcx
   180c4:      	movq	%rcx, 0x10(%rax)
   180c8:      	movq	0xf8(%rsp), %rcx
   180d0:      	movq	0x100(%rsp), %rdx
   180d8:      	movq	%rdx, 0x8(%rax)
   180dc:      	movq	%rcx, (%rax)
   180df:      	movq	%rsp, %rax
   180e2:      	movq	$0x1, (%rax)
   180e9:      	leaq	0x1b4e8(%rip), %rsi     # 0x335d8 <zlgk82z0l71lvh9+0x335d8>
   180f0:      	leaq	0x80(%rsp), %rdi
   180f8:      	leaq	0xb0(%rsp), %rcx
   18100:      	movl	$0x1, %r8d
   18106:      	leaq	0xc0(%rsp), %r9
   1810e:      	movq	%r8, %rdx
   18111:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   18116:      	movq	0x70(%rsp), %rsi
   1811b:      	movq	$0x0, 0x158(%rsp)
   18127:      	movq	0x158(%rsp), %r8
   1812f:      	movq	0x160(%rsp), %r9
   18137:      	leaq	0x1b46a(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   1813e:      	movq	0x22d33(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   18145:      	leaq	0x80(%rsp), %rdi
   1814d:      	movl	$0x14, %ecx
   18152:      	callq	*%rax
   18154:      	jmp	0x17ee7 <divide_by_zero_secondary_handler+0xe7>
   18159:      	addq	$0x328, %rsp            # imm = 0x328
   18160:      	retq
   18161:      	movb	$0x0, 0x265(%rsp)
   18169:      	movb	0x265(%rsp), %al
   18170:      	movzbl	%al, %esi
   18173:      	movq	0x22cf6(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   1817a:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   1817f:      	movq	%rax, 0x170(%rsp)
   18187:      	movq	0x22cda(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1818e:      	leaq	0x168(%rsp), %rdi
   18196:      	leaq	0x170(%rsp), %rsi
   1819e:      	callq	*%rax
   181a0:      	testb	$0x1, %al
   181a2:      	jne	0x181a6 <divide_by_zero_secondary_handler+0x3a6>
   181a4:      	jmp	0x18159 <divide_by_zero_secondary_handler+0x359>
   181a6:      	leaq	0x18(%rsp), %rcx
   181ab:      	movq	%rcx, 0x2d8(%rsp)
   181b3:      	movq	%rcx, 0x2f0(%rsp)
   181bb:      	movq	0x22d7e(%rip), %rax     # 0x3af40 <zlgk82z0l71lvh9+0x3af40>
   181c2:      	movq	%rax, 0x2f8(%rsp)
   181ca:      	movq	%rcx, 0x2e0(%rsp)
   181d2:      	movq	%rax, 0x2e8(%rsp)
   181da:      	movq	0x2e0(%rsp), %rcx
   181e2:      	movq	0x2e8(%rsp), %rax
   181ea:      	movq	%rcx, 0x1a8(%rsp)
   181f2:      	movq	%rax, 0x1b0(%rsp)
   181fa:      	movb	$0x3, 0x22f(%rsp)
   18202:      	movq	$0x2, 0x230(%rsp)
   1820e:      	movq	$0x2, 0x240(%rsp)
   1821a:      	movb	0x22f(%rsp), %dil
   18222:      	movq	0x230(%rsp), %rsi
   1822a:      	movq	0x238(%rsp), %rdx
   18232:      	movq	0x240(%rsp), %rcx
   1823a:      	movq	0x248(%rsp), %rax
   18242:      	movq	$0x0, 0x268(%rsp)
   1824e:      	movl	$0x20, 0x274(%rsp)
   18259:      	movb	%dil, 0x27b(%rsp)
   18261:      	movl	$0x4, 0x27c(%rsp)
   1826c:      	movq	%rsi, 0x280(%rsp)
   18274:      	movq	%rdx, 0x288(%rsp)
   1827c:      	movq	%rcx, 0x290(%rsp)
   18284:      	movq	%rax, 0x298(%rsp)
   1828c:      	movq	$0x0, 0x210(%rsp)
   18298:      	movl	$0x20, 0x218(%rsp)
   182a3:      	movb	%dil, 0x220(%rsp)
   182ab:      	movl	$0x4, 0x21c(%rsp)
   182b6:      	movq	%rsi, 0x1f0(%rsp)
   182be:      	movq	%rdx, 0x1f8(%rsp)
   182c6:      	movq	%rcx, 0x200(%rsp)
   182ce:      	movq	%rax, 0x208(%rsp)
   182d6:      	leaq	0x1b8(%rsp), %rax
   182de:      	movq	0x220(%rsp), %rcx
   182e6:      	movq	%rcx, 0x30(%rax)
   182ea:      	movq	0x218(%rsp), %rcx
   182f2:      	movq	%rcx, 0x28(%rax)
   182f6:      	movq	0x210(%rsp), %rcx
   182fe:      	movq	%rcx, 0x20(%rax)
   18302:      	movq	0x208(%rsp), %rcx
   1830a:      	movq	%rcx, 0x18(%rax)
   1830e:      	movq	0x200(%rsp), %rcx
   18316:      	movq	%rcx, 0x10(%rax)
   1831a:      	movq	0x1f0(%rsp), %rcx
   18322:      	movq	0x1f8(%rsp), %rdx
   1832a:      	movq	%rdx, 0x8(%rax)
   1832e:      	movq	%rcx, (%rax)
   18331:      	movq	%rsp, %rax
   18334:      	movq	$0x1, (%rax)
   1833b:      	leaq	0x1b2a6(%rip), %rsi     # 0x335e8 <zlgk82z0l71lvh9+0x335e8>
   18342:      	leaq	0x178(%rsp), %rdi
   1834a:      	leaq	0x1a8(%rsp), %rcx
   18352:      	movl	$0x1, %r8d
   18358:      	leaq	0x1b8(%rsp), %r9
   18360:      	movq	%r8, %rdx
   18363:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   18368:      	movq	0x168(%rsp), %rsi
   18370:      	movq	$0x0, 0x250(%rsp)
   1837c:      	movq	0x250(%rsp), %r8
   18384:      	movq	0x258(%rsp), %r9
   1838c:      	leaq	0x1b215(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   18393:      	movq	0x22ade(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   1839a:      	leaq	0x178(%rsp), %rdi
   183a2:      	movl	$0x15, %ecx
   183a7:      	callq	*%rax
   183a9:      	jmp	0x18159 <divide_by_zero_secondary_handler+0x359>
   183ae:      	int3
   183af:      	int3

00000000000183b0 <general_protection_fault_secondary_handler>:
   183b0:      	subq	$0x3b8, %rsp            # imm = 0x3B8
   183b7:      	movq	%rdi, 0x10(%rsp)
   183bc:      	movq	%rsi, 0x18(%rsp)
   183c1:      	movq	%rdx, 0x20(%rsp)
   183c6:      	movq	$0x1, 0x28(%rsp)
   183cf:      	leaq	-0xa01e(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   183d6:      	movq	0x22a8b(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   183dd:      	leaq	0x28(%rsp), %rdi
   183e2:      	callq	*%rax
   183e4:      	testb	$0x1, %al
   183e6:      	jne	0x18413 <general_protection_fault_secondary_handler+0x63>
   183e8:      	movq	$0x1, 0x78(%rsp)
   183f1:      	leaq	-0xa040(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   183f8:      	movq	0x22a69(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   183ff:      	leaq	0x78(%rsp), %rdi
   18404:      	callq	*%rax
   18406:      	testb	$0x1, %al
   18408:      	jne	0x184cd <general_protection_fault_secondary_handler+0x11d>
   1840e:      	jmp	0x1849c <general_protection_fault_secondary_handler+0xec>
   18413:      	movb	$0x0, 0x2cf(%rsp)
   1841b:      	movb	0x2cf(%rsp), %al
   18422:      	movzbl	%al, %esi
   18425:      	movq	0x22a44(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   1842c:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   18431:      	movq	%rax, 0x30(%rsp)
   18436:      	movq	0x22a2b(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1843d:      	leaq	0x28(%rsp), %rdi
   18442:      	leaq	0x30(%rsp), %rsi
   18447:      	callq	*%rax
   18449:      	testb	$0x1, %al
   1844b:      	jne	0x1844f <general_protection_fault_secondary_handler+0x9f>
   1844d:      	jmp	0x183e8 <general_protection_fault_secondary_handler+0x38>
   1844f:      	leaq	0x1b1a2(%rip), %rsi     # 0x335f8 <zlgk82z0l71lvh9+0x335f8>
   18456:      	leaq	0x38(%rsp), %rdi
   1845b:      	movl	$0x1, %edx
   18460:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   18465:      	movq	0x28(%rsp), %rsi
   1846a:      	movq	$0x0, 0x68(%rsp)
   18473:      	movq	0x68(%rsp), %r8
   18478:      	movq	0x70(%rsp), %r9
   1847d:      	leaq	0x1b124(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   18484:      	movq	0x229ed(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   1848b:      	leaq	0x38(%rsp), %rdi
   18490:      	movl	$0x1e, %ecx
   18495:      	callq	*%rax
   18497:      	jmp	0x183e8 <general_protection_fault_secondary_handler+0x38>
   1849c:      	movq	$0x1, 0x170(%rsp)
   184a8:      	leaq	-0xa0f7(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   184af:      	movq	0x229b2(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   184b6:      	leaq	0x170(%rsp), %rdi
   184be:      	callq	*%rax
   184c0:      	testb	$0x1, %al
   184c2:      	jne	0x18745 <general_protection_fault_secondary_handler+0x395>
   184c8:      	jmp	0x18714 <general_protection_fault_secondary_handler+0x364>
   184cd:      	movb	$0x0, 0x2ce(%rsp)
   184d5:      	movb	0x2ce(%rsp), %al
   184dc:      	movzbl	%al, %esi
   184df:      	movq	0x2298a(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   184e6:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   184eb:      	movq	%rax, 0x80(%rsp)
   184f3:      	movq	0x2296e(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   184fa:      	leaq	0x78(%rsp), %rdi
   184ff:      	leaq	0x80(%rsp), %rsi
   18507:      	callq	*%rax
   18509:      	testb	$0x1, %al
   1850b:      	jne	0x1850f <general_protection_fault_secondary_handler+0x15f>
   1850d:      	jmp	0x1849c <general_protection_fault_secondary_handler+0xec>
   1850f:      	leaq	0x10(%rsp), %rcx
   18514:      	movq	%rcx, 0x390(%rsp)
   1851c:      	movq	%rcx, 0x3a8(%rsp)
   18524:      	movq	0x22a25(%rip), %rax     # 0x3af50 <zlgk82z0l71lvh9+0x3af50>
   1852b:      	movq	%rax, 0x3b0(%rsp)
   18533:      	movq	%rcx, 0x398(%rsp)
   1853b:      	movq	%rax, 0x3a0(%rsp)
   18543:      	movq	0x398(%rsp), %rcx
   1854b:      	movq	0x3a0(%rsp), %rax
   18553:      	movq	%rcx, 0xb8(%rsp)
   1855b:      	movq	%rax, 0xc0(%rsp)
   18563:      	movb	$0x3, 0x13f(%rsp)
   1856b:      	movq	$0x2, 0x140(%rsp)
   18577:      	movq	$0x2, 0x150(%rsp)
   18583:      	movb	0x13f(%rsp), %dil
   1858b:      	movq	0x140(%rsp), %rsi
   18593:      	movq	0x148(%rsp), %rdx
   1859b:      	movq	0x150(%rsp), %rcx
   185a3:      	movq	0x158(%rsp), %rax
   185ab:      	movq	$0x0, 0x308(%rsp)
   185b7:      	movl	$0x20, 0x314(%rsp)
   185c2:      	movb	%dil, 0x31b(%rsp)
   185ca:      	movl	$0x4, 0x31c(%rsp)
   185d5:      	movq	%rsi, 0x320(%rsp)
   185dd:      	movq	%rdx, 0x328(%rsp)
   185e5:      	movq	%rcx, 0x330(%rsp)
   185ed:      	movq	%rax, 0x338(%rsp)
   185f5:      	movq	$0x0, 0x120(%rsp)
   18601:      	movl	$0x20, 0x128(%rsp)
   1860c:      	movb	%dil, 0x130(%rsp)
   18614:      	movl	$0x4, 0x12c(%rsp)
   1861f:      	movq	%rsi, 0x100(%rsp)
   18627:      	movq	%rdx, 0x108(%rsp)
   1862f:      	movq	%rcx, 0x110(%rsp)
   18637:      	movq	%rax, 0x118(%rsp)
   1863f:      	leaq	0xc8(%rsp), %rax
   18647:      	movq	0x130(%rsp), %rcx
   1864f:      	movq	%rcx, 0x30(%rax)
   18653:      	movq	0x128(%rsp), %rcx
   1865b:      	movq	%rcx, 0x28(%rax)
   1865f:      	movq	0x120(%rsp), %rcx
   18667:      	movq	%rcx, 0x20(%rax)
   1866b:      	movq	0x118(%rsp), %rcx
   18673:      	movq	%rcx, 0x18(%rax)
   18677:      	movq	0x110(%rsp), %rcx
   1867f:      	movq	%rcx, 0x10(%rax)
   18683:      	movq	0x100(%rsp), %rcx
   1868b:      	movq	0x108(%rsp), %rdx
   18693:      	movq	%rdx, 0x8(%rax)
   18697:      	movq	%rcx, (%rax)
   1869a:      	movq	%rsp, %rax
   1869d:      	movq	$0x1, (%rax)
   186a4:      	leaq	0x1af2d(%rip), %rsi     # 0x335d8 <zlgk82z0l71lvh9+0x335d8>
   186ab:      	leaq	0x88(%rsp), %rdi
   186b3:      	leaq	0xb8(%rsp), %rcx
   186bb:      	movl	$0x1, %r8d
   186c1:      	leaq	0xc8(%rsp), %r9
   186c9:      	movq	%r8, %rdx
   186cc:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   186d1:      	movq	0x78(%rsp), %rsi
   186d6:      	movq	$0x0, 0x160(%rsp)
   186e2:      	movq	0x160(%rsp), %r8
   186ea:      	movq	0x168(%rsp), %r9
   186f2:      	leaq	0x1aeaf(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   186f9:      	movq	0x22778(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   18700:      	leaq	0x88(%rsp), %rdi
   18708:      	movl	$0x1f, %ecx
   1870d:      	callq	*%rax
   1870f:      	jmp	0x1849c <general_protection_fault_secondary_handler+0xec>
   18714:      	movq	$0x1, 0x1d0(%rsp)
   18720:      	leaq	-0xa36f(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   18727:      	movq	0x2273a(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1872e:      	leaq	0x1d0(%rsp), %rdi
   18736:      	callq	*%rax
   18738:      	testb	$0x1, %al
   1873a:      	jne	0x18867 <general_protection_fault_secondary_handler+0x4b7>
   18740:      	jmp	0x18849 <general_protection_fault_secondary_handler+0x499>
   18745:      	movb	$0x0, 0x2cd(%rsp)
   1874d:      	movb	0x2cd(%rsp), %al
   18754:      	movzbl	%al, %esi
   18757:      	movq	0x22712(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   1875e:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   18763:      	movq	%rax, 0x178(%rsp)
   1876b:      	movq	0x226f6(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18772:      	leaq	0x170(%rsp), %rdi
   1877a:      	leaq	0x178(%rsp), %rsi
   18782:      	callq	*%rax
   18784:      	testb	$0x1, %al
   18786:      	jne	0x1878a <general_protection_fault_secondary_handler+0x3da>
   18788:      	jmp	0x18714 <general_protection_fault_secondary_handler+0x364>
   1878a:      	leaq	0x18(%rsp), %rcx
   1878f:      	movq	%rcx, 0x340(%rsp)
   18797:      	movq	%rcx, 0x358(%rsp)
   1879f:      	movq	0x229b2(%rip), %rax     # 0x3b158 <zlgk82z0l71lvh9+0x3b158>
   187a6:      	movq	%rax, 0x360(%rsp)
   187ae:      	movq	%rcx, 0x348(%rsp)
   187b6:      	movq	%rax, 0x350(%rsp)
   187be:      	movq	0x348(%rsp), %rcx
   187c6:      	movq	0x350(%rsp), %rax
   187ce:      	movq	%rcx, 0x1b0(%rsp)
   187d6:      	movq	%rax, 0x1b8(%rsp)
   187de:      	leaq	0x1ae23(%rip), %rsi     # 0x33608 <zlgk82z0l71lvh9+0x33608>
   187e5:      	leaq	0x180(%rsp), %rdi
   187ed:      	leaq	0x1b0(%rsp), %rcx
   187f5:      	movl	$0x1, %r8d
   187fb:      	movq	%r8, %rdx
   187fe:      	callq	0x14cc0 <core::fmt::Arguments::new_v1::h3e37eaae9534818a>
   18803:      	movq	0x170(%rsp), %rsi
   1880b:      	movq	$0x0, 0x1c0(%rsp)
   18817:      	movq	0x1c0(%rsp), %r8
   1881f:      	movq	0x1c8(%rsp), %r9
   18827:      	leaq	0x1ad7a(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   1882e:      	movq	0x22643(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   18835:      	leaq	0x180(%rsp), %rdi
   1883d:      	movl	$0x20, %ecx
   18842:      	callq	*%rax
   18844:      	jmp	0x18714 <general_protection_fault_secondary_handler+0x364>
   18849:      	leaq	-0x9c0f(%rip), %rdi     # 0xec41 <str.0+0xd1>
   18850:      	leaq	0x1adc1(%rip), %rdx     # 0x33618 <zlgk82z0l71lvh9+0x33618>
   18857:      	movq	0x22672(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1885e:      	movl	$0xe, %esi
   18863:      	callq	*%rax
   18865:      	ud2
   18867:      	movb	$0x0, 0x2cc(%rsp)
   1886f:      	movb	0x2cc(%rsp), %al
   18876:      	movzbl	%al, %esi
   18879:      	movq	0x225f0(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   18880:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   18885:      	movq	%rax, 0x1d8(%rsp)
   1888d:      	movq	0x225d4(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18894:      	leaq	0x1d0(%rsp), %rdi
   1889c:      	leaq	0x1d8(%rsp), %rsi
   188a4:      	callq	*%rax
   188a6:      	testb	$0x1, %al
   188a8:      	jne	0x188ac <general_protection_fault_secondary_handler+0x4fc>
   188aa:      	jmp	0x18849 <general_protection_fault_secondary_handler+0x499>
   188ac:      	leaq	0x20(%rsp), %rcx
   188b1:      	movq	%rcx, 0x368(%rsp)
   188b9:      	movq	%rcx, 0x380(%rsp)
   188c1:      	movq	0x22678(%rip), %rax     # 0x3af40 <zlgk82z0l71lvh9+0x3af40>
   188c8:      	movq	%rax, 0x388(%rsp)
   188d0:      	movq	%rcx, 0x370(%rsp)
   188d8:      	movq	%rax, 0x378(%rsp)
   188e0:      	movq	0x370(%rsp), %rcx
   188e8:      	movq	0x378(%rsp), %rax
   188f0:      	movq	%rcx, 0x210(%rsp)
   188f8:      	movq	%rax, 0x218(%rsp)
   18900:      	movb	$0x3, 0x297(%rsp)
   18908:      	movq	$0x2, 0x298(%rsp)
   18914:      	movq	$0x2, 0x2a8(%rsp)
   18920:      	movb	0x297(%rsp), %dil
   18928:      	movq	0x298(%rsp), %rsi
   18930:      	movq	0x2a0(%rsp), %rdx
   18938:      	movq	0x2a8(%rsp), %rcx
   18940:      	movq	0x2b0(%rsp), %rax
   18948:      	movq	$0x0, 0x2d0(%rsp)
   18954:      	movl	$0x20, 0x2dc(%rsp)
   1895f:      	movb	%dil, 0x2e3(%rsp)
   18967:      	movl	$0x4, 0x2e4(%rsp)
   18972:      	movq	%rsi, 0x2e8(%rsp)
   1897a:      	movq	%rdx, 0x2f0(%rsp)
   18982:      	movq	%rcx, 0x2f8(%rsp)
   1898a:      	movq	%rax, 0x300(%rsp)
   18992:      	movq	$0x0, 0x278(%rsp)
   1899e:      	movl	$0x20, 0x280(%rsp)
   189a9:      	movb	%dil, 0x288(%rsp)
   189b1:      	movl	$0x4, 0x284(%rsp)
   189bc:      	movq	%rsi, 0x258(%rsp)
   189c4:      	movq	%rdx, 0x260(%rsp)
   189cc:      	movq	%rcx, 0x268(%rsp)
   189d4:      	movq	%rax, 0x270(%rsp)
   189dc:      	leaq	0x220(%rsp), %rax
   189e4:      	movq	0x288(%rsp), %rcx
   189ec:      	movq	%rcx, 0x30(%rax)
   189f0:      	movq	0x280(%rsp), %rcx
   189f8:      	movq	%rcx, 0x28(%rax)
   189fc:      	movq	0x278(%rsp), %rcx
   18a04:      	movq	%rcx, 0x20(%rax)
   18a08:      	movq	0x270(%rsp), %rcx
   18a10:      	movq	%rcx, 0x18(%rax)
   18a14:      	movq	0x268(%rsp), %rcx
   18a1c:      	movq	%rcx, 0x10(%rax)
   18a20:      	movq	0x258(%rsp), %rcx
   18a28:      	movq	0x260(%rsp), %rdx
   18a30:      	movq	%rdx, 0x8(%rax)
   18a34:      	movq	%rcx, (%rax)
   18a37:      	movq	%rsp, %rax
   18a3a:      	movq	$0x1, (%rax)
   18a41:      	leaq	0x1aba0(%rip), %rsi     # 0x335e8 <zlgk82z0l71lvh9+0x335e8>
   18a48:      	leaq	0x1e0(%rsp), %rdi
   18a50:      	leaq	0x210(%rsp), %rcx
   18a58:      	movl	$0x1, %r8d
   18a5e:      	leaq	0x220(%rsp), %r9
   18a66:      	movq	%r8, %rdx
   18a69:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   18a6e:      	movq	0x1d0(%rsp), %rsi
   18a76:      	movq	$0x0, 0x2b8(%rsp)
   18a82:      	movq	0x2b8(%rsp), %r8
   18a8a:      	movq	0x2c0(%rsp), %r9
   18a92:      	leaq	0x1ab0f(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   18a99:      	movq	0x223d8(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   18aa0:      	leaq	0x1e0(%rsp), %rdi
   18aa8:      	movl	$0x21, %ecx
   18aad:      	callq	*%rax
   18aaf:      	jmp	0x18849 <general_protection_fault_secondary_handler+0x499>
   18ab4:      	int3
   18ab5:      	int3
   18ab6:      	int3
   18ab7:      	int3
   18ab8:      	int3
   18ab9:      	int3
   18aba:      	int3
   18abb:      	int3
   18abc:      	int3
   18abd:      	int3
   18abe:      	int3
   18abf:      	int3

0000000000018ac0 <double_fault_secondary_handler>:
   18ac0:      	subq	$0x3b8, %rsp            # imm = 0x3B8
   18ac7:      	movq	%rdi, 0x10(%rsp)
   18acc:      	movq	%rsi, 0x18(%rsp)
   18ad1:      	movq	%rdx, 0x20(%rsp)
   18ad6:      	movq	$0x1, 0x28(%rsp)
   18adf:      	leaq	-0xa72e(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   18ae6:      	movq	0x2237b(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18aed:      	leaq	0x28(%rsp), %rdi
   18af2:      	callq	*%rax
   18af4:      	testb	$0x1, %al
   18af6:      	jne	0x18b23 <double_fault_secondary_handler+0x63>
   18af8:      	movq	$0x1, 0x78(%rsp)
   18b01:      	leaq	-0xa750(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   18b08:      	movq	0x22359(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18b0f:      	leaq	0x78(%rsp), %rdi
   18b14:      	callq	*%rax
   18b16:      	testb	$0x1, %al
   18b18:      	jne	0x18bdd <double_fault_secondary_handler+0x11d>
   18b1e:      	jmp	0x18bac <double_fault_secondary_handler+0xec>
   18b23:      	movb	$0x0, 0x2cf(%rsp)
   18b2b:      	movb	0x2cf(%rsp), %al
   18b32:      	movzbl	%al, %esi
   18b35:      	movq	0x22334(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   18b3c:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   18b41:      	movq	%rax, 0x30(%rsp)
   18b46:      	movq	0x2231b(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18b4d:      	leaq	0x28(%rsp), %rdi
   18b52:      	leaq	0x30(%rsp), %rsi
   18b57:      	callq	*%rax
   18b59:      	testb	$0x1, %al
   18b5b:      	jne	0x18b5f <double_fault_secondary_handler+0x9f>
   18b5d:      	jmp	0x18af8 <double_fault_secondary_handler+0x38>
   18b5f:      	leaq	0x1aaca(%rip), %rsi     # 0x33630 <zlgk82z0l71lvh9+0x33630>
   18b66:      	leaq	0x38(%rsp), %rdi
   18b6b:      	movl	$0x1, %edx
   18b70:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   18b75:      	movq	0x28(%rsp), %rsi
   18b7a:      	movq	$0x0, 0x68(%rsp)
   18b83:      	movq	0x68(%rsp), %r8
   18b88:      	movq	0x70(%rsp), %r9
   18b8d:      	leaq	0x1aa14(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   18b94:      	movq	0x222dd(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   18b9b:      	leaq	0x38(%rsp), %rdi
   18ba0:      	movl	$0x2b, %ecx
   18ba5:      	callq	*%rax
   18ba7:      	jmp	0x18af8 <double_fault_secondary_handler+0x38>
   18bac:      	movq	$0x1, 0x170(%rsp)
   18bb8:      	leaq	-0xa807(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   18bbf:      	movq	0x222a2(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18bc6:      	leaq	0x170(%rsp), %rdi
   18bce:      	callq	*%rax
   18bd0:      	testb	$0x1, %al
   18bd2:      	jne	0x18e55 <double_fault_secondary_handler+0x395>
   18bd8:      	jmp	0x18e24 <double_fault_secondary_handler+0x364>
   18bdd:      	movb	$0x0, 0x2ce(%rsp)
   18be5:      	movb	0x2ce(%rsp), %al
   18bec:      	movzbl	%al, %esi
   18bef:      	movq	0x2227a(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   18bf6:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   18bfb:      	movq	%rax, 0x80(%rsp)
   18c03:      	movq	0x2225e(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18c0a:      	leaq	0x78(%rsp), %rdi
   18c0f:      	leaq	0x80(%rsp), %rsi
   18c17:      	callq	*%rax
   18c19:      	testb	$0x1, %al
   18c1b:      	jne	0x18c1f <double_fault_secondary_handler+0x15f>
   18c1d:      	jmp	0x18bac <double_fault_secondary_handler+0xec>
   18c1f:      	leaq	0x10(%rsp), %rcx
   18c24:      	movq	%rcx, 0x390(%rsp)
   18c2c:      	movq	%rcx, 0x3a8(%rsp)
   18c34:      	movq	0x22315(%rip), %rax     # 0x3af50 <zlgk82z0l71lvh9+0x3af50>
   18c3b:      	movq	%rax, 0x3b0(%rsp)
   18c43:      	movq	%rcx, 0x398(%rsp)
   18c4b:      	movq	%rax, 0x3a0(%rsp)
   18c53:      	movq	0x398(%rsp), %rcx
   18c5b:      	movq	0x3a0(%rsp), %rax
   18c63:      	movq	%rcx, 0xb8(%rsp)
   18c6b:      	movq	%rax, 0xc0(%rsp)
   18c73:      	movb	$0x3, 0x13f(%rsp)
   18c7b:      	movq	$0x2, 0x140(%rsp)
   18c87:      	movq	$0x2, 0x150(%rsp)
   18c93:      	movb	0x13f(%rsp), %dil
   18c9b:      	movq	0x140(%rsp), %rsi
   18ca3:      	movq	0x148(%rsp), %rdx
   18cab:      	movq	0x150(%rsp), %rcx
   18cb3:      	movq	0x158(%rsp), %rax
   18cbb:      	movq	$0x0, 0x308(%rsp)
   18cc7:      	movl	$0x20, 0x314(%rsp)
   18cd2:      	movb	%dil, 0x31b(%rsp)
   18cda:      	movl	$0x4, 0x31c(%rsp)
   18ce5:      	movq	%rsi, 0x320(%rsp)
   18ced:      	movq	%rdx, 0x328(%rsp)
   18cf5:      	movq	%rcx, 0x330(%rsp)
   18cfd:      	movq	%rax, 0x338(%rsp)
   18d05:      	movq	$0x0, 0x120(%rsp)
   18d11:      	movl	$0x20, 0x128(%rsp)
   18d1c:      	movb	%dil, 0x130(%rsp)
   18d24:      	movl	$0x4, 0x12c(%rsp)
   18d2f:      	movq	%rsi, 0x100(%rsp)
   18d37:      	movq	%rdx, 0x108(%rsp)
   18d3f:      	movq	%rcx, 0x110(%rsp)
   18d47:      	movq	%rax, 0x118(%rsp)
   18d4f:      	leaq	0xc8(%rsp), %rax
   18d57:      	movq	0x130(%rsp), %rcx
   18d5f:      	movq	%rcx, 0x30(%rax)
   18d63:      	movq	0x128(%rsp), %rcx
   18d6b:      	movq	%rcx, 0x28(%rax)
   18d6f:      	movq	0x120(%rsp), %rcx
   18d77:      	movq	%rcx, 0x20(%rax)
   18d7b:      	movq	0x118(%rsp), %rcx
   18d83:      	movq	%rcx, 0x18(%rax)
   18d87:      	movq	0x110(%rsp), %rcx
   18d8f:      	movq	%rcx, 0x10(%rax)
   18d93:      	movq	0x100(%rsp), %rcx
   18d9b:      	movq	0x108(%rsp), %rdx
   18da3:      	movq	%rdx, 0x8(%rax)
   18da7:      	movq	%rcx, (%rax)
   18daa:      	movq	%rsp, %rax
   18dad:      	movq	$0x1, (%rax)
   18db4:      	leaq	0x1a81d(%rip), %rsi     # 0x335d8 <zlgk82z0l71lvh9+0x335d8>
   18dbb:      	leaq	0x88(%rsp), %rdi
   18dc3:      	leaq	0xb8(%rsp), %rcx
   18dcb:      	movl	$0x1, %r8d
   18dd1:      	leaq	0xc8(%rsp), %r9
   18dd9:      	movq	%r8, %rdx
   18ddc:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   18de1:      	movq	0x78(%rsp), %rsi
   18de6:      	movq	$0x0, 0x160(%rsp)
   18df2:      	movq	0x160(%rsp), %r8
   18dfa:      	movq	0x168(%rsp), %r9
   18e02:      	leaq	0x1a79f(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   18e09:      	movq	0x22068(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   18e10:      	leaq	0x88(%rsp), %rdi
   18e18:      	movl	$0x2c, %ecx
   18e1d:      	callq	*%rax
   18e1f:      	jmp	0x18bac <double_fault_secondary_handler+0xec>
   18e24:      	movq	$0x1, 0x1d0(%rsp)
   18e30:      	leaq	-0xaa7f(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   18e37:      	movq	0x2202a(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18e3e:      	leaq	0x1d0(%rsp), %rdi
   18e46:      	callq	*%rax
   18e48:      	testb	$0x1, %al
   18e4a:      	jne	0x18f77 <double_fault_secondary_handler+0x4b7>
   18e50:      	jmp	0x18f59 <double_fault_secondary_handler+0x499>
   18e55:      	movb	$0x0, 0x2cd(%rsp)
   18e5d:      	movb	0x2cd(%rsp), %al
   18e64:      	movzbl	%al, %esi
   18e67:      	movq	0x22002(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   18e6e:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   18e73:      	movq	%rax, 0x178(%rsp)
   18e7b:      	movq	0x21fe6(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18e82:      	leaq	0x170(%rsp), %rdi
   18e8a:      	leaq	0x178(%rsp), %rsi
   18e92:      	callq	*%rax
   18e94:      	testb	$0x1, %al
   18e96:      	jne	0x18e9a <double_fault_secondary_handler+0x3da>
   18e98:      	jmp	0x18e24 <double_fault_secondary_handler+0x364>
   18e9a:      	leaq	0x18(%rsp), %rcx
   18e9f:      	movq	%rcx, 0x340(%rsp)
   18ea7:      	movq	%rcx, 0x358(%rsp)
   18eaf:      	movq	0x222a2(%rip), %rax     # 0x3b158 <zlgk82z0l71lvh9+0x3b158>
   18eb6:      	movq	%rax, 0x360(%rsp)
   18ebe:      	movq	%rcx, 0x348(%rsp)
   18ec6:      	movq	%rax, 0x350(%rsp)
   18ece:      	movq	0x348(%rsp), %rcx
   18ed6:      	movq	0x350(%rsp), %rax
   18ede:      	movq	%rcx, 0x1b0(%rsp)
   18ee6:      	movq	%rax, 0x1b8(%rsp)
   18eee:      	leaq	0x1a713(%rip), %rsi     # 0x33608 <zlgk82z0l71lvh9+0x33608>
   18ef5:      	leaq	0x180(%rsp), %rdi
   18efd:      	leaq	0x1b0(%rsp), %rcx
   18f05:      	movl	$0x1, %r8d
   18f0b:      	movq	%r8, %rdx
   18f0e:      	callq	0x14cc0 <core::fmt::Arguments::new_v1::h3e37eaae9534818a>
   18f13:      	movq	0x170(%rsp), %rsi
   18f1b:      	movq	$0x0, 0x1c0(%rsp)
   18f27:      	movq	0x1c0(%rsp), %r8
   18f2f:      	movq	0x1c8(%rsp), %r9
   18f37:      	leaq	0x1a66a(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   18f3e:      	movq	0x21f33(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   18f45:      	leaq	0x180(%rsp), %rdi
   18f4d:      	movl	$0x2d, %ecx
   18f52:      	callq	*%rax
   18f54:      	jmp	0x18e24 <double_fault_secondary_handler+0x364>
   18f59:      	leaq	-0xa31f(%rip), %rdi     # 0xec41 <str.0+0xd1>
   18f60:      	leaq	0x1a6d9(%rip), %rdx     # 0x33640 <zlgk82z0l71lvh9+0x33640>
   18f67:      	movq	0x21f62(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   18f6e:      	movl	$0xe, %esi
   18f73:      	callq	*%rax
   18f75:      	ud2
   18f77:      	movb	$0x0, 0x2cc(%rsp)
   18f7f:      	movb	0x2cc(%rsp), %al
   18f86:      	movzbl	%al, %esi
   18f89:      	movq	0x21ee0(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   18f90:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   18f95:      	movq	%rax, 0x1d8(%rsp)
   18f9d:      	movq	0x21ec4(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   18fa4:      	leaq	0x1d0(%rsp), %rdi
   18fac:      	leaq	0x1d8(%rsp), %rsi
   18fb4:      	callq	*%rax
   18fb6:      	testb	$0x1, %al
   18fb8:      	jne	0x18fbc <double_fault_secondary_handler+0x4fc>
   18fba:      	jmp	0x18f59 <double_fault_secondary_handler+0x499>
   18fbc:      	leaq	0x20(%rsp), %rcx
   18fc1:      	movq	%rcx, 0x368(%rsp)
   18fc9:      	movq	%rcx, 0x380(%rsp)
   18fd1:      	movq	0x21f68(%rip), %rax     # 0x3af40 <zlgk82z0l71lvh9+0x3af40>
   18fd8:      	movq	%rax, 0x388(%rsp)
   18fe0:      	movq	%rcx, 0x370(%rsp)
   18fe8:      	movq	%rax, 0x378(%rsp)
   18ff0:      	movq	0x370(%rsp), %rcx
   18ff8:      	movq	0x378(%rsp), %rax
   19000:      	movq	%rcx, 0x210(%rsp)
   19008:      	movq	%rax, 0x218(%rsp)
   19010:      	movb	$0x3, 0x297(%rsp)
   19018:      	movq	$0x2, 0x298(%rsp)
   19024:      	movq	$0x2, 0x2a8(%rsp)
   19030:      	movb	0x297(%rsp), %dil
   19038:      	movq	0x298(%rsp), %rsi
   19040:      	movq	0x2a0(%rsp), %rdx
   19048:      	movq	0x2a8(%rsp), %rcx
   19050:      	movq	0x2b0(%rsp), %rax
   19058:      	movq	$0x0, 0x2d0(%rsp)
   19064:      	movl	$0x20, 0x2dc(%rsp)
   1906f:      	movb	%dil, 0x2e3(%rsp)
   19077:      	movl	$0x4, 0x2e4(%rsp)
   19082:      	movq	%rsi, 0x2e8(%rsp)
   1908a:      	movq	%rdx, 0x2f0(%rsp)
   19092:      	movq	%rcx, 0x2f8(%rsp)
   1909a:      	movq	%rax, 0x300(%rsp)
   190a2:      	movq	$0x0, 0x278(%rsp)
   190ae:      	movl	$0x20, 0x280(%rsp)
   190b9:      	movb	%dil, 0x288(%rsp)
   190c1:      	movl	$0x4, 0x284(%rsp)
   190cc:      	movq	%rsi, 0x258(%rsp)
   190d4:      	movq	%rdx, 0x260(%rsp)
   190dc:      	movq	%rcx, 0x268(%rsp)
   190e4:      	movq	%rax, 0x270(%rsp)
   190ec:      	leaq	0x220(%rsp), %rax
   190f4:      	movq	0x288(%rsp), %rcx
   190fc:      	movq	%rcx, 0x30(%rax)
   19100:      	movq	0x280(%rsp), %rcx
   19108:      	movq	%rcx, 0x28(%rax)
   1910c:      	movq	0x278(%rsp), %rcx
   19114:      	movq	%rcx, 0x20(%rax)
   19118:      	movq	0x270(%rsp), %rcx
   19120:      	movq	%rcx, 0x18(%rax)
   19124:      	movq	0x268(%rsp), %rcx
   1912c:      	movq	%rcx, 0x10(%rax)
   19130:      	movq	0x258(%rsp), %rcx
   19138:      	movq	0x260(%rsp), %rdx
   19140:      	movq	%rdx, 0x8(%rax)
   19144:      	movq	%rcx, (%rax)
   19147:      	movq	%rsp, %rax
   1914a:      	movq	$0x1, (%rax)
   19151:      	leaq	0x1a490(%rip), %rsi     # 0x335e8 <zlgk82z0l71lvh9+0x335e8>
   19158:      	leaq	0x1e0(%rsp), %rdi
   19160:      	leaq	0x210(%rsp), %rcx
   19168:      	movl	$0x1, %r8d
   1916e:      	leaq	0x220(%rsp), %r9
   19176:      	movq	%r8, %rdx
   19179:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   1917e:      	movq	0x1d0(%rsp), %rsi
   19186:      	movq	$0x0, 0x2b8(%rsp)
   19192:      	movq	0x2b8(%rsp), %r8
   1919a:      	movq	0x2c0(%rsp), %r9
   191a2:      	leaq	0x1a3ff(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   191a9:      	movq	0x21cc8(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   191b0:      	leaq	0x1e0(%rsp), %rdi
   191b8:      	movl	$0x2e, %ecx
   191bd:      	callq	*%rax
   191bf:      	jmp	0x18f59 <double_fault_secondary_handler+0x499>
   191c4:      	int3
   191c5:      	int3
   191c6:      	int3
   191c7:      	int3
   191c8:      	int3
   191c9:      	int3
   191ca:      	int3
   191cb:      	int3
   191cc:      	int3
   191cd:      	int3
   191ce:      	int3
   191cf:      	int3

00000000000191d0 <page_fault_secondary_handler>:
   191d0:      	subq	$0x3b8, %rsp            # imm = 0x3B8
   191d7:      	movq	%rdi, 0x10(%rsp)
   191dc:      	movq	%rsi, 0x18(%rsp)
   191e1:      	movq	%rdx, 0x20(%rsp)
   191e6:      	movq	$0x1, 0x28(%rsp)
   191ef:      	leaq	-0xae3e(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   191f6:      	movq	0x21c6b(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   191fd:      	leaq	0x28(%rsp), %rdi
   19202:      	callq	*%rax
   19204:      	testb	$0x1, %al
   19206:      	jne	0x19233 <page_fault_secondary_handler+0x63>
   19208:      	movq	$0x1, 0x78(%rsp)
   19211:      	leaq	-0xae60(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   19218:      	movq	0x21c49(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1921f:      	leaq	0x78(%rsp), %rdi
   19224:      	callq	*%rax
   19226:      	testb	$0x1, %al
   19228:      	jne	0x192ed <page_fault_secondary_handler+0x11d>
   1922e:      	jmp	0x192bc <page_fault_secondary_handler+0xec>
   19233:      	movb	$0x0, 0x2cf(%rsp)
   1923b:      	movb	0x2cf(%rsp), %al
   19242:      	movzbl	%al, %esi
   19245:      	movq	0x21c24(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   1924c:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   19251:      	movq	%rax, 0x30(%rsp)
   19256:      	movq	0x21c0b(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1925d:      	leaq	0x28(%rsp), %rdi
   19262:      	leaq	0x30(%rsp), %rsi
   19267:      	callq	*%rax
   19269:      	testb	$0x1, %al
   1926b:      	jne	0x1926f <page_fault_secondary_handler+0x9f>
   1926d:      	jmp	0x19208 <page_fault_secondary_handler+0x38>
   1926f:      	leaq	0x1a322(%rip), %rsi     # 0x33598 <zlgk82z0l71lvh9+0x33598>
   19276:      	leaq	0x38(%rsp), %rdi
   1927b:      	movl	$0x1, %edx
   19280:      	callq	0x14de0 <core::fmt::Arguments::new_const::he1efe09b6f92a0da>
   19285:      	movq	0x28(%rsp), %rsi
   1928a:      	movq	$0x0, 0x68(%rsp)
   19293:      	movq	0x68(%rsp), %r8
   19298:      	movq	0x70(%rsp), %r9
   1929d:      	leaq	0x1a304(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   192a4:      	movq	0x21bcd(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   192ab:      	leaq	0x38(%rsp), %rdi
   192b0:      	movl	$0x38, %ecx
   192b5:      	callq	*%rax
   192b7:      	jmp	0x19208 <page_fault_secondary_handler+0x38>
   192bc:      	movq	$0x1, 0x170(%rsp)
   192c8:      	leaq	-0xaf17(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   192cf:      	movq	0x21b92(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   192d6:      	leaq	0x170(%rsp), %rdi
   192de:      	callq	*%rax
   192e0:      	testb	$0x1, %al
   192e2:      	jne	0x19565 <page_fault_secondary_handler+0x395>
   192e8:      	jmp	0x19534 <page_fault_secondary_handler+0x364>
   192ed:      	movb	$0x0, 0x2ce(%rsp)
   192f5:      	movb	0x2ce(%rsp), %al
   192fc:      	movzbl	%al, %esi
   192ff:      	movq	0x21b6a(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   19306:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   1930b:      	movq	%rax, 0x80(%rsp)
   19313:      	movq	0x21b4e(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1931a:      	leaq	0x78(%rsp), %rdi
   1931f:      	leaq	0x80(%rsp), %rsi
   19327:      	callq	*%rax
   19329:      	testb	$0x1, %al
   1932b:      	jne	0x1932f <page_fault_secondary_handler+0x15f>
   1932d:      	jmp	0x192bc <page_fault_secondary_handler+0xec>
   1932f:      	leaq	0x10(%rsp), %rcx
   19334:      	movq	%rcx, 0x390(%rsp)
   1933c:      	movq	%rcx, 0x3a8(%rsp)
   19344:      	movq	0x21c05(%rip), %rax     # 0x3af50 <zlgk82z0l71lvh9+0x3af50>
   1934b:      	movq	%rax, 0x3b0(%rsp)
   19353:      	movq	%rcx, 0x398(%rsp)
   1935b:      	movq	%rax, 0x3a0(%rsp)
   19363:      	movq	0x398(%rsp), %rcx
   1936b:      	movq	0x3a0(%rsp), %rax
   19373:      	movq	%rcx, 0xb8(%rsp)
   1937b:      	movq	%rax, 0xc0(%rsp)
   19383:      	movb	$0x3, 0x13f(%rsp)
   1938b:      	movq	$0x2, 0x140(%rsp)
   19397:      	movq	$0x2, 0x150(%rsp)
   193a3:      	movb	0x13f(%rsp), %dil
   193ab:      	movq	0x140(%rsp), %rsi
   193b3:      	movq	0x148(%rsp), %rdx
   193bb:      	movq	0x150(%rsp), %rcx
   193c3:      	movq	0x158(%rsp), %rax
   193cb:      	movq	$0x0, 0x308(%rsp)
   193d7:      	movl	$0x20, 0x314(%rsp)
   193e2:      	movb	%dil, 0x31b(%rsp)
   193ea:      	movl	$0x4, 0x31c(%rsp)
   193f5:      	movq	%rsi, 0x320(%rsp)
   193fd:      	movq	%rdx, 0x328(%rsp)
   19405:      	movq	%rcx, 0x330(%rsp)
   1940d:      	movq	%rax, 0x338(%rsp)
   19415:      	movq	$0x0, 0x120(%rsp)
   19421:      	movl	$0x20, 0x128(%rsp)
   1942c:      	movb	%dil, 0x130(%rsp)
   19434:      	movl	$0x4, 0x12c(%rsp)
   1943f:      	movq	%rsi, 0x100(%rsp)
   19447:      	movq	%rdx, 0x108(%rsp)
   1944f:      	movq	%rcx, 0x110(%rsp)
   19457:      	movq	%rax, 0x118(%rsp)
   1945f:      	leaq	0xc8(%rsp), %rax
   19467:      	movq	0x130(%rsp), %rcx
   1946f:      	movq	%rcx, 0x30(%rax)
   19473:      	movq	0x128(%rsp), %rcx
   1947b:      	movq	%rcx, 0x28(%rax)
   1947f:      	movq	0x120(%rsp), %rcx
   19487:      	movq	%rcx, 0x20(%rax)
   1948b:      	movq	0x118(%rsp), %rcx
   19493:      	movq	%rcx, 0x18(%rax)
   19497:      	movq	0x110(%rsp), %rcx
   1949f:      	movq	%rcx, 0x10(%rax)
   194a3:      	movq	0x100(%rsp), %rcx
   194ab:      	movq	0x108(%rsp), %rdx
   194b3:      	movq	%rdx, 0x8(%rax)
   194b7:      	movq	%rcx, (%rax)
   194ba:      	movq	%rsp, %rax
   194bd:      	movq	$0x1, (%rax)
   194c4:      	leaq	0x1a10d(%rip), %rsi     # 0x335d8 <zlgk82z0l71lvh9+0x335d8>
   194cb:      	leaq	0x88(%rsp), %rdi
   194d3:      	leaq	0xb8(%rsp), %rcx
   194db:      	movl	$0x1, %r8d
   194e1:      	leaq	0xc8(%rsp), %r9
   194e9:      	movq	%r8, %rdx
   194ec:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   194f1:      	movq	0x78(%rsp), %rsi
   194f6:      	movq	$0x0, 0x160(%rsp)
   19502:      	movq	0x160(%rsp), %r8
   1950a:      	movq	0x168(%rsp), %r9
   19512:      	leaq	0x1a08f(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   19519:      	movq	0x21958(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   19520:      	leaq	0x88(%rsp), %rdi
   19528:      	movl	$0x39, %ecx
   1952d:      	callq	*%rax
   1952f:      	jmp	0x192bc <page_fault_secondary_handler+0xec>
   19534:      	movq	$0x1, 0x1d0(%rsp)
   19540:      	leaq	-0xb18f(%rip), %rsi     # 0xe3b8 <zlgk82z0l71lvh9+0xe3b8>
   19547:      	movq	0x2191a(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1954e:      	leaq	0x1d0(%rsp), %rdi
   19556:      	callq	*%rax
   19558:      	testb	$0x1, %al
   1955a:      	jne	0x19671 <page_fault_secondary_handler+0x4a1>
   19560:      	jmp	0x19669 <page_fault_secondary_handler+0x499>
   19565:      	movb	$0x0, 0x2cd(%rsp)
   1956d:      	movb	0x2cd(%rsp), %al
   19574:      	movzbl	%al, %esi
   19577:      	movq	0x218f2(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   1957e:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   19583:      	movq	%rax, 0x178(%rsp)
   1958b:      	movq	0x218d6(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   19592:      	leaq	0x170(%rsp), %rdi
   1959a:      	leaq	0x178(%rsp), %rsi
   195a2:      	callq	*%rax
   195a4:      	testb	$0x1, %al
   195a6:      	jne	0x195aa <page_fault_secondary_handler+0x3da>
   195a8:      	jmp	0x19534 <page_fault_secondary_handler+0x364>
   195aa:      	leaq	0x18(%rsp), %rcx
   195af:      	movq	%rcx, 0x340(%rsp)
   195b7:      	movq	%rcx, 0x358(%rsp)
   195bf:      	movq	0x21b92(%rip), %rax     # 0x3b158 <zlgk82z0l71lvh9+0x3b158>
   195c6:      	movq	%rax, 0x360(%rsp)
   195ce:      	movq	%rcx, 0x348(%rsp)
   195d6:      	movq	%rax, 0x350(%rsp)
   195de:      	movq	0x348(%rsp), %rcx
   195e6:      	movq	0x350(%rsp), %rax
   195ee:      	movq	%rcx, 0x1b0(%rsp)
   195f6:      	movq	%rax, 0x1b8(%rsp)
   195fe:      	leaq	0x1a003(%rip), %rsi     # 0x33608 <zlgk82z0l71lvh9+0x33608>
   19605:      	leaq	0x180(%rsp), %rdi
   1960d:      	leaq	0x1b0(%rsp), %rcx
   19615:      	movl	$0x1, %r8d
   1961b:      	movq	%r8, %rdx
   1961e:      	callq	0x14cc0 <core::fmt::Arguments::new_v1::h3e37eaae9534818a>
   19623:      	movq	0x170(%rsp), %rsi
   1962b:      	movq	$0x0, 0x1c0(%rsp)
   19637:      	movq	0x1c0(%rsp), %r8
   1963f:      	movq	0x1c8(%rsp), %r9
   19647:      	leaq	0x19f5a(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   1964e:      	movq	0x21823(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   19655:      	leaq	0x180(%rsp), %rdi
   1965d:      	movl	$0x3a, %ecx
   19662:      	callq	*%rax
   19664:      	jmp	0x19534 <page_fault_secondary_handler+0x364>
   19669:      	addq	$0x3b8, %rsp            # imm = 0x3B8
   19670:      	retq
   19671:      	movb	$0x0, 0x2cc(%rsp)
   19679:      	movb	0x2cc(%rsp), %al
   19680:      	movzbl	%al, %esi
   19683:      	movq	0x217e6(%rip), %rdi     # 0x3ae70 <zlgk82z0l71lvh9+0x3ae70>
   1968a:      	callq	0x171a0 <core::sync::atomic::AtomicUsize::load::hf2a11f8bf4c71c58>
   1968f:      	movq	%rax, 0x1d8(%rsp)
   19697:      	movq	0x217ca(%rip), %rax     # 0x3ae68 <zlgk82z0l71lvh9+0x3ae68>
   1969e:      	leaq	0x1d0(%rsp), %rdi
   196a6:      	leaq	0x1d8(%rsp), %rsi
   196ae:      	callq	*%rax
   196b0:      	testb	$0x1, %al
   196b2:      	jne	0x196b6 <page_fault_secondary_handler+0x4e6>
   196b4:      	jmp	0x19669 <page_fault_secondary_handler+0x499>
   196b6:      	leaq	0x20(%rsp), %rcx
   196bb:      	movq	%rcx, 0x368(%rsp)
   196c3:      	movq	%rcx, 0x380(%rsp)
   196cb:      	movq	0x2186e(%rip), %rax     # 0x3af40 <zlgk82z0l71lvh9+0x3af40>
   196d2:      	movq	%rax, 0x388(%rsp)
   196da:      	movq	%rcx, 0x370(%rsp)
   196e2:      	movq	%rax, 0x378(%rsp)
   196ea:      	movq	0x370(%rsp), %rcx
   196f2:      	movq	0x378(%rsp), %rax
   196fa:      	movq	%rcx, 0x210(%rsp)
   19702:      	movq	%rax, 0x218(%rsp)
   1970a:      	movb	$0x3, 0x297(%rsp)
   19712:      	movq	$0x2, 0x298(%rsp)
   1971e:      	movq	$0x2, 0x2a8(%rsp)
   1972a:      	movb	0x297(%rsp), %dil
   19732:      	movq	0x298(%rsp), %rsi
   1973a:      	movq	0x2a0(%rsp), %rdx
   19742:      	movq	0x2a8(%rsp), %rcx
   1974a:      	movq	0x2b0(%rsp), %rax
   19752:      	movq	$0x0, 0x2d0(%rsp)
   1975e:      	movl	$0x20, 0x2dc(%rsp)
   19769:      	movb	%dil, 0x2e3(%rsp)
   19771:      	movl	$0x4, 0x2e4(%rsp)
   1977c:      	movq	%rsi, 0x2e8(%rsp)
   19784:      	movq	%rdx, 0x2f0(%rsp)
   1978c:      	movq	%rcx, 0x2f8(%rsp)
   19794:      	movq	%rax, 0x300(%rsp)
   1979c:      	movq	$0x0, 0x278(%rsp)
   197a8:      	movl	$0x20, 0x280(%rsp)
   197b3:      	movb	%dil, 0x288(%rsp)
   197bb:      	movl	$0x4, 0x284(%rsp)
   197c6:      	movq	%rsi, 0x258(%rsp)
   197ce:      	movq	%rdx, 0x260(%rsp)
   197d6:      	movq	%rcx, 0x268(%rsp)
   197de:      	movq	%rax, 0x270(%rsp)
   197e6:      	leaq	0x220(%rsp), %rax
   197ee:      	movq	0x288(%rsp), %rcx
   197f6:      	movq	%rcx, 0x30(%rax)
   197fa:      	movq	0x280(%rsp), %rcx
   19802:      	movq	%rcx, 0x28(%rax)
   19806:      	movq	0x278(%rsp), %rcx
   1980e:      	movq	%rcx, 0x20(%rax)
   19812:      	movq	0x270(%rsp), %rcx
   1981a:      	movq	%rcx, 0x18(%rax)
   1981e:      	movq	0x268(%rsp), %rcx
   19826:      	movq	%rcx, 0x10(%rax)
   1982a:      	movq	0x258(%rsp), %rcx
   19832:      	movq	0x260(%rsp), %rdx
   1983a:      	movq	%rdx, 0x8(%rax)
   1983e:      	movq	%rcx, (%rax)
   19841:      	movq	%rsp, %rax
   19844:      	movq	$0x1, (%rax)
   1984b:      	leaq	0x19d96(%rip), %rsi     # 0x335e8 <zlgk82z0l71lvh9+0x335e8>
   19852:      	leaq	0x1e0(%rsp), %rdi
   1985a:      	leaq	0x210(%rsp), %rcx
   19862:      	movl	$0x1, %r8d
   19868:      	leaq	0x220(%rsp), %r9
   19870:      	movq	%r8, %rdx
   19873:      	callq	0x14c60 <core::fmt::Arguments::new_v1_formatted::h986df7a3a781544d>
   19878:      	movq	0x1d0(%rsp), %rsi
   19880:      	movq	$0x0, 0x2b8(%rsp)
   1988c:      	movq	0x2b8(%rsp), %r8
   19894:      	movq	0x2c0(%rsp), %r9
   1989c:      	leaq	0x19d05(%rip), %rdx     # 0x335a8 <zlgk82z0l71lvh9+0x335a8>
   198a3:      	movq	0x215ce(%rip), %rax     # 0x3ae78 <zlgk82z0l71lvh9+0x3ae78>
   198aa:      	leaq	0x1e0(%rsp), %rdi
   198b2:      	movl	$0x3b, %ecx
   198b7:      	callq	*%rax
   198b9:      	jmp	0x19669 <page_fault_secondary_handler+0x499>
   198be:      	int3
   198bf:      	int3

00000000000198c0 <kernel::interrupts::handlers::divide_by_zero::ha229e23a231ceb45>:
   198c0:      	cld
   198c1:      	pushq	%rax
   198c2:      	pushq	%rbx
   198c3:      	pushq	%rcx
   198c4:      	pushq	%rdx
   198c5:      	pushq	%rsi
   198c6:      	pushq	%rdi
   198c7:      	pushq	%rbp
   198c8:      	pushq	%r8
   198ca:      	pushq	%r9
   198cc:      	pushq	%r10
   198ce:      	pushq	%r11
   198d0:      	pushq	%r12
   198d2:      	pushq	%r13
   198d4:      	pushq	%r14
   198d6:      	pushq	%r15
   198d8:      	movw	$0x10, %ax
   198dc:      	movw	%ax, %ds
   198df:      	movw	%ax, %es
   198e2:      	movw	%ax, %fs
   198e5:      	movw	%ax, %gs
   198e8:      	movq	%rsp, %rdi
   198eb:      	callq	0x17e00 <divide_by_zero_secondary_handler>
   198f0:      	popq	%r15
   198f2:      	popq	%r14
   198f4:      	popq	%r13
   198f6:      	popq	%r12
   198f8:      	popq	%r11
   198fa:      	popq	%r10
   198fc:      	popq	%r9
   198fe:      	popq	%r8
   19900:      	popq	%rbp
   19901:      	popq	%rdi
   19902:      	popq	%rsi
   19903:      	popq	%rdx
   19904:      	popq	%rcx
   19905:      	popq	%rbx
   19906:      	popq	%rax
   19907:      	iretq
   19909:      	ud2
   1990b:      	int3
   1990c:      	int3
   1990d:      	int3
   1990e:      	int3
   1990f:      	int3

0000000000019910 <kernel::interrupts::handlers::general_protection_fault::h1debdc1484f11754>:
   19910:      	cld
   19911:      	pushq	%rax
   19912:      	pushq	%rbx
   19913:      	pushq	%rcx
   19914:      	pushq	%rdx
   19915:      	pushq	%rsi
   19916:      	pushq	%rdi
   19917:      	pushq	%rbp
   19918:      	pushq	%r8
   1991a:      	pushq	%r9
   1991c:      	pushq	%r10
   1991e:      	pushq	%r11
   19920:      	pushq	%r12
   19922:      	pushq	%r13
   19924:      	pushq	%r14
   19926:      	pushq	%r15
   19928:      	movw	$0x10, %ax
   1992c:      	movw	%ax, %ds
   1992f:      	movw	%ax, %es
   19932:      	movw	%ax, %fs
   19935:      	movw	%ax, %gs
   19938:      	movq	%rsp, %rdi
   1993b:      	callq	0x183b0 <general_protection_fault_secondary_handler>
   19940:      	popq	%r15
   19942:      	popq	%r14
   19944:      	popq	%r13
   19946:      	popq	%r12
   19948:      	popq	%r11
   1994a:      	popq	%r10
   1994c:      	popq	%r9
   1994e:      	popq	%r8
   19950:      	popq	%rbp
   19951:      	popq	%rdi
   19952:      	popq	%rsi
   19953:      	popq	%rdx
   19954:      	popq	%rcx
   19955:      	popq	%rbx
   19956:      	popq	%rax
   19957:      	iretq
   19959:      	ud2
   1995b:      	int3
   1995c:      	int3
   1995d:      	int3
   1995e:      	int3
   1995f:      	int3

0000000000019960 <kernel::interrupts::handlers::page_fault::hf8c1488808ae24d9>:
   19960:      	cld
   19961:      	pushq	%rax
   19962:      	pushq	%rbx
   19963:      	pushq	%rcx
   19964:      	pushq	%rdx
   19965:      	pushq	%rsi
   19966:      	pushq	%rdi
   19967:      	pushq	%rbp
   19968:      	pushq	%r8
   1996a:      	pushq	%r9
   1996c:      	pushq	%r10
   1996e:      	pushq	%r11
   19970:      	pushq	%r12
   19972:      	pushq	%r13
   19974:      	pushq	%r14
   19976:      	pushq	%r15
   19978:      	movw	$0x10, %ax
   1997c:      	movw	%ax, %ds
   1997f:      	movw	%ax, %es
   19982:      	movw	%ax, %fs
   19985:      	movw	%ax, %gs
   19988:      	movq	%rsp, %rdi
   1998b:      	callq	0x191d0 <page_fault_secondary_handler>
   19990:      	popq	%r15
   19992:      	popq	%r14
   19994:      	popq	%r13
   19996:      	popq	%r12
   19998:      	popq	%r11
   1999a:      	popq	%r10
   1999c:      	popq	%r9
   1999e:      	popq	%r8
   199a0:      	popq	%rbp
   199a1:      	popq	%rdi
   199a2:      	popq	%rsi
   199a3:      	popq	%rdx
   199a4:      	popq	%rcx
   199a5:      	popq	%rbx
   199a6:      	popq	%rax
   199a7:      	iretq
   199a9:      	ud2
   199ab:      	int3
   199ac:      	int3
   199ad:      	int3
   199ae:      	int3
   199af:      	int3

00000000000199b0 <kernel::interrupts::handlers::double_fault::h4dfda8879e117441>:
   199b0:      	cld
   199b1:      	pushq	%rax
   199b2:      	pushq	%rbx
   199b3:      	pushq	%rcx
   199b4:      	pushq	%rdx
   199b5:      	pushq	%rsi
   199b6:      	pushq	%rdi
   199b7:      	pushq	%rbp
   199b8:      	pushq	%r8
   199ba:      	pushq	%r9
   199bc:      	pushq	%r10
   199be:      	pushq	%r11
   199c0:      	pushq	%r12
   199c2:      	pushq	%r13
   199c4:      	pushq	%r14
   199c6:      	pushq	%r15
   199c8:      	movw	$0x10, %ax
   199cc:      	movw	%ax, %ds
   199cf:      	movw	%ax, %es
   199d2:      	movw	%ax, %fs
   199d5:      	movw	%ax, %gs
   199d8:      	movq	%rsp, %rdi
   199db:      	callq	0x18ac0 <double_fault_secondary_handler>
   199e0:      	popq	%r15
   199e2:      	popq	%r14
   199e4:      	popq	%r13
   199e6:      	popq	%r12
   199e8:      	popq	%r11
   199ea:      	popq	%r10
   199ec:      	popq	%r9
   199ee:      	popq	%r8
   199f0:      	popq	%rbp
   199f1:      	popq	%rdi
   199f2:      	popq	%rsi
   199f3:      	popq	%rdx
   199f4:      	popq	%rcx
   199f5:      	popq	%rbx
   199f6:      	popq	%rax
   199f7:      	iretq
   199f9:      	ud2
   199fb:      	int3
   199fc:      	int3
   199fd:      	int3
   199fe:      	int3
   199ff:      	int3

0000000000019a00 <<*const T as core::fmt::Debug>::fmt::h7fa548ab73eed8d1>:
   19a00:      	subq	$0x18, %rsp
   19a04:      	movq	%rdi, 0x8(%rsp)
   19a09:      	movq	%rsi, 0x10(%rsp)
   19a0e:      	movq	0x21533(%rip), %rax     # 0x3af48 <zlgk82z0l71lvh9+0x3af48>
   19a15:      	callq	*%rax
   19a17:      	andb	$0x1, %al
   19a19:      	movzbl	%al, %eax
   19a1c:      	addq	$0x18, %rsp
   19a20:      	retq
   19a21:      	int3
   19a22:      	int3
   19a23:      	int3
   19a24:      	int3
   19a25:      	int3
   19a26:      	int3
   19a27:      	int3
   19a28:      	int3
   19a29:      	int3
   19a2a:      	int3
   19a2b:      	int3
   19a2c:      	int3
   19a2d:      	int3
   19a2e:      	int3
   19a2f:      	int3

0000000000019a30 <<*const T as core::fmt::Debug>::fmt::hc26887c125bad53c>:
   19a30:      	subq	$0x18, %rsp
   19a34:      	movq	%rdi, 0x8(%rsp)
   19a39:      	movq	%rsi, 0x10(%rsp)
   19a3e:      	movq	0x21513(%rip), %rax     # 0x3af58 <zlgk82z0l71lvh9+0x3af58>
   19a45:      	callq	*%rax
   19a47:      	andb	$0x1, %al
   19a49:      	movzbl	%al, %eax
   19a4c:      	addq	$0x18, %rsp
   19a50:      	retq
   19a51:      	int3
   19a52:      	int3
   19a53:      	int3
   19a54:      	int3
   19a55:      	int3
   19a56:      	int3
   19a57:      	int3
   19a58:      	int3
   19a59:      	int3
   19a5a:      	int3
   19a5b:      	int3
   19a5c:      	int3
   19a5d:      	int3
   19a5e:      	int3
   19a5f:      	int3

0000000000019a60 <<*const T as core::fmt::Pointer>::fmt::h8249599cd5e51716>:
   19a60:      	subq	$0x28, %rsp
   19a64:      	movq	%rdi, 0x8(%rsp)
   19a69:      	movq	%rsi, 0x10(%rsp)
   19a6e:      	movq	(%rdi), %rdi
   19a71:      	movq	%rdi, 0x18(%rsp)
   19a76:      	movq	%rdi, 0x20(%rsp)
   19a7b:      	movq	0x2176e(%rip), %rax     # 0x3b1f0 <zlgk82z0l71lvh9+0x3b1f0>
   19a82:      	callq	*%rax
   19a84:      	andb	$0x1, %al
   19a86:      	movzbl	%al, %eax
   19a89:      	addq	$0x28, %rsp
   19a8d:      	retq
   19a8e:      	int3
   19a8f:      	int3

0000000000019a90 <<*const T as core::fmt::Pointer>::fmt::hccea3e04c67bf7b6>:
   19a90:      	subq	$0x28, %rsp
   19a94:      	movq	%rdi, 0x8(%rsp)
   19a99:      	movq	%rsi, 0x10(%rsp)
   19a9e:      	movq	(%rdi), %rdi
   19aa1:      	movq	%rdi, 0x18(%rsp)
   19aa6:      	movq	%rdi, 0x20(%rsp)
   19aab:      	movq	0x2173e(%rip), %rax     # 0x3b1f0 <zlgk82z0l71lvh9+0x3b1f0>
   19ab2:      	callq	*%rax
   19ab4:      	andb	$0x1, %al
   19ab6:      	movzbl	%al, %eax
   19ab9:      	addq	$0x28, %rsp
   19abd:      	retq
   19abe:      	int3
   19abf:      	int3

0000000000019ac0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h178e48e646980133E>:
   19ac0:      	subq	$0x28, %rsp
   19ac4:      	movq	%rdi, (%rsp)
   19ac8:      	movq	%rsi, 0x8(%rsp)
   19acd:      	movq	(%rsp), %rdi
   19ad1:      	movq	0x8(%rsp), %rsi
   19ad6:      	movq	%rdi, 0x18(%rsp)
   19adb:      	movq	%rsi, 0x20(%rsp)
   19ae0:      	callq	0x19e10 <<conquer_once::cell::WouldBlockError as core::convert::From<conquer_once::state::TryBlockError>>::from::h9755ed0552788a0c>
   19ae5:      	movq	$0x0, 0x10(%rsp)
   19aee:      	movq	0x10(%rsp), %rax
   19af3:      	addq	$0x28, %rsp
   19af7:      	retq
   19af8:      	int3
   19af9:      	int3
   19afa:      	int3
   19afb:      	int3
   19afc:      	int3
   19afd:      	int3
   19afe:      	int3
   19aff:      	int3

0000000000019b00 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h9dffe275a9d3813eE>:
   19b00:      	subq	$0x30, %rsp
   19b04:      	movq	%rdi, %rax
   19b07:      	movq	%rsi, (%rsp)
   19b0b:      	movq	%rdx, 0x8(%rsp)
   19b10:      	movq	(%rsp), %rdx
   19b14:      	movq	0x8(%rsp), %rcx
   19b19:      	movq	%rdx, 0x10(%rsp)
   19b1e:      	movq	%rcx, 0x18(%rsp)
   19b23:      	movq	%rdx, 0x20(%rsp)
   19b28:      	movq	%rcx, 0x28(%rsp)
   19b2d:      	movq	%rdx, (%rdi)
   19b30:      	movq	%rcx, 0x8(%rdi)
   19b34:      	addq	$0x30, %rsp
   19b38:      	retq
   19b39:      	int3
   19b3a:      	int3
   19b3b:      	int3
   19b3c:      	int3
   19b3d:      	int3
   19b3e:      	int3
   19b3f:      	int3

0000000000019b40 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hcd83e5e925e229a1E>:
   19b40:      	subq	$0x30, %rsp
   19b44:      	movq	%rdi, %rax
   19b47:      	movq	%rsi, (%rsp)
   19b4b:      	movq	%rdx, 0x8(%rsp)
   19b50:      	movq	(%rsp), %rdx
   19b54:      	movq	0x8(%rsp), %rcx
   19b59:      	movq	%rdx, 0x10(%rsp)
   19b5e:      	movq	%rcx, 0x18(%rsp)
   19b63:      	movq	%rdx, 0x20(%rsp)
   19b68:      	movq	%rcx, 0x28(%rsp)
   19b6d:      	movq	%rdx, 0x8(%rdi)
   19b71:      	movq	%rcx, 0x10(%rdi)
   19b75:      	movq	$0x1, (%rdi)
   19b7c:      	addq	$0x30, %rsp
   19b80:      	retq
   19b81:      	int3
   19b82:      	int3
   19b83:      	int3
   19b84:      	int3
   19b85:      	int3
   19b86:      	int3
   19b87:      	int3
   19b88:      	int3
   19b89:      	int3
   19b8a:      	int3
   19b8b:      	int3
   19b8c:      	int3
   19b8d:      	int3
   19b8e:      	int3
   19b8f:      	int3

0000000000019b90 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0e47502b16774bc0E>:
   19b90:      	subq	$0x58, %rsp
   19b94:      	movq	%r8, 0x8(%rsp)
   19b99:      	movq	%rcx, 0x10(%rsp)
   19b9e:      	movq	%rdx, 0x18(%rsp)
   19ba3:      	movq	%rdi, 0x20(%rsp)
   19ba8:      	movq	%rsi, 0x28(%rsp)
   19bad:      	movq	%rdx, 0x38(%rsp)
   19bb2:      	movq	%rcx, 0x40(%rsp)
   19bb7:      	xorl	%eax, %eax
   19bb9:      	movl	$0x1, %ecx
   19bbe:      	cmpq	$0x3, 0x20(%rsp)
   19bc4:      	cmoveq	%rcx, %rax
   19bc8:      	cmpq	$0x0, %rax
   19bcc:      	jne	0x19be7 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0e47502b16774bc0E+0x57>
   19bce:      	movq	0x20(%rsp), %rax
   19bd3:      	movq	0x28(%rsp), %rdx
   19bd8:      	movq	%rax, 0x48(%rsp)
   19bdd:      	movq	%rdx, 0x50(%rsp)
   19be2:      	addq	$0x58, %rsp
   19be6:      	retq
   19be7:      	movq	0x8(%rsp), %r8
   19bec:      	movq	0x10(%rsp), %rsi
   19bf1:      	movq	0x18(%rsp), %rdi
   19bf6:      	leaq	0x19a5b(%rip), %rcx     # 0x33658 <zlgk82z0l71lvh9+0x33658>
   19bfd:      	movq	0x215f4(%rip), %rax     # 0x3b1f8 <zlgk82z0l71lvh9+0x3b1f8>
   19c04:      	leaq	0x37(%rsp), %rdx
   19c09:      	callq	*%rax
   19c0b:      	ud2
   19c0d:      	int3
   19c0e:      	int3
   19c0f:      	int3

0000000000019c10 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h2bbb8dd4cc5f1a6fE>:
   19c10:      	subq	$0x28, %rsp
   19c14:      	movq	%rdx, (%rsp)
   19c18:      	movq	%rdi, 0x8(%rsp)
   19c1d:      	movq	%rsi, 0x10(%rsp)
   19c22:      	cmpq	$0x0, 0x8(%rsp)
   19c28:      	jne	0x19c39 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h2bbb8dd4cc5f1a6fE+0x29>
   19c2a:      	movq	0x10(%rsp), %rax
   19c2f:      	movq	%rax, 0x20(%rsp)
   19c34:      	addq	$0x28, %rsp
   19c38:      	retq
   19c39:      	movq	(%rsp), %r8
   19c3d:      	movq	0x10(%rsp), %rax
   19c42:      	movq	%rax, 0x18(%rsp)
   19c47:      	leaq	-0xafd4(%rip), %rdi     # 0xec7a <str.0+0x10a>
   19c4e:      	leaq	0x19a23(%rip), %rcx     # 0x33678 <zlgk82z0l71lvh9+0x33678>
   19c55:      	movq	0x2159c(%rip), %rax     # 0x3b1f8 <zlgk82z0l71lvh9+0x3b1f8>
   19c5c:      	movl	$0x2b, %esi
   19c61:      	leaq	0x18(%rsp), %rdx
   19c66:      	callq	*%rax
   19c68:      	ud2
   19c6a:      	int3
   19c6b:      	int3
   19c6c:      	int3
   19c6d:      	int3
   19c6e:      	int3
   19c6f:      	int3

0000000000019c70 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h194800a740a934a3E>:
   19c70:      	subq	$0x40, %rsp
   19c74:      	movq	%rsi, (%rsp)
   19c78:      	movq	%rdi, 0x8(%rsp)
   19c7d:      	movq	%rdi, 0x10(%rsp)
   19c82:      	movl	$0x1, %eax
   19c87:      	xorl	%ecx, %ecx
   19c89:      	cmpq	$0x2, (%rsi)
   19c8d:      	cmoveq	%rcx, %rax
   19c91:      	cmpq	$0x0, %rax
   19c95:      	jne	0x19cb6 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h194800a740a934a3E+0x46>
   19c97:      	movq	0x8(%rsp), %rax
   19c9c:      	movq	(%rsp), %rcx
   19ca0:      	movq	0x8(%rcx), %rcx
   19ca4:      	movq	%rcx, 0x28(%rsp)
   19ca9:      	movq	%rcx, 0x8(%rax)
   19cad:      	movq	$0x2, (%rax)
   19cb4:      	jmp	0x19ceb <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h194800a740a934a3E+0x7b>
   19cb6:      	movq	0x8(%rsp), %rax
   19cbb:      	movq	(%rsp), %rcx
   19cbf:      	movq	(%rcx), %rdx
   19cc2:      	movq	0x8(%rcx), %rcx
   19cc6:      	movq	%rdx, 0x30(%rsp)
   19ccb:      	movq	%rcx, 0x38(%rsp)
   19cd0:      	movq	%rdx, 0x18(%rsp)
   19cd5:      	movq	%rcx, 0x20(%rsp)
   19cda:      	movq	0x18(%rsp), %rdx
   19cdf:      	movq	0x20(%rsp), %rcx
   19ce4:      	movq	%rdx, (%rax)
   19ce7:      	movq	%rcx, 0x8(%rax)
   19ceb:      	movq	0x10(%rsp), %rax
   19cf0:      	addq	$0x40, %rsp
   19cf4:      	retq
   19cf5:      	int3
   19cf6:      	int3
   19cf7:      	int3
   19cf8:      	int3
   19cf9:      	int3
   19cfa:      	int3
   19cfb:      	int3
   19cfc:      	int3
   19cfd:      	int3
   19cfe:      	int3
   19cff:      	int3

0000000000019d00 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ddf5ddd001774c7E>:
   19d00:      	subq	$0x48, %rsp
   19d04:      	movq	%rdi, (%rsp)
   19d08:      	movq	%rsi, 0x8(%rsp)
   19d0d:      	movl	$0x1, %eax
   19d12:      	xorl	%ecx, %ecx
   19d14:      	cmpq	$0x2, (%rsp)
   19d19:      	cmoveq	%rcx, %rax
   19d1d:      	cmpq	$0x0, %rax
   19d21:      	jne	0x19d2e <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ddf5ddd001774c7E+0x2e>
   19d23:      	movq	$0x2, 0x10(%rsp)
   19d2c:      	jmp	0x19d5f <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h1ddf5ddd001774c7E+0x5f>
   19d2e:      	movq	(%rsp), %rcx
   19d32:      	movq	0x8(%rsp), %rax
   19d37:      	movq	%rcx, 0x38(%rsp)
   19d3c:      	movq	%rax, 0x40(%rsp)
   19d41:      	movq	%rcx, 0x20(%rsp)
   19d46:      	movq	%rax, 0x28(%rsp)
   19d4b:      	movq	0x20(%rsp), %rcx
   19d50:      	movq	0x28(%rsp), %rax
   19d55:      	movq	%rcx, 0x10(%rsp)
   19d5a:      	movq	%rax, 0x18(%rsp)
   19d5f:      	movq	0x10(%rsp), %rax
   19d64:      	movq	0x18(%rsp), %rdx
   19d69:      	addq	$0x48, %rsp
   19d6d:      	retq
   19d6e:      	int3
   19d6f:      	int3

0000000000019d70 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7a03d5f7a962abf2E>:
   19d70:      	subq	$0x48, %rsp
   19d74:      	movq	%rsi, (%rsp)
   19d78:      	movq	%rdi, 0x8(%rsp)
   19d7d:      	movq	%rdi, 0x10(%rsp)
   19d82:      	cmpq	$0x0, (%rsi)
   19d86:      	jne	0x19dbc <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7a03d5f7a962abf2E+0x4c>
   19d88:      	movq	0x8(%rsp), %rax
   19d8d:      	movq	(%rsp), %rcx
   19d91:      	movq	0x8(%rcx), %rdx
   19d95:      	movb	0x10(%rcx), %cl
   19d98:      	movq	%rdx, 0x28(%rsp)
   19d9d:      	movb	%cl, %sil
   19da0:      	andb	$0x1, %sil
   19da4:      	movb	%sil, 0x30(%rsp)
   19da9:      	movq	%rdx, 0x8(%rax)
   19dad:      	andb	$0x1, %cl
   19db0:      	movb	%cl, 0x10(%rax)
   19db3:      	movq	$0x0, (%rax)
   19dba:      	jmp	0x19dfa <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h7a03d5f7a962abf2E+0x8a>
   19dbc:      	movq	0x8(%rsp), %rax
   19dc1:      	movq	(%rsp), %rcx
   19dc5:      	movq	0x8(%rcx), %rdx
   19dc9:      	movq	0x10(%rcx), %rcx
   19dcd:      	movq	%rdx, 0x38(%rsp)
   19dd2:      	movq	%rcx, 0x40(%rsp)
   19dd7:      	movq	%rdx, 0x18(%rsp)
   19ddc:      	movq	%rcx, 0x20(%rsp)
   19de1:      	movq	0x18(%rsp), %rdx
   19de6:      	movq	0x20(%rsp), %rcx
   19deb:      	movq	%rdx, 0x8(%rax)
   19def:      	movq	%rcx, 0x10(%rax)
   19df3:      	movq	$0x1, (%rax)
   19dfa:      	movq	0x10(%rsp), %rax
   19dff:      	addq	$0x48, %rsp
   19e03:      	retq
   19e04:      	int3
   19e05:      	int3
   19e06:      	int3
   19e07:      	int3
   19e08:      	int3
   19e09:      	int3
   19e0a:      	int3
   19e0b:      	int3
   19e0c:      	int3
   19e0d:      	int3
   19e0e:      	int3
   19e0f:      	int3

0000000000019e10 <<conquer_once::cell::WouldBlockError as core::convert::From<conquer_once::state::TryBlockError>>::from::h9755ed0552788a0c>:
   19e10:      	subq	$0x18, %rsp
   19e14:      	movq	%rdi, 0x8(%rsp)
   19e19:      	movq	%rsi, 0x10(%rsp)
   19e1e:      	cmpq	$0x0, 0x8(%rsp)
   19e24:      	jne	0x19e44 <<conquer_once::cell::WouldBlockError as core::convert::From<conquer_once::state::TryBlockError>>::from::h9755ed0552788a0c+0x34>
   19e26:      	leaq	-0xb188(%rip), %rdi     # 0xeca5 <str.0+0x135>
   19e2d:      	leaq	0x19864(%rip), %rdx     # 0x33698 <zlgk82z0l71lvh9+0x33698>
   19e34:      	movq	0x21095(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   19e3b:      	movl	$0x28, %esi
   19e40:      	callq	*%rax
   19e42:      	ud2
   19e44:      	addq	$0x18, %rsp
   19e48:      	retq
   19e49:      	int3
   19e4a:      	int3
   19e4b:      	int3
   19e4c:      	int3
   19e4d:      	int3
   19e4e:      	int3
   19e4f:      	int3

0000000000019e50 <core::fmt::Arguments::new_const::hd61927937bbec353>:
   19e50:      	subq	$0x78, %rsp
   19e54:      	movq	%rdx, 0x8(%rsp)
   19e59:      	movq	%rsi, 0x10(%rsp)
   19e5e:      	movq	%rdi, 0x18(%rsp)
   19e63:      	movq	%rdi, 0x20(%rsp)
   19e68:      	movq	%rsi, 0x68(%rsp)
   19e6d:      	movq	%rdx, 0x70(%rsp)
   19e72:      	cmpq	$0x1, %rdx
   19e76:      	ja	0x19ec6 <core::fmt::Arguments::new_const::hd61927937bbec353+0x76>
   19e78:      	movq	0x20(%rsp), %rax
   19e7d:      	movq	0x18(%rsp), %rcx
   19e82:      	movq	0x8(%rsp), %rdx
   19e87:      	movq	0x10(%rsp), %rsi
   19e8c:      	movq	$0x0, 0x58(%rsp)
   19e95:      	movq	%rsi, (%rcx)
   19e98:      	movq	%rdx, 0x8(%rcx)
   19e9c:      	movq	0x58(%rsp), %rsi
   19ea1:      	movq	0x60(%rsp), %rdx
   19ea6:      	movq	%rsi, 0x20(%rcx)
   19eaa:      	movq	%rdx, 0x28(%rcx)
   19eae:      	leaq	-0xb165(%rip), %rdx     # 0xed50 <str.0+0x1e0>
   19eb5:      	movq	%rdx, 0x10(%rcx)
   19eb9:      	movq	$0x0, 0x18(%rcx)
   19ec1:      	addq	$0x78, %rsp
   19ec5:      	retq
   19ec6:      	leaq	0x197e3(%rip), %rsi     # 0x336b0 <zlgk82z0l71lvh9+0x336b0>
   19ecd:      	leaq	0x28(%rsp), %rdi
   19ed2:      	movq	%rdi, (%rsp)
   19ed6:      	movl	$0x1, %edx
   19edb:      	callq	0x19e50 <core::fmt::Arguments::new_const::hd61927937bbec353>
   19ee0:      	movq	(%rsp), %rdi
   19ee4:      	leaq	0x197d5(%rip), %rsi     # 0x336c0 <zlgk82z0l71lvh9+0x336c0>
   19eeb:      	movq	0x20fce(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   19ef2:      	callq	*%rax
   19ef4:      	ud2
   19ef6:      	int3
   19ef7:      	int3
   19ef8:      	int3
   19ef9:      	int3
   19efa:      	int3
   19efb:      	int3
   19efc:      	int3
   19efd:      	int3
   19efe:      	int3
   19eff:      	int3

0000000000019f00 <core::sync::atomic::AtomicUsize::store::h5296546d8e528eca>:
   19f00:      	subq	$0x28, %rsp
   19f04:      	movb	%dl, %al
   19f06:      	movq	%rdi, 0x8(%rsp)
   19f0b:      	movq	%rsi, 0x10(%rsp)
   19f10:      	movb	%al, 0x1f(%rsp)
   19f14:      	movq	%rdi, 0x20(%rsp)
   19f19:      	movzbl	%al, %edx
   19f1c:      	movq	0x212dd(%rip), %rax     # 0x3b200 <zlgk82z0l71lvh9+0x3b200>
   19f23:      	callq	*%rax
   19f25:      	addq	$0x28, %rsp
   19f29:      	retq
   19f2a:      	int3
   19f2b:      	int3
   19f2c:      	int3
   19f2d:      	int3
   19f2e:      	int3
   19f2f:      	int3

0000000000019f30 <core::sync::atomic::atomic_store::h13b4201709a5785f>:
   19f30:      	subq	$0xa8, %rsp
   19f37:      	movq	%rsi, 0x18(%rsp)
   19f3c:      	movq	%rdi, 0x20(%rsp)
   19f41:      	movb	%dl, %al
   19f43:      	movb	%al, 0x37(%rsp)
   19f47:      	movq	%rdi, 0x98(%rsp)
   19f4f:      	movq	%rsi, 0xa0(%rsp)
   19f57:      	movzbl	0x37(%rsp), %eax
   19f5c:      	movq	%rax, 0x28(%rsp)
   19f61:      	movq	0x28(%rsp), %rax
   19f66:      	leaq	-0xb235(%rip), %rcx     # 0xed38 <str.0+0x1c8>
   19f6d:      	movslq	(%rcx,%rax,4), %rax
   19f71:      	addq	%rcx, %rax
   19f74:      	jmpq	*%rax
   19f76:      	ud2
   19f78:      	movq	0x20(%rsp), %rax
   19f7d:      	movq	0x18(%rsp), %rcx
   19f82:      	movq	%rcx, (%rax)
   19f85:      	jmp	0x1a00a <core::sync::atomic::atomic_store::h13b4201709a5785f+0xda>
   19f8a:      	movq	0x20(%rsp), %rax
   19f8f:      	movq	0x18(%rsp), %rcx
   19f94:      	movq	%rcx, (%rax)
   19f97:      	jmp	0x1a00a <core::sync::atomic::atomic_store::h13b4201709a5785f+0xda>
   19f99:      	leaq	0x19738(%rip), %rsi     # 0x336d8 <zlgk82z0l71lvh9+0x336d8>
   19fa0:      	leaq	0x38(%rsp), %rdi
   19fa5:      	movq	%rdi, 0x10(%rsp)
   19faa:      	movl	$0x1, %edx
   19faf:      	callq	0x19e50 <core::fmt::Arguments::new_const::hd61927937bbec353>
   19fb4:      	movq	0x10(%rsp), %rdi
   19fb9:      	leaq	0x19728(%rip), %rsi     # 0x336e8 <zlgk82z0l71lvh9+0x336e8>
   19fc0:      	movq	0x20ef9(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   19fc7:      	callq	*%rax
   19fc9:      	ud2
   19fcb:      	leaq	0x1972e(%rip), %rsi     # 0x33700 <zlgk82z0l71lvh9+0x33700>
   19fd2:      	leaq	0x68(%rsp), %rdi
   19fd7:      	movq	%rdi, 0x8(%rsp)
   19fdc:      	movl	$0x1, %edx
   19fe1:      	callq	0x19e50 <core::fmt::Arguments::new_const::hd61927937bbec353>
   19fe6:      	movq	0x8(%rsp), %rdi
   19feb:      	leaq	0x1971e(%rip), %rsi     # 0x33710 <zlgk82z0l71lvh9+0x33710>
   19ff2:      	movq	0x20ec7(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   19ff9:      	callq	*%rax
   19ffb:      	ud2
   19ffd:      	movq	0x20(%rsp), %rcx
   1a002:      	movq	0x18(%rsp), %rax
   1a007:      	xchgq	%rax, (%rcx)
   1a00a:      	addq	$0xa8, %rsp
   1a011:      	retq
   1a012:      	int3
   1a013:      	int3
   1a014:      	int3
   1a015:      	int3
   1a016:      	int3
   1a017:      	int3
   1a018:      	int3
   1a019:      	int3
   1a01a:      	int3
   1a01b:      	int3
   1a01c:      	int3
   1a01d:      	int3
   1a01e:      	int3
   1a01f:      	int3

000000000001a020 <<spin::once::Finish as core::ops::drop::Drop>::drop::habb43462e2a9f3fd>:
   1a020:      	subq	$0x18, %rsp
   1a024:      	movq	%rdi, (%rsp)
   1a028:      	movq	%rdi, 0x10(%rsp)
   1a02d:      	testb	$0x1, 0x8(%rdi)
   1a031:      	jne	0x1a038 <<spin::once::Finish as core::ops::drop::Drop>::drop::habb43462e2a9f3fd+0x18>
   1a033:      	addq	$0x18, %rsp
   1a037:      	retq
   1a038:      	movq	(%rsp), %rax
   1a03c:      	movq	(%rax), %rdi
   1a03f:      	movb	$0x4, 0xf(%rsp)
   1a044:      	movb	0xf(%rsp), %al
   1a048:      	movzbl	%al, %edx
   1a04b:      	movl	$0x3, %esi
   1a050:      	callq	0x19f00 <core::sync::atomic::AtomicUsize::store::h5296546d8e528eca>
   1a055:      	jmp	0x1a033 <<spin::once::Finish as core::ops::drop::Drop>::drop::habb43462e2a9f3fd+0x13>
   1a057:      	int3
   1a058:      	int3
   1a059:      	int3
   1a05a:      	int3
   1a05b:      	int3
   1a05c:      	int3
   1a05d:      	int3
   1a05e:      	int3
   1a05f:      	int3

000000000001a060 <<conquer_once::state::PoisonError as core::fmt::Debug>::fmt::ha3385df5040b1573>:
   1a060:      	subq	$0x18, %rsp
   1a064:      	movq	%rsi, (%rsp)
   1a068:      	movq	%rdi, %rax
   1a06b:      	movq	(%rsp), %rdi
   1a06f:      	movq	%rax, 0x8(%rsp)
   1a074:      	movq	%rdi, 0x10(%rsp)
   1a079:      	leaq	-0xb1d4(%rip), %rsi     # 0xeeac <str.0+0x33c>
   1a080:      	movq	0x21011(%rip), %rax     # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   1a087:      	movl	$0xb, %edx
   1a08c:      	callq	*%rax
   1a08e:      	andb	$0x1, %al
   1a090:      	movzbl	%al, %eax
   1a093:      	addq	$0x18, %rsp
   1a097:      	retq
   1a098:      	int3
   1a099:      	int3
   1a09a:      	int3
   1a09b:      	int3
   1a09c:      	int3
   1a09d:      	int3
   1a09e:      	int3
   1a09f:      	int3

000000000001a0a0 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hb0d6deeef9d02eb1>:
   1a0a0:      	subq	$0x68, %rsp
   1a0a4:      	movq	%rdi, 0x18(%rsp)
   1a0a9:      	movq	%rdi, 0x50(%rsp)
   1a0ae:      	movq	0x2116b(%rip), %rax     # 0x3b220 <zlgk82z0l71lvh9+0x3b220>
   1a0b5:      	callq	*%rax
   1a0b7:      	movq	%rax, %rdi
   1a0ba:      	movq	0x21167(%rip), %rax     # 0x3b228 <zlgk82z0l71lvh9+0x3b228>
   1a0c1:      	callq	*%rax
   1a0c3:      	movq	%rax, 0x38(%rsp)
   1a0c8:      	movq	0x38(%rsp), %rdx
   1a0cd:      	xorl	%eax, %eax
   1a0cf:      	movl	$0x1, %ecx
   1a0d4:      	cmpq	$0x0, %rdx
   1a0d8:      	cmoveq	%rcx, %rax
   1a0dc:      	cmpq	$0x0, %rax
   1a0e0:      	jne	0x1a119 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hb0d6deeef9d02eb1+0x79>
   1a0e2:      	movq	0x18(%rsp), %rax
   1a0e7:      	movq	0x38(%rsp), %rcx
   1a0ec:      	movq	%rcx, (%rsp)
   1a0f0:      	movq	%rcx, 0x58(%rsp)
   1a0f5:      	movq	0x10(%rax), %rcx
   1a0f9:      	movq	%rcx, 0x8(%rsp)
   1a0fe:      	movq	%rcx, 0x60(%rsp)
   1a103:      	movq	0x10(%rax), %rax
   1a107:      	addq	$0x1, %rax
   1a10b:      	movq	%rax, 0x10(%rsp)
   1a110:      	setb	%al
   1a113:      	testb	$0x1, %al
   1a115:      	jne	0x1a165 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hb0d6deeef9d02eb1+0xc5>
   1a117:      	jmp	0x1a12e <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hb0d6deeef9d02eb1+0x8e>
   1a119:      	movq	0x21110(%rip), %rax     # 0x3b230 <zlgk82z0l71lvh9+0x3b230>
   1a120:      	callq	*%rax
   1a122:      	movq	%rdx, 0x30(%rsp)
   1a127:      	movq	%rax, 0x28(%rsp)
   1a12c:      	jmp	0x1a183 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hb0d6deeef9d02eb1+0xe3>
   1a12e:      	movq	(%rsp), %rax
   1a132:      	movq	0x8(%rsp), %rcx
   1a137:      	movq	0x18(%rsp), %rdx
   1a13c:      	movq	0x10(%rsp), %rsi
   1a141:      	movq	%rsi, 0x10(%rdx)
   1a145:      	movq	%rcx, 0x40(%rsp)
   1a14a:      	movq	%rax, 0x48(%rsp)
   1a14f:      	movq	0x40(%rsp), %rcx
   1a154:      	movq	0x48(%rsp), %rax
   1a159:      	movq	%rcx, 0x28(%rsp)
   1a15e:      	movq	%rax, 0x30(%rsp)
   1a163:      	jmp	0x1a183 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hb0d6deeef9d02eb1+0xe3>
   1a165:      	leaq	-0xb21c(%rip), %rdi     # 0xef50 <str.0>
   1a16c:      	leaq	0x195b5(%rip), %rdx     # 0x33728 <zlgk82z0l71lvh9+0x33728>
   1a173:      	movq	0x20d56(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1a17a:      	movl	$0x1c, %esi
   1a17f:      	callq	*%rax
   1a181:      	ud2
   1a183:      	movq	0x28(%rsp), %rax
   1a188:      	movq	0x30(%rsp), %rdx
   1a18d:      	addq	$0x68, %rsp
   1a191:      	retq
   1a192:      	int3
   1a193:      	int3
   1a194:      	int3
   1a195:      	int3
   1a196:      	int3
   1a197:      	int3
   1a198:      	int3
   1a199:      	int3
   1a19a:      	int3
   1a19b:      	int3
   1a19c:      	int3
   1a19d:      	int3
   1a19e:      	int3
   1a19f:      	int3

000000000001a1a0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b>:
   1a1a0:      	subq	$0x20, %rsp
   1a1a4:      	movl	%edi, 0x4(%rsp)
   1a1a8:      	movl	%edi, 0x1c(%rsp)
   1a1ac:      	subl	$0x20, %edi
   1a1af:      	je	0x1a758 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x5b8>
   1a1b5:      	jmp	0x1a1b7 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x17>
   1a1b7:      	movl	0x4(%rsp), %eax
   1a1bb:      	subl	$0x21, %eax
   1a1be:      	je	0x1a772 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x5d2>
   1a1c4:      	jmp	0x1a1c6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x26>
   1a1c6:      	movl	0x4(%rsp), %eax
   1a1ca:      	subl	$0x22, %eax
   1a1cd:      	je	0x1a78c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x5ec>
   1a1d3:      	jmp	0x1a1d5 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x35>
   1a1d5:      	movl	0x4(%rsp), %eax
   1a1d9:      	subl	$0x23, %eax
   1a1dc:      	je	0x1a7a6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x606>
   1a1e2:      	jmp	0x1a1e4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x44>
   1a1e4:      	movl	0x4(%rsp), %eax
   1a1e8:      	subl	$0x24, %eax
   1a1eb:      	je	0x1a7c0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x620>
   1a1f1:      	jmp	0x1a1f3 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x53>
   1a1f3:      	movl	0x4(%rsp), %eax
   1a1f7:      	subl	$0x25, %eax
   1a1fa:      	je	0x1a7da <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x63a>
   1a200:      	jmp	0x1a202 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x62>
   1a202:      	movl	0x4(%rsp), %eax
   1a206:      	subl	$0x26, %eax
   1a209:      	je	0x1a7f4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x654>
   1a20f:      	jmp	0x1a211 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x71>
   1a211:      	movl	0x4(%rsp), %eax
   1a215:      	subl	$0x27, %eax
   1a218:      	je	0x1a80e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x66e>
   1a21e:      	jmp	0x1a220 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x80>
   1a220:      	movl	0x4(%rsp), %eax
   1a224:      	subl	$0x28, %eax
   1a227:      	je	0x1a828 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x688>
   1a22d:      	jmp	0x1a22f <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x8f>
   1a22f:      	movl	0x4(%rsp), %eax
   1a233:      	subl	$0x29, %eax
   1a236:      	je	0x1a842 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x6a2>
   1a23c:      	jmp	0x1a23e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x9e>
   1a23e:      	movl	0x4(%rsp), %eax
   1a242:      	subl	$0x2a, %eax
   1a245:      	je	0x1a85c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x6bc>
   1a24b:      	jmp	0x1a24d <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xad>
   1a24d:      	movl	0x4(%rsp), %eax
   1a251:      	subl	$0x2b, %eax
   1a254:      	je	0x1a876 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x6d6>
   1a25a:      	jmp	0x1a25c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xbc>
   1a25c:      	movl	0x4(%rsp), %eax
   1a260:      	subl	$0x2c, %eax
   1a263:      	je	0x1a890 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x6f0>
   1a269:      	jmp	0x1a26b <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xcb>
   1a26b:      	movl	0x4(%rsp), %eax
   1a26f:      	subl	$0x2d, %eax
   1a272:      	je	0x1a8aa <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x70a>
   1a278:      	jmp	0x1a27a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xda>
   1a27a:      	movl	0x4(%rsp), %eax
   1a27e:      	subl	$0x2e, %eax
   1a281:      	je	0x1a8c4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x724>
   1a287:      	jmp	0x1a289 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xe9>
   1a289:      	movl	0x4(%rsp), %eax
   1a28d:      	subl	$0x2f, %eax
   1a290:      	je	0x1a8de <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x73e>
   1a296:      	jmp	0x1a298 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf8>
   1a298:      	movl	0x4(%rsp), %eax
   1a29c:      	subl	$0x30, %eax
   1a29f:      	je	0x1a8f8 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x758>
   1a2a5:      	jmp	0x1a2a7 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x107>
   1a2a7:      	movl	0x4(%rsp), %eax
   1a2ab:      	subl	$0x31, %eax
   1a2ae:      	je	0x1a912 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x772>
   1a2b4:      	jmp	0x1a2b6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x116>
   1a2b6:      	movl	0x4(%rsp), %eax
   1a2ba:      	subl	$0x32, %eax
   1a2bd:      	je	0x1a92c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x78c>
   1a2c3:      	jmp	0x1a2c5 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x125>
   1a2c5:      	movl	0x4(%rsp), %eax
   1a2c9:      	subl	$0x33, %eax
   1a2cc:      	je	0x1a946 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x7a6>
   1a2d2:      	jmp	0x1a2d4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x134>
   1a2d4:      	movl	0x4(%rsp), %eax
   1a2d8:      	subl	$0x34, %eax
   1a2db:      	je	0x1a960 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x7c0>
   1a2e1:      	jmp	0x1a2e3 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x143>
   1a2e3:      	movl	0x4(%rsp), %eax
   1a2e7:      	subl	$0x35, %eax
   1a2ea:      	je	0x1a97a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x7da>
   1a2f0:      	jmp	0x1a2f2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x152>
   1a2f2:      	movl	0x4(%rsp), %eax
   1a2f6:      	subl	$0x36, %eax
   1a2f9:      	je	0x1a994 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x7f4>
   1a2ff:      	jmp	0x1a301 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x161>
   1a301:      	movl	0x4(%rsp), %eax
   1a305:      	subl	$0x37, %eax
   1a308:      	je	0x1a9ae <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x80e>
   1a30e:      	jmp	0x1a310 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x170>
   1a310:      	movl	0x4(%rsp), %eax
   1a314:      	subl	$0x38, %eax
   1a317:      	je	0x1a9c8 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x828>
   1a31d:      	jmp	0x1a31f <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x17f>
   1a31f:      	movl	0x4(%rsp), %eax
   1a323:      	subl	$0x39, %eax
   1a326:      	je	0x1a9e2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x842>
   1a32c:      	jmp	0x1a32e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x18e>
   1a32e:      	movl	0x4(%rsp), %eax
   1a332:      	subl	$0x3a, %eax
   1a335:      	je	0x1a9fc <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x85c>
   1a33b:      	jmp	0x1a33d <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x19d>
   1a33d:      	movl	0x4(%rsp), %eax
   1a341:      	subl	$0x3b, %eax
   1a344:      	je	0x1aa16 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x876>
   1a34a:      	jmp	0x1a34c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x1ac>
   1a34c:      	movl	0x4(%rsp), %eax
   1a350:      	subl	$0x3c, %eax
   1a353:      	je	0x1aa30 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x890>
   1a359:      	jmp	0x1a35b <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x1bb>
   1a35b:      	movl	0x4(%rsp), %eax
   1a35f:      	subl	$0x3d, %eax
   1a362:      	je	0x1aa4a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x8aa>
   1a368:      	jmp	0x1a36a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x1ca>
   1a36a:      	movl	0x4(%rsp), %eax
   1a36e:      	subl	$0x3e, %eax
   1a371:      	je	0x1aa64 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x8c4>
   1a377:      	jmp	0x1a379 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x1d9>
   1a379:      	movl	0x4(%rsp), %eax
   1a37d:      	subl	$0x3f, %eax
   1a380:      	je	0x1aa7e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x8de>
   1a386:      	jmp	0x1a388 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x1e8>
   1a388:      	movl	0x4(%rsp), %eax
   1a38c:      	subl	$0x40, %eax
   1a38f:      	je	0x1aa98 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x8f8>
   1a395:      	jmp	0x1a397 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x1f7>
   1a397:      	movl	0x4(%rsp), %eax
   1a39b:      	subl	$0x41, %eax
   1a39e:      	je	0x1aab2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x912>
   1a3a4:      	jmp	0x1a3a6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x206>
   1a3a6:      	movl	0x4(%rsp), %eax
   1a3aa:      	subl	$0x42, %eax
   1a3ad:      	je	0x1aacc <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x92c>
   1a3b3:      	jmp	0x1a3b5 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x215>
   1a3b5:      	movl	0x4(%rsp), %eax
   1a3b9:      	subl	$0x43, %eax
   1a3bc:      	je	0x1aae6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x946>
   1a3c2:      	jmp	0x1a3c4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x224>
   1a3c4:      	movl	0x4(%rsp), %eax
   1a3c8:      	subl	$0x44, %eax
   1a3cb:      	je	0x1ab00 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x960>
   1a3d1:      	jmp	0x1a3d3 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x233>
   1a3d3:      	movl	0x4(%rsp), %eax
   1a3d7:      	subl	$0x45, %eax
   1a3da:      	je	0x1ab1a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x97a>
   1a3e0:      	jmp	0x1a3e2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x242>
   1a3e2:      	movl	0x4(%rsp), %eax
   1a3e6:      	subl	$0x46, %eax
   1a3e9:      	je	0x1ab34 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x994>
   1a3ef:      	jmp	0x1a3f1 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x251>
   1a3f1:      	movl	0x4(%rsp), %eax
   1a3f5:      	subl	$0x47, %eax
   1a3f8:      	je	0x1ab4e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x9ae>
   1a3fe:      	jmp	0x1a400 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x260>
   1a400:      	movl	0x4(%rsp), %eax
   1a404:      	subl	$0x48, %eax
   1a407:      	je	0x1ab68 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x9c8>
   1a40d:      	jmp	0x1a40f <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x26f>
   1a40f:      	movl	0x4(%rsp), %eax
   1a413:      	subl	$0x49, %eax
   1a416:      	je	0x1ab82 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x9e2>
   1a41c:      	jmp	0x1a41e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x27e>
   1a41e:      	movl	0x4(%rsp), %eax
   1a422:      	subl	$0x4a, %eax
   1a425:      	je	0x1ab9c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x9fc>
   1a42b:      	jmp	0x1a42d <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x28d>
   1a42d:      	movl	0x4(%rsp), %eax
   1a431:      	subl	$0x4b, %eax
   1a434:      	je	0x1abb6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xa16>
   1a43a:      	jmp	0x1a43c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x29c>
   1a43c:      	movl	0x4(%rsp), %eax
   1a440:      	subl	$0x4c, %eax
   1a443:      	je	0x1abd0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xa30>
   1a449:      	jmp	0x1a44b <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x2ab>
   1a44b:      	movl	0x4(%rsp), %eax
   1a44f:      	subl	$0x4d, %eax
   1a452:      	je	0x1abea <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xa4a>
   1a458:      	jmp	0x1a45a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x2ba>
   1a45a:      	movl	0x4(%rsp), %eax
   1a45e:      	subl	$0x4e, %eax
   1a461:      	je	0x1ac04 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xa64>
   1a467:      	jmp	0x1a469 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x2c9>
   1a469:      	movl	0x4(%rsp), %eax
   1a46d:      	subl	$0x4f, %eax
   1a470:      	je	0x1ac1e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xa7e>
   1a476:      	jmp	0x1a478 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x2d8>
   1a478:      	movl	0x4(%rsp), %eax
   1a47c:      	subl	$0x50, %eax
   1a47f:      	je	0x1ac38 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xa98>
   1a485:      	jmp	0x1a487 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x2e7>
   1a487:      	movl	0x4(%rsp), %eax
   1a48b:      	subl	$0x51, %eax
   1a48e:      	je	0x1ac52 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xab2>
   1a494:      	jmp	0x1a496 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x2f6>
   1a496:      	movl	0x4(%rsp), %eax
   1a49a:      	subl	$0x52, %eax
   1a49d:      	je	0x1ac6c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xacc>
   1a4a3:      	jmp	0x1a4a5 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x305>
   1a4a5:      	movl	0x4(%rsp), %eax
   1a4a9:      	subl	$0x53, %eax
   1a4ac:      	je	0x1ac86 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xae6>
   1a4b2:      	jmp	0x1a4b4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x314>
   1a4b4:      	movl	0x4(%rsp), %eax
   1a4b8:      	subl	$0x54, %eax
   1a4bb:      	je	0x1aca0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xb00>
   1a4c1:      	jmp	0x1a4c3 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x323>
   1a4c3:      	movl	0x4(%rsp), %eax
   1a4c7:      	subl	$0x55, %eax
   1a4ca:      	je	0x1acba <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xb1a>
   1a4d0:      	jmp	0x1a4d2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x332>
   1a4d2:      	movl	0x4(%rsp), %eax
   1a4d6:      	subl	$0x56, %eax
   1a4d9:      	je	0x1acd4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xb34>
   1a4df:      	jmp	0x1a4e1 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x341>
   1a4e1:      	movl	0x4(%rsp), %eax
   1a4e5:      	subl	$0x57, %eax
   1a4e8:      	je	0x1acee <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xb4e>
   1a4ee:      	jmp	0x1a4f0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x350>
   1a4f0:      	movl	0x4(%rsp), %eax
   1a4f4:      	subl	$0x58, %eax
   1a4f7:      	je	0x1ad08 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xb68>
   1a4fd:      	jmp	0x1a4ff <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x35f>
   1a4ff:      	movl	0x4(%rsp), %eax
   1a503:      	subl	$0x59, %eax
   1a506:      	je	0x1ad22 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xb82>
   1a50c:      	jmp	0x1a50e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x36e>
   1a50e:      	movl	0x4(%rsp), %eax
   1a512:      	subl	$0x5a, %eax
   1a515:      	je	0x1ad3c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xb9c>
   1a51b:      	jmp	0x1a51d <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x37d>
   1a51d:      	movl	0x4(%rsp), %eax
   1a521:      	subl	$0x5b, %eax
   1a524:      	je	0x1ad56 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xbb6>
   1a52a:      	jmp	0x1a52c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x38c>
   1a52c:      	movl	0x4(%rsp), %eax
   1a530:      	subl	$0x5c, %eax
   1a533:      	je	0x1ad70 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xbd0>
   1a539:      	jmp	0x1a53b <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x39b>
   1a53b:      	movl	0x4(%rsp), %eax
   1a53f:      	subl	$0x5d, %eax
   1a542:      	je	0x1ad8a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xbea>
   1a548:      	jmp	0x1a54a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x3aa>
   1a54a:      	movl	0x4(%rsp), %eax
   1a54e:      	subl	$0x5e, %eax
   1a551:      	je	0x1ada4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xc04>
   1a557:      	jmp	0x1a559 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x3b9>
   1a559:      	movl	0x4(%rsp), %eax
   1a55d:      	subl	$0x5f, %eax
   1a560:      	je	0x1adbe <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xc1e>
   1a566:      	jmp	0x1a568 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x3c8>
   1a568:      	movl	0x4(%rsp), %eax
   1a56c:      	subl	$0x60, %eax
   1a56f:      	je	0x1add8 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xc38>
   1a575:      	jmp	0x1a577 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x3d7>
   1a577:      	movl	0x4(%rsp), %eax
   1a57b:      	subl	$0x61, %eax
   1a57e:      	je	0x1adf2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xc52>
   1a584:      	jmp	0x1a586 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x3e6>
   1a586:      	movl	0x4(%rsp), %eax
   1a58a:      	subl	$0x62, %eax
   1a58d:      	je	0x1ae0c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xc6c>
   1a593:      	jmp	0x1a595 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x3f5>
   1a595:      	movl	0x4(%rsp), %eax
   1a599:      	subl	$0x63, %eax
   1a59c:      	je	0x1ae26 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xc86>
   1a5a2:      	jmp	0x1a5a4 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x404>
   1a5a4:      	movl	0x4(%rsp), %eax
   1a5a8:      	subl	$0x64, %eax
   1a5ab:      	je	0x1ae40 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xca0>
   1a5b1:      	jmp	0x1a5b3 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x413>
   1a5b3:      	movl	0x4(%rsp), %eax
   1a5b7:      	subl	$0x65, %eax
   1a5ba:      	je	0x1ae5a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xcba>
   1a5c0:      	jmp	0x1a5c2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x422>
   1a5c2:      	movl	0x4(%rsp), %eax
   1a5c6:      	subl	$0x66, %eax
   1a5c9:      	je	0x1ae74 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xcd4>
   1a5cf:      	jmp	0x1a5d1 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x431>
   1a5d1:      	movl	0x4(%rsp), %eax
   1a5d5:      	subl	$0x67, %eax
   1a5d8:      	je	0x1ae8e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xcee>
   1a5de:      	jmp	0x1a5e0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x440>
   1a5e0:      	movl	0x4(%rsp), %eax
   1a5e4:      	subl	$0x68, %eax
   1a5e7:      	je	0x1aea8 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xd08>
   1a5ed:      	jmp	0x1a5ef <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x44f>
   1a5ef:      	movl	0x4(%rsp), %eax
   1a5f3:      	subl	$0x69, %eax
   1a5f6:      	je	0x1aec2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xd22>
   1a5fc:      	jmp	0x1a5fe <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x45e>
   1a5fe:      	movl	0x4(%rsp), %eax
   1a602:      	subl	$0x6a, %eax
   1a605:      	je	0x1aedc <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xd3c>
   1a60b:      	jmp	0x1a60d <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x46d>
   1a60d:      	movl	0x4(%rsp), %eax
   1a611:      	subl	$0x6b, %eax
   1a614:      	je	0x1aef6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xd56>
   1a61a:      	jmp	0x1a61c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x47c>
   1a61c:      	movl	0x4(%rsp), %eax
   1a620:      	subl	$0x6c, %eax
   1a623:      	je	0x1af10 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xd70>
   1a629:      	jmp	0x1a62b <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x48b>
   1a62b:      	movl	0x4(%rsp), %eax
   1a62f:      	subl	$0x6d, %eax
   1a632:      	je	0x1af2a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xd8a>
   1a638:      	jmp	0x1a63a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x49a>
   1a63a:      	movl	0x4(%rsp), %eax
   1a63e:      	subl	$0x6e, %eax
   1a641:      	je	0x1af44 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xda4>
   1a647:      	jmp	0x1a649 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x4a9>
   1a649:      	movl	0x4(%rsp), %eax
   1a64d:      	subl	$0x6f, %eax
   1a650:      	je	0x1af5e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xdbe>
   1a656:      	jmp	0x1a658 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x4b8>
   1a658:      	movl	0x4(%rsp), %eax
   1a65c:      	subl	$0x70, %eax
   1a65f:      	je	0x1af78 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xdd8>
   1a665:      	jmp	0x1a667 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x4c7>
   1a667:      	movl	0x4(%rsp), %eax
   1a66b:      	subl	$0x71, %eax
   1a66e:      	je	0x1af92 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xdf2>
   1a674:      	jmp	0x1a676 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x4d6>
   1a676:      	movl	0x4(%rsp), %eax
   1a67a:      	subl	$0x72, %eax
   1a67d:      	je	0x1afac <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xe0c>
   1a683:      	jmp	0x1a685 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x4e5>
   1a685:      	movl	0x4(%rsp), %eax
   1a689:      	subl	$0x73, %eax
   1a68c:      	je	0x1afc6 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xe26>
   1a692:      	jmp	0x1a694 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x4f4>
   1a694:      	movl	0x4(%rsp), %eax
   1a698:      	subl	$0x74, %eax
   1a69b:      	je	0x1afe0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xe40>
   1a6a1:      	jmp	0x1a6a3 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x503>
   1a6a3:      	movl	0x4(%rsp), %eax
   1a6a7:      	subl	$0x75, %eax
   1a6aa:      	je	0x1affa <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xe5a>
   1a6b0:      	jmp	0x1a6b2 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x512>
   1a6b2:      	movl	0x4(%rsp), %eax
   1a6b6:      	subl	$0x76, %eax
   1a6b9:      	je	0x1b014 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xe74>
   1a6bf:      	jmp	0x1a6c1 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x521>
   1a6c1:      	movl	0x4(%rsp), %eax
   1a6c5:      	subl	$0x77, %eax
   1a6c8:      	je	0x1b02e <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xe8e>
   1a6ce:      	jmp	0x1a6d0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x530>
   1a6d0:      	movl	0x4(%rsp), %eax
   1a6d4:      	subl	$0x78, %eax
   1a6d7:      	je	0x1b048 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xea8>
   1a6dd:      	jmp	0x1a6df <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x53f>
   1a6df:      	movl	0x4(%rsp), %eax
   1a6e3:      	subl	$0x79, %eax
   1a6e6:      	je	0x1b062 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xec2>
   1a6ec:      	jmp	0x1a6ee <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x54e>
   1a6ee:      	movl	0x4(%rsp), %eax
   1a6f2:      	subl	$0x7a, %eax
   1a6f5:      	je	0x1b07c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xedc>
   1a6fb:      	jmp	0x1a6fd <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x55d>
   1a6fd:      	movl	0x4(%rsp), %eax
   1a701:      	subl	$0x7b, %eax
   1a704:      	je	0x1b093 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xef3>
   1a70a:      	jmp	0x1a70c <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x56c>
   1a70c:      	movl	0x4(%rsp), %eax
   1a710:      	subl	$0x7c, %eax
   1a713:      	je	0x1b0aa <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf0a>
   1a719:      	jmp	0x1a71b <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x57b>
   1a71b:      	movl	0x4(%rsp), %eax
   1a71f:      	subl	$0x7d, %eax
   1a722:      	je	0x1b0c1 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf21>
   1a728:      	jmp	0x1a72a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x58a>
   1a72a:      	movl	0x4(%rsp), %eax
   1a72e:      	subl	$0x7e, %eax
   1a731:      	je	0x1b0d8 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf38>
   1a737:      	jmp	0x1a739 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x599>
   1a739:      	movl	0x4(%rsp), %eax
   1a73d:      	subl	$0xfffd, %eax           # imm = 0xFFFD
   1a742:      	je	0x1b0ef <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf4f>
   1a748:      	jmp	0x1a74a <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0x5aa>
   1a74a:      	movq	$0x0, 0x8(%rsp)
   1a753:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a758:      	leaq	0x18fe1(%rip), %rax     # 0x33740 <zlgk82z0l71lvh9+0x33740>
   1a75f:      	movq	%rax, 0x8(%rsp)
   1a764:      	movq	$0x10, 0x10(%rsp)
   1a76d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a772:      	leaq	0x190c7(%rip), %rax     # 0x33840 <zlgk82z0l71lvh9+0x33840>
   1a779:      	movq	%rax, 0x8(%rsp)
   1a77e:      	movq	$0x10, 0x10(%rsp)
   1a787:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a78c:      	leaq	0x191ad(%rip), %rax     # 0x33940 <zlgk82z0l71lvh9+0x33940>
   1a793:      	movq	%rax, 0x8(%rsp)
   1a798:      	movq	$0x10, 0x10(%rsp)
   1a7a1:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a7a6:      	leaq	0x19293(%rip), %rax     # 0x33a40 <zlgk82z0l71lvh9+0x33a40>
   1a7ad:      	movq	%rax, 0x8(%rsp)
   1a7b2:      	movq	$0x10, 0x10(%rsp)
   1a7bb:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a7c0:      	leaq	0x19379(%rip), %rax     # 0x33b40 <zlgk82z0l71lvh9+0x33b40>
   1a7c7:      	movq	%rax, 0x8(%rsp)
   1a7cc:      	movq	$0x10, 0x10(%rsp)
   1a7d5:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a7da:      	leaq	0x1945f(%rip), %rax     # 0x33c40 <zlgk82z0l71lvh9+0x33c40>
   1a7e1:      	movq	%rax, 0x8(%rsp)
   1a7e6:      	movq	$0x10, 0x10(%rsp)
   1a7ef:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a7f4:      	leaq	0x19545(%rip), %rax     # 0x33d40 <zlgk82z0l71lvh9+0x33d40>
   1a7fb:      	movq	%rax, 0x8(%rsp)
   1a800:      	movq	$0x10, 0x10(%rsp)
   1a809:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a80e:      	leaq	0x1962b(%rip), %rax     # 0x33e40 <zlgk82z0l71lvh9+0x33e40>
   1a815:      	movq	%rax, 0x8(%rsp)
   1a81a:      	movq	$0x10, 0x10(%rsp)
   1a823:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a828:      	leaq	0x19711(%rip), %rax     # 0x33f40 <zlgk82z0l71lvh9+0x33f40>
   1a82f:      	movq	%rax, 0x8(%rsp)
   1a834:      	movq	$0x10, 0x10(%rsp)
   1a83d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a842:      	leaq	0x197f7(%rip), %rax     # 0x34040 <zlgk82z0l71lvh9+0x34040>
   1a849:      	movq	%rax, 0x8(%rsp)
   1a84e:      	movq	$0x10, 0x10(%rsp)
   1a857:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a85c:      	leaq	0x198dd(%rip), %rax     # 0x34140 <zlgk82z0l71lvh9+0x34140>
   1a863:      	movq	%rax, 0x8(%rsp)
   1a868:      	movq	$0x10, 0x10(%rsp)
   1a871:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a876:      	leaq	0x199c3(%rip), %rax     # 0x34240 <zlgk82z0l71lvh9+0x34240>
   1a87d:      	movq	%rax, 0x8(%rsp)
   1a882:      	movq	$0x10, 0x10(%rsp)
   1a88b:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a890:      	leaq	0x19aa9(%rip), %rax     # 0x34340 <zlgk82z0l71lvh9+0x34340>
   1a897:      	movq	%rax, 0x8(%rsp)
   1a89c:      	movq	$0x10, 0x10(%rsp)
   1a8a5:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a8aa:      	leaq	0x19b8f(%rip), %rax     # 0x34440 <zlgk82z0l71lvh9+0x34440>
   1a8b1:      	movq	%rax, 0x8(%rsp)
   1a8b6:      	movq	$0x10, 0x10(%rsp)
   1a8bf:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a8c4:      	leaq	0x19c75(%rip), %rax     # 0x34540 <zlgk82z0l71lvh9+0x34540>
   1a8cb:      	movq	%rax, 0x8(%rsp)
   1a8d0:      	movq	$0x10, 0x10(%rsp)
   1a8d9:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a8de:      	leaq	0x19d5b(%rip), %rax     # 0x34640 <zlgk82z0l71lvh9+0x34640>
   1a8e5:      	movq	%rax, 0x8(%rsp)
   1a8ea:      	movq	$0x10, 0x10(%rsp)
   1a8f3:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a8f8:      	leaq	0x19e41(%rip), %rax     # 0x34740 <zlgk82z0l71lvh9+0x34740>
   1a8ff:      	movq	%rax, 0x8(%rsp)
   1a904:      	movq	$0x10, 0x10(%rsp)
   1a90d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a912:      	leaq	0x19f27(%rip), %rax     # 0x34840 <zlgk82z0l71lvh9+0x34840>
   1a919:      	movq	%rax, 0x8(%rsp)
   1a91e:      	movq	$0x10, 0x10(%rsp)
   1a927:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a92c:      	leaq	0x1a00d(%rip), %rax     # 0x34940 <zlgk82z0l71lvh9+0x34940>
   1a933:      	movq	%rax, 0x8(%rsp)
   1a938:      	movq	$0x10, 0x10(%rsp)
   1a941:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a946:      	leaq	0x1a0f3(%rip), %rax     # 0x34a40 <zlgk82z0l71lvh9+0x34a40>
   1a94d:      	movq	%rax, 0x8(%rsp)
   1a952:      	movq	$0x10, 0x10(%rsp)
   1a95b:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a960:      	leaq	0x1a1d9(%rip), %rax     # 0x34b40 <zlgk82z0l71lvh9+0x34b40>
   1a967:      	movq	%rax, 0x8(%rsp)
   1a96c:      	movq	$0x10, 0x10(%rsp)
   1a975:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a97a:      	leaq	0x1a2bf(%rip), %rax     # 0x34c40 <zlgk82z0l71lvh9+0x34c40>
   1a981:      	movq	%rax, 0x8(%rsp)
   1a986:      	movq	$0x10, 0x10(%rsp)
   1a98f:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a994:      	leaq	0x1a3a5(%rip), %rax     # 0x34d40 <zlgk82z0l71lvh9+0x34d40>
   1a99b:      	movq	%rax, 0x8(%rsp)
   1a9a0:      	movq	$0x10, 0x10(%rsp)
   1a9a9:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a9ae:      	leaq	0x1a48b(%rip), %rax     # 0x34e40 <zlgk82z0l71lvh9+0x34e40>
   1a9b5:      	movq	%rax, 0x8(%rsp)
   1a9ba:      	movq	$0x10, 0x10(%rsp)
   1a9c3:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a9c8:      	leaq	0x1a571(%rip), %rax     # 0x34f40 <zlgk82z0l71lvh9+0x34f40>
   1a9cf:      	movq	%rax, 0x8(%rsp)
   1a9d4:      	movq	$0x10, 0x10(%rsp)
   1a9dd:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a9e2:      	leaq	0x1a657(%rip), %rax     # 0x35040 <zlgk82z0l71lvh9+0x35040>
   1a9e9:      	movq	%rax, 0x8(%rsp)
   1a9ee:      	movq	$0x10, 0x10(%rsp)
   1a9f7:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1a9fc:      	leaq	0x1a73d(%rip), %rax     # 0x35140 <zlgk82z0l71lvh9+0x35140>
   1aa03:      	movq	%rax, 0x8(%rsp)
   1aa08:      	movq	$0x10, 0x10(%rsp)
   1aa11:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aa16:      	leaq	0x1a823(%rip), %rax     # 0x35240 <zlgk82z0l71lvh9+0x35240>
   1aa1d:      	movq	%rax, 0x8(%rsp)
   1aa22:      	movq	$0x10, 0x10(%rsp)
   1aa2b:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aa30:      	leaq	0x1a909(%rip), %rax     # 0x35340 <zlgk82z0l71lvh9+0x35340>
   1aa37:      	movq	%rax, 0x8(%rsp)
   1aa3c:      	movq	$0x10, 0x10(%rsp)
   1aa45:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aa4a:      	leaq	0x1a9ef(%rip), %rax     # 0x35440 <zlgk82z0l71lvh9+0x35440>
   1aa51:      	movq	%rax, 0x8(%rsp)
   1aa56:      	movq	$0x10, 0x10(%rsp)
   1aa5f:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aa64:      	leaq	0x1aad5(%rip), %rax     # 0x35540 <zlgk82z0l71lvh9+0x35540>
   1aa6b:      	movq	%rax, 0x8(%rsp)
   1aa70:      	movq	$0x10, 0x10(%rsp)
   1aa79:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aa7e:      	leaq	0x1abbb(%rip), %rax     # 0x35640 <zlgk82z0l71lvh9+0x35640>
   1aa85:      	movq	%rax, 0x8(%rsp)
   1aa8a:      	movq	$0x10, 0x10(%rsp)
   1aa93:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aa98:      	leaq	0x1aca1(%rip), %rax     # 0x35740 <zlgk82z0l71lvh9+0x35740>
   1aa9f:      	movq	%rax, 0x8(%rsp)
   1aaa4:      	movq	$0x10, 0x10(%rsp)
   1aaad:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aab2:      	leaq	0x1ad87(%rip), %rax     # 0x35840 <zlgk82z0l71lvh9+0x35840>
   1aab9:      	movq	%rax, 0x8(%rsp)
   1aabe:      	movq	$0x10, 0x10(%rsp)
   1aac7:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aacc:      	leaq	0x1ae6d(%rip), %rax     # 0x35940 <zlgk82z0l71lvh9+0x35940>
   1aad3:      	movq	%rax, 0x8(%rsp)
   1aad8:      	movq	$0x10, 0x10(%rsp)
   1aae1:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aae6:      	leaq	0x1af53(%rip), %rax     # 0x35a40 <zlgk82z0l71lvh9+0x35a40>
   1aaed:      	movq	%rax, 0x8(%rsp)
   1aaf2:      	movq	$0x10, 0x10(%rsp)
   1aafb:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ab00:      	leaq	0x1b039(%rip), %rax     # 0x35b40 <zlgk82z0l71lvh9+0x35b40>
   1ab07:      	movq	%rax, 0x8(%rsp)
   1ab0c:      	movq	$0x10, 0x10(%rsp)
   1ab15:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ab1a:      	leaq	0x1b11f(%rip), %rax     # 0x35c40 <zlgk82z0l71lvh9+0x35c40>
   1ab21:      	movq	%rax, 0x8(%rsp)
   1ab26:      	movq	$0x10, 0x10(%rsp)
   1ab2f:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ab34:      	leaq	0x1b205(%rip), %rax     # 0x35d40 <zlgk82z0l71lvh9+0x35d40>
   1ab3b:      	movq	%rax, 0x8(%rsp)
   1ab40:      	movq	$0x10, 0x10(%rsp)
   1ab49:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ab4e:      	leaq	0x1b2eb(%rip), %rax     # 0x35e40 <zlgk82z0l71lvh9+0x35e40>
   1ab55:      	movq	%rax, 0x8(%rsp)
   1ab5a:      	movq	$0x10, 0x10(%rsp)
   1ab63:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ab68:      	leaq	0x1b3d1(%rip), %rax     # 0x35f40 <zlgk82z0l71lvh9+0x35f40>
   1ab6f:      	movq	%rax, 0x8(%rsp)
   1ab74:      	movq	$0x10, 0x10(%rsp)
   1ab7d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ab82:      	leaq	0x1b4b7(%rip), %rax     # 0x36040 <zlgk82z0l71lvh9+0x36040>
   1ab89:      	movq	%rax, 0x8(%rsp)
   1ab8e:      	movq	$0x10, 0x10(%rsp)
   1ab97:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ab9c:      	leaq	0x1b59d(%rip), %rax     # 0x36140 <zlgk82z0l71lvh9+0x36140>
   1aba3:      	movq	%rax, 0x8(%rsp)
   1aba8:      	movq	$0x10, 0x10(%rsp)
   1abb1:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1abb6:      	leaq	0x1b683(%rip), %rax     # 0x36240 <zlgk82z0l71lvh9+0x36240>
   1abbd:      	movq	%rax, 0x8(%rsp)
   1abc2:      	movq	$0x10, 0x10(%rsp)
   1abcb:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1abd0:      	leaq	0x1b769(%rip), %rax     # 0x36340 <zlgk82z0l71lvh9+0x36340>
   1abd7:      	movq	%rax, 0x8(%rsp)
   1abdc:      	movq	$0x10, 0x10(%rsp)
   1abe5:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1abea:      	leaq	0x1b84f(%rip), %rax     # 0x36440 <zlgk82z0l71lvh9+0x36440>
   1abf1:      	movq	%rax, 0x8(%rsp)
   1abf6:      	movq	$0x10, 0x10(%rsp)
   1abff:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ac04:      	leaq	0x1b935(%rip), %rax     # 0x36540 <zlgk82z0l71lvh9+0x36540>
   1ac0b:      	movq	%rax, 0x8(%rsp)
   1ac10:      	movq	$0x10, 0x10(%rsp)
   1ac19:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ac1e:      	leaq	0x1ba1b(%rip), %rax     # 0x36640 <zlgk82z0l71lvh9+0x36640>
   1ac25:      	movq	%rax, 0x8(%rsp)
   1ac2a:      	movq	$0x10, 0x10(%rsp)
   1ac33:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ac38:      	leaq	0x1bb01(%rip), %rax     # 0x36740 <zlgk82z0l71lvh9+0x36740>
   1ac3f:      	movq	%rax, 0x8(%rsp)
   1ac44:      	movq	$0x10, 0x10(%rsp)
   1ac4d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ac52:      	leaq	0x1bbe7(%rip), %rax     # 0x36840 <zlgk82z0l71lvh9+0x36840>
   1ac59:      	movq	%rax, 0x8(%rsp)
   1ac5e:      	movq	$0x10, 0x10(%rsp)
   1ac67:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ac6c:      	leaq	0x1bccd(%rip), %rax     # 0x36940 <zlgk82z0l71lvh9+0x36940>
   1ac73:      	movq	%rax, 0x8(%rsp)
   1ac78:      	movq	$0x10, 0x10(%rsp)
   1ac81:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ac86:      	leaq	0x1bdb3(%rip), %rax     # 0x36a40 <zlgk82z0l71lvh9+0x36a40>
   1ac8d:      	movq	%rax, 0x8(%rsp)
   1ac92:      	movq	$0x10, 0x10(%rsp)
   1ac9b:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aca0:      	leaq	0x1be99(%rip), %rax     # 0x36b40 <zlgk82z0l71lvh9+0x36b40>
   1aca7:      	movq	%rax, 0x8(%rsp)
   1acac:      	movq	$0x10, 0x10(%rsp)
   1acb5:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1acba:      	leaq	0x1bf7f(%rip), %rax     # 0x36c40 <zlgk82z0l71lvh9+0x36c40>
   1acc1:      	movq	%rax, 0x8(%rsp)
   1acc6:      	movq	$0x10, 0x10(%rsp)
   1accf:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1acd4:      	leaq	0x1c065(%rip), %rax     # 0x36d40 <zlgk82z0l71lvh9+0x36d40>
   1acdb:      	movq	%rax, 0x8(%rsp)
   1ace0:      	movq	$0x10, 0x10(%rsp)
   1ace9:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1acee:      	leaq	0x1c14b(%rip), %rax     # 0x36e40 <zlgk82z0l71lvh9+0x36e40>
   1acf5:      	movq	%rax, 0x8(%rsp)
   1acfa:      	movq	$0x10, 0x10(%rsp)
   1ad03:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ad08:      	leaq	0x1c231(%rip), %rax     # 0x36f40 <zlgk82z0l71lvh9+0x36f40>
   1ad0f:      	movq	%rax, 0x8(%rsp)
   1ad14:      	movq	$0x10, 0x10(%rsp)
   1ad1d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ad22:      	leaq	0x1c317(%rip), %rax     # 0x37040 <zlgk82z0l71lvh9+0x37040>
   1ad29:      	movq	%rax, 0x8(%rsp)
   1ad2e:      	movq	$0x10, 0x10(%rsp)
   1ad37:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ad3c:      	leaq	0x1c3fd(%rip), %rax     # 0x37140 <zlgk82z0l71lvh9+0x37140>
   1ad43:      	movq	%rax, 0x8(%rsp)
   1ad48:      	movq	$0x10, 0x10(%rsp)
   1ad51:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ad56:      	leaq	0x1c4e3(%rip), %rax     # 0x37240 <zlgk82z0l71lvh9+0x37240>
   1ad5d:      	movq	%rax, 0x8(%rsp)
   1ad62:      	movq	$0x10, 0x10(%rsp)
   1ad6b:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ad70:      	leaq	0x1c5c9(%rip), %rax     # 0x37340 <zlgk82z0l71lvh9+0x37340>
   1ad77:      	movq	%rax, 0x8(%rsp)
   1ad7c:      	movq	$0x10, 0x10(%rsp)
   1ad85:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ad8a:      	leaq	0x1c6af(%rip), %rax     # 0x37440 <zlgk82z0l71lvh9+0x37440>
   1ad91:      	movq	%rax, 0x8(%rsp)
   1ad96:      	movq	$0x10, 0x10(%rsp)
   1ad9f:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ada4:      	leaq	0x1c795(%rip), %rax     # 0x37540 <zlgk82z0l71lvh9+0x37540>
   1adab:      	movq	%rax, 0x8(%rsp)
   1adb0:      	movq	$0x10, 0x10(%rsp)
   1adb9:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1adbe:      	leaq	0x1c87b(%rip), %rax     # 0x37640 <zlgk82z0l71lvh9+0x37640>
   1adc5:      	movq	%rax, 0x8(%rsp)
   1adca:      	movq	$0x10, 0x10(%rsp)
   1add3:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1add8:      	leaq	0x1c961(%rip), %rax     # 0x37740 <zlgk82z0l71lvh9+0x37740>
   1addf:      	movq	%rax, 0x8(%rsp)
   1ade4:      	movq	$0x10, 0x10(%rsp)
   1aded:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1adf2:      	leaq	0x1ca47(%rip), %rax     # 0x37840 <zlgk82z0l71lvh9+0x37840>
   1adf9:      	movq	%rax, 0x8(%rsp)
   1adfe:      	movq	$0x10, 0x10(%rsp)
   1ae07:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ae0c:      	leaq	0x1cb2d(%rip), %rax     # 0x37940 <zlgk82z0l71lvh9+0x37940>
   1ae13:      	movq	%rax, 0x8(%rsp)
   1ae18:      	movq	$0x10, 0x10(%rsp)
   1ae21:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ae26:      	leaq	0x1cc13(%rip), %rax     # 0x37a40 <zlgk82z0l71lvh9+0x37a40>
   1ae2d:      	movq	%rax, 0x8(%rsp)
   1ae32:      	movq	$0x10, 0x10(%rsp)
   1ae3b:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ae40:      	leaq	0x1ccf9(%rip), %rax     # 0x37b40 <zlgk82z0l71lvh9+0x37b40>
   1ae47:      	movq	%rax, 0x8(%rsp)
   1ae4c:      	movq	$0x10, 0x10(%rsp)
   1ae55:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ae5a:      	leaq	0x1cddf(%rip), %rax     # 0x37c40 <zlgk82z0l71lvh9+0x37c40>
   1ae61:      	movq	%rax, 0x8(%rsp)
   1ae66:      	movq	$0x10, 0x10(%rsp)
   1ae6f:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ae74:      	leaq	0x1cec5(%rip), %rax     # 0x37d40 <zlgk82z0l71lvh9+0x37d40>
   1ae7b:      	movq	%rax, 0x8(%rsp)
   1ae80:      	movq	$0x10, 0x10(%rsp)
   1ae89:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1ae8e:      	leaq	0x1cfab(%rip), %rax     # 0x37e40 <zlgk82z0l71lvh9+0x37e40>
   1ae95:      	movq	%rax, 0x8(%rsp)
   1ae9a:      	movq	$0x10, 0x10(%rsp)
   1aea3:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aea8:      	leaq	0x1d091(%rip), %rax     # 0x37f40 <zlgk82z0l71lvh9+0x37f40>
   1aeaf:      	movq	%rax, 0x8(%rsp)
   1aeb4:      	movq	$0x10, 0x10(%rsp)
   1aebd:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aec2:      	leaq	0x1d177(%rip), %rax     # 0x38040 <zlgk82z0l71lvh9+0x38040>
   1aec9:      	movq	%rax, 0x8(%rsp)
   1aece:      	movq	$0x10, 0x10(%rsp)
   1aed7:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aedc:      	leaq	0x1d25d(%rip), %rax     # 0x38140 <zlgk82z0l71lvh9+0x38140>
   1aee3:      	movq	%rax, 0x8(%rsp)
   1aee8:      	movq	$0x10, 0x10(%rsp)
   1aef1:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1aef6:      	leaq	0x1d343(%rip), %rax     # 0x38240 <zlgk82z0l71lvh9+0x38240>
   1aefd:      	movq	%rax, 0x8(%rsp)
   1af02:      	movq	$0x10, 0x10(%rsp)
   1af0b:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1af10:      	leaq	0x1d429(%rip), %rax     # 0x38340 <zlgk82z0l71lvh9+0x38340>
   1af17:      	movq	%rax, 0x8(%rsp)
   1af1c:      	movq	$0x10, 0x10(%rsp)
   1af25:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1af2a:      	leaq	0x1d50f(%rip), %rax     # 0x38440 <zlgk82z0l71lvh9+0x38440>
   1af31:      	movq	%rax, 0x8(%rsp)
   1af36:      	movq	$0x10, 0x10(%rsp)
   1af3f:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1af44:      	leaq	0x1d5f5(%rip), %rax     # 0x38540 <zlgk82z0l71lvh9+0x38540>
   1af4b:      	movq	%rax, 0x8(%rsp)
   1af50:      	movq	$0x10, 0x10(%rsp)
   1af59:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1af5e:      	leaq	0x1d6db(%rip), %rax     # 0x38640 <zlgk82z0l71lvh9+0x38640>
   1af65:      	movq	%rax, 0x8(%rsp)
   1af6a:      	movq	$0x10, 0x10(%rsp)
   1af73:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1af78:      	leaq	0x1d7c1(%rip), %rax     # 0x38740 <zlgk82z0l71lvh9+0x38740>
   1af7f:      	movq	%rax, 0x8(%rsp)
   1af84:      	movq	$0x10, 0x10(%rsp)
   1af8d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1af92:      	leaq	0x1d8a7(%rip), %rax     # 0x38840 <zlgk82z0l71lvh9+0x38840>
   1af99:      	movq	%rax, 0x8(%rsp)
   1af9e:      	movq	$0x10, 0x10(%rsp)
   1afa7:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1afac:      	leaq	0x1d98d(%rip), %rax     # 0x38940 <zlgk82z0l71lvh9+0x38940>
   1afb3:      	movq	%rax, 0x8(%rsp)
   1afb8:      	movq	$0x10, 0x10(%rsp)
   1afc1:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1afc6:      	leaq	0x1da73(%rip), %rax     # 0x38a40 <zlgk82z0l71lvh9+0x38a40>
   1afcd:      	movq	%rax, 0x8(%rsp)
   1afd2:      	movq	$0x10, 0x10(%rsp)
   1afdb:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1afe0:      	leaq	0x1db59(%rip), %rax     # 0x38b40 <zlgk82z0l71lvh9+0x38b40>
   1afe7:      	movq	%rax, 0x8(%rsp)
   1afec:      	movq	$0x10, 0x10(%rsp)
   1aff5:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1affa:      	leaq	0x1dc3f(%rip), %rax     # 0x38c40 <zlgk82z0l71lvh9+0x38c40>
   1b001:      	movq	%rax, 0x8(%rsp)
   1b006:      	movq	$0x10, 0x10(%rsp)
   1b00f:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b014:      	leaq	0x1dd25(%rip), %rax     # 0x38d40 <zlgk82z0l71lvh9+0x38d40>
   1b01b:      	movq	%rax, 0x8(%rsp)
   1b020:      	movq	$0x10, 0x10(%rsp)
   1b029:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b02e:      	leaq	0x1de0b(%rip), %rax     # 0x38e40 <zlgk82z0l71lvh9+0x38e40>
   1b035:      	movq	%rax, 0x8(%rsp)
   1b03a:      	movq	$0x10, 0x10(%rsp)
   1b043:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b048:      	leaq	0x1def1(%rip), %rax     # 0x38f40 <zlgk82z0l71lvh9+0x38f40>
   1b04f:      	movq	%rax, 0x8(%rsp)
   1b054:      	movq	$0x10, 0x10(%rsp)
   1b05d:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b062:      	leaq	0x1dfd7(%rip), %rax     # 0x39040 <zlgk82z0l71lvh9+0x39040>
   1b069:      	movq	%rax, 0x8(%rsp)
   1b06e:      	movq	$0x10, 0x10(%rsp)
   1b077:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b07c:      	leaq	0x1e0bd(%rip), %rax     # 0x39140 <zlgk82z0l71lvh9+0x39140>
   1b083:      	movq	%rax, 0x8(%rsp)
   1b088:      	movq	$0x10, 0x10(%rsp)
   1b091:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b093:      	leaq	0x1e1a6(%rip), %rax     # 0x39240 <zlgk82z0l71lvh9+0x39240>
   1b09a:      	movq	%rax, 0x8(%rsp)
   1b09f:      	movq	$0x10, 0x10(%rsp)
   1b0a8:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b0aa:      	leaq	0x1e28f(%rip), %rax     # 0x39340 <zlgk82z0l71lvh9+0x39340>
   1b0b1:      	movq	%rax, 0x8(%rsp)
   1b0b6:      	movq	$0x10, 0x10(%rsp)
   1b0bf:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b0c1:      	leaq	0x1e378(%rip), %rax     # 0x39440 <zlgk82z0l71lvh9+0x39440>
   1b0c8:      	movq	%rax, 0x8(%rsp)
   1b0cd:      	movq	$0x10, 0x10(%rsp)
   1b0d6:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b0d8:      	leaq	0x1e461(%rip), %rax     # 0x39540 <zlgk82z0l71lvh9+0x39540>
   1b0df:      	movq	%rax, 0x8(%rsp)
   1b0e4:      	movq	$0x10, 0x10(%rsp)
   1b0ed:      	jmp	0x1b104 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b+0xf64>
   1b0ef:      	leaq	0x1e54a(%rip), %rax     # 0x39640 <zlgk82z0l71lvh9+0x39640>
   1b0f6:      	movq	%rax, 0x8(%rsp)
   1b0fb:      	movq	$0x10, 0x10(%rsp)
   1b104:      	movq	0x8(%rsp), %rax
   1b109:      	movq	0x10(%rsp), %rdx
   1b10e:      	addq	$0x20, %rsp
   1b112:      	retq
   1b113:      	int3
   1b114:      	int3
   1b115:      	int3
   1b116:      	int3
   1b117:      	int3
   1b118:      	int3
   1b119:      	int3
   1b11a:      	int3
   1b11b:      	int3
   1b11c:      	int3
   1b11d:      	int3
   1b11e:      	int3
   1b11f:      	int3

000000000001b120 <log::Record::args::h786da30b47d7204f>:
   1b120:      	pushq	%rax
   1b121:      	movq	%rdi, %rax
   1b124:      	movq	%rax, (%rsp)
   1b128:      	addq	$0x50, %rax
   1b12c:      	popq	%rcx
   1b12d:      	retq
   1b12e:      	int3
   1b12f:      	int3

000000000001b130 <log::Record::level::hf1012dcf357fdd88>:
   1b130:      	pushq	%rax
   1b131:      	movq	%rdi, (%rsp)
   1b135:      	addq	$0x30, %rdi
   1b139:      	callq	0x1b140 <log::Metadata::level::h597d56e017ff9b06>
   1b13e:      	popq	%rcx
   1b13f:      	retq

000000000001b140 <log::Metadata::level::h597d56e017ff9b06>:
   1b140:      	pushq	%rax
   1b141:      	movq	%rdi, (%rsp)
   1b145:      	movq	(%rdi), %rax
   1b148:      	popq	%rcx
   1b149:      	retq
   1b14a:      	int3
   1b14b:      	int3
   1b14c:      	int3
   1b14d:      	int3
   1b14e:      	int3
   1b14f:      	int3

000000000001b150 <core::cmp::PartialOrd::le::h21dd3c0020a04aa5>:
   1b150:      	subq	$0x18, %rsp
   1b154:      	movq	%rdi, 0x8(%rsp)
   1b159:      	movq	%rsi, 0x10(%rsp)
   1b15e:      	callq	0x1bb90 <<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::partial_cmp::h1c726aeaf0c1e278>
   1b163:      	movb	%al, 0x7(%rsp)
   1b167:      	movl	$0x1, %eax
   1b16c:      	xorl	%ecx, %ecx
   1b16e:      	cmpb	$0x2, 0x7(%rsp)
   1b173:      	cmoveq	%rcx, %rax
   1b177:      	cmpq	$0x1, %rax
   1b17b:      	jne	0x1b189 <core::cmp::PartialOrd::le::h21dd3c0020a04aa5+0x39>
   1b17d:      	movb	0x7(%rsp), %al
   1b181:      	incb	%al
   1b183:      	subb	$0x2, %al
   1b185:      	jb	0x1b190 <core::cmp::PartialOrd::le::h21dd3c0020a04aa5+0x40>
   1b187:      	jmp	0x1b189 <core::cmp::PartialOrd::le::h21dd3c0020a04aa5+0x39>
   1b189:      	movb	$0x0, 0x6(%rsp)
   1b18e:      	jmp	0x1b195 <core::cmp::PartialOrd::le::h21dd3c0020a04aa5+0x45>
   1b190:      	movb	$0x1, 0x6(%rsp)
   1b195:      	movb	0x6(%rsp), %al
   1b199:      	andb	$0x1, %al
   1b19b:      	movzbl	%al, %eax
   1b19e:      	addq	$0x18, %rsp
   1b1a2:      	retq
   1b1a3:      	int3
   1b1a4:      	int3
   1b1a5:      	int3
   1b1a6:      	int3
   1b1a7:      	int3
   1b1a8:      	int3
   1b1a9:      	int3
   1b1aa:      	int3
   1b1ab:      	int3
   1b1ac:      	int3
   1b1ad:      	int3
   1b1ae:      	int3
   1b1af:      	int3

000000000001b1b0 <core::fmt::Write::write_char::h01afc464bb3f6b4a>:
   1b1b0:      	subq	$0x28, %rsp
   1b1b4:      	movl	%esi, 0x4(%rsp)
   1b1b8:      	movq	%rdi, %rax
   1b1bb:      	movl	0x4(%rsp), %edi
   1b1bf:      	movq	%rax, 0x8(%rsp)
   1b1c4:      	movq	%rax, 0x18(%rsp)
   1b1c9:      	movl	%edi, 0x24(%rsp)
   1b1cd:      	leaq	0x14(%rsp), %rax
   1b1d2:      	xorl	%ecx, %ecx
   1b1d4:      	movl	$0x0, (%rax)
   1b1da:      	leaq	0x14(%rsp), %rsi
   1b1df:      	movl	$0x4, %edx
   1b1e4:      	callq	0x1b8b0 <core::char::methods::<impl char>::encode_utf8::hf507bfaed52b70d0>
   1b1e9:      	movq	0x8(%rsp), %rdi
   1b1ee:      	movq	%rax, %rsi
   1b1f1:      	movq	0x20048(%rip), %rax     # 0x3b240 <zlgk82z0l71lvh9+0x3b240>
   1b1f8:      	callq	*%rax
   1b1fa:      	andb	$0x1, %al
   1b1fc:      	movzbl	%al, %eax
   1b1ff:      	addq	$0x28, %rsp
   1b203:      	retq
   1b204:      	int3
   1b205:      	int3
   1b206:      	int3
   1b207:      	int3
   1b208:      	int3
   1b209:      	int3
   1b20a:      	int3
   1b20b:      	int3
   1b20c:      	int3
   1b20d:      	int3
   1b20e:      	int3
   1b20f:      	int3

000000000001b210 <core::fmt::Write::write_fmt::ha462f07835f0bb9f>:
   1b210:      	subq	$0x38, %rsp
   1b214:      	movq	%rdi, (%rsp)
   1b218:      	movq	0x28(%rsi), %rax
   1b21c:      	movq	%rax, 0x30(%rsp)
   1b221:      	movq	0x20(%rsi), %rax
   1b225:      	movq	%rax, 0x28(%rsp)
   1b22a:      	movq	0x18(%rsi), %rax
   1b22e:      	movq	%rax, 0x20(%rsp)
   1b233:      	movq	0x10(%rsi), %rax
   1b237:      	movq	%rax, 0x18(%rsp)
   1b23c:      	movq	(%rsi), %rax
   1b23f:      	movq	0x8(%rsi), %rcx
   1b243:      	movq	%rcx, 0x10(%rsp)
   1b248:      	movq	%rax, 0x8(%rsp)
   1b24d:      	leaq	0x1e4ec(%rip), %rsi     # 0x39740 <zlgk82z0l71lvh9+0x39740>
   1b254:      	movq	0x1fff5(%rip), %rax     # 0x3b250 <zlgk82z0l71lvh9+0x3b250>
   1b25b:      	movq	%rsp, %rdi
   1b25e:      	leaq	0x8(%rsp), %rdx
   1b263:      	callq	*%rax
   1b265:      	andb	$0x1, %al
   1b267:      	movzbl	%al, %eax
   1b26a:      	addq	$0x38, %rsp
   1b26e:      	retq
   1b26f:      	int3

000000000001b270 <core::ptr::drop_in_place<lock_api::mutex::MutexGuard<spinning_top::spinlock::RawSpinlock,bootloader_x86_64_common::serial::SerialPort>>::h404ea8ba7c5dca3a>:
   1b270:      	pushq	%rax
   1b271:      	movq	%rdi, (%rsp)
   1b275:      	movq	0x1ffe4(%rip), %rax     # 0x3b260 <zlgk82z0l71lvh9+0x3b260>
   1b27c:      	callq	*%rax
   1b27e:      	popq	%rax
   1b27f:      	retq

000000000001b280 <core::ptr::read_volatile::h2d7dfb67c82b20af>:
   1b280:      	subq	$0x28, %rsp
   1b284:      	movq	%rdi, (%rsp)
   1b288:      	movq	%rdi, 0x10(%rsp)
   1b28d:      	movb	$0x1, %al
   1b28f:      	testb	$0x1, %al
   1b291:      	jne	0x1b2a6 <core::ptr::read_volatile::h2d7dfb67c82b20af+0x26>
   1b293:      	movq	(%rsp), %rax
   1b297:      	movb	(%rax), %al
   1b299:      	movb	%al, 0x1f(%rsp)
   1b29d:      	movb	0x1f(%rsp), %al
   1b2a1:      	addq	$0x28, %rsp
   1b2a5:      	retq
   1b2a6:      	movq	(%rsp), %rax
   1b2aa:      	movq	%rax, 0x8(%rsp)
   1b2af:      	movq	0x8(%rsp), %rdi
   1b2b4:      	movq	%rdi, 0x20(%rsp)
   1b2b9:      	movq	0x1ffb0(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   1b2c0:      	callq	*%rax
   1b2c2:      	testb	$0x1, %al
   1b2c4:      	jne	0x1b2dd <core::ptr::read_volatile::h2d7dfb67c82b20af+0x5d>
   1b2c6:      	leaq	-0xa7c8(%rip), %rdi     # 0x10b05 <str.0+0x1bb5>
   1b2cd:      	movq	0x1fe9c(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   1b2d4:      	movl	$0x6e, %esi
   1b2d9:      	callq	*%rax
   1b2db:      	ud2
   1b2dd:      	jmp	0x1b293 <core::ptr::read_volatile::h2d7dfb67c82b20af+0x13>
   1b2df:      	int3

000000000001b2e0 <core::ptr::drop_in_place<lock_api::mutex::MutexGuard<spinning_top::spinlock::RawSpinlock,bootloader_x86_64_common::framebuffer::FrameBufferWriter>>::h2b44e5b73dd30e77>:
   1b2e0:      	pushq	%rax
   1b2e1:      	movq	%rdi, (%rsp)
   1b2e5:      	movq	0x1ff94(%rip), %rax     # 0x3b280 <zlgk82z0l71lvh9+0x3b280>
   1b2ec:      	callq	*%rax
   1b2ee:      	popq	%rax
   1b2ef:      	retq

000000000001b2f0 <core::ptr::drop_in_place<log::SetLoggerError>::h6fc60666e406c32b>:
   1b2f0:      	pushq	%rax
   1b2f1:      	movq	%rdi, (%rsp)
   1b2f5:      	popq	%rax
   1b2f6:      	retq
   1b2f7:      	int3
   1b2f8:      	int3
   1b2f9:      	int3
   1b2fa:      	int3
   1b2fb:      	int3
   1b2fc:      	int3
   1b2fd:      	int3
   1b2fe:      	int3
   1b2ff:      	int3

000000000001b300 <core::ptr::write::he8eb2cea54ecb747>:
   1b300:      	subq	$0x28, %rsp
   1b304:      	movq	%rsi, (%rsp)
   1b308:      	movq	%rdi, 0x8(%rsp)
   1b30d:      	movq	%rdi, 0x18(%rsp)
   1b312:      	movb	$0x1, %al
   1b314:      	testb	$0x1, %al
   1b316:      	jne	0x1b32e <core::ptr::write::he8eb2cea54ecb747+0x2e>
   1b318:      	movq	(%rsp), %rsi
   1b31c:      	movq	0x8(%rsp), %rdi
   1b321:      	movl	$0xe, %ecx
   1b326:      	rep		movsq	(%rsi), %es:(%rdi)
   1b329:      	addq	$0x28, %rsp
   1b32d:      	retq
   1b32e:      	movq	0x8(%rsp), %rax
   1b333:      	movq	%rax, 0x10(%rsp)
   1b338:      	movq	0x10(%rsp), %rdi
   1b33d:      	movq	%rdi, 0x20(%rsp)
   1b342:      	movq	0x1ff3f(%rip), %rax     # 0x3b288 <zlgk82z0l71lvh9+0x3b288>
   1b349:      	callq	*%rax
   1b34b:      	testb	$0x1, %al
   1b34d:      	jne	0x1b366 <core::ptr::write::he8eb2cea54ecb747+0x66>
   1b34f:      	leaq	-0xa7e3(%rip), %rdi     # 0x10b73 <str.0+0x1c23>
   1b356:      	movq	0x1fe13(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   1b35d:      	movl	$0x66, %esi
   1b362:      	callq	*%rax
   1b364:      	ud2
   1b366:      	jmp	0x1b318 <core::ptr::write::he8eb2cea54ecb747+0x18>
   1b368:      	int3
   1b369:      	int3
   1b36a:      	int3
   1b36b:      	int3
   1b36c:      	int3
   1b36d:      	int3
   1b36e:      	int3
   1b36f:      	int3

000000000001b370 <core::ptr::drop_in_place<&mut bootloader_x86_64_common::serial::SerialPort>::h5484362f529802de>:
   1b370:      	pushq	%rax
   1b371:      	movq	%rdi, (%rsp)
   1b375:      	popq	%rax
   1b376:      	retq
   1b377:      	int3
   1b378:      	int3
   1b379:      	int3
   1b37a:      	int3
   1b37b:      	int3
   1b37c:      	int3
   1b37d:      	int3
   1b37e:      	int3
   1b37f:      	int3

000000000001b380 <core::ptr::drop_in_place<&mut bootloader_x86_64_common::framebuffer::FrameBufferWriter>::h84100b9e789ef6d1>:
   1b380:      	pushq	%rax
   1b381:      	movq	%rdi, (%rsp)
   1b385:      	popq	%rax
   1b386:      	retq
   1b387:      	int3
   1b388:      	int3
   1b389:      	int3
   1b38a:      	int3
   1b38b:      	int3
   1b38c:      	int3
   1b38d:      	int3
   1b38e:      	int3
   1b38f:      	int3

000000000001b390 <core::ptr::const_ptr::<impl *const T>::is_aligned::ha459e617517171f5>:
   1b390:      	pushq	%rax
   1b391:      	movq	%rdi, (%rsp)
   1b395:      	movq	0x1fefc(%rip), %rax     # 0x3b298 <zlgk82z0l71lvh9+0x3b298>
   1b39c:      	movl	$0x8, %esi
   1b3a1:      	callq	*%rax
   1b3a3:      	andb	$0x1, %al
   1b3a5:      	movzbl	%al, %eax
   1b3a8:      	popq	%rcx
   1b3a9:      	retq
   1b3aa:      	int3
   1b3ab:      	int3
   1b3ac:      	int3
   1b3ad:      	int3
   1b3ae:      	int3
   1b3af:      	int3

000000000001b3b0 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h31517ca839eff8b0>:
   1b3b0:      	subq	$0x88, %rsp
   1b3b7:      	movq	%rsi, %rcx
   1b3ba:      	movq	%rcx, 0x8(%rsp)
   1b3bf:      	movq	%rdi, 0x10(%rsp)
   1b3c4:      	movq	%rdi, 0x58(%rsp)
   1b3c9:      	movq	%rcx, 0x60(%rsp)
   1b3ce:      	movq	%rcx, 0x68(%rsp)
   1b3d3:      	movq	%rcx, 0x70(%rsp)
   1b3d8:      	movq	%rcx, %rax
   1b3db:      	shrq	%rax
   1b3de:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   1b3e8:      	andq	%rdx, %rax
   1b3eb:      	subq	%rax, %rcx
   1b3ee:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   1b3f8:      	movq	%rcx, %rax
   1b3fb:      	andq	%rdx, %rax
   1b3fe:      	shrq	$0x2, %rcx
   1b402:      	andq	%rdx, %rcx
   1b405:      	addq	%rcx, %rax
   1b408:      	movq	%rax, %rcx
   1b40b:      	shrq	$0x4, %rcx
   1b40f:      	addq	%rcx, %rax
   1b412:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   1b41c:      	andq	%rcx, %rax
   1b41f:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   1b429:      	imulq	%rcx, %rax
   1b42d:      	shrq	$0x38, %rax
   1b431:      	movq	%rax, 0x78(%rsp)
   1b436:      	movq	0x78(%rsp), %rax
   1b43b:      	cmpl	$0x1, %eax
   1b43e:      	je	0x1b470 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h31517ca839eff8b0+0xc0>
   1b440:      	leaq	0x1e329(%rip), %rsi     # 0x39770 <zlgk82z0l71lvh9+0x39770>
   1b447:      	leaq	0x18(%rsp), %rdi
   1b44c:      	movq	%rdi, (%rsp)
   1b450:      	movl	$0x1, %edx
   1b455:      	callq	0x1d640 <core::fmt::Arguments::new_const::h9912da7052091f56>
   1b45a:      	movq	(%rsp), %rdi
   1b45e:      	leaq	0x1e31b(%rip), %rsi     # 0x39780 <zlgk82z0l71lvh9+0x39780>
   1b465:      	movq	0x1fa54(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1b46c:      	callq	*%rax
   1b46e:      	ud2
   1b470:      	movq	0x8(%rsp), %rax
   1b475:      	movq	0x10(%rsp), %rcx
   1b47a:      	movq	%rcx, 0x80(%rsp)
   1b482:      	movq	%rcx, 0x48(%rsp)
   1b487:      	movq	%rax, 0x50(%rsp)
   1b48c:      	movq	0x48(%rsp), %rdi
   1b491:      	movq	0x50(%rsp), %rsi
   1b496:      	callq	0x1d6f0 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::ha4b32234f7fc6f80>
   1b49b:      	andb	$0x1, %al
   1b49d:      	movzbl	%al, %eax
   1b4a0:      	addq	$0x88, %rsp
   1b4a7:      	retq
   1b4a8:      	int3
   1b4a9:      	int3
   1b4aa:      	int3
   1b4ab:      	int3
   1b4ac:      	int3
   1b4ad:      	int3
   1b4ae:      	int3
   1b4af:      	int3

000000000001b4b0 <core::ptr::const_ptr::<impl *const T>::is_null::h1c0cf22f5cf98907>:
   1b4b0:      	subq	$0x18, %rsp
   1b4b4:      	movq	%rdi, 0x10(%rsp)
   1b4b9:      	movq	%rdi, 0x8(%rsp)
   1b4be:      	movq	0x8(%rsp), %rdi
   1b4c3:      	callq	0x1d760 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h22ccdc96674b6f0f>
   1b4c8:      	andb	$0x1, %al
   1b4ca:      	movzbl	%al, %eax
   1b4cd:      	addq	$0x18, %rsp
   1b4d1:      	retq
   1b4d2:      	int3
   1b4d3:      	int3
   1b4d4:      	int3
   1b4d5:      	int3
   1b4d6:      	int3
   1b4d7:      	int3
   1b4d8:      	int3
   1b4d9:      	int3
   1b4da:      	int3
   1b4db:      	int3
   1b4dc:      	int3
   1b4dd:      	int3
   1b4de:      	int3
   1b4df:      	int3

000000000001b4e0 <core::str::<impl str>::chars::hb5230c28c89a7b3c>:
   1b4e0:      	subq	$0x38, %rsp
   1b4e4:      	movq	%rdi, 0x18(%rsp)
   1b4e9:      	movq	%rsi, 0x20(%rsp)
   1b4ee:      	movq	%rdi, 0x28(%rsp)
   1b4f3:      	movq	%rsi, 0x30(%rsp)
   1b4f8:      	movq	0x1fda9(%rip), %rax     # 0x3b2a8 <zlgk82z0l71lvh9+0x3b2a8>
   1b4ff:      	callq	*%rax
   1b501:      	movq	%rax, 0x8(%rsp)
   1b506:      	movq	%rdx, 0x10(%rsp)
   1b50b:      	movq	0x8(%rsp), %rax
   1b510:      	movq	0x10(%rsp), %rdx
   1b515:      	addq	$0x38, %rsp
   1b519:      	retq
   1b51a:      	int3
   1b51b:      	int3
   1b51c:      	int3
   1b51d:      	int3
   1b51e:      	int3
   1b51f:      	int3

000000000001b520 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb>:
   1b520:      	subq	$0x198, %rsp            # imm = 0x198
   1b527:      	movq	%rdx, 0x10(%rsp)
   1b52c:      	movq	%rsi, 0x8(%rsp)
   1b531:      	movl	%edi, 0x2c(%rsp)
   1b535:      	movq	%rsi, 0xc0(%rsp)
   1b53d:      	movq	%rdx, 0xc8(%rsp)
   1b545:      	movl	0x2c(%rsp), %edi
   1b549:      	callq	0x1b8e0 <core::char::methods::len_utf8::h1ff1b4f9051ceeab>
   1b54e:      	movq	0x8(%rsp), %rdi
   1b553:      	movq	0x10(%rsp), %rsi
   1b558:      	movq	%rax, 0x30(%rsp)
   1b55d:      	movq	0x30(%rsp), %rax
   1b562:      	movq	%rax, 0x18(%rsp)
   1b567:      	leaq	0x1e22a(%rip), %rdx     # 0x39798 <zlgk82z0l71lvh9+0x39798>
   1b56e:      	movq	0x1fd3b(%rip), %rax     # 0x3b2b0 <zlgk82z0l71lvh9+0x3b2b0>
   1b575:      	callq	*%rax
   1b577:      	movq	0x18(%rsp), %rcx
   1b57c:      	movq	%rcx, 0x38(%rsp)
   1b581:      	movq	%rax, 0x40(%rsp)
   1b586:      	movq	%rdx, 0x48(%rsp)
   1b58b:      	movq	0x38(%rsp), %rax
   1b590:      	decq	%rax
   1b593:      	movq	%rax, 0x20(%rsp)
   1b598:      	subq	$0x3, %rax
   1b59c:      	ja	0x1b5b3 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x93>
   1b59e:      	movq	0x20(%rsp), %rax
   1b5a3:      	leaq	-0xc6f2(%rip), %rcx     # 0xeeb8 <str.0+0x348>
   1b5aa:      	movslq	(%rcx,%rax,4), %rax
   1b5ae:      	addq	%rcx, %rax
   1b5b1:      	jmpq	*%rax
   1b5b3:      	movq	0x10(%rsp), %rcx
   1b5b8:      	leaq	0x30(%rsp), %rdx
   1b5bd:      	movq	%rdx, 0x128(%rsp)
   1b5c5:      	movq	%rdx, 0x168(%rsp)
   1b5cd:      	movq	0x1fce4(%rip), %rax     # 0x3b2b8 <zlgk82z0l71lvh9+0x3b2b8>
   1b5d4:      	movq	%rax, 0x170(%rsp)
   1b5dc:      	movq	%rdx, 0x158(%rsp)
   1b5e4:      	movq	%rax, 0x160(%rsp)
   1b5ec:      	movq	0x158(%rsp), %r8
   1b5f4:      	movq	0x160(%rsp), %rdi
   1b5fc:      	leaq	0x2c(%rsp), %rsi
   1b601:      	movq	%rsi, 0x130(%rsp)
   1b609:      	movq	%rsi, 0x148(%rsp)
   1b611:      	movq	0x1fb30(%rip), %rdx     # 0x3b148 <zlgk82z0l71lvh9+0x3b148>
   1b618:      	movq	%rdx, 0x150(%rsp)
   1b620:      	movq	%rsi, 0x138(%rsp)
   1b628:      	movq	%rdx, 0x140(%rsp)
   1b630:      	movq	0x138(%rsp), %rsi
   1b638:      	movq	0x140(%rsp), %rdx
   1b640:      	movq	%rcx, 0xb0(%rsp)
   1b648:      	leaq	0xb0(%rsp), %rcx
   1b650:      	movq	%rcx, 0x120(%rsp)
   1b658:      	movq	%rcx, 0x188(%rsp)
   1b660:      	movq	%rax, 0x190(%rsp)
   1b668:      	movq	%rcx, 0x178(%rsp)
   1b670:      	movq	%rax, 0x180(%rsp)
   1b678:      	movq	0x178(%rsp), %rcx
   1b680:      	movq	0x180(%rsp), %rax
   1b688:      	movq	%r8, 0x80(%rsp)
   1b690:      	movq	%rdi, 0x88(%rsp)
   1b698:      	movq	%rsi, 0x90(%rsp)
   1b6a0:      	movq	%rdx, 0x98(%rsp)
   1b6a8:      	movq	%rcx, 0xa0(%rsp)
   1b6b0:      	movq	%rax, 0xa8(%rsp)
   1b6b8:      	leaq	0x1e109(%rip), %rsi     # 0x397c8 <zlgk82z0l71lvh9+0x397c8>
   1b6bf:      	leaq	0x50(%rsp), %rdi
   1b6c4:      	movq	%rdi, (%rsp)
   1b6c8:      	leaq	0x80(%rsp), %rcx
   1b6d0:      	movl	$0x3, %r8d
   1b6d6:      	movq	%r8, %rdx
   1b6d9:      	callq	0x1d520 <core::fmt::Arguments::new_v1::h986e818288f902b6>
   1b6de:      	movq	(%rsp), %rdi
   1b6e2:      	leaq	0x1e10f(%rip), %rsi     # 0x397f8 <zlgk82z0l71lvh9+0x397f8>
   1b6e9:      	movq	0x1f7d0(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1b6f0:      	callq	*%rax
   1b6f2:      	ud2
   1b6f4:      	cmpq	$0x1, 0x48(%rsp)
   1b6fa:      	jae	0x1b730 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x210>
   1b6fc:      	jmp	0x1b5b3 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x93>
   1b701:      	cmpq	$0x2, 0x48(%rsp)
   1b707:      	jae	0x1b77a <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x25a>
   1b709:      	jmp	0x1b5b3 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x93>
   1b70e:      	cmpq	$0x3, 0x48(%rsp)
   1b714:      	jae	0x1b7b9 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x299>
   1b71a:      	jmp	0x1b5b3 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x93>
   1b71f:      	cmpq	$0x4, 0x48(%rsp)
   1b725:      	jae	0x1b821 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x301>
   1b72b:      	jmp	0x1b5b3 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x93>
   1b730:      	movq	0x40(%rsp), %rax
   1b735:      	movq	%rax, 0xd0(%rsp)
   1b73d:      	movl	0x2c(%rsp), %ecx
   1b741:      	movb	%cl, (%rax)
   1b743:      	movq	0x10(%rsp), %rsi
   1b748:      	movq	0x8(%rsp), %rdi
   1b74d:      	movq	0x30(%rsp), %rax
   1b752:      	movq	%rax, 0xb8(%rsp)
   1b75a:      	movq	0xb8(%rsp), %rdx
   1b762:      	leaq	0x1e047(%rip), %rcx     # 0x397b0 <zlgk82z0l71lvh9+0x397b0>
   1b769:      	movq	0x1fb50(%rip), %rax     # 0x3b2c0 <zlgk82z0l71lvh9+0x3b2c0>
   1b770:      	callq	*%rax
   1b772:      	addq	$0x198, %rsp            # imm = 0x198
   1b779:      	retq
   1b77a:      	movq	0x40(%rsp), %rcx
   1b77f:      	movq	%rcx, 0xd8(%rsp)
   1b787:      	movq	0x40(%rsp), %rax
   1b78c:      	movq	%rax, %rdx
   1b78f:      	addq	$0x1, %rdx
   1b793:      	movq	%rdx, 0xe0(%rsp)
   1b79b:      	movl	0x2c(%rsp), %edx
   1b79f:      	shrl	$0x6, %edx
   1b7a2:      	andl	$0x1f, %edx
   1b7a5:      	orb	$-0x40, %dl
   1b7a8:      	movb	%dl, (%rcx)
   1b7aa:      	movl	0x2c(%rsp), %ecx
   1b7ae:      	andl	$0x3f, %ecx
   1b7b1:      	orb	$-0x80, %cl
   1b7b4:      	movb	%cl, 0x1(%rax)
   1b7b7:      	jmp	0x1b743 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x223>
   1b7b9:      	movq	0x40(%rsp), %rdx
   1b7be:      	movq	%rdx, 0xe8(%rsp)
   1b7c6:      	movq	0x40(%rsp), %rcx
   1b7cb:      	movq	%rcx, %rax
   1b7ce:      	addq	$0x1, %rax
   1b7d2:      	movq	%rax, 0xf0(%rsp)
   1b7da:      	movq	0x40(%rsp), %rax
   1b7df:      	movq	%rax, %rsi
   1b7e2:      	addq	$0x2, %rsi
   1b7e6:      	movq	%rsi, 0xf8(%rsp)
   1b7ee:      	movl	0x2c(%rsp), %esi
   1b7f2:      	shrl	$0xc, %esi
   1b7f5:      	andl	$0xf, %esi
   1b7f8:      	orb	$-0x20, %sil
   1b7fc:      	movb	%sil, (%rdx)
   1b7ff:      	movl	0x2c(%rsp), %edx
   1b803:      	shrl	$0x6, %edx
   1b806:      	andl	$0x3f, %edx
   1b809:      	orb	$-0x80, %dl
   1b80c:      	movb	%dl, 0x1(%rcx)
   1b80f:      	movl	0x2c(%rsp), %ecx
   1b813:      	andl	$0x3f, %ecx
   1b816:      	orb	$-0x80, %cl
   1b819:      	movb	%cl, 0x2(%rax)
   1b81c:      	jmp	0x1b743 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x223>
   1b821:      	movq	0x40(%rsp), %rsi
   1b826:      	movq	%rsi, 0x100(%rsp)
   1b82e:      	movq	0x40(%rsp), %rdx
   1b833:      	movq	%rdx, %rax
   1b836:      	addq	$0x1, %rax
   1b83a:      	movq	%rax, 0x108(%rsp)
   1b842:      	movq	0x40(%rsp), %rcx
   1b847:      	movq	%rcx, %rax
   1b84a:      	addq	$0x2, %rax
   1b84e:      	movq	%rax, 0x110(%rsp)
   1b856:      	movq	0x40(%rsp), %rax
   1b85b:      	movq	%rax, %rdi
   1b85e:      	addq	$0x3, %rdi
   1b862:      	movq	%rdi, 0x118(%rsp)
   1b86a:      	movl	0x2c(%rsp), %edi
   1b86e:      	shrl	$0x12, %edi
   1b871:      	andl	$0x7, %edi
   1b874:      	orb	$-0x10, %dil
   1b878:      	movb	%dil, (%rsi)
   1b87b:      	movl	0x2c(%rsp), %esi
   1b87f:      	shrl	$0xc, %esi
   1b882:      	andl	$0x3f, %esi
   1b885:      	orb	$-0x80, %sil
   1b889:      	movb	%sil, 0x1(%rdx)
   1b88d:      	movl	0x2c(%rsp), %edx
   1b891:      	shrl	$0x6, %edx
   1b894:      	andl	$0x3f, %edx
   1b897:      	orb	$-0x80, %dl
   1b89a:      	movb	%dl, 0x2(%rcx)
   1b89d:      	movl	0x2c(%rsp), %ecx
   1b8a1:      	andl	$0x3f, %ecx
   1b8a4:      	orb	$-0x80, %cl
   1b8a7:      	movb	%cl, 0x3(%rax)
   1b8aa:      	jmp	0x1b743 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb+0x223>
   1b8af:      	int3

000000000001b8b0 <core::char::methods::<impl char>::encode_utf8::hf507bfaed52b70d0>:
   1b8b0:      	subq	$0x18, %rsp
   1b8b4:      	movl	%edi, 0x4(%rsp)
   1b8b8:      	movq	%rsi, 0x8(%rsp)
   1b8bd:      	movq	%rdx, 0x10(%rsp)
   1b8c2:      	callq	0x1b520 <core::char::methods::encode_utf8_raw::hbd58aa0a837219fb>
   1b8c7:      	movq	%rax, %rdi
   1b8ca:      	movq	%rdx, %rsi
   1b8cd:      	callq	0x1d790 <core::str::converts::from_utf8_unchecked_mut::h0ce5a4e0b52dee32>
   1b8d2:      	addq	$0x18, %rsp
   1b8d6:      	retq
   1b8d7:      	int3
   1b8d8:      	int3
   1b8d9:      	int3
   1b8da:      	int3
   1b8db:      	int3
   1b8dc:      	int3
   1b8dd:      	int3
   1b8de:      	int3
   1b8df:      	int3

000000000001b8e0 <core::char::methods::len_utf8::h1ff1b4f9051ceeab>:
   1b8e0:      	subq	$0x18, %rsp
   1b8e4:      	movl	%edi, 0x4(%rsp)
   1b8e8:      	movl	%edi, 0x14(%rsp)
   1b8ec:      	cmpl	$0x80, %edi
   1b8f2:      	jb	0x1b901 <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x21>
   1b8f4:      	movl	0x4(%rsp), %eax
   1b8f8:      	cmpl	$0x800, %eax            # imm = 0x800
   1b8fd:      	jb	0x1b919 <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x39>
   1b8ff:      	jmp	0x1b90c <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x2c>
   1b901:      	movq	$0x1, 0x8(%rsp)
   1b90a:      	jmp	0x1b938 <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x58>
   1b90c:      	movl	0x4(%rsp), %eax
   1b910:      	cmpl	$0x10000, %eax          # imm = 0x10000
   1b915:      	jb	0x1b92f <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x4f>
   1b917:      	jmp	0x1b924 <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x44>
   1b919:      	movq	$0x2, 0x8(%rsp)
   1b922:      	jmp	0x1b938 <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x58>
   1b924:      	movq	$0x4, 0x8(%rsp)
   1b92d:      	jmp	0x1b938 <core::char::methods::len_utf8::h1ff1b4f9051ceeab+0x58>
   1b92f:      	movq	$0x3, 0x8(%rsp)
   1b938:      	movq	0x8(%rsp), %rax
   1b93d:      	addq	$0x18, %rsp
   1b941:      	retq
   1b942:      	int3
   1b943:      	int3
   1b944:      	int3
   1b945:      	int3
   1b946:      	int3
   1b947:      	int3
   1b948:      	int3
   1b949:      	int3
   1b94a:      	int3
   1b94b:      	int3
   1b94c:      	int3
   1b94d:      	int3
   1b94e:      	int3
   1b94f:      	int3

000000000001b950 <core::iter::traits::iterator::Iterator::enumerate::h636c9346100ad703>:
   1b950:      	subq	$0x18, %rsp
   1b954:      	movq	%rdi, %rax
   1b957:      	movq	%rax, (%rsp)
   1b95b:      	movq	%rsi, 0x8(%rsp)
   1b960:      	movq	%rdx, 0x10(%rsp)
   1b965:      	movq	0x1f964(%rip), %rax     # 0x3b2d0 <zlgk82z0l71lvh9+0x3b2d0>
   1b96c:      	callq	*%rax
   1b96e:      	movq	(%rsp), %rax
   1b972:      	addq	$0x18, %rsp
   1b976:      	retq
   1b977:      	int3
   1b978:      	int3
   1b979:      	int3
   1b97a:      	int3
   1b97b:      	int3
   1b97c:      	int3
   1b97d:      	int3
   1b97e:      	int3
   1b97f:      	int3

000000000001b980 <core::iter::adapters::enumerate::Enumerate<I>::new::hdc97af2ddf4f2f04>:
   1b980:      	subq	$0x10, %rsp
   1b984:      	movq	%rdi, %rax
   1b987:      	movq	%rsi, (%rsp)
   1b98b:      	movq	%rdx, 0x8(%rsp)
   1b990:      	movq	%rsi, (%rdi)
   1b993:      	movq	%rdx, 0x8(%rdi)
   1b997:      	movq	$0x0, 0x10(%rdi)
   1b99f:      	addq	$0x10, %rsp
   1b9a3:      	retq
   1b9a4:      	int3
   1b9a5:      	int3
   1b9a6:      	int3
   1b9a7:      	int3
   1b9a8:      	int3
   1b9a9:      	int3
   1b9aa:      	int3
   1b9ab:      	int3
   1b9ac:      	int3
   1b9ad:      	int3
   1b9ae:      	int3
   1b9af:      	int3

000000000001b9b0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hf954900ba66490f3E>:
   1b9b0:      	subq	$0x38, %rsp
   1b9b4:      	movq	%rcx, 0x8(%rsp)
   1b9b9:      	movq	%rdx, 0x10(%rsp)
   1b9be:      	movq	%rsi, 0x18(%rsp)
   1b9c3:      	movb	%dil, %al
   1b9c6:      	andb	$0x1, %al
   1b9c8:      	movb	%al, 0x25(%rsp)
   1b9cc:      	movq	%rsi, 0x28(%rsp)
   1b9d1:      	movq	%rdx, 0x30(%rsp)
   1b9d6:      	movb	0x25(%rsp), %al
   1b9da:      	andb	$0x1, %al
   1b9dc:      	movzbl	%al, %eax
   1b9df:      	cmpq	$0x0, %rax
   1b9e3:      	jne	0x1b9ea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hf954900ba66490f3E+0x3a>
   1b9e5:      	addq	$0x38, %rsp
   1b9e9:      	retq
   1b9ea:      	movq	0x8(%rsp), %r8
   1b9ef:      	movq	0x10(%rsp), %rsi
   1b9f4:      	movq	0x18(%rsp), %rdi
   1b9f9:      	leaq	0x1de10(%rip), %rcx     # 0x39810 <zlgk82z0l71lvh9+0x39810>
   1ba00:      	movq	0x1f7f1(%rip), %rax     # 0x3b1f8 <zlgk82z0l71lvh9+0x3b1f8>
   1ba07:      	leaq	0x26(%rsp), %rdx
   1ba0c:      	callq	*%rax
   1ba0e:      	ud2

000000000001ba10 <<&mut W as core::fmt::Write>::write_char::h9ffd9b533bd1d125>:
   1ba10:      	subq	$0x18, %rsp
   1ba14:      	movq	%rdi, 0x8(%rsp)
   1ba19:      	movl	%esi, 0x14(%rsp)
   1ba1d:      	movq	(%rdi), %rdi
   1ba20:      	movq	0x1f811(%rip), %rax     # 0x3b238 <zlgk82z0l71lvh9+0x3b238>
   1ba27:      	callq	*%rax
   1ba29:      	andb	$0x1, %al
   1ba2b:      	movzbl	%al, %eax
   1ba2e:      	addq	$0x18, %rsp
   1ba32:      	retq
   1ba33:      	int3
   1ba34:      	int3
   1ba35:      	int3
   1ba36:      	int3
   1ba37:      	int3
   1ba38:      	int3
   1ba39:      	int3
   1ba3a:      	int3
   1ba3b:      	int3
   1ba3c:      	int3
   1ba3d:      	int3
   1ba3e:      	int3
   1ba3f:      	int3

000000000001ba40 <<&mut W as core::fmt::Write>::write_fmt::h1bc6d1c881dbca29>:
   1ba40:      	subq	$0x38, %rsp
   1ba44:      	movq	%rdi, (%rsp)
   1ba48:      	movq	(%rdi), %rdi
   1ba4b:      	movq	0x28(%rsi), %rax
   1ba4f:      	movq	%rax, 0x30(%rsp)
   1ba54:      	movq	0x20(%rsi), %rax
   1ba58:      	movq	%rax, 0x28(%rsp)
   1ba5d:      	movq	0x18(%rsi), %rax
   1ba61:      	movq	%rax, 0x20(%rsp)
   1ba66:      	movq	0x10(%rsi), %rax
   1ba6a:      	movq	%rax, 0x18(%rsp)
   1ba6f:      	movq	(%rsi), %rax
   1ba72:      	movq	0x8(%rsi), %rcx
   1ba76:      	movq	%rcx, 0x10(%rsp)
   1ba7b:      	movq	%rax, 0x8(%rsp)
   1ba80:      	movq	0x1f7c1(%rip), %rax     # 0x3b248 <zlgk82z0l71lvh9+0x3b248>
   1ba87:      	leaq	0x8(%rsp), %rsi
   1ba8c:      	callq	*%rax
   1ba8e:      	andb	$0x1, %al
   1ba90:      	movzbl	%al, %eax
   1ba93:      	addq	$0x38, %rsp
   1ba97:      	retq
   1ba98:      	int3
   1ba99:      	int3
   1ba9a:      	int3
   1ba9b:      	int3
   1ba9c:      	int3
   1ba9d:      	int3
   1ba9e:      	int3
   1ba9f:      	int3

000000000001baa0 <<&mut W as core::fmt::Write>::write_str::hbd904469fd2f653a>:
   1baa0:      	subq	$0x18, %rsp
   1baa4:      	movq	%rdi, (%rsp)
   1baa8:      	movq	%rsi, 0x8(%rsp)
   1baad:      	movq	%rdx, 0x10(%rsp)
   1bab2:      	movq	(%rdi), %rdi
   1bab5:      	movq	0x1f784(%rip), %rax     # 0x3b240 <zlgk82z0l71lvh9+0x3b240>
   1babc:      	callq	*%rax
   1babe:      	andb	$0x1, %al
   1bac0:      	movzbl	%al, %eax
   1bac3:      	addq	$0x18, %rsp
   1bac7:      	retq
   1bac8:      	int3
   1bac9:      	int3
   1baca:      	int3
   1bacb:      	int3
   1bacc:      	int3
   1bacd:      	int3
   1bace:      	int3
   1bacf:      	int3

000000000001bad0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h40eb28c5e93548b1>:
   1bad0:      	movq	%rdi, %rax
   1bad3:      	movq	(%rsi), %rcx
   1bad6:      	movq	%rcx, (%rdi)
   1bad9:      	movq	0x8(%rsi), %rcx
   1badd:      	movq	%rcx, 0x8(%rdi)
   1bae1:      	movq	0x10(%rsi), %rcx
   1bae5:      	movq	%rcx, 0x10(%rdi)
   1bae9:      	retq
   1baea:      	int3
   1baeb:      	int3
   1baec:      	int3
   1baed:      	int3
   1baee:      	int3
   1baef:      	int3

000000000001baf0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::ha7333d9b2ee7f95a>:
   1baf0:      	subq	$0x10, %rsp
   1baf4:      	movq	%rsi, %rdx
   1baf7:      	movq	%rdi, %rax
   1bafa:      	movq	%rax, (%rsp)
   1bafe:      	movq	%rdx, 0x8(%rsp)
   1bb03:      	addq	$0x10, %rsp
   1bb07:      	retq
   1bb08:      	int3
   1bb09:      	int3
   1bb0a:      	int3
   1bb0b:      	int3
   1bb0c:      	int3
   1bb0d:      	int3
   1bb0e:      	int3
   1bb0f:      	int3

000000000001bb10 <<[T] as core::slice::specialize::SpecFill<T>>::spec_fill::h47f37bb5def03b95>:
   1bb10:      	subq	$0x48, %rsp
   1bb14:      	movb	%dl, %al
   1bb16:      	movb	%al, 0xf(%rsp)
   1bb1a:      	movq	%rdi, 0x28(%rsp)
   1bb1f:      	movq	%rsi, 0x30(%rsp)
   1bb24:      	movb	%al, 0x3f(%rsp)
   1bb28:      	movq	0x1f7c1(%rip), %rax     # 0x3b2f0 <zlgk82z0l71lvh9+0x3b2f0>
   1bb2f:      	callq	*%rax
   1bb31:      	movq	%rax, %rdi
   1bb34:      	movq	%rdx, %rsi
   1bb37:      	movq	0x1f7a2(%rip), %rax     # 0x3b2e0 <zlgk82z0l71lvh9+0x3b2e0>
   1bb3e:      	callq	*%rax
   1bb40:      	movq	%rax, 0x10(%rsp)
   1bb45:      	movq	%rdx, 0x18(%rsp)
   1bb4a:      	movq	0x1f7a7(%rip), %rax     # 0x3b2f8 <zlgk82z0l71lvh9+0x3b2f8>
   1bb51:      	leaq	0x10(%rsp), %rdi
   1bb56:      	callq	*%rax
   1bb58:      	movq	%rax, 0x20(%rsp)
   1bb5d:      	movq	0x20(%rsp), %rdx
   1bb62:      	movl	$0x1, %eax
   1bb67:      	xorl	%ecx, %ecx
   1bb69:      	cmpq	$0x0, %rdx
   1bb6d:      	cmoveq	%rcx, %rax
   1bb71:      	cmpq	$0x0, %rax
   1bb75:      	jne	0x1bb7c <<[T] as core::slice::specialize::SpecFill<T>>::spec_fill::h47f37bb5def03b95+0x6c>
   1bb77:      	addq	$0x48, %rsp
   1bb7b:      	retq
   1bb7c:      	movb	0xf(%rsp), %cl
   1bb80:      	movq	0x20(%rsp), %rax
   1bb85:      	movq	%rax, 0x40(%rsp)
   1bb8a:      	movb	%cl, (%rax)
   1bb8c:      	jmp	0x1bb4a <<[T] as core::slice::specialize::SpecFill<T>>::spec_fill::h47f37bb5def03b95+0x3a>
   1bb8e:      	int3
   1bb8f:      	int3

000000000001bb90 <<log::Level as core::cmp::PartialOrd<log::LevelFilter>>::partial_cmp::h1c726aeaf0c1e278>:
   1bb90:      	subq	$0x38, %rsp
   1bb94:      	movq	%rdi, 0x28(%rsp)
   1bb99:      	movq	%rsi, 0x30(%rsp)
   1bb9e:      	movq	(%rdi), %rax
   1bba1:      	movq	%rax, 0x10(%rsp)
   1bba6:      	movq	0x10(%rsp), %rax
   1bbab:      	movq	%rax, 0x8(%rsp)
   1bbb0:      	movq	(%rsi), %rax
   1bbb3:      	movq	%rax, 0x20(%rsp)
   1bbb8:      	movq	0x20(%rsp), %rax
   1bbbd:      	movq	%rax, 0x18(%rsp)
   1bbc2:      	leaq	0x8(%rsp), %rdi
   1bbc7:      	leaq	0x18(%rsp), %rsi
   1bbcc:      	callq	0x1d3b0 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::hdac2cef6eef2be84>
   1bbd1:      	movb	%al, 0x7(%rsp)
   1bbd5:      	movb	0x7(%rsp), %al
   1bbd9:      	addq	$0x38, %rsp
   1bbdd:      	retq
   1bbde:      	int3
   1bbdf:      	int3

000000000001bbe0 <bootloader_x86_64_common::framebuffer::get_char_raster::h6946c7fdf73429d3>:
   1bbe0:      	subq	$0x38, %rsp
   1bbe4:      	movq	%rdi, (%rsp)
   1bbe8:      	movq	%rdi, 0x8(%rsp)
   1bbed:      	movl	%esi, 0x34(%rsp)
   1bbf1:      	leaq	0x10(%rsp), %rdi
   1bbf6:      	callq	0x1bc20 <bootloader_x86_64_common::framebuffer::get_char_raster::get::h68ec5635d1f7d443>
   1bbfb:      	movq	(%rsp), %rdi
   1bbff:      	movq	0x1f6fa(%rip), %rax     # 0x3b300 <zlgk82z0l71lvh9+0x3b300>
   1bc06:      	leaq	0x10(%rsp), %rsi
   1bc0b:      	callq	*%rax
   1bc0d:      	movq	0x8(%rsp), %rax
   1bc12:      	addq	$0x38, %rsp
   1bc16:      	retq
   1bc17:      	int3
   1bc18:      	int3
   1bc19:      	int3
   1bc1a:      	int3
   1bc1b:      	int3
   1bc1c:      	int3
   1bc1d:      	int3
   1bc1e:      	int3
   1bc1f:      	int3

000000000001bc20 <bootloader_x86_64_common::framebuffer::get_char_raster::get::h68ec5635d1f7d443>:
   1bc20:      	subq	$0x18, %rsp
   1bc24:      	movq	%rdi, %rax
   1bc27:      	movq	%rax, 0x8(%rsp)
   1bc2c:      	movl	%esi, 0x14(%rsp)
   1bc30:      	xorl	%eax, %eax
   1bc32:      	xorl	%eax, %eax
   1bc34:      	movl	%eax, %edx
   1bc36:      	movl	$0x10, %ecx
   1bc3b:      	callq	0x1d1e0 <noto_sans_mono_bitmap::get_raster::h61d83a1c53f22331>
   1bc40:      	movq	0x8(%rsp), %rax
   1bc45:      	addq	$0x18, %rsp
   1bc49:      	retq
   1bc4a:      	int3
   1bc4b:      	int3
   1bc4c:      	int3
   1bc4d:      	int3
   1bc4e:      	int3
   1bc4f:      	int3

000000000001bc50 <bootloader_x86_64_common::framebuffer::get_char_raster::{{closure}}::ha1fb07ac713ca946>:
   1bc50:      	subq	$0x38, %rsp
   1bc54:      	movq	%rdi, (%rsp)
   1bc58:      	movq	%rdi, 0x8(%rsp)
   1bc5d:      	leaq	0x10(%rsp), %rdi
   1bc62:      	movl	$0xfffd, %esi           # imm = 0xFFFD
   1bc67:      	callq	0x1bc20 <bootloader_x86_64_common::framebuffer::get_char_raster::get::h68ec5635d1f7d443>
   1bc6c:      	movq	(%rsp), %rdi
   1bc70:      	leaq	-0xaf3f(%rip), %rdx     # 0x10d38 <str.0+0x1de8>
   1bc77:      	leaq	0x1dbb2(%rip), %r8      # 0x39830 <zlgk82z0l71lvh9+0x39830>
   1bc7e:      	movq	0x1f683(%rip), %rax     # 0x3b308 <zlgk82z0l71lvh9+0x3b308>
   1bc85:      	leaq	0x10(%rsp), %rsi
   1bc8a:      	movl	$0x21, %ecx
   1bc8f:      	callq	*%rax
   1bc91:      	movq	0x8(%rsp), %rax
   1bc96:      	addq	$0x38, %rsp
   1bc9a:      	retq
   1bc9b:      	int3
   1bc9c:      	int3
   1bc9d:      	int3
   1bc9e:      	int3
   1bc9f:      	int3

000000000001bca0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::new::hbf99b487ef607277>:
   1bca0:      	subq	$0x78, %rsp
   1bca4:      	movq	%rcx, (%rsp)
   1bca8:      	movq	%rdx, %rax
   1bcab:      	movq	(%rsp), %rdx
   1bcaf:      	movq	%rdi, 0x8(%rsp)
   1bcb4:      	movq	%rdi, 0x10(%rsp)
   1bcb9:      	movq	%rsi, 0x68(%rsp)
   1bcbe:      	movq	%rax, 0x70(%rsp)
   1bcc3:      	movq	%rsi, 0x18(%rsp)
   1bcc8:      	movq	%rax, 0x20(%rsp)
   1bccd:      	leaq	0x18(%rsp), %rax
   1bcd2:      	addq	$0x20, %rax
   1bcd6:      	movq	0x28(%rdx), %rcx
   1bcda:      	movq	%rcx, 0x28(%rax)
   1bcde:      	movq	0x20(%rdx), %rcx
   1bce2:      	movq	%rcx, 0x20(%rax)
   1bce6:      	movq	0x18(%rdx), %rcx
   1bcea:      	movq	%rcx, 0x18(%rax)
   1bcee:      	movq	0x10(%rdx), %rcx
   1bcf2:      	movq	%rcx, 0x10(%rax)
   1bcf6:      	movq	(%rdx), %rcx
   1bcf9:      	movq	0x8(%rdx), %rdx
   1bcfd:      	movq	%rdx, 0x8(%rax)
   1bd01:      	movq	%rcx, (%rax)
   1bd04:      	movq	$0x0, 0x28(%rsp)
   1bd0d:      	movq	$0x0, 0x30(%rsp)
   1bd16:      	movq	0x1f5fb(%rip), %rax     # 0x3b318 <zlgk82z0l71lvh9+0x3b318>
   1bd1d:      	leaq	0x18(%rsp), %rdi
   1bd22:      	callq	*%rax
   1bd24:      	movq	0x8(%rsp), %rdi
   1bd29:      	movq	0x10(%rsp), %rax
   1bd2e:      	movl	$0xa, %ecx
   1bd33:      	leaq	0x18(%rsp), %rsi
   1bd38:      	rep		movsq	(%rsi), %es:(%rdi)
   1bd3b:      	addq	$0x78, %rsp
   1bd3f:      	retq

000000000001bd40 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::newline::hc8330ef32ee91114>:
   1bd40:      	subq	$0x28, %rsp
   1bd44:      	movq	%rdi, 0x10(%rsp)
   1bd49:      	movq	%rdi, 0x20(%rsp)
   1bd4e:      	movl	$0x10, %edi
   1bd53:      	callq	0x1d2e0 <noto_sans_mono_bitmap::RasterHeight::val::h5760c135ae8dc693>
   1bd58:      	addq	$0x2, %rax
   1bd5c:      	movq	%rax, 0x18(%rsp)
   1bd61:      	setb	%al
   1bd64:      	testb	$0x1, %al
   1bd66:      	jne	0x1bd84 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::newline::hc8330ef32ee91114+0x44>
   1bd68:      	movq	0x10(%rsp), %rcx
   1bd6d:      	movq	0x18(%rsp), %rax
   1bd72:      	addq	0x18(%rcx), %rax
   1bd76:      	movq	%rax, 0x8(%rsp)
   1bd7b:      	setb	%al
   1bd7e:      	testb	$0x1, %al
   1bd80:      	jne	0x1bdba <bootloader_x86_64_common::framebuffer::FrameBufferWriter::newline::hc8330ef32ee91114+0x7a>
   1bd82:      	jmp	0x1bda2 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::newline::hc8330ef32ee91114+0x62>
   1bd84:      	leaq	-0xce3b(%rip), %rdi     # 0xef50 <str.0>
   1bd8b:      	leaq	0x1dab6(%rip), %rdx     # 0x39848 <zlgk82z0l71lvh9+0x39848>
   1bd92:      	movq	0x1f137(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1bd99:      	movl	$0x1c, %esi
   1bd9e:      	callq	*%rax
   1bda0:      	ud2
   1bda2:      	movq	0x10(%rsp), %rdi
   1bda7:      	movq	0x8(%rsp), %rax
   1bdac:      	movq	%rax, 0x18(%rdi)
   1bdb0:      	callq	0x1bde0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::carriage_return::h60f8869c74600e86>
   1bdb5:      	addq	$0x28, %rsp
   1bdb9:      	retq
   1bdba:      	leaq	-0xce71(%rip), %rdi     # 0xef50 <str.0>
   1bdc1:      	leaq	0x1da98(%rip), %rdx     # 0x39860 <zlgk82z0l71lvh9+0x39860>
   1bdc8:      	movq	0x1f101(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1bdcf:      	movl	$0x1c, %esi
   1bdd4:      	callq	*%rax
   1bdd6:      	ud2
   1bdd8:      	int3
   1bdd9:      	int3
   1bdda:      	int3
   1bddb:      	int3
   1bddc:      	int3
   1bddd:      	int3
   1bdde:      	int3
   1bddf:      	int3

000000000001bde0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::carriage_return::h60f8869c74600e86>:
   1bde0:      	pushq	%rax
   1bde1:      	movq	%rdi, (%rsp)
   1bde5:      	movq	$0x1, 0x10(%rdi)
   1bded:      	popq	%rax
   1bdee:      	retq
   1bdef:      	int3

000000000001bdf0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::clear::h7b9cd6c1f9379791>:
   1bdf0:      	pushq	%rax
   1bdf1:      	movq	%rdi, %rax
   1bdf4:      	movq	%rax, (%rsp)
   1bdf8:      	movq	$0x1, 0x10(%rax)
   1be00:      	movq	$0x1, 0x18(%rax)
   1be08:      	movq	(%rax), %rdi
   1be0b:      	movq	0x8(%rax), %rsi
   1be0f:      	xorl	%eax, %eax
   1be11:      	movq	0x1f508(%rip), %rax     # 0x3b320 <zlgk82z0l71lvh9+0x3b320>
   1be18:      	xorl	%edx, %edx
   1be1a:      	callq	*%rax
   1be1c:      	popq	%rax
   1be1d:      	retq
   1be1e:      	int3
   1be1f:      	int3

000000000001be20 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::width::haea6ad4639697534>:
   1be20:      	pushq	%rax
   1be21:      	movq	%rdi, (%rsp)
   1be25:      	movq	0x28(%rdi), %rax
   1be29:      	popq	%rcx
   1be2a:      	retq
   1be2b:      	int3
   1be2c:      	int3
   1be2d:      	int3
   1be2e:      	int3
   1be2f:      	int3

000000000001be30 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::height::h24efa93a98ca0148>:
   1be30:      	pushq	%rax
   1be31:      	movq	%rdi, (%rsp)
   1be35:      	movq	0x30(%rdi), %rax
   1be39:      	popq	%rcx
   1be3a:      	retq
   1be3b:      	int3
   1be3c:      	int3
   1be3d:      	int3
   1be3e:      	int3
   1be3f:      	int3

000000000001be40 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9>:
   1be40:      	subq	$0x78, %rsp
   1be44:      	movl	%esi, 0x2c(%rsp)
   1be48:      	movq	%rdi, 0x30(%rsp)
   1be4d:      	movq	%rdi, 0x58(%rsp)
   1be52:      	movl	%esi, 0x64(%rsp)
   1be56:      	subl	$0xa, %esi
   1be59:      	je	0x1be83 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x43>
   1be5b:      	jmp	0x1be5d <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x1d>
   1be5d:      	movl	0x2c(%rsp), %eax
   1be61:      	subl	$0xd, %eax
   1be64:      	je	0x1be8f <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x4f>
   1be66:      	jmp	0x1be68 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x28>
   1be68:      	movq	0x30(%rsp), %rax
   1be6d:      	movq	0x10(%rax), %rax
   1be71:      	addq	$0x9, %rax
   1be75:      	movq	%rax, 0x20(%rsp)
   1be7a:      	setb	%al
   1be7d:      	testb	$0x1, %al
   1be7f:      	jne	0x1bec1 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x81>
   1be81:      	jmp	0x1be9e <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x5e>
   1be83:      	movq	0x30(%rsp), %rdi
   1be88:      	callq	0x1bd40 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::newline::hc8330ef32ee91114>
   1be8d:      	jmp	0x1be99 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x59>
   1be8f:      	movq	0x30(%rsp), %rdi
   1be94:      	callq	0x1bde0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::carriage_return::h60f8869c74600e86>
   1be99:      	addq	$0x78, %rsp
   1be9d:      	retq
   1be9e:      	movq	0x20(%rsp), %rax
   1bea3:      	movq	0x30(%rsp), %rdi
   1bea8:      	movq	%rax, 0x68(%rsp)
   1bead:      	callq	0x1be20 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::width::haea6ad4639697534>
   1beb2:      	movq	%rax, %rcx
   1beb5:      	movq	0x20(%rsp), %rax
   1beba:      	cmpq	%rcx, %rax
   1bebd:      	jae	0x1bf10 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0xd0>
   1bebf:      	jmp	0x1bedf <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x9f>
   1bec1:      	leaq	-0xcf78(%rip), %rdi     # 0xef50 <str.0>
   1bec8:      	leaq	0x1d9a9(%rip), %rdx     # 0x39878 <zlgk82z0l71lvh9+0x39878>
   1becf:      	movq	0x1effa(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1bed6:      	movl	$0x1c, %esi
   1bedb:      	callq	*%rax
   1bedd:      	ud2
   1bedf:      	movq	0x30(%rsp), %rax
   1bee4:      	movq	0x18(%rax), %rax
   1bee8:      	movq	%rax, 0x10(%rsp)
   1beed:      	movl	$0x10, %edi
   1bef2:      	callq	0x1d2e0 <noto_sans_mono_bitmap::RasterHeight::val::h5760c135ae8dc693>
   1bef7:      	movq	%rax, %rcx
   1befa:      	movq	0x10(%rsp), %rax
   1beff:      	addq	%rcx, %rax
   1bf02:      	movq	%rax, 0x18(%rsp)
   1bf07:      	setb	%al
   1bf0a:      	testb	$0x1, %al
   1bf0c:      	jne	0x1bf33 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0xf3>
   1bf0e:      	jmp	0x1bf1c <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0xdc>
   1bf10:      	movq	0x30(%rsp), %rdi
   1bf15:      	callq	0x1bd40 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::newline::hc8330ef32ee91114>
   1bf1a:      	jmp	0x1bedf <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x9f>
   1bf1c:      	movq	0x18(%rsp), %rax
   1bf21:      	addq	$0x1, %rax
   1bf25:      	movq	%rax, 0x8(%rsp)
   1bf2a:      	setb	%al
   1bf2d:      	testb	$0x1, %al
   1bf2f:      	jne	0x1bf74 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x134>
   1bf31:      	jmp	0x1bf51 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x111>
   1bf33:      	leaq	-0xcfea(%rip), %rdi     # 0xef50 <str.0>
   1bf3a:      	leaq	0x1d94f(%rip), %rdx     # 0x39890 <zlgk82z0l71lvh9+0x39890>
   1bf41:      	movq	0x1ef88(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1bf48:      	movl	$0x1c, %esi
   1bf4d:      	callq	*%rax
   1bf4f:      	ud2
   1bf51:      	movq	0x8(%rsp), %rax
   1bf56:      	movq	0x30(%rsp), %rdi
   1bf5b:      	movq	%rax, 0x70(%rsp)
   1bf60:      	callq	0x1be30 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::height::h24efa93a98ca0148>
   1bf65:      	movq	%rax, %rcx
   1bf68:      	movq	0x8(%rsp), %rax
   1bf6d:      	cmpq	%rcx, %rax
   1bf70:      	jae	0x1bfb4 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x174>
   1bf72:      	jmp	0x1bf92 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x152>
   1bf74:      	leaq	-0xd02b(%rip), %rdi     # 0xef50 <str.0>
   1bf7b:      	leaq	0x1d90e(%rip), %rdx     # 0x39890 <zlgk82z0l71lvh9+0x39890>
   1bf82:      	movq	0x1ef47(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1bf89:      	movl	$0x1c, %esi
   1bf8e:      	callq	*%rax
   1bf90:      	ud2
   1bf92:      	movl	0x2c(%rsp), %esi
   1bf96:      	leaq	0x38(%rsp), %rdi
   1bf9b:      	callq	0x1bbe0 <bootloader_x86_64_common::framebuffer::get_char_raster::h6946c7fdf73429d3>
   1bfa0:      	movq	0x30(%rsp), %rdi
   1bfa5:      	leaq	0x38(%rsp), %rsi
   1bfaa:      	callq	0x1bfd0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed>
   1bfaf:      	jmp	0x1be99 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x59>
   1bfb4:      	movq	0x30(%rsp), %rdi
   1bfb9:      	movq	0x1f358(%rip), %rax     # 0x3b318 <zlgk82z0l71lvh9+0x3b318>
   1bfc0:      	callq	*%rax
   1bfc2:      	jmp	0x1bf92 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9+0x152>
   1bfc4:      	int3
   1bfc5:      	int3
   1bfc6:      	int3
   1bfc7:      	int3
   1bfc8:      	int3
   1bfc9:      	int3
   1bfca:      	int3
   1bfcb:      	int3
   1bfcc:      	int3
   1bfcd:      	int3
   1bfce:      	int3
   1bfcf:      	int3

000000000001bfd0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed>:
   1bfd0:      	subq	$0x118, %rsp            # imm = 0x118
   1bfd7:      	movq	%rsi, 0x30(%rsp)
   1bfdc:      	movq	%rdi, %rax
   1bfdf:      	movq	0x30(%rsp), %rdi
   1bfe4:      	movq	%rax, 0x38(%rsp)
   1bfe9:      	movq	%rax, 0xf0(%rsp)
   1bff1:      	callq	0x1d300 <noto_sans_mono_bitmap::RasterizedChar::raster::h3866ae7bc1340bd4>
   1bff6:      	movq	%rax, %rdi
   1bff9:      	movq	%rdx, %rsi
   1bffc:      	movq	0x1f325(%rip), %rax     # 0x3b328 <zlgk82z0l71lvh9+0x3b328>
   1c003:      	callq	*%rax
   1c005:      	movq	%rax, %rsi
   1c008:      	movq	0x1f2b9(%rip), %rax     # 0x3b2c8 <zlgk82z0l71lvh9+0x3b2c8>
   1c00f:      	leaq	0x58(%rsp), %rdi
   1c014:      	callq	*%rax
   1c016:      	movq	0x1f2bb(%rip), %rax     # 0x3b2d8 <zlgk82z0l71lvh9+0x3b2d8>
   1c01d:      	leaq	0x40(%rsp), %rdi
   1c022:      	leaq	0x58(%rsp), %rsi
   1c027:      	callq	*%rax
   1c029:      	movq	0x40(%rsp), %rax
   1c02e:      	movq	%rax, 0x70(%rsp)
   1c033:      	movq	0x48(%rsp), %rax
   1c038:      	movq	%rax, 0x78(%rsp)
   1c03d:      	movq	0x50(%rsp), %rax
   1c042:      	movq	%rax, 0x80(%rsp)
   1c04a:      	movq	0x1f1bf(%rip), %rax     # 0x3b210 <zlgk82z0l71lvh9+0x3b210>
   1c051:      	leaq	0x70(%rsp), %rdi
   1c056:      	callq	*%rax
   1c058:      	movq	%rdx, 0x90(%rsp)
   1c060:      	movq	%rax, 0x88(%rsp)
   1c068:      	movq	0x90(%rsp), %rdx
   1c070:      	movl	$0x1, %eax
   1c075:      	xorl	%ecx, %ecx
   1c077:      	cmpq	$0x0, %rdx
   1c07b:      	cmoveq	%rcx, %rax
   1c07f:      	cmpq	$0x0, %rax
   1c083:      	jne	0x1c0a8 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0xd8>
   1c085:      	movq	0x30(%rsp), %rdi
   1c08a:      	callq	0x1d2f0 <noto_sans_mono_bitmap::RasterizedChar::width::hd95d308eeaad51e9>
   1c08f:      	addq	$0x0, %rax
   1c093:      	movq	%rax, 0x28(%rsp)
   1c098:      	setb	%al
   1c09b:      	testb	$0x1, %al
   1c09d:      	jne	0x1c158 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x188>
   1c0a3:      	jmp	0x1c13c <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x16c>
   1c0a8:      	movq	0x88(%rsp), %rax
   1c0b0:      	movq	%rax, 0x20(%rsp)
   1c0b5:      	movq	%rax, 0xf8(%rsp)
   1c0bd:      	movq	0x90(%rsp), %rax
   1c0c5:      	movq	%rax, 0x100(%rsp)
   1c0cd:      	movq	(%rax), %rdi
   1c0d0:      	movq	0x8(%rax), %rsi
   1c0d4:      	movq	0x1f1cd(%rip), %rax     # 0x3b2a8 <zlgk82z0l71lvh9+0x3b2a8>
   1c0db:      	callq	*%rax
   1c0dd:      	movq	%rax, %rsi
   1c0e0:      	movq	0x1f249(%rip), %rax     # 0x3b330 <zlgk82z0l71lvh9+0x3b330>
   1c0e7:      	leaq	0xb0(%rsp), %rdi
   1c0ef:      	callq	*%rax
   1c0f1:      	movq	0x1f240(%rip), %rax     # 0x3b338 <zlgk82z0l71lvh9+0x3b338>
   1c0f8:      	leaq	0x98(%rsp), %rdi
   1c100:      	leaq	0xb0(%rsp), %rsi
   1c108:      	callq	*%rax
   1c10a:      	movq	0x98(%rsp), %rax
   1c112:      	movq	%rax, 0xc8(%rsp)
   1c11a:      	movq	0xa0(%rsp), %rax
   1c122:      	movq	%rax, 0xd0(%rsp)
   1c12a:      	movq	0xa8(%rsp), %rax
   1c132:      	movq	%rax, 0xd8(%rsp)
   1c13a:      	jmp	0x1c1aa <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x1da>
   1c13c:      	movq	0x38(%rsp), %rcx
   1c141:      	movq	0x28(%rsp), %rax
   1c146:      	addq	0x10(%rcx), %rax
   1c14a:      	movq	%rax, 0x18(%rsp)
   1c14f:      	setb	%al
   1c152:      	testb	$0x1, %al
   1c154:      	jne	0x1c18c <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x1bc>
   1c156:      	jmp	0x1c176 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x1a6>
   1c158:      	leaq	-0xd20f(%rip), %rdi     # 0xef50 <str.0>
   1c15f:      	leaq	0x1d742(%rip), %rdx     # 0x398a8 <zlgk82z0l71lvh9+0x398a8>
   1c166:      	movq	0x1ed63(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c16d:      	movl	$0x1c, %esi
   1c172:      	callq	*%rax
   1c174:      	ud2
   1c176:      	movq	0x38(%rsp), %rax
   1c17b:      	movq	0x18(%rsp), %rcx
   1c180:      	movq	%rcx, 0x10(%rax)
   1c184:      	addq	$0x118, %rsp            # imm = 0x118
   1c18b:      	retq
   1c18c:      	leaq	-0xd243(%rip), %rdi     # 0xef50 <str.0>
   1c193:      	leaq	0x1d726(%rip), %rdx     # 0x398c0 <zlgk82z0l71lvh9+0x398c0>
   1c19a:      	movq	0x1ed2f(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c1a1:      	movl	$0x1c, %esi
   1c1a6:      	callq	*%rax
   1c1a8:      	ud2
   1c1aa:      	movq	0x1f18f(%rip), %rax     # 0x3b340 <zlgk82z0l71lvh9+0x3b340>
   1c1b1:      	leaq	0xc8(%rsp), %rdi
   1c1b9:      	callq	*%rax
   1c1bb:      	movq	%rdx, 0xe8(%rsp)
   1c1c3:      	movq	%rax, 0xe0(%rsp)
   1c1cb:      	movq	0xe8(%rsp), %rdx
   1c1d3:      	movl	$0x1, %eax
   1c1d8:      	xorl	%ecx, %ecx
   1c1da:      	cmpq	$0x0, %rdx
   1c1de:      	cmoveq	%rcx, %rax
   1c1e2:      	cmpq	$0x0, %rax
   1c1e6:      	je	0x1c04a <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x7a>
   1c1ec:      	movq	0x38(%rsp), %rcx
   1c1f1:      	movq	0xe0(%rsp), %rax
   1c1f9:      	movq	%rax, 0x108(%rsp)
   1c201:      	movq	0xe8(%rsp), %rdx
   1c209:      	movq	%rdx, 0x8(%rsp)
   1c20e:      	movq	%rdx, 0x110(%rsp)
   1c216:      	addq	0x10(%rcx), %rax
   1c21a:      	movq	%rax, 0x10(%rsp)
   1c21f:      	setb	%al
   1c222:      	testb	$0x1, %al
   1c224:      	jne	0x1c241 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x271>
   1c226:      	movq	0x38(%rsp), %rcx
   1c22b:      	movq	0x20(%rsp), %rax
   1c230:      	addq	0x18(%rcx), %rax
   1c234:      	movq	%rax, (%rsp)
   1c238:      	setb	%al
   1c23b:      	testb	$0x1, %al
   1c23d:      	jne	0x1c281 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x2b1>
   1c23f:      	jmp	0x1c25f <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x28f>
   1c241:      	leaq	-0xd2f8(%rip), %rdi     # 0xef50 <str.0>
   1c248:      	leaq	0x1d689(%rip), %rdx     # 0x398d8 <zlgk82z0l71lvh9+0x398d8>
   1c24f:      	movq	0x1ec7a(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c256:      	movl	$0x1c, %esi
   1c25b:      	callq	*%rax
   1c25d:      	ud2
   1c25f:      	movq	(%rsp), %rdx
   1c263:      	movq	0x10(%rsp), %rsi
   1c268:      	movq	0x38(%rsp), %rdi
   1c26d:      	movq	0x8(%rsp), %rax
   1c272:      	movb	(%rax), %al
   1c274:      	movzbl	%al, %ecx
   1c277:      	callq	0x1c2a0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3>
   1c27c:      	jmp	0x1c1aa <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_rendered_char::h2efaaec48aeec3ed+0x1da>
   1c281:      	leaq	-0xd338(%rip), %rdi     # 0xef50 <str.0>
   1c288:      	leaq	0x1d661(%rip), %rdx     # 0x398f0 <zlgk82z0l71lvh9+0x398f0>
   1c28f:      	movq	0x1ec3a(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c296:      	movl	$0x1c, %esi
   1c29b:      	callq	*%rax
   1c29d:      	ud2
   1c29f:      	int3

000000000001c2a0 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3>:
   1c2a0:      	subq	$0x158, %rsp            # imm = 0x158
   1c2a7:      	movq	%rdx, %rax
   1c2aa:      	movq	%rsi, 0x68(%rsp)
   1c2af:      	movq	%rdi, 0x70(%rsp)
   1c2b4:      	movb	%cl, 0x7f(%rsp)
   1c2b8:      	movq	%rdi, 0xf8(%rsp)
   1c2c0:      	movq	%rsi, 0x100(%rsp)
   1c2c8:      	movq	%rax, 0x108(%rsp)
   1c2d0:      	movb	%cl, 0x117(%rsp)
   1c2d7:      	mulq	0x48(%rdi)
   1c2db:      	movq	%rax, 0x80(%rsp)
   1c2e3:      	seto	%al
   1c2e6:      	testb	$0x1, %al
   1c2e8:      	jne	0x1c308 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x68>
   1c2ea:      	movq	0x68(%rsp), %rcx
   1c2ef:      	movq	0x80(%rsp), %rax
   1c2f7:      	addq	%rcx, %rax
   1c2fa:      	movq	%rax, 0x60(%rsp)
   1c2ff:      	setb	%al
   1c302:      	testb	$0x1, %al
   1c304:      	jne	0x1c36d <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0xcd>
   1c306:      	jmp	0x1c326 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x86>
   1c308:      	leaq	-0xb52f(%rip), %rdi     # 0x10de0 <str.2>
   1c30f:      	leaq	0x1d5f2(%rip), %rdx     # 0x39908 <zlgk82z0l71lvh9+0x39908>
   1c316:      	movq	0x1ebb3(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c31d:      	movl	$0x21, %esi
   1c322:      	callq	*%rax
   1c324:      	ud2
   1c326:      	movq	0x70(%rsp), %rax
   1c32b:      	movq	0x60(%rsp), %rcx
   1c330:      	movq	%rcx, 0x118(%rsp)
   1c338:      	movl	0x38(%rax), %eax
   1c33b:      	movq	%rax, 0x58(%rsp)
   1c340:      	testq	%rax, %rax
   1c343:      	je	0x1c44d <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x1ad>
   1c349:      	jmp	0x1c34b <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0xab>
   1c34b:      	movq	0x58(%rsp), %rax
   1c350:      	subq	$0x1, %rax
   1c354:      	je	0x1c474 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x1d4>
   1c35a:      	jmp	0x1c35c <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0xbc>
   1c35c:      	movq	0x58(%rsp), %rax
   1c361:      	subq	$0x2, %rax
   1c365:      	je	0x1c49b <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x1fb>
   1c36b:      	jmp	0x1c38b <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0xeb>
   1c36d:      	leaq	-0xd424(%rip), %rdi     # 0xef50 <str.0>
   1c374:      	leaq	0x1d58d(%rip), %rdx     # 0x39908 <zlgk82z0l71lvh9+0x39908>
   1c37b:      	movq	0x1eb4e(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c382:      	movl	$0x1c, %esi
   1c387:      	callq	*%rax
   1c389:      	ud2
   1c38b:      	movq	0x70(%rsp), %rax
   1c390:      	movq	0x38(%rax), %rcx
   1c394:      	movq	%rcx, 0x90(%rsp)
   1c39c:      	movl	$0x0, 0x98(%rsp)
   1c3a7:      	movq	0x98(%rsp), %rcx
   1c3af:      	movq	%rcx, 0x38(%rax)
   1c3b3:      	leaq	0x90(%rsp), %rcx
   1c3bb:      	movq	%rcx, 0x130(%rsp)
   1c3c3:      	movq	%rcx, 0x148(%rsp)
   1c3cb:      	movq	0x1ef76(%rip), %rax     # 0x3b348 <zlgk82z0l71lvh9+0x3b348>
   1c3d2:      	movq	%rax, 0x150(%rsp)
   1c3da:      	movq	%rcx, 0x138(%rsp)
   1c3e2:      	movq	%rax, 0x140(%rsp)
   1c3ea:      	movq	0x138(%rsp), %rcx
   1c3f2:      	movq	0x140(%rsp), %rax
   1c3fa:      	movq	%rcx, 0xd0(%rsp)
   1c402:      	movq	%rax, 0xd8(%rsp)
   1c40a:      	leaq	0x1d59f(%rip), %rsi     # 0x399b0 <zlgk82z0l71lvh9+0x399b0>
   1c411:      	leaq	0xa0(%rsp), %rdi
   1c419:      	movq	%rdi, 0x50(%rsp)
   1c41e:      	movl	$0x2, %edx
   1c423:      	leaq	0xd0(%rsp), %rcx
   1c42b:      	movl	$0x1, %r8d
   1c431:      	callq	0x1d520 <core::fmt::Arguments::new_v1::h986e818288f902b6>
   1c436:      	movq	0x50(%rsp), %rdi
   1c43b:      	leaq	0x1d58e(%rip), %rsi     # 0x399d0 <zlgk82z0l71lvh9+0x399d0>
   1c442:      	movq	0x1ea77(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1c449:      	callq	*%rax
   1c44b:      	ud2
   1c44d:      	movb	0x7f(%rsp), %cl
   1c451:      	movb	%cl, %al
   1c453:      	shrb	%al
   1c455:      	movb	%cl, 0x8b(%rsp)
   1c45c:      	movb	%cl, 0x8c(%rsp)
   1c463:      	movb	%al, 0x8d(%rsp)
   1c46a:      	movb	$0x0, 0x8e(%rsp)
   1c472:      	jmp	0x1c4a5 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x205>
   1c474:      	movb	0x7f(%rsp), %al
   1c478:      	movb	%al, %cl
   1c47a:      	shrb	%cl
   1c47c:      	movb	%cl, 0x8b(%rsp)
   1c483:      	movb	%al, 0x8c(%rsp)
   1c48a:      	movb	%al, 0x8d(%rsp)
   1c491:      	movb	$0x0, 0x8e(%rsp)
   1c499:      	jmp	0x1c4a5 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x205>
   1c49b:      	movb	0x7f(%rsp), %al
   1c49f:      	cmpb	$-0x38, %al
   1c4a1:      	ja	0x1c4db <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x23b>
   1c4a3:      	jmp	0x1c4d1 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x231>
   1c4a5:      	movq	0x60(%rsp), %rax
   1c4aa:      	movq	0x70(%rsp), %rcx
   1c4af:      	movq	0x40(%rcx), %rcx
   1c4b3:      	movq	%rcx, 0x40(%rsp)
   1c4b8:      	movq	%rcx, 0x120(%rsp)
   1c4c0:      	mulq	%rcx
   1c4c3:      	movq	%rax, 0x48(%rsp)
   1c4c8:      	seto	%al
   1c4cb:      	testb	$0x1, %al
   1c4cd:      	jne	0x1c548 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x2a8>
   1c4cf:      	jmp	0x1c50b <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x26b>
   1c4d1:      	movb	$0x0, 0x8f(%rsp)
   1c4d9:      	jmp	0x1c4e3 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x243>
   1c4db:      	movb	$0xf, 0x8f(%rsp)
   1c4e3:      	movb	0x8f(%rsp), %al
   1c4ea:      	movb	%al, 0x8b(%rsp)
   1c4f1:      	movb	$0x0, 0x8c(%rsp)
   1c4f9:      	movb	$0x0, 0x8d(%rsp)
   1c501:      	movb	$0x0, 0x8e(%rsp)
   1c509:      	jmp	0x1c4a5 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x205>
   1c50b:      	movq	0x40(%rsp), %rcx
   1c510:      	movq	0x48(%rsp), %rax
   1c515:      	movq	0x70(%rsp), %rdx
   1c51a:      	movq	%rax, 0x128(%rsp)
   1c522:      	movq	(%rdx), %rsi
   1c525:      	movq	%rsi, 0x28(%rsp)
   1c52a:      	movq	0x8(%rdx), %rdx
   1c52e:      	movq	%rdx, 0x30(%rsp)
   1c533:      	addq	%rcx, %rax
   1c536:      	movq	%rax, 0x38(%rsp)
   1c53b:      	setb	%al
   1c53e:      	testb	$0x1, %al
   1c540:      	jne	0x1c62a <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x38a>
   1c546:      	jmp	0x1c566 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x2c6>
   1c548:      	leaq	-0xb76f(%rip), %rdi     # 0x10de0 <str.2>
   1c54f:      	leaq	0x1d3ca(%rip), %rdx     # 0x39920 <zlgk82z0l71lvh9+0x39920>
   1c556:      	movq	0x1e973(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c55d:      	movl	$0x21, %esi
   1c562:      	callq	*%rax
   1c564:      	ud2
   1c566:      	movq	0x48(%rsp), %rcx
   1c56b:      	movq	0x30(%rsp), %rsi
   1c570:      	movq	0x28(%rsp), %rdi
   1c575:      	movq	0x38(%rsp), %rax
   1c57a:      	movq	%rcx, 0xe0(%rsp)
   1c582:      	movq	%rax, 0xe8(%rsp)
   1c58a:      	movq	0xe0(%rsp), %rdx
   1c592:      	movq	0xe8(%rsp), %rcx
   1c59a:      	leaq	0x1d3af(%rip), %r8      # 0x39950 <zlgk82z0l71lvh9+0x39950>
   1c5a1:      	movq	0x1eda8(%rip), %rax     # 0x3b350 <zlgk82z0l71lvh9+0x3b350>
   1c5a8:      	callq	*%rax
   1c5aa:      	movq	%rax, %rcx
   1c5ad:      	movq	0x40(%rsp), %rax
   1c5b2:      	movq	%rdx, 0x10(%rsp)
   1c5b7:      	movq	%rcx, 0x8(%rsp)
   1c5bc:      	movq	%rax, 0xf0(%rsp)
   1c5c4:      	movq	0xf0(%rsp), %rsi
   1c5cc:      	leaq	0x1d395(%rip), %rdx     # 0x39968 <zlgk82z0l71lvh9+0x39968>
   1c5d3:      	movq	0x1ed7e(%rip), %rax     # 0x3b358 <zlgk82z0l71lvh9+0x3b358>
   1c5da:      	leaq	0x8b(%rsp), %rdi
   1c5e2:      	callq	*%rax
   1c5e4:      	movq	0x8(%rsp), %rdi
   1c5e9:      	movq	0x10(%rsp), %rsi
   1c5ee:      	movq	%rax, 0x18(%rsp)
   1c5f3:      	movq	%rdx, %rcx
   1c5f6:      	movq	0x18(%rsp), %rdx
   1c5fb:      	leaq	0x1d37e(%rip), %r8      # 0x39980 <zlgk82z0l71lvh9+0x39980>
   1c602:      	movq	0x1ed57(%rip), %rax     # 0x3b360 <zlgk82z0l71lvh9+0x3b360>
   1c609:      	callq	*%rax
   1c60b:      	movq	0x70(%rsp), %rcx
   1c610:      	movq	0x48(%rsp), %rax
   1c615:      	movq	0x8(%rcx), %rcx
   1c619:      	movq	%rcx, 0x20(%rsp)
   1c61e:      	cmpq	%rcx, %rax
   1c621:      	setb	%al
   1c624:      	testb	$0x1, %al
   1c626:      	jne	0x1c648 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x3a8>
   1c628:      	jmp	0x1c666 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_pixel::h44d67b22eaaf40e3+0x3c6>
   1c62a:      	leaq	-0xd6e1(%rip), %rdi     # 0xef50 <str.0>
   1c631:      	leaq	0x1d300(%rip), %rdx     # 0x39938 <zlgk82z0l71lvh9+0x39938>
   1c638:      	movq	0x1e891(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1c63f:      	movl	$0x1c, %esi
   1c644:      	callq	*%rax
   1c646:      	ud2
   1c648:      	movq	0x70(%rsp), %rax
   1c64d:      	movq	0x48(%rsp), %rdi
   1c652:      	addq	(%rax), %rdi
   1c655:      	movq	0x1ec0c(%rip), %rax     # 0x3b268 <zlgk82z0l71lvh9+0x3b268>
   1c65c:      	callq	*%rax
   1c65e:      	addq	$0x158, %rsp            # imm = 0x158
   1c665:      	retq
   1c666:      	movq	0x20(%rsp), %rsi
   1c66b:      	movq	0x48(%rsp), %rdi
   1c670:      	leaq	0x1d321(%rip), %rdx     # 0x39998 <zlgk82z0l71lvh9+0x39998>
   1c677:      	movq	0x1e99a(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   1c67e:      	callq	*%rax
   1c680:      	ud2
   1c682:      	int3
   1c683:      	int3
   1c684:      	int3
   1c685:      	int3
   1c686:      	int3
   1c687:      	int3
   1c688:      	int3
   1c689:      	int3
   1c68a:      	int3
   1c68b:      	int3
   1c68c:      	int3
   1c68d:      	int3
   1c68e:      	int3
   1c68f:      	int3

000000000001c690 <<bootloader_x86_64_common::framebuffer::FrameBufferWriter as core::fmt::Write>::write_str::h1ef39ccd332258f1>:
   1c690:      	subq	$0x58, %rsp
   1c694:      	movq	%rdx, (%rsp)
   1c698:      	movq	%rsi, %rax
   1c69b:      	movq	(%rsp), %rsi
   1c69f:      	movq	%rax, 0x8(%rsp)
   1c6a4:      	movq	%rdi, %rax
   1c6a7:      	movq	0x8(%rsp), %rdi
   1c6ac:      	movq	%rax, 0x10(%rsp)
   1c6b1:      	movq	%rax, 0x38(%rsp)
   1c6b6:      	movq	%rdi, 0x40(%rsp)
   1c6bb:      	movq	%rsi, 0x48(%rsp)
   1c6c0:      	callq	0x1b4e0 <core::str::<impl str>::chars::hb5230c28c89a7b3c>
   1c6c5:      	movq	%rax, %rdi
   1c6c8:      	movq	%rdx, %rsi
   1c6cb:      	movq	0x1ec96(%rip), %rax     # 0x3b368 <zlgk82z0l71lvh9+0x3b368>
   1c6d2:      	callq	*%rax
   1c6d4:      	movq	%rax, 0x20(%rsp)
   1c6d9:      	movq	%rdx, 0x28(%rsp)
   1c6de:      	leaq	0x20(%rsp), %rdi
   1c6e3:      	callq	0x1dc00 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::next::h35721222d6e343de>
   1c6e8:      	movl	%eax, 0x34(%rsp)
   1c6ec:      	movl	$0x1, %eax
   1c6f1:      	xorl	%ecx, %ecx
   1c6f3:      	cmpl	$0x110000, 0x34(%rsp)   # imm = 0x110000
   1c6fb:      	cmoveq	%rcx, %rax
   1c6ff:      	cmpq	$0x0, %rax
   1c703:      	jne	0x1c718 <<bootloader_x86_64_common::framebuffer::FrameBufferWriter as core::fmt::Write>::write_str::h1ef39ccd332258f1+0x88>
   1c705:      	movb	$0x0, 0x1f(%rsp)
   1c70a:      	movb	0x1f(%rsp), %al
   1c70e:      	andb	$0x1, %al
   1c710:      	movzbl	%al, %eax
   1c713:      	addq	$0x58, %rsp
   1c717:      	retq
   1c718:      	movq	0x10(%rsp), %rdi
   1c71d:      	movl	0x34(%rsp), %esi
   1c721:      	movl	%esi, 0x54(%rsp)
   1c725:      	callq	0x1be40 <bootloader_x86_64_common::framebuffer::FrameBufferWriter::write_char::h07d2cd45b6cb0ef9>
   1c72a:      	jmp	0x1c6de <<bootloader_x86_64_common::framebuffer::FrameBufferWriter as core::fmt::Write>::write_str::h1ef39ccd332258f1+0x4e>
   1c72c:      	int3
   1c72d:      	int3
   1c72e:      	int3
   1c72f:      	int3

000000000001c730 <bootloader_x86_64_common::logger::LockedLogger::new::h0f2ff9de344dab7a>:
   1c730:      	subq	$0x228, %rsp            # imm = 0x228
   1c737:      	movq	%rcx, 0x8(%rsp)
   1c73c:      	movq	%rdx, 0x10(%rsp)
   1c741:      	movq	%rsi, 0x18(%rsp)
   1c746:      	movq	%rdi, 0x20(%rsp)
   1c74b:      	movb	%r9b, %cl
   1c74e:      	movb	%cl, 0x2f(%rsp)
   1c752:      	movb	%r8b, %al
   1c755:      	movq	%rdi, 0x30(%rsp)
   1c75a:      	movq	%rsi, 0x1e0(%rsp)
   1c762:      	movq	%rdx, 0x1e8(%rsp)
   1c76a:      	movb	%al, %dl
   1c76c:      	andb	$0x1, %dl
   1c76f:      	movb	%dl, 0x1f6(%rsp)
   1c776:      	andb	$0x1, %cl
   1c779:      	movb	%cl, 0x1f7(%rsp)
   1c780:      	testb	$0x1, %al
   1c782:      	jne	0x1c792 <bootloader_x86_64_common::logger::LockedLogger::new::h0f2ff9de344dab7a+0x62>
   1c784:      	movq	$0x0, 0x38(%rsp)
   1c78d:      	jmp	0x1c83c <bootloader_x86_64_common::logger::LockedLogger::new::h0f2ff9de344dab7a+0x10c>
   1c792:      	movq	0x10(%rsp), %rdx
   1c797:      	movq	0x18(%rsp), %rsi
   1c79c:      	movq	0x8(%rsp), %rcx
   1c7a1:      	movq	0x28(%rcx), %rax
   1c7a5:      	movq	%rax, 0x220(%rsp)
   1c7ad:      	movq	0x20(%rcx), %rax
   1c7b1:      	movq	%rax, 0x218(%rsp)
   1c7b9:      	movq	0x18(%rcx), %rax
   1c7bd:      	movq	%rax, 0x210(%rsp)
   1c7c5:      	movq	0x10(%rcx), %rax
   1c7c9:      	movq	%rax, 0x208(%rsp)
   1c7d1:      	movq	(%rcx), %rax
   1c7d4:      	movq	0x8(%rcx), %rcx
   1c7d8:      	movq	%rcx, 0x200(%rsp)
   1c7e0:      	movq	%rax, 0x1f8(%rsp)
   1c7e8:      	movq	0x1eb21(%rip), %rax     # 0x3b310 <zlgk82z0l71lvh9+0x3b310>
   1c7ef:      	leaq	0xf0(%rsp), %rdi
   1c7f7:      	leaq	0x1f8(%rsp), %rcx
   1c7ff:      	callq	*%rax
   1c801:      	movq	0x1eb78(%rip), %rax     # 0x3b380 <zlgk82z0l71lvh9+0x3b380>
   1c808:      	leaq	0x98(%rsp), %rdi
   1c810:      	leaq	0xf0(%rsp), %rsi
   1c818:      	callq	*%rax
   1c81a:      	leaq	0x38(%rsp), %rdi
   1c81f:      	addq	$0x8, %rdi
   1c823:      	movl	$0xb, %ecx
   1c828:      	leaq	0x98(%rsp), %rsi
   1c830:      	rep		movsq	(%rsi), %es:(%rdi)
   1c833:      	movq	$0x1, 0x38(%rsp)
   1c83c:      	movb	0x2f(%rsp), %al
   1c840:      	testb	$0x1, %al
   1c842:      	jne	0x1c852 <bootloader_x86_64_common::logger::LockedLogger::new::h0f2ff9de344dab7a+0x122>
   1c844:      	jmp	0x1c846 <bootloader_x86_64_common::logger::LockedLogger::new::h0f2ff9de344dab7a+0x116>
   1c846:      	movw	$0x0, 0x146(%rsp)
   1c850:      	jmp	0x1c8b4 <bootloader_x86_64_common::logger::LockedLogger::new::h0f2ff9de344dab7a+0x184>
   1c852:      	movq	0x1eb2f(%rip), %rax     # 0x3b388 <zlgk82z0l71lvh9+0x3b388>
   1c859:      	leaq	0x164(%rsp), %rdi
   1c861:      	callq	*%rax
   1c863:      	movq	0x1eb26(%rip), %rax     # 0x3b390 <zlgk82z0l71lvh9+0x3b390>
   1c86a:      	leaq	0x156(%rsp), %rdi
   1c872:      	leaq	0x164(%rsp), %rsi
   1c87a:      	callq	*%rax
   1c87c:      	movq	0x156(%rsp), %rax
   1c884:      	movq	%rax, 0x148(%rsp)
   1c88c:      	movl	0x15e(%rsp), %eax
   1c893:      	movl	%eax, 0x150(%rsp)
   1c89a:      	movw	0x162(%rsp), %ax
   1c8a2:      	movw	%ax, 0x154(%rsp)
   1c8aa:      	movw	$0x1, 0x146(%rsp)
   1c8b4:      	movq	0x30(%rsp), %rax
   1c8b9:      	movl	$0xc, %ecx
   1c8be:      	leaq	0x170(%rsp), %rdi
   1c8c6:      	leaq	0x38(%rsp), %rsi
   1c8cb:      	rep		movsq	(%rsi), %es:(%rdi)
   1c8ce:      	movq	0x20(%rsp), %rdi
   1c8d3:      	movq	0x146(%rsp), %rcx
   1c8db:      	movq	%rcx, 0x1d0(%rsp)
   1c8e3:      	movq	0x14e(%rsp), %rcx
   1c8eb:      	movq	%rcx, 0x1d8(%rsp)
   1c8f3:      	movl	$0xc, %ecx
   1c8f8:      	leaq	0x170(%rsp), %rsi
   1c900:      	rep		movsq	(%rsi), %es:(%rdi)
   1c903:      	movq	0x20(%rsp), %rcx
   1c908:      	movq	0x1d0(%rsp), %rdx
   1c910:      	movq	%rdx, 0x60(%rcx)
   1c914:      	movq	0x1d8(%rsp), %rdx
   1c91c:      	movq	%rdx, 0x68(%rcx)
   1c920:      	addq	$0x228, %rsp            # imm = 0x228
   1c927:      	retq
   1c928:      	int3
   1c929:      	int3
   1c92a:      	int3
   1c92b:      	int3
   1c92c:      	int3
   1c92d:      	int3
   1c92e:      	int3
   1c92f:      	int3

000000000001c930 <<bootloader_x86_64_common::logger::LockedLogger as log::Log>::enabled::h2541b2e630998b1c>:
   1c930:      	subq	$0x10, %rsp
   1c934:      	movq	%rdi, (%rsp)
   1c938:      	movq	%rsi, 0x8(%rsp)
   1c93d:      	movb	$0x1, %al
   1c93f:      	andb	$0x1, %al
   1c941:      	movzbl	%al, %eax
   1c944:      	addq	$0x10, %rsp
   1c948:      	retq
   1c949:      	int3
   1c94a:      	int3
   1c94b:      	int3
   1c94c:      	int3
   1c94d:      	int3
   1c94e:      	int3
   1c94f:      	int3

000000000001c950 <<bootloader_x86_64_common::logger::LockedLogger as log::Log>::log::h82069cca789b6ca0>:
   1c950:      	subq	$0x538, %rsp            # imm = 0x538
   1c957:      	movq	%rsi, 0x58(%rsp)
   1c95c:      	movq	%rdi, 0x60(%rsp)
   1c961:      	movq	%rdi, 0x398(%rsp)
   1c969:      	movq	%rsi, 0x3a0(%rsp)
   1c971:      	cmpq	$0x1, (%rdi)
   1c975:      	jne	0x1cd83 <<bootloader_x86_64_common::logger::LockedLogger as log::Log>::log::h82069cca789b6ca0+0x433>
   1c97b:      	movq	0x60(%rsp), %rdi
   1c980:      	addq	$0x8, %rdi
   1c984:      	movq	%rdi, 0x3a8(%rsp)
   1c98c:      	movq	0x1ea05(%rip), %rax     # 0x3b398 <zlgk82z0l71lvh9+0x3b398>
   1c993:      	callq	*%rax
   1c995:      	movq	%rax, 0x68(%rsp)
   1c99a:      	movq	0x1e9ff(%rip), %rax     # 0x3b3a0 <zlgk82z0l71lvh9+0x3b3a0>
   1c9a1:      	leaq	0x68(%rsp), %rdi
   1c9a6:      	callq	*%rax
   1c9a8:      	movq	0x58(%rsp), %rdi
   1c9ad:      	movq	%rax, 0x50(%rsp)
   1c9b2:      	callq	0x1b130 <log::Record::level::hf1012dcf357fdd88>
   1c9b7:      	movq	0x58(%rsp), %rdi
   1c9bc:      	movq	%rax, 0xc0(%rsp)
   1c9c4:      	leaq	0xc0(%rsp), %rcx
   1c9cc:      	movq	%rcx, 0x4b0(%rsp)
   1c9d4:      	movq	%rcx, 0x4c8(%rsp)
   1c9dc:      	movq	0x1e9c5(%rip), %rax     # 0x3b3a8 <zlgk82z0l71lvh9+0x3b3a8>
   1c9e3:      	movq	%rax, 0x4d0(%rsp)
   1c9eb:      	movq	%rcx, 0x4b8(%rsp)
   1c9f3:      	movq	%rax, 0x4c0(%rsp)
   1c9fb:      	movq	0x4b8(%rsp), %rax
   1ca03:      	movq	%rax, 0x38(%rsp)
   1ca08:      	movq	0x4c0(%rsp), %rax
   1ca10:      	movq	%rax, 0x40(%rsp)
   1ca15:      	callq	0x1b120 <log::Record::args::h786da30b47d7204f>
   1ca1a:      	movq	0x38(%rsp), %rsi
   1ca1f:      	movq	0x40(%rsp), %rdx
   1ca24:      	movq	%rax, 0xc8(%rsp)
   1ca2c:      	leaq	0xc8(%rsp), %rcx
   1ca34:      	movq	%rcx, 0x4a0(%rsp)
   1ca3c:      	movq	%rcx, 0x508(%rsp)
   1ca44:      	movq	0x1e965(%rip), %rax     # 0x3b3b0 <zlgk82z0l71lvh9+0x3b3b0>
   1ca4b:      	movq	%rax, 0x510(%rsp)
   1ca53:      	movq	%rcx, 0x4f8(%rsp)
   1ca5b:      	movq	%rax, 0x500(%rsp)
   1ca63:      	movq	0x4f8(%rsp), %rcx
   1ca6b:      	movq	0x500(%rsp), %rax
   1ca73:      	movq	%rsi, 0xa0(%rsp)
   1ca7b:      	movq	%rdx, 0xa8(%rsp)
   1ca83:      	movq	%rcx, 0xb0(%rsp)
   1ca8b:      	movq	%rax, 0xb8(%rsp)
   1ca93:      	movb	$0x3, 0x17f(%rsp)
   1ca9b:      	movq	$0x2, 0x180(%rsp)
   1caa7:      	movq	$0x5, 0x198(%rsp)
   1cab3:      	movq	$0x0, 0x190(%rsp)
   1cabf:      	movb	0x17f(%rsp), %dil
   1cac7:      	movq	0x180(%rsp), %rsi
   1cacf:      	movq	0x188(%rsp), %rdx
   1cad7:      	movq	0x190(%rsp), %rcx
   1cadf:      	movq	0x198(%rsp), %rax
   1cae7:      	movq	$0x0, 0x460(%rsp)
   1caf3:      	movl	$0x20, 0x46c(%rsp)
   1cafe:      	movb	%dil, 0x473(%rsp)
   1cb06:      	movl	$0x0, 0x474(%rsp)
   1cb11:      	movq	%rsi, 0x478(%rsp)
   1cb19:      	movq	%rdx, 0x480(%rsp)
   1cb21:      	movq	%rcx, 0x488(%rsp)
   1cb29:      	movq	%rax, 0x490(%rsp)
   1cb31:      	movq	$0x0, 0x160(%rsp)
   1cb3d:      	movl	$0x20, 0x168(%rsp)
   1cb48:      	movb	%dil, 0x170(%rsp)
   1cb50:      	movl	$0x0, 0x16c(%rsp)
   1cb5b:      	movq	%rsi, 0x140(%rsp)
   1cb63:      	movq	%rdx, 0x148(%rsp)
   1cb6b:      	movq	%rcx, 0x150(%rsp)
   1cb73:      	movq	%rax, 0x158(%rsp)
   1cb7b:      	movb	$0x3, 0x1df(%rsp)
   1cb83:      	movq	$0x2, 0x1e0(%rsp)
   1cb8f:      	movq	$0x2, 0x1f0(%rsp)
   1cb9b:      	movb	0x1df(%rsp), %dil
   1cba3:      	movq	0x1e0(%rsp), %rsi
   1cbab:      	movq	0x1e8(%rsp), %rdx
   1cbb3:      	movq	0x1f0(%rsp), %rcx
   1cbbb:      	movq	0x1f8(%rsp), %rax
   1cbc3:      	movq	$0x1, 0x428(%rsp)
   1cbcf:      	movl	$0x20, 0x434(%rsp)
   1cbda:      	movb	%dil, 0x43b(%rsp)
   1cbe2:      	movl	$0x0, 0x43c(%rsp)
   1cbed:      	movq	%rsi, 0x440(%rsp)
   1cbf5:      	movq	%rdx, 0x448(%rsp)
   1cbfd:      	movq	%rcx, 0x450(%rsp)
   1cc05:      	movq	%rax, 0x458(%rsp)
   1cc0d:      	movq	$0x1, 0x1c0(%rsp)
   1cc19:      	movl	$0x20, 0x1c8(%rsp)
   1cc24:      	movb	%dil, 0x1d0(%rsp)
   1cc2c:      	movl	$0x0, 0x1cc(%rsp)
   1cc37:      	movq	%rsi, 0x1a0(%rsp)
   1cc3f:      	movq	%rdx, 0x1a8(%rsp)
   1cc47:      	movq	%rcx, 0x1b0(%rsp)
   1cc4f:      	movq	%rax, 0x1b8(%rsp)
   1cc57:      	leaq	0xd0(%rsp), %rax
   1cc5f:      	movq	0x170(%rsp), %rcx
   1cc67:      	movq	%rcx, 0x30(%rax)
   1cc6b:      	movq	0x168(%rsp), %rcx
   1cc73:      	movq	%rcx, 0x28(%rax)
   1cc77:      	movq	0x160(%rsp), %rcx
   1cc7f:      	movq	%rcx, 0x20(%rax)
   1cc83:      	movq	0x158(%rsp), %rcx
   1cc8b:      	movq	%rcx, 0x18(%rax)
   1cc8f:      	movq	0x150(%rsp), %rcx
   1cc97:      	movq	%rcx, 0x10(%rax)
   1cc9b:      	movq	0x140(%rsp), %rcx
   1cca3:      	movq	0x148(%rsp), %rdx
   1ccab:      	movq	%rdx, 0x8(%rax)
   1ccaf:      	movq	%rcx, (%rax)
   1ccb2:      	leaq	0xd0(%rsp), %rax
   1ccba:      	addq	$0x38, %rax
   1ccbe:      	movq	%rax, 0x48(%rsp)
   1ccc3:      	movq	0x1d0(%rsp), %rcx
   1cccb:      	movq	%rcx, 0x30(%rax)
   1cccf:      	movq	0x1c8(%rsp), %rcx
   1ccd7:      	movq	%rcx, 0x28(%rax)
   1ccdb:      	movq	0x1c0(%rsp), %rcx
   1cce3:      	movq	%rcx, 0x20(%rax)
   1cce7:      	movq	0x1b8(%rsp), %rcx
   1ccef:      	movq	%rcx, 0x18(%rax)
   1ccf3:      	movq	0x1b0(%rsp), %rcx
   1ccfb:      	movq	%rcx, 0x10(%rax)
   1ccff:      	movq	0x1a0(%rsp), %rcx
   1cd07:      	movq	0x1a8(%rsp), %rdx
   1cd0f:      	movq	%rdx, 0x8(%rax)
   1cd13:      	movq	%rcx, (%rax)
   1cd16:      	movq	%rsp, %rax
   1cd19:      	movq	$0x2, (%rax)
   1cd20:      	leaq	0x1ccc1(%rip), %rsi     # 0x399e8 <zlgk82z0l71lvh9+0x399e8>
   1cd27:      	leaq	0x70(%rsp), %rdi
   1cd2c:      	movl	$0x3, %edx
   1cd31:      	leaq	0xa0(%rsp), %rcx
   1cd39:      	movl	$0x2, %r8d
   1cd3f:      	leaq	0xd0(%rsp), %r9
   1cd47:      	callq	0x1d4c0 <core::fmt::Arguments::new_v1_formatted::h0794d2b76d438f11>
   1cd4c:      	movq	0x50(%rsp), %rdi
   1cd51:      	movq	0x1e4f0(%rip), %rax     # 0x3b248 <zlgk82z0l71lvh9+0x3b248>
   1cd58:      	leaq	0x70(%rsp), %rsi
   1cd5d:      	callq	*%rax
   1cd5f:      	movzbl	%al, %edi
   1cd62:      	andl	$0x1, %edi
   1cd65:      	leaq	0x1ccac(%rip), %rsi     # 0x39a18 <zlgk82z0l71lvh9+0x39a18>
   1cd6c:      	movq	0x1e645(%rip), %rax     # 0x3b3b8 <zlgk82z0l71lvh9+0x3b3b8>
   1cd73:      	callq	*%rax
   1cd75:      	movq	0x1e4fc(%rip), %rax     # 0x3b278 <zlgk82z0l71lvh9+0x3b278>
   1cd7c:      	leaq	0x68(%rsp), %rdi
   1cd81:      	callq	*%rax
   1cd83:      	movq	0x60(%rsp), %rax
   1cd88:      	movq	%rax, %rcx
   1cd8b:      	addq	$0x60, %rcx
   1cd8f:      	movq	%rcx, 0x30(%rsp)
   1cd94:      	movzwl	0x60(%rax), %eax
   1cd98:      	cmpq	$0x1, %rax
   1cd9c:      	jne	0x1d1b9 <<bootloader_x86_64_common::logger::LockedLogger as log::Log>::log::h82069cca789b6ca0+0x869>
   1cda2:      	movq	0x30(%rsp), %rdi
   1cda7:      	addq	$0x2, %rdi
   1cdab:      	movq	%rdi, 0x3b0(%rsp)
   1cdb3:      	movq	0x1e606(%rip), %rax     # 0x3b3c0 <zlgk82z0l71lvh9+0x3b3c0>
   1cdba:      	callq	*%rax
   1cdbc:      	movq	%rax, 0x200(%rsp)
   1cdc4:      	movq	0x1e5fd(%rip), %rax     # 0x3b3c8 <zlgk82z0l71lvh9+0x3b3c8>
   1cdcb:      	leaq	0x200(%rsp), %rdi
   1cdd3:      	callq	*%rax
   1cdd5:      	movq	0x58(%rsp), %rdi
   1cdda:      	movq	%rax, 0x28(%rsp)
   1cddf:      	callq	0x1b130 <log::Record::level::hf1012dcf357fdd88>
   1cde4:      	movq	0x58(%rsp), %rdi
   1cde9:      	movq	%rax, 0x258(%rsp)
   1cdf1:      	leaq	0x258(%rsp), %rcx
   1cdf9:      	movq	%rcx, 0x4a8(%rsp)
   1ce01:      	movq	%rcx, 0x4e8(%rsp)
   1ce09:      	movq	0x1e598(%rip), %rax     # 0x3b3a8 <zlgk82z0l71lvh9+0x3b3a8>
   1ce10:      	movq	%rax, 0x4f0(%rsp)
   1ce18:      	movq	%rcx, 0x4d8(%rsp)
   1ce20:      	movq	%rax, 0x4e0(%rsp)
   1ce28:      	movq	0x4d8(%rsp), %rax
   1ce30:      	movq	%rax, 0x10(%rsp)
   1ce35:      	movq	0x4e0(%rsp), %rax
   1ce3d:      	movq	%rax, 0x18(%rsp)
   1ce42:      	callq	0x1b120 <log::Record::args::h786da30b47d7204f>
   1ce47:      	movq	0x10(%rsp), %rsi
   1ce4c:      	movq	0x18(%rsp), %rdx
   1ce51:      	movq	%rax, 0x260(%rsp)
   1ce59:      	leaq	0x260(%rsp), %rcx
   1ce61:      	movq	%rcx, 0x498(%rsp)
   1ce69:      	movq	%rcx, 0x528(%rsp)
   1ce71:      	movq	0x1e538(%rip), %rax     # 0x3b3b0 <zlgk82z0l71lvh9+0x3b3b0>
   1ce78:      	movq	%rax, 0x530(%rsp)
   1ce80:      	movq	%rcx, 0x518(%rsp)
   1ce88:      	movq	%rax, 0x520(%rsp)
   1ce90:      	movq	0x518(%rsp), %rcx
   1ce98:      	movq	0x520(%rsp), %rax
   1cea0:      	movq	%rsi, 0x238(%rsp)
   1cea8:      	movq	%rdx, 0x240(%rsp)
   1ceb0:      	movq	%rcx, 0x248(%rsp)
   1ceb8:      	movq	%rax, 0x250(%rsp)
   1cec0:      	movb	$0x3, 0x317(%rsp)
   1cec8:      	movq	$0x2, 0x318(%rsp)
   1ced4:      	movq	$0x5, 0x330(%rsp)
   1cee0:      	movq	$0x0, 0x328(%rsp)
   1ceec:      	movb	0x317(%rsp), %dil
   1cef4:      	movq	0x318(%rsp), %rsi
   1cefc:      	movq	0x320(%rsp), %rdx
   1cf04:      	movq	0x328(%rsp), %rcx
   1cf0c:      	movq	0x330(%rsp), %rax
   1cf14:      	movq	$0x0, 0x3f0(%rsp)
   1cf20:      	movl	$0x20, 0x3fc(%rsp)
   1cf2b:      	movb	%dil, 0x403(%rsp)
   1cf33:      	movl	$0x0, 0x404(%rsp)
   1cf3e:      	movq	%rsi, 0x408(%rsp)
   1cf46:      	movq	%rdx, 0x410(%rsp)
   1cf4e:      	movq	%rcx, 0x418(%rsp)
   1cf56:      	movq	%rax, 0x420(%rsp)
   1cf5e:      	movq	$0x0, 0x2f8(%rsp)
   1cf6a:      	movl	$0x20, 0x300(%rsp)
   1cf75:      	movb	%dil, 0x308(%rsp)
   1cf7d:      	movl	$0x0, 0x304(%rsp)
   1cf88:      	movq	%rsi, 0x2d8(%rsp)
   1cf90:      	movq	%rdx, 0x2e0(%rsp)
   1cf98:      	movq	%rcx, 0x2e8(%rsp)
   1cfa0:      	movq	%rax, 0x2f0(%rsp)
   1cfa8:      	movb	$0x3, 0x377(%rsp)
   1cfb0:      	movq	$0x2, 0x378(%rsp)
   1cfbc:      	movq	$0x2, 0x388(%rsp)
   1cfc8:      	movb	0x377(%rsp), %dil
   1cfd0:      	movq	0x378(%rsp), %rsi
   1cfd8:      	movq	0x380(%rsp), %rdx
   1cfe0:      	movq	0x388(%rsp), %rcx
   1cfe8:      	movq	0x390(%rsp), %rax
   1cff0:      	movq	$0x1, 0x3b8(%rsp)
   1cffc:      	movl	$0x20, 0x3c4(%rsp)
   1d007:      	movb	%dil, 0x3cb(%rsp)
   1d00f:      	movl	$0x0, 0x3cc(%rsp)
   1d01a:      	movq	%rsi, 0x3d0(%rsp)
   1d022:      	movq	%rdx, 0x3d8(%rsp)
   1d02a:      	movq	%rcx, 0x3e0(%rsp)
   1d032:      	movq	%rax, 0x3e8(%rsp)
   1d03a:      	movq	$0x1, 0x358(%rsp)
   1d046:      	movl	$0x20, 0x360(%rsp)
   1d051:      	movb	%dil, 0x368(%rsp)
   1d059:      	movl	$0x0, 0x364(%rsp)
   1d064:      	movq	%rsi, 0x338(%rsp)
   1d06c:      	movq	%rdx, 0x340(%rsp)
   1d074:      	movq	%rcx, 0x348(%rsp)
   1d07c:      	movq	%rax, 0x350(%rsp)
   1d084:      	leaq	0x268(%rsp), %rax
   1d08c:      	movq	0x308(%rsp), %rcx
   1d094:      	movq	%rcx, 0x30(%rax)
   1d098:      	movq	0x300(%rsp), %rcx
   1d0a0:      	movq	%rcx, 0x28(%rax)
   1d0a4:      	movq	0x2f8(%rsp), %rcx
   1d0ac:      	movq	%rcx, 0x20(%rax)
   1d0b0:      	movq	0x2f0(%rsp), %rcx
   1d0b8:      	movq	%rcx, 0x18(%rax)
   1d0bc:      	movq	0x2e8(%rsp), %rcx
   1d0c4:      	movq	%rcx, 0x10(%rax)
   1d0c8:      	movq	0x2d8(%rsp), %rcx
   1d0d0:      	movq	0x2e0(%rsp), %rdx
   1d0d8:      	movq	%rdx, 0x8(%rax)
   1d0dc:      	movq	%rcx, (%rax)
   1d0df:      	leaq	0x268(%rsp), %rax
   1d0e7:      	addq	$0x38, %rax
   1d0eb:      	movq	%rax, 0x20(%rsp)
   1d0f0:      	movq	0x368(%rsp), %rcx
   1d0f8:      	movq	%rcx, 0x30(%rax)
   1d0fc:      	movq	0x360(%rsp), %rcx
   1d104:      	movq	%rcx, 0x28(%rax)
   1d108:      	movq	0x358(%rsp), %rcx
   1d110:      	movq	%rcx, 0x20(%rax)
   1d114:      	movq	0x350(%rsp), %rcx
   1d11c:      	movq	%rcx, 0x18(%rax)
   1d120:      	movq	0x348(%rsp), %rcx
   1d128:      	movq	%rcx, 0x10(%rax)
   1d12c:      	movq	0x338(%rsp), %rcx
   1d134:      	movq	0x340(%rsp), %rdx
   1d13c:      	movq	%rdx, 0x8(%rax)
   1d140:      	movq	%rcx, (%rax)
   1d143:      	movq	%rsp, %rax
   1d146:      	movq	$0x2, (%rax)
   1d14d:      	leaq	0x1c894(%rip), %rsi     # 0x399e8 <zlgk82z0l71lvh9+0x399e8>
   1d154:      	leaq	0x208(%rsp), %rdi
   1d15c:      	movl	$0x3, %edx
   1d161:      	leaq	0x238(%rsp), %rcx
   1d169:      	movl	$0x2, %r8d
   1d16f:      	leaq	0x268(%rsp), %r9
   1d177:      	callq	0x1d4c0 <core::fmt::Arguments::new_v1_formatted::h0794d2b76d438f11>
   1d17c:      	movq	0x28(%rsp), %rdi
   1d181:      	movq	0x1e248(%rip), %rax     # 0x3b3d0 <zlgk82z0l71lvh9+0x3b3d0>
   1d188:      	leaq	0x208(%rsp), %rsi
   1d190:      	callq	*%rax
   1d192:      	movzbl	%al, %edi
   1d195:      	andl	$0x1, %edi
   1d198:      	leaq	0x1c891(%rip), %rsi     # 0x39a30 <zlgk82z0l71lvh9+0x39a30>
   1d19f:      	movq	0x1e212(%rip), %rax     # 0x3b3b8 <zlgk82z0l71lvh9+0x3b3b8>
   1d1a6:      	callq	*%rax
   1d1a8:      	movq	0x1e0a9(%rip), %rax     # 0x3b258 <zlgk82z0l71lvh9+0x3b258>
   1d1af:      	leaq	0x200(%rsp), %rdi
   1d1b7:      	callq	*%rax
   1d1b9:      	addq	$0x538, %rsp            # imm = 0x538
   1d1c0:      	retq
   1d1c1:      	int3
   1d1c2:      	int3
   1d1c3:      	int3
   1d1c4:      	int3
   1d1c5:      	int3
   1d1c6:      	int3
   1d1c7:      	int3
   1d1c8:      	int3
   1d1c9:      	int3
   1d1ca:      	int3
   1d1cb:      	int3
   1d1cc:      	int3
   1d1cd:      	int3
   1d1ce:      	int3
   1d1cf:      	int3

000000000001d1d0 <<bootloader_x86_64_common::logger::LockedLogger as log::Log>::flush::hdce88f0087b9bdb9>:
   1d1d0:      	pushq	%rax
   1d1d1:      	movq	%rdi, (%rsp)
   1d1d5:      	popq	%rax
   1d1d6:      	retq
   1d1d7:      	int3
   1d1d8:      	int3
   1d1d9:      	int3
   1d1da:      	int3
   1d1db:      	int3
   1d1dc:      	int3
   1d1dd:      	int3
   1d1de:      	int3
   1d1df:      	int3

000000000001d1e0 <noto_sans_mono_bitmap::get_raster::h61d83a1c53f22331>:
   1d1e0:      	subq	$0x58, %rsp
   1d1e4:      	movl	%esi, 0xc(%rsp)
   1d1e8:      	movq	%rdi, %rax
   1d1eb:      	movl	0xc(%rsp), %edi
   1d1ef:      	movq	%rax, 0x10(%rsp)
   1d1f4:      	movq	%rax, 0x18(%rsp)
   1d1f9:      	movq	%rdx, 0x20(%rsp)
   1d1fe:      	movq	%rcx, 0x28(%rsp)
   1d203:      	movl	%edi, 0x44(%rsp)
   1d207:      	callq	0x1a1a0 <noto_sans_mono_bitmap::regular::size_16::get_char::hc98b9dd13d55da8b>
   1d20c:      	movq	0x10(%rsp), %rdi
   1d211:      	movq	%rax, %rsi
   1d214:      	movq	%rsi, 0x48(%rsp)
   1d219:      	movq	%rdx, 0x50(%rsp)
   1d21e:      	leaq	0x28(%rsp), %rax
   1d223:      	movq	%rax, 0x30(%rsp)
   1d228:      	leaq	0x20(%rsp), %rax
   1d22d:      	movq	%rax, 0x38(%rsp)
   1d232:      	movq	0x30(%rsp), %rcx
   1d237:      	movq	0x38(%rsp), %r8
   1d23c:      	movq	0x1e1ad(%rip), %rax     # 0x3b3f0 <zlgk82z0l71lvh9+0x3b3f0>
   1d243:      	callq	*%rax
   1d245:      	movq	0x18(%rsp), %rax
   1d24a:      	addq	$0x58, %rsp
   1d24e:      	retq
   1d24f:      	int3

000000000001d250 <noto_sans_mono_bitmap::get_raster::{{closure}}::h0ac70fc1dfd0bbd6>:
   1d250:      	subq	$0x48, %rsp
   1d254:      	movq	%r8, 0x8(%rsp)
   1d259:      	movq	%rcx, (%rsp)
   1d25d:      	movq	%rdi, 0x18(%rsp)
   1d262:      	movq	%rdi, 0x20(%rsp)
   1d267:      	movq	%rsi, 0x28(%rsp)
   1d26c:      	movq	%rdx, 0x30(%rsp)
   1d271:      	movq	%rcx, 0x38(%rsp)
   1d276:      	movq	%r8, 0x40(%rsp)
   1d27b:      	movq	0x28(%rsp), %rax
   1d280:      	movq	(%rax), %rdi
   1d283:      	callq	0x1d2e0 <noto_sans_mono_bitmap::RasterHeight::val::h5760c135ae8dc693>
   1d288:      	movq	%rax, 0x10(%rsp)
   1d28d:      	movq	0x30(%rsp), %rax
   1d292:      	movq	(%rax), %rdi
   1d295:      	movq	0x28(%rsp), %rax
   1d29a:      	movq	(%rax), %rsi
   1d29d:      	callq	0x1d310 <noto_sans_mono_bitmap::get_raster_width::h00f2f2904d7d55b0>
   1d2a2:      	movq	(%rsp), %rsi
   1d2a6:      	movq	0x8(%rsp), %r8
   1d2ab:      	movq	0x10(%rsp), %rdx
   1d2b0:      	movq	0x18(%rsp), %rdi
   1d2b5:      	movq	%rax, %rcx
   1d2b8:      	movq	0x20(%rsp), %rax
   1d2bd:      	movq	%rsi, (%rdi)
   1d2c0:      	movq	%r8, 0x8(%rdi)
   1d2c4:      	movq	%rdx, 0x10(%rdi)
   1d2c8:      	movq	%rcx, 0x18(%rdi)
   1d2cc:      	addq	$0x48, %rsp
   1d2d0:      	retq
   1d2d1:      	int3
   1d2d2:      	int3
   1d2d3:      	int3
   1d2d4:      	int3
   1d2d5:      	int3
   1d2d6:      	int3
   1d2d7:      	int3
   1d2d8:      	int3
   1d2d9:      	int3
   1d2da:      	int3
   1d2db:      	int3
   1d2dc:      	int3
   1d2dd:      	int3
   1d2de:      	int3
   1d2df:      	int3

000000000001d2e0 <noto_sans_mono_bitmap::RasterHeight::val::h5760c135ae8dc693>:
   1d2e0:      	pushq	%rax
   1d2e1:      	movq	%rdi, (%rsp)
   1d2e5:      	movq	(%rsp), %rax
   1d2e9:      	popq	%rcx
   1d2ea:      	retq
   1d2eb:      	int3
   1d2ec:      	int3
   1d2ed:      	int3
   1d2ee:      	int3
   1d2ef:      	int3

000000000001d2f0 <noto_sans_mono_bitmap::RasterizedChar::width::hd95d308eeaad51e9>:
   1d2f0:      	pushq	%rax
   1d2f1:      	movq	%rdi, (%rsp)
   1d2f5:      	movq	0x18(%rdi), %rax
   1d2f9:      	popq	%rcx
   1d2fa:      	retq
   1d2fb:      	int3
   1d2fc:      	int3
   1d2fd:      	int3
   1d2fe:      	int3
   1d2ff:      	int3

000000000001d300 <noto_sans_mono_bitmap::RasterizedChar::raster::h3866ae7bc1340bd4>:
   1d300:      	pushq	%rax
   1d301:      	movq	%rdi, (%rsp)
   1d305:      	movq	(%rdi), %rax
   1d308:      	movq	0x8(%rdi), %rdx
   1d30c:      	popq	%rcx
   1d30d:      	retq
   1d30e:      	int3
   1d30f:      	int3

000000000001d310 <noto_sans_mono_bitmap::get_raster_width::h00f2f2904d7d55b0>:
   1d310:      	subq	$0x10, %rsp
   1d314:      	movq	%rdi, (%rsp)
   1d318:      	movq	%rsi, 0x8(%rsp)
   1d31d:      	movl	$0x9, %eax
   1d322:      	addq	$0x10, %rsp
   1d326:      	retq
   1d327:      	int3
   1d328:      	int3
   1d329:      	int3
   1d32a:      	int3
   1d32b:      	int3
   1d32c:      	int3
   1d32d:      	int3
   1d32e:      	int3
   1d32f:      	int3

000000000001d330 <<&T as core::fmt::Display>::fmt::h1f99a216f5eb9282>:
   1d330:      	subq	$0x18, %rsp
   1d334:      	movq	%rdi, 0x8(%rsp)
   1d339:      	movq	%rsi, 0x10(%rsp)
   1d33e:      	movq	(%rdi), %rdi
   1d341:      	movq	0x1e0b8(%rip), %rax     # 0x3b400 <zlgk82z0l71lvh9+0x3b400>
   1d348:      	callq	*%rax
   1d34a:      	andb	$0x1, %al
   1d34c:      	movzbl	%al, %eax
   1d34f:      	addq	$0x18, %rsp
   1d353:      	retq
   1d354:      	int3
   1d355:      	int3
   1d356:      	int3
   1d357:      	int3
   1d358:      	int3
   1d359:      	int3
   1d35a:      	int3
   1d35b:      	int3
   1d35c:      	int3
   1d35d:      	int3
   1d35e:      	int3
   1d35f:      	int3

000000000001d360 <core::intrinsics::is_aligned_and_not_null::h9c6a93575b61639d>:
   1d360:      	subq	$0x18, %rsp
   1d364:      	movq	%rdi, (%rsp)
   1d368:      	movq	%rdi, 0x10(%rsp)
   1d36d:      	movq	0x1df2c(%rip), %rax     # 0x3b2a0 <zlgk82z0l71lvh9+0x3b2a0>
   1d374:      	callq	*%rax
   1d376:      	testb	$0x1, %al
   1d378:      	jne	0x1d38f <core::intrinsics::is_aligned_and_not_null::h9c6a93575b61639d+0x2f>
   1d37a:      	movq	(%rsp), %rdi
   1d37e:      	movq	0x1df0b(%rip), %rax     # 0x3b290 <zlgk82z0l71lvh9+0x3b290>
   1d385:      	callq	*%rax
   1d387:      	andb	$0x1, %al
   1d389:      	movb	%al, 0xf(%rsp)
   1d38d:      	jmp	0x1d394 <core::intrinsics::is_aligned_and_not_null::h9c6a93575b61639d+0x34>
   1d38f:      	movb	$0x0, 0xf(%rsp)
   1d394:      	movb	0xf(%rsp), %al
   1d398:      	andb	$0x1, %al
   1d39a:      	movzbl	%al, %eax
   1d39d:      	addq	$0x18, %rsp
   1d3a1:      	retq
   1d3a2:      	int3
   1d3a3:      	int3
   1d3a4:      	int3
   1d3a5:      	int3
   1d3a6:      	int3
   1d3a7:      	int3
   1d3a8:      	int3
   1d3a9:      	int3
   1d3aa:      	int3
   1d3ab:      	int3
   1d3ac:      	int3
   1d3ad:      	int3
   1d3ae:      	int3
   1d3af:      	int3

000000000001d3b0 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::hdac2cef6eef2be84>:
   1d3b0:      	subq	$0x28, %rsp
   1d3b4:      	movq	%rsi, (%rsp)
   1d3b8:      	movq	%rdi, 0x8(%rsp)
   1d3bd:      	movq	%rdi, 0x18(%rsp)
   1d3c2:      	movq	%rsi, 0x20(%rsp)
   1d3c7:      	movq	(%rdi), %rax
   1d3ca:      	cmpq	(%rsi), %rax
   1d3cd:      	jb	0x1d3e2 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::hdac2cef6eef2be84+0x32>
   1d3cf:      	movq	(%rsp), %rcx
   1d3d3:      	movq	0x8(%rsp), %rax
   1d3d8:      	movq	(%rax), %rax
   1d3db:      	cmpq	(%rcx), %rax
   1d3de:      	je	0x1d3f0 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::hdac2cef6eef2be84+0x40>
   1d3e0:      	jmp	0x1d3e9 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::hdac2cef6eef2be84+0x39>
   1d3e2:      	movb	$-0x1, 0x17(%rsp)
   1d3e7:      	jmp	0x1d3f5 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::hdac2cef6eef2be84+0x45>
   1d3e9:      	movb	$0x1, 0x17(%rsp)
   1d3ee:      	jmp	0x1d3f5 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::hdac2cef6eef2be84+0x45>
   1d3f0:      	movb	$0x0, 0x17(%rsp)
   1d3f5:      	movb	0x17(%rsp), %al
   1d3f9:      	addq	$0x28, %rsp
   1d3fd:      	retq
   1d3fe:      	int3
   1d3ff:      	int3

000000000001d400 <core::fmt::Write::write_char::hf30b2218d4b38b54>:
   1d400:      	subq	$0x28, %rsp
   1d404:      	movl	%esi, 0x4(%rsp)
   1d408:      	movq	%rdi, %rax
   1d40b:      	movl	0x4(%rsp), %edi
   1d40f:      	movq	%rax, 0x8(%rsp)
   1d414:      	movq	%rax, 0x18(%rsp)
   1d419:      	movl	%edi, 0x24(%rsp)
   1d41d:      	leaq	0x14(%rsp), %rax
   1d422:      	xorl	%ecx, %ecx
   1d424:      	movl	$0x0, (%rax)
   1d42a:      	leaq	0x14(%rsp), %rsi
   1d42f:      	movl	$0x4, %edx
   1d434:      	callq	0x1b8b0 <core::char::methods::<impl char>::encode_utf8::hf507bfaed52b70d0>
   1d439:      	movq	0x8(%rsp), %rdi
   1d43e:      	movq	%rax, %rsi
   1d441:      	movq	0x1dfc8(%rip), %rax     # 0x3b410 <zlgk82z0l71lvh9+0x3b410>
   1d448:      	callq	*%rax
   1d44a:      	andb	$0x1, %al
   1d44c:      	movzbl	%al, %eax
   1d44f:      	addq	$0x28, %rsp
   1d453:      	retq
   1d454:      	int3
   1d455:      	int3
   1d456:      	int3
   1d457:      	int3
   1d458:      	int3
   1d459:      	int3
   1d45a:      	int3
   1d45b:      	int3
   1d45c:      	int3
   1d45d:      	int3
   1d45e:      	int3
   1d45f:      	int3

000000000001d460 <core::fmt::Write::write_fmt::h5d8c6d9698a01f6e>:
   1d460:      	subq	$0x38, %rsp
   1d464:      	movq	%rdi, (%rsp)
   1d468:      	movq	0x28(%rsi), %rax
   1d46c:      	movq	%rax, 0x30(%rsp)
   1d471:      	movq	0x20(%rsi), %rax
   1d475:      	movq	%rax, 0x28(%rsp)
   1d47a:      	movq	0x18(%rsi), %rax
   1d47e:      	movq	%rax, 0x20(%rsp)
   1d483:      	movq	0x10(%rsi), %rax
   1d487:      	movq	%rax, 0x18(%rsp)
   1d48c:      	movq	(%rsi), %rax
   1d48f:      	movq	0x8(%rsi), %rcx
   1d493:      	movq	%rcx, 0x10(%rsp)
   1d498:      	movq	%rax, 0x8(%rsp)
   1d49d:      	leaq	0x1c5a4(%rip), %rsi     # 0x39a48 <zlgk82z0l71lvh9+0x39a48>
   1d4a4:      	movq	0x1dda5(%rip), %rax     # 0x3b250 <zlgk82z0l71lvh9+0x3b250>
   1d4ab:      	movq	%rsp, %rdi
   1d4ae:      	leaq	0x8(%rsp), %rdx
   1d4b3:      	callq	*%rax
   1d4b5:      	andb	$0x1, %al
   1d4b7:      	movzbl	%al, %eax
   1d4ba:      	addq	$0x38, %rsp
   1d4be:      	retq
   1d4bf:      	int3

000000000001d4c0 <core::fmt::Arguments::new_v1_formatted::h0794d2b76d438f11>:
   1d4c0:      	subq	$0x50, %rsp
   1d4c4:      	movq	%r9, %r10
   1d4c7:      	movq	%rdi, %rax
   1d4ca:      	movq	0x58(%rsp), %r9
   1d4cf:      	movq	%rsi, 0x18(%rsp)
   1d4d4:      	movq	%rdx, 0x20(%rsp)
   1d4d9:      	movq	%rcx, 0x28(%rsp)
   1d4de:      	movq	%r8, 0x30(%rsp)
   1d4e3:      	movq	%r10, 0x38(%rsp)
   1d4e8:      	movq	%r9, 0x40(%rsp)
   1d4ed:      	movq	%r10, 0x8(%rsp)
   1d4f2:      	movq	%r9, 0x10(%rsp)
   1d4f7:      	movq	%rsi, (%rdi)
   1d4fa:      	movq	%rdx, 0x8(%rdi)
   1d4fe:      	movq	0x8(%rsp), %rsi
   1d503:      	movq	0x10(%rsp), %rdx
   1d508:      	movq	%rsi, 0x20(%rdi)
   1d50c:      	movq	%rdx, 0x28(%rdi)
   1d510:      	movq	%rcx, 0x10(%rdi)
   1d514:      	movq	%r8, 0x18(%rdi)
   1d518:      	addq	$0x50, %rsp
   1d51c:      	retq
   1d51d:      	int3
   1d51e:      	int3
   1d51f:      	int3

000000000001d520 <core::fmt::Arguments::new_v1::h986e818288f902b6>:
   1d520:      	subq	$0xa8, %rsp
   1d527:      	movq	%r8, 0x18(%rsp)
   1d52c:      	movq	%rcx, 0x20(%rsp)
   1d531:      	movq	%rdx, 0x28(%rsp)
   1d536:      	movq	%rsi, 0x30(%rsp)
   1d53b:      	movq	%rdi, 0x38(%rsp)
   1d540:      	movq	%rdi, 0x40(%rsp)
   1d545:      	movq	%rsi, 0x88(%rsp)
   1d54d:      	movq	%rdx, 0x90(%rsp)
   1d555:      	movq	%rcx, 0x98(%rsp)
   1d55d:      	movq	%r8, 0xa0(%rsp)
   1d565:      	cmpq	%r8, %rdx
   1d568:      	jb	0x1d581 <core::fmt::Arguments::new_v1::h986e818288f902b6+0x61>
   1d56a:      	movq	0x18(%rsp), %rax
   1d56f:      	addq	$0x1, %rax
   1d573:      	movq	%rax, 0x10(%rsp)
   1d578:      	setb	%al
   1d57b:      	testb	$0x1, %al
   1d57d:      	jne	0x1d5c4 <core::fmt::Arguments::new_v1::h986e818288f902b6+0xa4>
   1d57f:      	jmp	0x1d5b3 <core::fmt::Arguments::new_v1::h986e818288f902b6+0x93>
   1d581:      	leaq	0x1c508(%rip), %rsi     # 0x39a90 <zlgk82z0l71lvh9+0x39a90>
   1d588:      	leaq	0x48(%rsp), %rdi
   1d58d:      	movq	%rdi, 0x8(%rsp)
   1d592:      	movl	$0x1, %edx
   1d597:      	callq	0x1d640 <core::fmt::Arguments::new_const::h9912da7052091f56>
   1d59c:      	movq	0x8(%rsp), %rdi
   1d5a1:      	leaq	0x1c4f8(%rip), %rsi     # 0x39aa0 <zlgk82z0l71lvh9+0x39aa0>
   1d5a8:      	movq	0x1d911(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1d5af:      	callq	*%rax
   1d5b1:      	ud2
   1d5b3:      	movq	0x28(%rsp), %rax
   1d5b8:      	movq	0x10(%rsp), %rcx
   1d5bd:      	cmpq	%rcx, %rax
   1d5c0:      	ja	0x1d581 <core::fmt::Arguments::new_v1::h986e818288f902b6+0x61>
   1d5c2:      	jmp	0x1d5e2 <core::fmt::Arguments::new_v1::h986e818288f902b6+0xc2>
   1d5c4:      	leaq	-0xc6db(%rip), %rdi     # 0x10ef0 <str.2>
   1d5cb:      	leaq	0x1c4a6(%rip), %rdx     # 0x39a78 <zlgk82z0l71lvh9+0x39a78>
   1d5d2:      	movq	0x1d8f7(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1d5d9:      	movl	$0x1c, %esi
   1d5de:      	callq	*%rax
   1d5e0:      	ud2
   1d5e2:      	movq	0x40(%rsp), %rax
   1d5e7:      	movq	0x38(%rsp), %rcx
   1d5ec:      	movq	0x18(%rsp), %rdx
   1d5f1:      	movq	0x20(%rsp), %rsi
   1d5f6:      	movq	0x28(%rsp), %rdi
   1d5fb:      	movq	0x30(%rsp), %r8
   1d600:      	movq	$0x0, 0x78(%rsp)
   1d609:      	movq	%r8, (%rcx)
   1d60c:      	movq	%rdi, 0x8(%rcx)
   1d610:      	movq	0x78(%rsp), %r8
   1d615:      	movq	0x80(%rsp), %rdi
   1d61d:      	movq	%r8, 0x20(%rcx)
   1d621:      	movq	%rdi, 0x28(%rcx)
   1d625:      	movq	%rsi, 0x10(%rcx)
   1d629:      	movq	%rdx, 0x18(%rcx)
   1d62d:      	addq	$0xa8, %rsp
   1d634:      	retq
   1d635:      	int3
   1d636:      	int3
   1d637:      	int3
   1d638:      	int3
   1d639:      	int3
   1d63a:      	int3
   1d63b:      	int3
   1d63c:      	int3
   1d63d:      	int3
   1d63e:      	int3
   1d63f:      	int3

000000000001d640 <core::fmt::Arguments::new_const::h9912da7052091f56>:
   1d640:      	subq	$0x78, %rsp
   1d644:      	movq	%rdx, 0x8(%rsp)
   1d649:      	movq	%rsi, 0x10(%rsp)
   1d64e:      	movq	%rdi, 0x18(%rsp)
   1d653:      	movq	%rdi, 0x20(%rsp)
   1d658:      	movq	%rsi, 0x68(%rsp)
   1d65d:      	movq	%rdx, 0x70(%rsp)
   1d662:      	cmpq	$0x1, %rdx
   1d666:      	ja	0x1d6b6 <core::fmt::Arguments::new_const::h9912da7052091f56+0x76>
   1d668:      	movq	0x20(%rsp), %rax
   1d66d:      	movq	0x18(%rsp), %rcx
   1d672:      	movq	0x8(%rsp), %rdx
   1d677:      	movq	0x10(%rsp), %rsi
   1d67c:      	movq	$0x0, 0x58(%rsp)
   1d685:      	movq	%rsi, (%rcx)
   1d688:      	movq	%rdx, 0x8(%rcx)
   1d68c:      	movq	0x58(%rsp), %rsi
   1d691:      	movq	0x60(%rsp), %rdx
   1d696:      	movq	%rsi, 0x20(%rcx)
   1d69a:      	movq	%rdx, 0x28(%rcx)
   1d69e:      	leaq	-0xc715(%rip), %rdx     # 0x10f90 <str.2+0xa0>
   1d6a5:      	movq	%rdx, 0x10(%rcx)
   1d6a9:      	movq	$0x0, 0x18(%rcx)
   1d6b1:      	addq	$0x78, %rsp
   1d6b5:      	retq
   1d6b6:      	leaq	0x1c3d3(%rip), %rsi     # 0x39a90 <zlgk82z0l71lvh9+0x39a90>
   1d6bd:      	leaq	0x28(%rsp), %rdi
   1d6c2:      	movq	%rdi, (%rsp)
   1d6c6:      	movl	$0x1, %edx
   1d6cb:      	callq	0x1d640 <core::fmt::Arguments::new_const::h9912da7052091f56>
   1d6d0:      	movq	(%rsp), %rdi
   1d6d4:      	leaq	0x1c3dd(%rip), %rsi     # 0x39ab8 <zlgk82z0l71lvh9+0x39ab8>
   1d6db:      	movq	0x1d7de(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1d6e2:      	callq	*%rax
   1d6e4:      	ud2
   1d6e6:      	int3
   1d6e7:      	int3
   1d6e8:      	int3
   1d6e9:      	int3
   1d6ea:      	int3
   1d6eb:      	int3
   1d6ec:      	int3
   1d6ed:      	int3
   1d6ee:      	int3
   1d6ef:      	int3

000000000001d6f0 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::ha4b32234f7fc6f80>:
   1d6f0:      	subq	$0x38, %rsp
   1d6f4:      	movq	%rdi, 0x8(%rsp)
   1d6f9:      	movq	%rdi, 0x18(%rsp)
   1d6fe:      	movq	%rsi, 0x20(%rsp)
   1d703:      	movq	%rdi, 0x28(%rsp)
   1d708:      	movq	%rdi, 0x30(%rsp)
   1d70d:      	movq	%rsi, %rax
   1d710:      	subq	$0x1, %rax
   1d714:      	movq	%rax, 0x10(%rsp)
   1d719:      	cmpq	$0x1, %rsi
   1d71d:      	setb	%al
   1d720:      	testb	$0x1, %al
   1d722:      	jne	0x1d742 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::ha4b32234f7fc6f80+0x52>
   1d724:      	movq	0x10(%rsp), %rcx
   1d729:      	movq	0x8(%rsp), %rax
   1d72e:      	andq	%rcx, %rax
   1d731:      	cmpq	$0x0, %rax
   1d735:      	sete	%al
   1d738:      	andb	$0x1, %al
   1d73a:      	movzbl	%al, %eax
   1d73d:      	addq	$0x38, %rsp
   1d741:      	retq
   1d742:      	leaq	-0xc889(%rip), %rdi     # 0x10ec0 <str.0>
   1d749:      	leaq	0x1c380(%rip), %rdx     # 0x39ad0 <zlgk82z0l71lvh9+0x39ad0>
   1d750:      	movq	0x1d779(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1d757:      	movl	$0x21, %esi
   1d75c:      	callq	*%rax
   1d75e:      	ud2

000000000001d760 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h22ccdc96674b6f0f>:
   1d760:      	subq	$0x18, %rsp
   1d764:      	movq	%rdi, (%rsp)
   1d768:      	movq	%rdi, 0x8(%rsp)
   1d76d:      	movq	%rdi, 0x10(%rsp)
   1d772:      	cmpq	$0x0, %rdi
   1d776:      	sete	%al
   1d779:      	andb	$0x1, %al
   1d77b:      	movzbl	%al, %eax
   1d77e:      	addq	$0x18, %rsp
   1d782:      	retq
   1d783:      	int3
   1d784:      	int3
   1d785:      	int3
   1d786:      	int3
   1d787:      	int3
   1d788:      	int3
   1d789:      	int3
   1d78a:      	int3
   1d78b:      	int3
   1d78c:      	int3
   1d78d:      	int3
   1d78e:      	int3
   1d78f:      	int3

000000000001d790 <core::str::converts::from_utf8_unchecked_mut::h0ce5a4e0b52dee32>:
   1d790:      	subq	$0x10, %rsp
   1d794:      	movq	%rsi, %rdx
   1d797:      	movq	%rdi, %rax
   1d79a:      	movq	%rax, (%rsp)
   1d79e:      	movq	%rdx, 0x8(%rsp)
   1d7a3:      	addq	$0x10, %rsp
   1d7a7:      	retq
   1d7a8:      	int3
   1d7a9:      	int3
   1d7aa:      	int3
   1d7ab:      	int3
   1d7ac:      	int3
   1d7ad:      	int3
   1d7ae:      	int3
   1d7af:      	int3

000000000001d7b0 <core::sync::atomic::atomic_swap::h078e38cb7551ff6c>:
   1d7b0:      	subq	$0x38, %rsp
   1d7b4:      	movq	%rsi, (%rsp)
   1d7b8:      	movq	%rdi, 0x8(%rsp)
   1d7bd:      	movb	%dl, %al
   1d7bf:      	movb	%al, 0x1f(%rsp)
   1d7c3:      	movq	%rdi, 0x28(%rsp)
   1d7c8:      	movq	%rsi, 0x30(%rsp)
   1d7cd:      	movzbl	0x1f(%rsp), %eax
   1d7d2:      	movq	%rax, 0x10(%rsp)
   1d7d7:      	movq	0x10(%rsp), %rax
   1d7dc:      	leaq	-0xc93f(%rip), %rcx     # 0x10ea4 <str.2+0xc4>
   1d7e3:      	movslq	(%rcx,%rax,4), %rax
   1d7e7:      	addq	%rcx, %rax
   1d7ea:      	jmpq	*%rax
   1d7ec:      	ud2
   1d7ee:      	movq	0x8(%rsp), %rcx
   1d7f3:      	movq	(%rsp), %rax
   1d7f7:      	xchgq	%rax, (%rcx)
   1d7fa:      	movq	%rax, 0x20(%rsp)
   1d7ff:      	jmp	0x1d84b <core::sync::atomic::atomic_swap::h078e38cb7551ff6c+0x9b>
   1d801:      	movq	0x8(%rsp), %rcx
   1d806:      	movq	(%rsp), %rax
   1d80a:      	xchgq	%rax, (%rcx)
   1d80d:      	movq	%rax, 0x20(%rsp)
   1d812:      	jmp	0x1d84b <core::sync::atomic::atomic_swap::h078e38cb7551ff6c+0x9b>
   1d814:      	movq	0x8(%rsp), %rcx
   1d819:      	movq	(%rsp), %rax
   1d81d:      	xchgq	%rax, (%rcx)
   1d820:      	movq	%rax, 0x20(%rsp)
   1d825:      	jmp	0x1d84b <core::sync::atomic::atomic_swap::h078e38cb7551ff6c+0x9b>
   1d827:      	movq	0x8(%rsp), %rcx
   1d82c:      	movq	(%rsp), %rax
   1d830:      	xchgq	%rax, (%rcx)
   1d833:      	movq	%rax, 0x20(%rsp)
   1d838:      	jmp	0x1d84b <core::sync::atomic::atomic_swap::h078e38cb7551ff6c+0x9b>
   1d83a:      	movq	0x8(%rsp), %rcx
   1d83f:      	movq	(%rsp), %rax
   1d843:      	xchgq	%rax, (%rcx)
   1d846:      	movq	%rax, 0x20(%rsp)
   1d84b:      	movq	0x20(%rsp), %rax
   1d850:      	addq	$0x38, %rsp
   1d854:      	retq
   1d855:      	int3
   1d856:      	int3
   1d857:      	int3
   1d858:      	int3
   1d859:      	int3
   1d85a:      	int3
   1d85b:      	int3
   1d85c:      	int3
   1d85d:      	int3
   1d85e:      	int3
   1d85f:      	int3

000000000001d860 <core::array::<impl core::ops::index::Index<I> for [T; N]>::index::h1d91b6d4cdd0d150>:
   1d860:      	subq	$0x18, %rsp
   1d864:      	movq	%rdx, %rcx
   1d867:      	movq	%rsi, %rdx
   1d86a:      	movq	%rdi, 0x8(%rsp)
   1d86f:      	movq	%rdx, 0x10(%rsp)
   1d874:      	movq	0x1dbb5(%rip), %rax     # 0x3b430 <zlgk82z0l71lvh9+0x3b430>
   1d87b:      	movl	$0x4, %esi
   1d880:      	callq	*%rax
   1d882:      	addq	$0x18, %rsp
   1d886:      	retq
   1d887:      	int3
   1d888:      	int3
   1d889:      	int3
   1d88a:      	int3
   1d88b:      	int3
   1d88c:      	int3
   1d88d:      	int3
   1d88e:      	int3
   1d88f:      	int3

000000000001d890 <core::slice::<impl [T]>::fill::h646f98fd2be5ebfb>:
   1d890:      	subq	$0x18, %rsp
   1d894:      	movb	%dl, %al
   1d896:      	movq	%rdi, (%rsp)
   1d89a:      	movq	%rsi, 0x8(%rsp)
   1d89f:      	movb	%al, 0x17(%rsp)
   1d8a3:      	movzbl	%al, %edx
   1d8a6:      	movq	0x1da3b(%rip), %rax     # 0x3b2e8 <zlgk82z0l71lvh9+0x3b2e8>
   1d8ad:      	callq	*%rax
   1d8af:      	addq	$0x18, %rsp
   1d8b3:      	retq
   1d8b4:      	int3
   1d8b5:      	int3
   1d8b6:      	int3
   1d8b7:      	int3
   1d8b8:      	int3
   1d8b9:      	int3
   1d8ba:      	int3
   1d8bb:      	int3
   1d8bc:      	int3
   1d8bd:      	int3
   1d8be:      	int3
   1d8bf:      	int3

000000000001d8c0 <core::option::Option<T>::unwrap_or_else::h0df949cdc7604480>:
   1d8c0:      	subq	$0x48, %rsp
   1d8c4:      	movq	%rsi, 0x8(%rsp)
   1d8c9:      	movq	%rdi, 0x10(%rsp)
   1d8ce:      	movq	%rdi, 0x18(%rsp)
   1d8d3:      	movb	$0x0, 0x46(%rsp)
   1d8d8:      	movb	$0x1, 0x46(%rsp)
   1d8dd:      	movq	(%rsi), %rdx
   1d8e0:      	movl	$0x1, %eax
   1d8e5:      	xorl	%ecx, %ecx
   1d8e7:      	cmpq	$0x0, %rdx
   1d8eb:      	cmoveq	%rcx, %rax
   1d8ef:      	cmpq	$0x0, %rax
   1d8f3:      	jne	0x1d906 <core::option::Option<T>::unwrap_or_else::h0df949cdc7604480+0x46>
   1d8f5:      	movq	0x10(%rsp), %rdi
   1d8fa:      	movb	$0x0, 0x46(%rsp)
   1d8ff:      	callq	0x1bc50 <bootloader_x86_64_common::framebuffer::get_char_raster::{{closure}}::ha1fb07ac713ca946>
   1d904:      	jmp	0x1d956 <core::option::Option<T>::unwrap_or_else::h0df949cdc7604480+0x96>
   1d906:      	movq	0x10(%rsp), %rax
   1d90b:      	movq	0x8(%rsp), %rcx
   1d910:      	movq	(%rcx), %rdx
   1d913:      	movq	%rdx, 0x20(%rsp)
   1d918:      	movq	0x8(%rcx), %rdx
   1d91c:      	movq	%rdx, 0x28(%rsp)
   1d921:      	movq	0x10(%rcx), %rdx
   1d925:      	movq	%rdx, 0x30(%rsp)
   1d92a:      	movq	0x18(%rcx), %rcx
   1d92e:      	movq	%rcx, 0x38(%rsp)
   1d933:      	movq	0x20(%rsp), %rcx
   1d938:      	movq	%rcx, (%rax)
   1d93b:      	movq	0x28(%rsp), %rcx
   1d940:      	movq	%rcx, 0x8(%rax)
   1d944:      	movq	0x30(%rsp), %rcx
   1d949:      	movq	%rcx, 0x10(%rax)
   1d94d:      	movq	0x38(%rsp), %rcx
   1d952:      	movq	%rcx, 0x18(%rax)
   1d956:      	testb	$0x1, 0x46(%rsp)
   1d95b:      	jne	0x1d967 <core::option::Option<T>::unwrap_or_else::h0df949cdc7604480+0xa7>
   1d95d:      	movq	0x18(%rsp), %rax
   1d962:      	addq	$0x48, %rsp
   1d966:      	retq
   1d967:      	jmp	0x1d95d <core::option::Option<T>::unwrap_or_else::h0df949cdc7604480+0x9d>
   1d969:      	int3
   1d96a:      	int3
   1d96b:      	int3
   1d96c:      	int3
   1d96d:      	int3
   1d96e:      	int3
   1d96f:      	int3

000000000001d970 <core::option::Option<T>::map::h0d6d107868811209>:
   1d970:      	subq	$0x88, %rsp
   1d977:      	movq	%r8, (%rsp)
   1d97b:      	movq	%rcx, 0x8(%rsp)
   1d980:      	movq	%rdi, 0x10(%rsp)
   1d985:      	movq	%rdi, 0x18(%rsp)
   1d98a:      	movq	%rsi, 0x20(%rsp)
   1d98f:      	movq	%rdx, 0x28(%rsp)
   1d994:      	movq	%rcx, 0x68(%rsp)
   1d999:      	movq	%r8, 0x70(%rsp)
   1d99e:      	movb	$0x0, 0x67(%rsp)
   1d9a3:      	movb	$0x1, 0x67(%rsp)
   1d9a8:      	movq	0x20(%rsp), %rdx
   1d9ad:      	movl	$0x1, %eax
   1d9b2:      	xorl	%ecx, %ecx
   1d9b4:      	cmpq	$0x0, %rdx
   1d9b8:      	cmoveq	%rcx, %rax
   1d9bc:      	cmpq	$0x0, %rax
   1d9c0:      	jne	0x1d9d0 <core::option::Option<T>::map::h0d6d107868811209+0x60>
   1d9c2:      	movq	0x10(%rsp), %rax
   1d9c7:      	movq	$0x0, (%rax)
   1d9ce:      	jmp	0x1da3f <core::option::Option<T>::map::h0d6d107868811209+0xcf>
   1d9d0:      	movq	(%rsp), %rdx
   1d9d4:      	movq	0x8(%rsp), %rsi
   1d9d9:      	movq	0x20(%rsp), %rcx
   1d9de:      	movq	0x28(%rsp), %rax
   1d9e3:      	movq	%rcx, 0x78(%rsp)
   1d9e8:      	movq	%rax, 0x80(%rsp)
   1d9f0:      	movb	$0x0, 0x67(%rsp)
   1d9f5:      	movq	%rcx, 0x50(%rsp)
   1d9fa:      	movq	%rax, 0x58(%rsp)
   1d9ff:      	movq	0x50(%rsp), %rcx
   1da04:      	movq	0x58(%rsp), %r8
   1da09:      	movq	0x1d9e8(%rip), %rax     # 0x3b3f8 <zlgk82z0l71lvh9+0x3b3f8>
   1da10:      	leaq	0x30(%rsp), %rdi
   1da15:      	callq	*%rax
   1da17:      	movq	0x10(%rsp), %rax
   1da1c:      	movq	0x30(%rsp), %rcx
   1da21:      	movq	%rcx, (%rax)
   1da24:      	movq	0x38(%rsp), %rcx
   1da29:      	movq	%rcx, 0x8(%rax)
   1da2d:      	movq	0x40(%rsp), %rcx
   1da32:      	movq	%rcx, 0x10(%rax)
   1da36:      	movq	0x48(%rsp), %rcx
   1da3b:      	movq	%rcx, 0x18(%rax)
   1da3f:      	testb	$0x1, 0x67(%rsp)
   1da44:      	jne	0x1da53 <core::option::Option<T>::map::h0d6d107868811209+0xe3>
   1da46:      	movq	0x18(%rsp), %rax
   1da4b:      	addq	$0x88, %rsp
   1da52:      	retq
   1da53:      	jmp	0x1da46 <core::option::Option<T>::map::h0d6d107868811209+0xd6>
   1da55:      	int3
   1da56:      	int3
   1da57:      	int3
   1da58:      	int3
   1da59:      	int3
   1da5a:      	int3
   1da5b:      	int3
   1da5c:      	int3
   1da5d:      	int3
   1da5e:      	int3
   1da5f:      	int3

000000000001da60 <core::option::Option<T>::expect::h70820e088724f02e>:
   1da60:      	subq	$0x48, %rsp
   1da64:      	movq	%r8, 0x8(%rsp)
   1da69:      	movq	%rcx, 0x10(%rsp)
   1da6e:      	movq	%rdx, 0x18(%rsp)
   1da73:      	movq	%rsi, 0x20(%rsp)
   1da78:      	movq	%rdi, 0x28(%rsp)
   1da7d:      	movq	%rdi, 0x30(%rsp)
   1da82:      	movq	%rdx, 0x38(%rsp)
   1da87:      	movq	%rcx, 0x40(%rsp)
   1da8c:      	movq	(%rsi), %rdx
   1da8f:      	movl	$0x1, %eax
   1da94:      	xorl	%ecx, %ecx
   1da96:      	cmpq	$0x0, %rdx
   1da9a:      	cmoveq	%rcx, %rax
   1da9e:      	cmpq	$0x0, %rax
   1daa2:      	jne	0x1dabe <core::option::Option<T>::expect::h70820e088724f02e+0x5e>
   1daa4:      	movq	0x8(%rsp), %rdx
   1daa9:      	movq	0x10(%rsp), %rsi
   1daae:      	movq	0x18(%rsp), %rdi
   1dab3:      	movq	0x1d97e(%rip), %rax     # 0x3b438 <zlgk82z0l71lvh9+0x3b438>
   1daba:      	callq	*%rax
   1dabc:      	ud2
   1dabe:      	movq	0x30(%rsp), %rax
   1dac3:      	movq	0x28(%rsp), %rcx
   1dac8:      	movq	0x20(%rsp), %rdx
   1dacd:      	movq	(%rdx), %rsi
   1dad0:      	movq	%rsi, (%rcx)
   1dad3:      	movq	0x8(%rdx), %rsi
   1dad7:      	movq	%rsi, 0x8(%rcx)
   1dadb:      	movq	0x10(%rdx), %rsi
   1dadf:      	movq	%rsi, 0x10(%rcx)
   1dae3:      	movq	0x18(%rdx), %rdx
   1dae7:      	movq	%rdx, 0x18(%rcx)
   1daeb:      	addq	$0x48, %rsp
   1daef:      	retq

000000000001daf0 <<&mut W as core::fmt::Write>::write_char::hc49fa2374ecf423a>:
   1daf0:      	subq	$0x18, %rsp
   1daf4:      	movq	%rdi, 0x8(%rsp)
   1daf9:      	movl	%esi, 0x14(%rsp)
   1dafd:      	movq	(%rdi), %rdi
   1db00:      	movq	0x1d901(%rip), %rax     # 0x3b408 <zlgk82z0l71lvh9+0x3b408>
   1db07:      	callq	*%rax
   1db09:      	andb	$0x1, %al
   1db0b:      	movzbl	%al, %eax
   1db0e:      	addq	$0x18, %rsp
   1db12:      	retq
   1db13:      	int3
   1db14:      	int3
   1db15:      	int3
   1db16:      	int3
   1db17:      	int3
   1db18:      	int3
   1db19:      	int3
   1db1a:      	int3
   1db1b:      	int3
   1db1c:      	int3
   1db1d:      	int3
   1db1e:      	int3
   1db1f:      	int3

000000000001db20 <<&mut W as core::fmt::Write>::write_fmt::hbf5b678c027e7aec>:
   1db20:      	subq	$0x38, %rsp
   1db24:      	movq	%rdi, (%rsp)
   1db28:      	movq	(%rdi), %rdi
   1db2b:      	movq	0x28(%rsi), %rax
   1db2f:      	movq	%rax, 0x30(%rsp)
   1db34:      	movq	0x20(%rsi), %rax
   1db38:      	movq	%rax, 0x28(%rsp)
   1db3d:      	movq	0x18(%rsi), %rax
   1db41:      	movq	%rax, 0x20(%rsp)
   1db46:      	movq	0x10(%rsi), %rax
   1db4a:      	movq	%rax, 0x18(%rsp)
   1db4f:      	movq	(%rsi), %rax
   1db52:      	movq	0x8(%rsi), %rcx
   1db56:      	movq	%rcx, 0x10(%rsp)
   1db5b:      	movq	%rax, 0x8(%rsp)
   1db60:      	movq	0x1d869(%rip), %rax     # 0x3b3d0 <zlgk82z0l71lvh9+0x3b3d0>
   1db67:      	leaq	0x8(%rsp), %rsi
   1db6c:      	callq	*%rax
   1db6e:      	andb	$0x1, %al
   1db70:      	movzbl	%al, %eax
   1db73:      	addq	$0x38, %rsp
   1db77:      	retq
   1db78:      	int3
   1db79:      	int3
   1db7a:      	int3
   1db7b:      	int3
   1db7c:      	int3
   1db7d:      	int3
   1db7e:      	int3
   1db7f:      	int3

000000000001db80 <<&mut W as core::fmt::Write>::write_str::h1fa51985f094def1>:
   1db80:      	subq	$0x18, %rsp
   1db84:      	movq	%rdi, (%rsp)
   1db88:      	movq	%rsi, 0x8(%rsp)
   1db8d:      	movq	%rdx, 0x10(%rsp)
   1db92:      	movq	(%rdi), %rdi
   1db95:      	movq	0x1d874(%rip), %rax     # 0x3b410 <zlgk82z0l71lvh9+0x3b410>
   1db9c:      	callq	*%rax
   1db9e:      	andb	$0x1, %al
   1dba0:      	movzbl	%al, %eax
   1dba3:      	addq	$0x18, %rsp
   1dba7:      	retq
   1dba8:      	int3
   1dba9:      	int3
   1dbaa:      	int3
   1dbab:      	int3
   1dbac:      	int3
   1dbad:      	int3
   1dbae:      	int3
   1dbaf:      	int3

000000000001dbb0 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h4d8775b9c157f252>:
   1dbb0:      	subq	$0x18, %rsp
   1dbb4:      	movq	%rdi, (%rsp)
   1dbb8:      	movq	(%rsp), %rdx
   1dbbc:      	movl	$0x1, %eax
   1dbc1:      	xorl	%ecx, %ecx
   1dbc3:      	cmpq	$0x0, %rdx
   1dbc7:      	cmoveq	%rcx, %rax
   1dbcb:      	cmpq	$0x0, %rax
   1dbcf:      	jne	0x1dbdc <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h4d8775b9c157f252+0x2c>
   1dbd1:      	movq	$0x0, 0x8(%rsp)
   1dbda:      	jmp	0x1dbea <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h4d8775b9c157f252+0x3a>
   1dbdc:      	movq	(%rsp), %rax
   1dbe0:      	movq	%rax, 0x10(%rsp)
   1dbe5:      	movq	%rax, 0x8(%rsp)
   1dbea:      	movq	0x8(%rsp), %rax
   1dbef:      	addq	$0x18, %rsp
   1dbf3:      	retq
   1dbf4:      	int3
   1dbf5:      	int3
   1dbf6:      	int3
   1dbf7:      	int3
   1dbf8:      	int3
   1dbf9:      	int3
   1dbfa:      	int3
   1dbfb:      	int3
   1dbfc:      	int3
   1dbfd:      	int3
   1dbfe:      	int3
   1dbff:      	int3

000000000001dc00 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::next::h35721222d6e343de>:
   1dc00:      	pushq	%rax
   1dc01:      	movq	%rdi, (%rsp)
   1dc05:      	movq	0x1d844(%rip), %rax     # 0x3b450 <zlgk82z0l71lvh9+0x3b450>
   1dc0c:      	callq	*%rax
   1dc0e:      	movl	%eax, %edi
   1dc10:      	movl	%edx, %esi
   1dc12:      	movq	0x1d83f(%rip), %rax     # 0x3b458 <zlgk82z0l71lvh9+0x3b458>
   1dc19:      	callq	*%rax
   1dc1b:      	popq	%rcx
   1dc1c:      	retq
   1dc1d:      	int3
   1dc1e:      	int3
   1dc1f:      	int3

000000000001dc20 <<lock_api::mutex::MutexGuard<R,T> as core::ops::drop::Drop>::drop::h21e547dacf437f53>:
   1dc20:      	pushq	%rax
   1dc21:      	movq	%rdi, (%rsp)
   1dc25:      	movq	(%rdi), %rdi
   1dc28:      	movq	0x1d831(%rip), %rax     # 0x3b460 <zlgk82z0l71lvh9+0x3b460>
   1dc2f:      	callq	*%rax
   1dc31:      	popq	%rax
   1dc32:      	retq
   1dc33:      	int3
   1dc34:      	int3
   1dc35:      	int3
   1dc36:      	int3
   1dc37:      	int3
   1dc38:      	int3
   1dc39:      	int3
   1dc3a:      	int3
   1dc3b:      	int3
   1dc3c:      	int3
   1dc3d:      	int3
   1dc3e:      	int3
   1dc3f:      	int3

000000000001dc40 <<lock_api::mutex::MutexGuard<R,T> as core::ops::drop::Drop>::drop::h6fcfd558572b50a7>:
   1dc40:      	pushq	%rax
   1dc41:      	movq	%rdi, (%rsp)
   1dc45:      	movq	(%rdi), %rdi
   1dc48:      	movq	0x1d811(%rip), %rax     # 0x3b460 <zlgk82z0l71lvh9+0x3b460>
   1dc4f:      	callq	*%rax
   1dc51:      	popq	%rax
   1dc52:      	retq
   1dc53:      	int3
   1dc54:      	int3
   1dc55:      	int3
   1dc56:      	int3
   1dc57:      	int3
   1dc58:      	int3
   1dc59:      	int3
   1dc5a:      	int3
   1dc5b:      	int3
   1dc5c:      	int3
   1dc5d:      	int3
   1dc5e:      	int3
   1dc5f:      	int3

000000000001dc60 <<core::option::Option<T> as core::ops::try_trait::FromResidual>::from_residual::h9fd032c1a438e593>:
   1dc60:      	subq	$0x20, %rsp
   1dc64:      	movq	$0x0, 0x10(%rsp)
   1dc6d:      	movq	0x8(%rsp), %rax
   1dc72:      	movq	0x10(%rsp), %rdx
   1dc77:      	addq	$0x20, %rsp
   1dc7b:      	retq
   1dc7c:      	int3
   1dc7d:      	int3
   1dc7e:      	int3
   1dc7f:      	int3

000000000001dc80 <<lock_api::mutex::MutexGuard<R,T> as core::ops::deref::DerefMut>::deref_mut::h4645ee9366b1e3eb>:
   1dc80:      	subq	$0x10, %rsp
   1dc84:      	movq	%rdi, (%rsp)
   1dc88:      	movq	(%rdi), %rax
   1dc8b:      	addq	$0x8, %rax
   1dc8f:      	movq	%rax, 0x8(%rsp)
   1dc94:      	addq	$0x10, %rsp
   1dc98:      	retq
   1dc99:      	int3
   1dc9a:      	int3
   1dc9b:      	int3
   1dc9c:      	int3
   1dc9d:      	int3
   1dc9e:      	int3
   1dc9f:      	int3

000000000001dca0 <<lock_api::mutex::MutexGuard<R,T> as core::ops::deref::DerefMut>::deref_mut::h8403945bb3e2ebec>:
   1dca0:      	subq	$0x10, %rsp
   1dca4:      	movq	%rdi, (%rsp)
   1dca8:      	movq	(%rdi), %rax
   1dcab:      	addq	$0x2, %rax
   1dcaf:      	movq	%rax, 0x8(%rsp)
   1dcb4:      	addq	$0x10, %rsp
   1dcb8:      	retq
   1dcb9:      	int3
   1dcba:      	int3
   1dcbb:      	int3
   1dcbc:      	int3
   1dcbd:      	int3
   1dcbe:      	int3
   1dcbf:      	int3

000000000001dcc0 <lock_api::mutex::Mutex<R,T>::new::h4b1bba304ac55d80>:
   1dcc0:      	subq	$0xe, %rsp
   1dcc4:      	movq	%rdi, %rax
   1dcc7:      	movb	$0x0, 0x1(%rsp)
   1dccc:      	movq	(%rsi), %rcx
   1dccf:      	movq	%rcx, 0x2(%rsp)
   1dcd4:      	movl	0x8(%rsi), %ecx
   1dcd7:      	movl	%ecx, 0xa(%rsp)
   1dcdb:      	movb	0x1(%rsp), %cl
   1dcdf:      	movb	%cl, (%rdi)
   1dce1:      	movq	0x2(%rsp), %rcx
   1dce6:      	movq	%rcx, 0x2(%rdi)
   1dcea:      	movl	0xa(%rsp), %ecx
   1dcee:      	movl	%ecx, 0xa(%rdi)
   1dcf1:      	addq	$0xe, %rsp
   1dcf5:      	retq
   1dcf6:      	int3
   1dcf7:      	int3
   1dcf8:      	int3
   1dcf9:      	int3
   1dcfa:      	int3
   1dcfb:      	int3
   1dcfc:      	int3
   1dcfd:      	int3
   1dcfe:      	int3
   1dcff:      	int3

000000000001dd00 <lock_api::mutex::Mutex<R,T>::new::h9cbb7be005140646>:
   1dd00:      	subq	$0x60, %rsp
   1dd04:      	movq	%rdi, %rax
   1dd07:      	movq	%rax, (%rsp)
   1dd0b:      	movb	$0x0, 0xf(%rsp)
   1dd10:      	movl	$0xa, %ecx
   1dd15:      	leaq	0x10(%rsp), %rdi
   1dd1a:      	rep		movsq	(%rsi), %es:(%rdi)
   1dd1d:      	movq	(%rsp), %rdi
   1dd21:      	movb	0xf(%rsp), %cl
   1dd25:      	movb	%cl, (%rdi)
   1dd27:      	addq	$0x8, %rdi
   1dd2b:      	movl	$0xa, %ecx
   1dd30:      	leaq	0x10(%rsp), %rsi
   1dd35:      	rep		movsq	(%rsi), %es:(%rdi)
   1dd38:      	addq	$0x60, %rsp
   1dd3c:      	retq
   1dd3d:      	int3
   1dd3e:      	int3
   1dd3f:      	int3

000000000001dd40 <lock_api::mutex::Mutex<R,T>::lock::h477695c7190ce473>:
   1dd40:      	subq	$0x18, %rsp
   1dd44:      	movq	%rdi, 0x8(%rsp)
   1dd49:      	movq	%rdi, 0x10(%rsp)
   1dd4e:      	movq	0x1d713(%rip), %rax     # 0x3b468 <zlgk82z0l71lvh9+0x3b468>
   1dd55:      	callq	*%rax
   1dd57:      	movq	0x8(%rsp), %rdi
   1dd5c:      	movq	0x1d70d(%rip), %rax     # 0x3b470 <zlgk82z0l71lvh9+0x3b470>
   1dd63:      	callq	*%rax
   1dd65:      	addq	$0x18, %rsp
   1dd69:      	retq
   1dd6a:      	int3
   1dd6b:      	int3
   1dd6c:      	int3
   1dd6d:      	int3
   1dd6e:      	int3
   1dd6f:      	int3

000000000001dd70 <lock_api::mutex::Mutex<R,T>::lock::h9ddee2e85120d6ce>:
   1dd70:      	subq	$0x18, %rsp
   1dd74:      	movq	%rdi, 0x8(%rsp)
   1dd79:      	movq	%rdi, 0x10(%rsp)
   1dd7e:      	movq	0x1d6e3(%rip), %rax     # 0x3b468 <zlgk82z0l71lvh9+0x3b468>
   1dd85:      	callq	*%rax
   1dd87:      	movq	0x8(%rsp), %rdi
   1dd8c:      	movq	0x1d6e5(%rip), %rax     # 0x3b478 <zlgk82z0l71lvh9+0x3b478>
   1dd93:      	callq	*%rax
   1dd95:      	addq	$0x18, %rsp
   1dd99:      	retq
   1dd9a:      	int3
   1dd9b:      	int3
   1dd9c:      	int3
   1dd9d:      	int3
   1dd9e:      	int3
   1dd9f:      	int3

000000000001dda0 <lock_api::mutex::Mutex<R,T>::guard::h3b865c7a56362aac>:
   1dda0:      	subq	$0x10, %rsp
   1dda4:      	movq	%rdi, 0x8(%rsp)
   1dda9:      	movq	%rdi, (%rsp)
   1ddad:      	movq	(%rsp), %rax
   1ddb1:      	addq	$0x10, %rsp
   1ddb5:      	retq
   1ddb6:      	int3
   1ddb7:      	int3
   1ddb8:      	int3
   1ddb9:      	int3
   1ddba:      	int3
   1ddbb:      	int3
   1ddbc:      	int3
   1ddbd:      	int3
   1ddbe:      	int3
   1ddbf:      	int3

000000000001ddc0 <lock_api::mutex::Mutex<R,T>::guard::hc6c17bd947e64ca2>:
   1ddc0:      	subq	$0x10, %rsp
   1ddc4:      	movq	%rdi, 0x8(%rsp)
   1ddc9:      	movq	%rdi, (%rsp)
   1ddcd:      	movq	(%rsp), %rax
   1ddd1:      	addq	$0x10, %rsp
   1ddd5:      	retq
   1ddd6:      	int3
   1ddd7:      	int3
   1ddd8:      	int3
   1ddd9:      	int3
   1ddda:      	int3
   1dddb:      	int3
   1dddc:      	int3
   1dddd:      	int3
   1ddde:      	int3
   1dddf:      	int3

000000000001dde0 <bootloader_x86_64_common::serial::SerialPort::init::hd4083135389bff0a>:
   1dde0:      	subq	$0x28, %rsp
   1dde4:      	movq	%rdi, (%rsp)
   1dde8:      	movq	%rdi, 0x8(%rsp)
   1dded:      	movq	0x1d694(%rip), %rax     # 0x3b488 <zlgk82z0l71lvh9+0x3b488>
   1ddf4:      	leaq	0x10(%rsp), %rdi
   1ddf9:      	movl	$0x3f8, %esi            # imm = 0x3F8
   1ddfe:      	callq	*%rax
   1de00:      	movq	0x1d689(%rip), %rax     # 0x3b490 <zlgk82z0l71lvh9+0x3b490>
   1de07:      	leaq	0x10(%rsp), %rdi
   1de0c:      	callq	*%rax
   1de0e:      	movq	(%rsp), %rdi
   1de12:      	movq	0x8(%rsp), %rax
   1de17:      	movq	0x10(%rsp), %rcx
   1de1c:      	movq	%rcx, 0x1c(%rsp)
   1de21:      	movl	0x18(%rsp), %ecx
   1de25:      	movl	%ecx, 0x24(%rsp)
   1de29:      	movq	0x1c(%rsp), %rcx
   1de2e:      	movq	%rcx, (%rdi)
   1de31:      	movl	0x24(%rsp), %ecx
   1de35:      	movl	%ecx, 0x8(%rdi)
   1de38:      	addq	$0x28, %rsp
   1de3c:      	retq
   1de3d:      	int3
   1de3e:      	int3
   1de3f:      	int3

000000000001de40 <<bootloader_x86_64_common::serial::SerialPort as core::fmt::Write>::write_str::ha31b0d8a303a9b49>:
   1de40:      	subq	$0x28, %rsp
   1de44:      	movq	%rdi, 0x10(%rsp)
   1de49:      	movq	%rsi, 0x18(%rsp)
   1de4e:      	movq	%rdx, 0x20(%rsp)
   1de53:      	movq	0x1d63e(%rip), %rax     # 0x3b498 <zlgk82z0l71lvh9+0x3b498>
   1de5a:      	callq	*%rax
   1de5c:      	movzbl	%al, %edi
   1de5f:      	andl	$0x1, %edi
   1de62:      	leaq	0x1bc7f(%rip), %rsi     # 0x39ae8 <zlgk82z0l71lvh9+0x39ae8>
   1de69:      	movq	0x1d548(%rip), %rax     # 0x3b3b8 <zlgk82z0l71lvh9+0x3b3b8>
   1de70:      	callq	*%rax
   1de72:      	movb	$0x0, 0xf(%rsp)
   1de77:      	movb	0xf(%rsp), %al
   1de7b:      	andb	$0x1, %al
   1de7d:      	movzbl	%al, %eax
   1de80:      	addq	$0x28, %rsp
   1de84:      	retq
   1de85:      	int3
   1de86:      	int3
   1de87:      	int3
   1de88:      	int3
   1de89:      	int3
   1de8a:      	int3
   1de8b:      	int3
   1de8c:      	int3
   1de8d:      	int3
   1de8e:      	int3
   1de8f:      	int3

000000000001de90 <<core::iter::adapters::copied::Copied<I> as core::iter::traits::iterator::Iterator>::next::h77284674dc783f7c>:
   1de90:      	pushq	%rax
   1de91:      	movq	%rdi, (%rsp)
   1de95:      	movq	0x1d644(%rip), %rax     # 0x3b4e0 <zlgk82z0l71lvh9+0x3b4e0>
   1de9c:      	callq	*%rax
   1de9e:      	movq	%rax, %rdi
   1dea1:      	movq	0x1d608(%rip), %rax     # 0x3b4b0 <zlgk82z0l71lvh9+0x3b4b0>
   1dea8:      	callq	*%rax
   1deaa:      	andb	$0x1, %al
   1deac:      	popq	%rcx
   1dead:      	retq
   1deae:      	int3
   1deaf:      	int3

000000000001deb0 <core::str::<impl str>::bytes::h01c7e149d3a2c45e>:
   1deb0:      	subq	$0x38, %rsp
   1deb4:      	movq	%rdi, 0x18(%rsp)
   1deb9:      	movq	%rsi, 0x20(%rsp)
   1debe:      	movq	%rdi, 0x28(%rsp)
   1dec3:      	movq	%rsi, 0x30(%rsp)
   1dec8:      	movq	0x1d3d9(%rip), %rax     # 0x3b2a8 <zlgk82z0l71lvh9+0x3b2a8>
   1decf:      	callq	*%rax
   1ded1:      	movq	%rax, %rdi
   1ded4:      	movq	%rdx, %rsi
   1ded7:      	movq	0x1d5da(%rip), %rax     # 0x3b4b8 <zlgk82z0l71lvh9+0x3b4b8>
   1dede:      	callq	*%rax
   1dee0:      	movq	%rax, 0x8(%rsp)
   1dee5:      	movq	%rdx, 0x10(%rsp)
   1deea:      	movq	0x8(%rsp), %rax
   1deef:      	movq	0x10(%rsp), %rdx
   1def4:      	addq	$0x38, %rsp
   1def8:      	retq
   1def9:      	int3
   1defa:      	int3
   1defb:      	int3
   1defc:      	int3
   1defd:      	int3
   1defe:      	int3
   1deff:      	int3

000000000001df00 <core::iter::traits::iterator::Iterator::copied::h563f93a7f4420b90>:
   1df00:      	subq	$0x18, %rsp
   1df04:      	movq	%rdi, 0x8(%rsp)
   1df09:      	movq	%rsi, 0x10(%rsp)
   1df0e:      	movq	0x1d5ab(%rip), %rax     # 0x3b4c0 <zlgk82z0l71lvh9+0x3b4c0>
   1df15:      	callq	*%rax
   1df17:      	addq	$0x18, %rsp
   1df1b:      	retq
   1df1c:      	int3
   1df1d:      	int3
   1df1e:      	int3
   1df1f:      	int3

000000000001df20 <core::iter::adapters::copied::Copied<I>::new::h9bcfee1dc990688f>:
   1df20:      	subq	$0x20, %rsp
   1df24:      	movq	%rdi, 0x10(%rsp)
   1df29:      	movq	%rsi, 0x18(%rsp)
   1df2e:      	movq	%rdi, (%rsp)
   1df32:      	movq	%rsi, 0x8(%rsp)
   1df37:      	movq	(%rsp), %rax
   1df3b:      	movq	0x8(%rsp), %rdx
   1df40:      	addq	$0x20, %rsp
   1df44:      	retq
   1df45:      	int3
   1df46:      	int3
   1df47:      	int3
   1df48:      	int3
   1df49:      	int3
   1df4a:      	int3
   1df4b:      	int3
   1df4c:      	int3
   1df4d:      	int3
   1df4e:      	int3
   1df4f:      	int3

000000000001df50 <core::option::Option<&T>::copied::h407f2dbb8883a8af>:
   1df50:      	subq	$0x10, %rsp
   1df54:      	movq	%rdi, (%rsp)
   1df58:      	movq	(%rsp), %rdx
   1df5c:      	movl	$0x1, %eax
   1df61:      	xorl	%ecx, %ecx
   1df63:      	cmpq	$0x0, %rdx
   1df67:      	cmoveq	%rcx, %rax
   1df6b:      	cmpq	$0x0, %rax
   1df6f:      	jne	0x1df78 <core::option::Option<&T>::copied::h407f2dbb8883a8af+0x28>
   1df71:      	movb	$0x0, 0xd(%rsp)
   1df76:      	jmp	0x1df8b <core::option::Option<&T>::copied::h407f2dbb8883a8af+0x3b>
   1df78:      	movq	(%rsp), %rax
   1df7c:      	movb	(%rax), %al
   1df7e:      	movb	%al, 0xf(%rsp)
   1df82:      	movb	%al, 0xe(%rsp)
   1df86:      	movb	$0x1, 0xd(%rsp)
   1df8b:      	movb	0xd(%rsp), %al
   1df8f:      	movb	0xe(%rsp), %dl
   1df93:      	addq	$0x10, %rsp
   1df97:      	retq
   1df98:      	int3
   1df99:      	int3
   1df9a:      	int3
   1df9b:      	int3
   1df9c:      	int3
   1df9d:      	int3
   1df9e:      	int3
   1df9f:      	int3

000000000001dfa0 <core::core_arch::x86::sse2::_mm_pause::hcdac469f38c3ead0>:
   1dfa0:      	pause
   1dfa2:      	retq
   1dfa3:      	int3
   1dfa4:      	int3
   1dfa5:      	int3
   1dfa6:      	int3
   1dfa7:      	int3
   1dfa8:      	int3
   1dfa9:      	int3
   1dfaa:      	int3
   1dfab:      	int3
   1dfac:      	int3
   1dfad:      	int3
   1dfae:      	int3
   1dfaf:      	int3

000000000001dfb0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::hc5afdc4e9c22d384>:
   1dfb0:      	subq	$0x10, %rsp
   1dfb4:      	movq	%rsi, %rdx
   1dfb7:      	movq	%rdi, %rax
   1dfba:      	movq	%rax, (%rsp)
   1dfbe:      	movq	%rdx, 0x8(%rsp)
   1dfc3:      	addq	$0x10, %rsp
   1dfc7:      	retq
   1dfc8:      	int3
   1dfc9:      	int3
   1dfca:      	int3
   1dfcb:      	int3
   1dfcc:      	int3
   1dfcd:      	int3
   1dfce:      	int3
   1dfcf:      	int3

000000000001dfd0 <x86_64::instructions::port::PortGeneric<T,A>::new::h4fe1bbdd20b09390>:
   1dfd0:      	subq	$0x4, %rsp
   1dfd4:      	movw	%di, %ax
   1dfd7:      	movw	%ax, 0x2(%rsp)
   1dfdc:      	movw	%ax, (%rsp)
   1dfe0:      	movw	(%rsp), %ax
   1dfe4:      	addq	$0x4, %rsp
   1dfe8:      	retq
   1dfe9:      	int3
   1dfea:      	int3
   1dfeb:      	int3
   1dfec:      	int3
   1dfed:      	int3
   1dfee:      	int3
   1dfef:      	int3

000000000001dff0 <x86_64::instructions::port::PortGeneric<T,A>::new::had732a2833ab6af6>:
   1dff0:      	subq	$0x4, %rsp
   1dff4:      	movw	%di, %ax
   1dff7:      	movw	%ax, 0x2(%rsp)
   1dffc:      	movw	%ax, (%rsp)
   1e000:      	movw	(%rsp), %ax
   1e004:      	addq	$0x4, %rsp
   1e008:      	retq
   1e009:      	int3
   1e00a:      	int3
   1e00b:      	int3
   1e00c:      	int3
   1e00d:      	int3
   1e00e:      	int3
   1e00f:      	int3

000000000001e010 <x86_64::instructions::port::PortGeneric<T,A>::new::hca5d23295100c4e7>:
   1e010:      	subq	$0x4, %rsp
   1e014:      	movw	%di, %ax
   1e017:      	movw	%ax, 0x2(%rsp)
   1e01c:      	movw	%ax, (%rsp)
   1e020:      	movw	(%rsp), %ax
   1e024:      	addq	$0x4, %rsp
   1e028:      	retq
   1e029:      	int3
   1e02a:      	int3
   1e02b:      	int3
   1e02c:      	int3
   1e02d:      	int3
   1e02e:      	int3
   1e02f:      	int3

000000000001e030 <x86_64::instructions::port::PortGeneric<T,A>::read::h344b0c35249e482c>:
   1e030:      	pushq	%rax
   1e031:      	movq	%rdi, (%rsp)
   1e035:      	movw	(%rdi), %ax
   1e038:      	movw	%ax, %di
   1e03b:      	callq	0x1e0b0 <x86_64::instructions::port::<impl x86_64::structures::port::PortRead for u8>::read_from_port::h9e7fae9eb928c6e2>
   1e040:      	popq	%rcx
   1e041:      	retq
   1e042:      	int3
   1e043:      	int3
   1e044:      	int3
   1e045:      	int3
   1e046:      	int3
   1e047:      	int3
   1e048:      	int3
   1e049:      	int3
   1e04a:      	int3
   1e04b:      	int3
   1e04c:      	int3
   1e04d:      	int3
   1e04e:      	int3
   1e04f:      	int3

000000000001e050 <x86_64::instructions::port::PortGeneric<T,A>::write::h99e0152235978dc2>:
   1e050:      	subq	$0x18, %rsp
   1e054:      	movb	%sil, %al
   1e057:      	movq	%rdi, 0x8(%rsp)
   1e05c:      	movb	%al, 0x17(%rsp)
   1e060:      	movw	(%rdi), %cx
   1e063:      	movw	%cx, %di
   1e066:      	movzbl	%al, %esi
   1e069:      	callq	0x1e0d0 <x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port::hd184eb67c9492f1b>
   1e06e:      	addq	$0x18, %rsp
   1e072:      	retq
   1e073:      	int3
   1e074:      	int3
   1e075:      	int3
   1e076:      	int3
   1e077:      	int3
   1e078:      	int3
   1e079:      	int3
   1e07a:      	int3
   1e07b:      	int3
   1e07c:      	int3
   1e07d:      	int3
   1e07e:      	int3
   1e07f:      	int3

000000000001e080 <x86_64::instructions::port::PortGeneric<T,A>::write::hd6d8880e0a6c2b59>:
   1e080:      	subq	$0x18, %rsp
   1e084:      	movb	%sil, %al
   1e087:      	movq	%rdi, 0x8(%rsp)
   1e08c:      	movb	%al, 0x17(%rsp)
   1e090:      	movw	(%rdi), %cx
   1e093:      	movw	%cx, %di
   1e096:      	movzbl	%al, %esi
   1e099:      	callq	0x1e0d0 <x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port::hd184eb67c9492f1b>
   1e09e:      	addq	$0x18, %rsp
   1e0a2:      	retq
   1e0a3:      	int3
   1e0a4:      	int3
   1e0a5:      	int3
   1e0a6:      	int3
   1e0a7:      	int3
   1e0a8:      	int3
   1e0a9:      	int3
   1e0aa:      	int3
   1e0ab:      	int3
   1e0ac:      	int3
   1e0ad:      	int3
   1e0ae:      	int3
   1e0af:      	int3

000000000001e0b0 <x86_64::instructions::port::<impl x86_64::structures::port::PortRead for u8>::read_from_port::h9e7fae9eb928c6e2>:
   1e0b0:      	subq	$0x4, %rsp
   1e0b4:      	movw	%di, %dx
   1e0b7:      	movw	%dx, 0x2(%rsp)
   1e0bc:      	inb	%dx, %al
   1e0bd:      	movb	%al, 0x1(%rsp)
   1e0c1:      	movb	0x1(%rsp), %al
   1e0c5:      	addq	$0x4, %rsp
   1e0c9:      	retq
   1e0ca:      	int3
   1e0cb:      	int3
   1e0cc:      	int3
   1e0cd:      	int3
   1e0ce:      	int3
   1e0cf:      	int3

000000000001e0d0 <x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port::hd184eb67c9492f1b>:
   1e0d0:      	subq	$0x4, %rsp
   1e0d4:      	movb	%sil, %al
   1e0d7:      	movw	%di, %dx
   1e0da:      	movw	%dx, (%rsp)
   1e0de:      	movb	%al, 0x3(%rsp)
   1e0e2:      	outb	%al, %dx
   1e0e3:      	addq	$0x4, %rsp
   1e0e7:      	retq
   1e0e8:      	int3
   1e0e9:      	int3
   1e0ea:      	int3
   1e0eb:      	int3
   1e0ec:      	int3
   1e0ed:      	int3
   1e0ee:      	int3
   1e0ef:      	int3

000000000001e0f0 <<core::str::iter::Bytes as core::iter::traits::iterator::Iterator>::next::h52224f687b08ff06>:
   1e0f0:      	pushq	%rax
   1e0f1:      	movq	%rdi, (%rsp)
   1e0f5:      	movq	0x1d3ac(%rip), %rax     # 0x3b4a8 <zlgk82z0l71lvh9+0x3b4a8>
   1e0fc:      	callq	*%rax
   1e0fe:      	andb	$0x1, %al
   1e100:      	popq	%rcx
   1e101:      	retq
   1e102:      	int3
   1e103:      	int3
   1e104:      	int3
   1e105:      	int3
   1e106:      	int3
   1e107:      	int3
   1e108:      	int3
   1e109:      	int3
   1e10a:      	int3
   1e10b:      	int3
   1e10c:      	int3
   1e10d:      	int3
   1e10e:      	int3
   1e10f:      	int3

000000000001e110 <uart_16550::port::SerialPort::new::h72010d96be04a55f>:
   1e110:      	subq	$0x28, %rsp
   1e114:      	movq	%rdi, 0x10(%rsp)
   1e119:      	movw	%si, %ax
   1e11c:      	movw	%ax, 0x20(%rsp)
   1e121:      	movq	%rdi, 0x18(%rsp)
   1e126:      	movw	%ax, 0x26(%rsp)
   1e12b:      	movw	%ax, %di
   1e12e:      	movq	0x1d34b(%rip), %rax     # 0x3b480 <zlgk82z0l71lvh9+0x3b480>
   1e135:      	callq	*%rax
   1e137:      	movw	%ax, %cx
   1e13a:      	movw	0x20(%rsp), %ax
   1e13f:      	movw	%cx, 0x22(%rsp)
   1e144:      	addw	$0x1, %ax
   1e148:      	movw	%ax, 0x24(%rsp)
   1e14d:      	setb	%al
   1e150:      	testb	$0x1, %al
   1e152:      	jne	0x1e184 <uart_16550::port::SerialPort::new::h72010d96be04a55f+0x74>
   1e154:      	movw	0x24(%rsp), %ax
   1e159:      	movw	%ax, %di
   1e15c:      	movq	0x1d375(%rip), %rax     # 0x3b4d8 <zlgk82z0l71lvh9+0x3b4d8>
   1e163:      	callq	*%rax
   1e165:      	movw	%ax, %cx
   1e168:      	movw	0x20(%rsp), %ax
   1e16d:      	movw	%cx, 0xc(%rsp)
   1e172:      	addw	$0x2, %ax
   1e176:      	movw	%ax, 0xe(%rsp)
   1e17b:      	setb	%al
   1e17e:      	testb	$0x1, %al
   1e180:      	jne	0x1e1d2 <uart_16550::port::SerialPort::new::h72010d96be04a55f+0xc2>
   1e182:      	jmp	0x1e1a2 <uart_16550::port::SerialPort::new::h72010d96be04a55f+0x92>
   1e184:      	leaq	-0xd08b(%rip), %rdi     # 0x11100 <str.0>
   1e18b:      	leaq	0x1b96e(%rip), %rdx     # 0x39b00 <zlgk82z0l71lvh9+0x39b00>
   1e192:      	movq	0x1cd37(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1e199:      	movl	$0x1c, %esi
   1e19e:      	callq	*%rax
   1e1a0:      	ud2
   1e1a2:      	movw	0xe(%rsp), %ax
   1e1a7:      	movw	%ax, %di
   1e1aa:      	movq	0x1d327(%rip), %rax     # 0x3b4d8 <zlgk82z0l71lvh9+0x3b4d8>
   1e1b1:      	callq	*%rax
   1e1b3:      	movw	%ax, %cx
   1e1b6:      	movw	0x20(%rsp), %ax
   1e1bb:      	movw	%cx, 0x8(%rsp)
   1e1c0:      	addw	$0x3, %ax
   1e1c4:      	movw	%ax, 0xa(%rsp)
   1e1c9:      	setb	%al
   1e1cc:      	testb	$0x1, %al
   1e1ce:      	jne	0x1e220 <uart_16550::port::SerialPort::new::h72010d96be04a55f+0x110>
   1e1d0:      	jmp	0x1e1f0 <uart_16550::port::SerialPort::new::h72010d96be04a55f+0xe0>
   1e1d2:      	leaq	-0xd0d9(%rip), %rdi     # 0x11100 <str.0>
   1e1d9:      	leaq	0x1b938(%rip), %rdx     # 0x39b18 <zlgk82z0l71lvh9+0x39b18>
   1e1e0:      	movq	0x1cce9(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1e1e7:      	movl	$0x1c, %esi
   1e1ec:      	callq	*%rax
   1e1ee:      	ud2
   1e1f0:      	movw	0xa(%rsp), %ax
   1e1f5:      	movw	%ax, %di
   1e1f8:      	movq	0x1d2d9(%rip), %rax     # 0x3b4d8 <zlgk82z0l71lvh9+0x3b4d8>
   1e1ff:      	callq	*%rax
   1e201:      	movw	%ax, %cx
   1e204:      	movw	0x20(%rsp), %ax
   1e209:      	movw	%cx, 0x4(%rsp)
   1e20e:      	addw	$0x4, %ax
   1e212:      	movw	%ax, 0x6(%rsp)
   1e217:      	setb	%al
   1e21a:      	testb	$0x1, %al
   1e21c:      	jne	0x1e26d <uart_16550::port::SerialPort::new::h72010d96be04a55f+0x15d>
   1e21e:      	jmp	0x1e23e <uart_16550::port::SerialPort::new::h72010d96be04a55f+0x12e>
   1e220:      	leaq	-0xd127(%rip), %rdi     # 0x11100 <str.0>
   1e227:      	leaq	0x1b902(%rip), %rdx     # 0x39b30 <zlgk82z0l71lvh9+0x39b30>
   1e22e:      	movq	0x1cc9b(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1e235:      	movl	$0x1c, %esi
   1e23a:      	callq	*%rax
   1e23c:      	ud2
   1e23e:      	movw	0x6(%rsp), %ax
   1e243:      	movw	%ax, %di
   1e246:      	movq	0x1d28b(%rip), %rax     # 0x3b4d8 <zlgk82z0l71lvh9+0x3b4d8>
   1e24d:      	callq	*%rax
   1e24f:      	movw	%ax, %cx
   1e252:      	movw	0x20(%rsp), %ax
   1e257:      	movw	%cx, (%rsp)
   1e25b:      	addw	$0x5, %ax
   1e25f:      	movw	%ax, 0x2(%rsp)
   1e264:      	setb	%al
   1e267:      	testb	$0x1, %al
   1e269:      	jne	0x1e2e3 <uart_16550::port::SerialPort::new::h72010d96be04a55f+0x1d3>
   1e26b:      	jmp	0x1e28b <uart_16550::port::SerialPort::new::h72010d96be04a55f+0x17b>
   1e26d:      	leaq	-0xd174(%rip), %rdi     # 0x11100 <str.0>
   1e274:      	leaq	0x1b8cd(%rip), %rdx     # 0x39b48 <zlgk82z0l71lvh9+0x39b48>
   1e27b:      	movq	0x1cc4e(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1e282:      	movl	$0x1c, %esi
   1e287:      	callq	*%rax
   1e289:      	ud2
   1e28b:      	movw	0x2(%rsp), %ax
   1e290:      	movw	%ax, %di
   1e293:      	movq	0x1d236(%rip), %rax     # 0x3b4d0 <zlgk82z0l71lvh9+0x3b4d0>
   1e29a:      	callq	*%rax
   1e29c:      	movw	0x22(%rsp), %r10w
   1e2a2:      	movw	0xc(%rsp), %r9w
   1e2a8:      	movw	0x8(%rsp), %r8w
   1e2ae:      	movw	0x4(%rsp), %di
   1e2b3:      	movw	(%rsp), %si
   1e2b7:      	movq	0x10(%rsp), %rcx
   1e2bc:      	movw	%ax, %dx
   1e2bf:      	movq	0x18(%rsp), %rax
   1e2c4:      	movw	%r10w, (%rcx)
   1e2c8:      	movw	%r9w, 0x2(%rcx)
   1e2cd:      	movw	%r8w, 0x4(%rcx)
   1e2d2:      	movw	%di, 0x6(%rcx)
   1e2d6:      	movw	%si, 0x8(%rcx)
   1e2da:      	movw	%dx, 0xa(%rcx)
   1e2de:      	addq	$0x28, %rsp
   1e2e2:      	retq
   1e2e3:      	leaq	-0xd1ea(%rip), %rdi     # 0x11100 <str.0>
   1e2ea:      	leaq	0x1b86f(%rip), %rdx     # 0x39b60 <zlgk82z0l71lvh9+0x39b60>
   1e2f1:      	movq	0x1cbd8(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1e2f8:      	movl	$0x1c, %esi
   1e2fd:      	callq	*%rax
   1e2ff:      	ud2
   1e301:      	int3
   1e302:      	int3
   1e303:      	int3
   1e304:      	int3
   1e305:      	int3
   1e306:      	int3
   1e307:      	int3
   1e308:      	int3
   1e309:      	int3
   1e30a:      	int3
   1e30b:      	int3
   1e30c:      	int3
   1e30d:      	int3
   1e30e:      	int3
   1e30f:      	int3

000000000001e310 <uart_16550::port::SerialPort::init::hb88956bb23a363fc>:
   1e310:      	subq	$0x18, %rsp
   1e314:      	movq	%rdi, 0x8(%rsp)
   1e319:      	movq	%rdi, 0x10(%rsp)
   1e31e:      	addq	$0x2, %rdi
   1e322:      	xorl	%eax, %eax
   1e324:      	movq	0x1d1c5(%rip), %rax     # 0x3b4f0 <zlgk82z0l71lvh9+0x3b4f0>
   1e32b:      	xorl	%esi, %esi
   1e32d:      	callq	*%rax
   1e32f:      	movq	0x8(%rsp), %rdi
   1e334:      	addq	$0x6, %rdi
   1e338:      	movq	0x1d1b1(%rip), %rax     # 0x3b4f0 <zlgk82z0l71lvh9+0x3b4f0>
   1e33f:      	movl	$0x80, %esi
   1e344:      	callq	*%rax
   1e346:      	movq	0x8(%rsp), %rdi
   1e34b:      	movq	0x1d1a6(%rip), %rax     # 0x3b4f8 <zlgk82z0l71lvh9+0x3b4f8>
   1e352:      	movl	$0x3, %esi
   1e357:      	callq	*%rax
   1e359:      	movq	0x8(%rsp), %rdi
   1e35e:      	addq	$0x2, %rdi
   1e362:      	xorl	%eax, %eax
   1e364:      	movq	0x1d185(%rip), %rax     # 0x3b4f0 <zlgk82z0l71lvh9+0x3b4f0>
   1e36b:      	xorl	%esi, %esi
   1e36d:      	callq	*%rax
   1e36f:      	movq	0x8(%rsp), %rdi
   1e374:      	addq	$0x6, %rdi
   1e378:      	movq	0x1d171(%rip), %rax     # 0x3b4f0 <zlgk82z0l71lvh9+0x3b4f0>
   1e37f:      	movl	$0x3, %esi
   1e384:      	callq	*%rax
   1e386:      	movq	0x8(%rsp), %rdi
   1e38b:      	addq	$0x4, %rdi
   1e38f:      	movq	0x1d15a(%rip), %rax     # 0x3b4f0 <zlgk82z0l71lvh9+0x3b4f0>
   1e396:      	movl	$0xc7, %esi
   1e39b:      	callq	*%rax
   1e39d:      	movq	0x8(%rsp), %rdi
   1e3a2:      	addq	$0x8, %rdi
   1e3a6:      	movq	0x1d143(%rip), %rax     # 0x3b4f0 <zlgk82z0l71lvh9+0x3b4f0>
   1e3ad:      	movl	$0xb, %esi
   1e3b2:      	callq	*%rax
   1e3b4:      	movq	0x8(%rsp), %rdi
   1e3b9:      	addq	$0x2, %rdi
   1e3bd:      	movq	0x1d12c(%rip), %rax     # 0x3b4f0 <zlgk82z0l71lvh9+0x3b4f0>
   1e3c4:      	movl	$0x1, %esi
   1e3c9:      	callq	*%rax
   1e3cb:      	addq	$0x18, %rsp
   1e3cf:      	retq

000000000001e3d0 <uart_16550::port::SerialPort::line_sts::h1e2dce808f6ea178>:
   1e3d0:      	pushq	%rax
   1e3d1:      	movq	%rdi, (%rsp)
   1e3d5:      	addq	$0xa, %rdi
   1e3d9:      	movq	0x1d108(%rip), %rax     # 0x3b4e8 <zlgk82z0l71lvh9+0x3b4e8>
   1e3e0:      	callq	*%rax
   1e3e2:      	movzbl	%al, %edi
   1e3e5:      	callq	0x1e5d0 <uart_16550::LineStsFlags::from_bits_truncate::h588f1b57c77a79f5>
   1e3ea:      	popq	%rcx
   1e3eb:      	retq
   1e3ec:      	int3
   1e3ed:      	int3
   1e3ee:      	int3
   1e3ef:      	int3

000000000001e3f0 <uart_16550::port::SerialPort::send::h310a0f8b68988f01>:
   1e3f0:      	subq	$0x28, %rsp
   1e3f4:      	movq	%rdi, 0x8(%rsp)
   1e3f9:      	movb	%sil, %al
   1e3fc:      	movb	%al, 0x13(%rsp)
   1e400:      	movq	%rdi, 0x18(%rsp)
   1e405:      	movb	%al, 0x27(%rsp)
   1e409:      	subb	$0x8, %al
   1e40b:      	je	0x1e443 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x53>
   1e40d:      	jmp	0x1e40f <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x1f>
   1e40f:      	movb	0x13(%rsp), %al
   1e413:      	subb	$0x7f, %al
   1e415:      	je	0x1e443 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x53>
   1e417:      	jmp	0x1e419 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x29>
   1e419:      	movq	0x8(%rsp), %rdi
   1e41e:      	callq	0x1e3d0 <uart_16550::port::SerialPort::line_sts::h1e2dce808f6ea178>
   1e423:      	movb	%al, 0x17(%rsp)
   1e427:      	leaq	0x17(%rsp), %rdi
   1e42c:      	movl	$0x20, %esi
   1e431:      	callq	0x1e600 <uart_16550::LineStsFlags::contains::h9b8c206c5e447498>
   1e436:      	testb	$0x1, %al
   1e438:      	jne	0x1e503 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x113>
   1e43e:      	jmp	0x1e4f9 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x109>
   1e443:      	movq	0x8(%rsp), %rdi
   1e448:      	callq	0x1e3d0 <uart_16550::port::SerialPort::line_sts::h1e2dce808f6ea178>
   1e44d:      	movb	%al, 0x14(%rsp)
   1e451:      	leaq	0x14(%rsp), %rdi
   1e456:      	movl	$0x20, %esi
   1e45b:      	callq	0x1e600 <uart_16550::LineStsFlags::contains::h9b8c206c5e447498>
   1e460:      	testb	$0x1, %al
   1e462:      	jne	0x1e46b <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x7b>
   1e464:      	callq	0x1dfa0 <core::core_arch::x86::sse2::_mm_pause::hcdac469f38c3ead0>
   1e469:      	jmp	0x1e443 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x53>
   1e46b:      	movq	0x8(%rsp), %rdi
   1e470:      	movq	0x1d081(%rip), %rax     # 0x3b4f8 <zlgk82z0l71lvh9+0x3b4f8>
   1e477:      	movl	$0x8, %esi
   1e47c:      	callq	*%rax
   1e47e:      	movq	0x8(%rsp), %rdi
   1e483:      	callq	0x1e3d0 <uart_16550::port::SerialPort::line_sts::h1e2dce808f6ea178>
   1e488:      	movb	%al, 0x15(%rsp)
   1e48c:      	leaq	0x15(%rsp), %rdi
   1e491:      	movl	$0x20, %esi
   1e496:      	callq	0x1e600 <uart_16550::LineStsFlags::contains::h9b8c206c5e447498>
   1e49b:      	testb	$0x1, %al
   1e49d:      	jne	0x1e4a6 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0xb6>
   1e49f:      	callq	0x1dfa0 <core::core_arch::x86::sse2::_mm_pause::hcdac469f38c3ead0>
   1e4a4:      	jmp	0x1e47e <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x8e>
   1e4a6:      	movq	0x8(%rsp), %rdi
   1e4ab:      	movq	0x1d046(%rip), %rax     # 0x3b4f8 <zlgk82z0l71lvh9+0x3b4f8>
   1e4b2:      	movl	$0x20, %esi
   1e4b7:      	callq	*%rax
   1e4b9:      	movq	0x8(%rsp), %rdi
   1e4be:      	callq	0x1e3d0 <uart_16550::port::SerialPort::line_sts::h1e2dce808f6ea178>
   1e4c3:      	movb	%al, 0x16(%rsp)
   1e4c7:      	leaq	0x16(%rsp), %rdi
   1e4cc:      	movl	$0x20, %esi
   1e4d1:      	callq	0x1e600 <uart_16550::LineStsFlags::contains::h9b8c206c5e447498>
   1e4d6:      	testb	$0x1, %al
   1e4d8:      	jne	0x1e4e1 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0xf1>
   1e4da:      	callq	0x1dfa0 <core::core_arch::x86::sse2::_mm_pause::hcdac469f38c3ead0>
   1e4df:      	jmp	0x1e4b9 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0xc9>
   1e4e1:      	movq	0x8(%rsp), %rdi
   1e4e6:      	movq	0x1d00b(%rip), %rax     # 0x3b4f8 <zlgk82z0l71lvh9+0x3b4f8>
   1e4ed:      	movl	$0x8, %esi
   1e4f2:      	callq	*%rax
   1e4f4:      	addq	$0x28, %rsp
   1e4f8:      	retq
   1e4f9:      	callq	0x1dfa0 <core::core_arch::x86::sse2::_mm_pause::hcdac469f38c3ead0>
   1e4fe:      	jmp	0x1e419 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x29>
   1e503:      	movq	0x8(%rsp), %rdi
   1e508:      	movb	0x13(%rsp), %al
   1e50c:      	movzbl	%al, %esi
   1e50f:      	movq	0x1cfe2(%rip), %rax     # 0x3b4f8 <zlgk82z0l71lvh9+0x3b4f8>
   1e516:      	callq	*%rax
   1e518:      	jmp	0x1e4f4 <uart_16550::port::SerialPort::send::h310a0f8b68988f01+0x104>
   1e51a:      	int3
   1e51b:      	int3
   1e51c:      	int3
   1e51d:      	int3
   1e51e:      	int3
   1e51f:      	int3

000000000001e520 <<uart_16550::port::SerialPort as core::fmt::Write>::write_str::h56ab45122b63210c>:
   1e520:      	subq	$0x58, %rsp
   1e524:      	movq	%rdx, (%rsp)
   1e528:      	movq	%rsi, %rax
   1e52b:      	movq	(%rsp), %rsi
   1e52f:      	movq	%rax, 0x8(%rsp)
   1e534:      	movq	%rdi, %rax
   1e537:      	movq	0x8(%rsp), %rdi
   1e53c:      	movq	%rax, 0x10(%rsp)
   1e541:      	movq	%rax, 0x38(%rsp)
   1e546:      	movq	%rdi, 0x40(%rsp)
   1e54b:      	movq	%rsi, 0x48(%rsp)
   1e550:      	callq	0x1deb0 <core::str::<impl str>::bytes::h01c7e149d3a2c45e>
   1e555:      	movq	%rax, %rdi
   1e558:      	movq	%rdx, %rsi
   1e55b:      	movq	0x1cf66(%rip), %rax     # 0x3b4c8 <zlgk82z0l71lvh9+0x3b4c8>
   1e562:      	callq	*%rax
   1e564:      	movq	%rax, 0x20(%rsp)
   1e569:      	movq	%rdx, 0x28(%rsp)
   1e56e:      	leaq	0x20(%rsp), %rdi
   1e573:      	callq	0x1e0f0 <<core::str::iter::Bytes as core::iter::traits::iterator::Iterator>::next::h52224f687b08ff06>
   1e578:      	movb	%dl, 0x37(%rsp)
   1e57c:      	movb	%al, 0x36(%rsp)
   1e580:      	movb	0x36(%rsp), %al
   1e584:      	andb	$0x1, %al
   1e586:      	movzbl	%al, %eax
   1e589:      	cmpq	$0x0, %rax
   1e58d:      	jne	0x1e5a2 <<uart_16550::port::SerialPort as core::fmt::Write>::write_str::h56ab45122b63210c+0x82>
   1e58f:      	movb	$0x0, 0x1f(%rsp)
   1e594:      	movb	0x1f(%rsp), %al
   1e598:      	andb	$0x1, %al
   1e59a:      	movzbl	%al, %eax
   1e59d:      	addq	$0x58, %rsp
   1e5a1:      	retq
   1e5a2:      	movq	0x10(%rsp), %rdi
   1e5a7:      	movb	0x37(%rsp), %al
   1e5ab:      	movb	%al, 0x57(%rsp)
   1e5af:      	movzbl	%al, %esi
   1e5b2:      	movq	0x1cf47(%rip), %rax     # 0x3b500 <zlgk82z0l71lvh9+0x3b500>
   1e5b9:      	callq	*%rax
   1e5bb:      	jmp	0x1e56e <<uart_16550::port::SerialPort as core::fmt::Write>::write_str::h56ab45122b63210c+0x4e>
   1e5bd:      	int3
   1e5be:      	int3
   1e5bf:      	int3

000000000001e5c0 <uart_16550::LineStsFlags::all::hf27baa2f4c69748a>:
   1e5c0:      	subq	$0x1, %rsp
   1e5c4:      	movb	$0x21, (%rsp)
   1e5c8:      	movb	(%rsp), %al
   1e5cb:      	addq	$0x1, %rsp
   1e5cf:      	retq

000000000001e5d0 <uart_16550::LineStsFlags::from_bits_truncate::h588f1b57c77a79f5>:
   1e5d0:      	pushq	%rax
   1e5d1:      	movb	%dil, %al
   1e5d4:      	movb	%al, 0x5(%rsp)
   1e5d8:      	movb	%al, 0x7(%rsp)
   1e5dc:      	callq	0x1e5c0 <uart_16550::LineStsFlags::all::hf27baa2f4c69748a>
   1e5e1:      	movb	%al, %cl
   1e5e3:      	movb	0x5(%rsp), %al
   1e5e7:      	andb	%cl, %al
   1e5e9:      	movb	%al, 0x6(%rsp)
   1e5ed:      	movb	0x6(%rsp), %al
   1e5f1:      	popq	%rcx
   1e5f2:      	retq
   1e5f3:      	int3
   1e5f4:      	int3
   1e5f5:      	int3
   1e5f6:      	int3
   1e5f7:      	int3
   1e5f8:      	int3
   1e5f9:      	int3
   1e5fa:      	int3
   1e5fb:      	int3
   1e5fc:      	int3
   1e5fd:      	int3
   1e5fe:      	int3
   1e5ff:      	int3

000000000001e600 <uart_16550::LineStsFlags::contains::h9b8c206c5e447498>:
   1e600:      	subq	$0x10, %rsp
   1e604:      	movb	%sil, %cl
   1e607:      	movq	%rdi, (%rsp)
   1e60b:      	movb	%cl, 0xf(%rsp)
   1e60f:      	movb	%cl, %al
   1e611:      	andb	(%rdi), %al
   1e613:      	cmpb	%cl, %al
   1e615:      	sete	%al
   1e618:      	andb	$0x1, %al
   1e61a:      	movzbl	%al, %eax
   1e61d:      	addq	$0x10, %rsp
   1e621:      	retq
   1e622:      	int3
   1e623:      	int3
   1e624:      	int3
   1e625:      	int3
   1e626:      	int3
   1e627:      	int3
   1e628:      	int3
   1e629:      	int3
   1e62a:      	int3
   1e62b:      	int3
   1e62c:      	int3
   1e62d:      	int3
   1e62e:      	int3
   1e62f:      	int3

000000000001e630 <core::fmt::Arguments::new_const::h6012810db05629a5>:
   1e630:      	subq	$0x78, %rsp
   1e634:      	movq	%rdx, 0x8(%rsp)
   1e639:      	movq	%rsi, 0x10(%rsp)
   1e63e:      	movq	%rdi, 0x18(%rsp)
   1e643:      	movq	%rdi, 0x20(%rsp)
   1e648:      	movq	%rsi, 0x68(%rsp)
   1e64d:      	movq	%rdx, 0x70(%rsp)
   1e652:      	cmpq	$0x1, %rdx
   1e656:      	ja	0x1e6a6 <core::fmt::Arguments::new_const::h6012810db05629a5+0x76>
   1e658:      	movq	0x20(%rsp), %rax
   1e65d:      	movq	0x18(%rsp), %rcx
   1e662:      	movq	0x8(%rsp), %rdx
   1e667:      	movq	0x10(%rsp), %rsi
   1e66c:      	movq	$0x0, 0x58(%rsp)
   1e675:      	movq	%rsi, (%rcx)
   1e678:      	movq	%rdx, 0x8(%rcx)
   1e67c:      	movq	0x58(%rsp), %rsi
   1e681:      	movq	0x60(%rsp), %rdx
   1e686:      	movq	%rsi, 0x20(%rcx)
   1e68a:      	movq	%rdx, 0x28(%rcx)
   1e68e:      	leaq	-0xd4cd(%rip), %rdx     # 0x111c8 <str.0+0xc8>
   1e695:      	movq	%rdx, 0x10(%rcx)
   1e699:      	movq	$0x0, 0x18(%rcx)
   1e6a1:      	addq	$0x78, %rsp
   1e6a5:      	retq
   1e6a6:      	leaq	0x1b4cb(%rip), %rsi     # 0x39b78 <zlgk82z0l71lvh9+0x39b78>
   1e6ad:      	leaq	0x28(%rsp), %rdi
   1e6b2:      	movq	%rdi, (%rsp)
   1e6b6:      	movl	$0x1, %edx
   1e6bb:      	callq	0x1e630 <core::fmt::Arguments::new_const::h6012810db05629a5>
   1e6c0:      	movq	(%rsp), %rdi
   1e6c4:      	leaq	0x1b4bd(%rip), %rsi     # 0x39b88 <zlgk82z0l71lvh9+0x39b88>
   1e6cb:      	movq	0x1c7ee(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1e6d2:      	callq	*%rax
   1e6d4:      	ud2
   1e6d6:      	int3
   1e6d7:      	int3
   1e6d8:      	int3
   1e6d9:      	int3
   1e6da:      	int3
   1e6db:      	int3
   1e6dc:      	int3
   1e6dd:      	int3
   1e6de:      	int3
   1e6df:      	int3

000000000001e6e0 <core::ops::function::FnOnce::call_once::h28a1bfa40771e123>:
   1e6e0:      	subq	$0x28, %rsp
   1e6e4:      	movq	%rdi, %rax
   1e6e7:      	movq	%rax, 0x8(%rsp)
   1e6ec:      	movq	%rsi, 0x10(%rsp)
   1e6f1:      	movq	%rdx, 0x18(%rsp)
   1e6f6:      	movq	0x10(%rsp), %rsi
   1e6fb:      	movq	0x18(%rsp), %rdx
   1e700:      	callq	0x1f860 <log::MaybeStaticStr::Static::h2931b18c3c0a033d>
   1e705:      	movq	0x8(%rsp), %rax
   1e70a:      	addq	$0x28, %rsp
   1e70e:      	retq
   1e70f:      	int3

000000000001e710 <core::ptr::drop_in_place<&()>::h4cf490ba81d4698c>:
   1e710:      	pushq	%rax
   1e711:      	movq	%rdi, (%rsp)
   1e715:      	popq	%rax
   1e716:      	retq
   1e717:      	int3
   1e718:      	int3
   1e719:      	int3
   1e71a:      	int3
   1e71b:      	int3
   1e71c:      	int3
   1e71d:      	int3
   1e71e:      	int3
   1e71f:      	int3

000000000001e720 <core::ptr::drop_in_place<log::NopLogger>::hb1ef819fd8cccb6c>:
   1e720:      	pushq	%rax
   1e721:      	movq	%rdi, (%rsp)
   1e725:      	popq	%rax
   1e726:      	retq
   1e727:      	int3
   1e728:      	int3
   1e729:      	int3
   1e72a:      	int3
   1e72b:      	int3
   1e72c:      	int3
   1e72d:      	int3
   1e72e:      	int3
   1e72f:      	int3

000000000001e730 <core::sync::atomic::AtomicUsize::compare_exchange::h3d72f133ffc09556>:
   1e730:      	subq	$0x28, %rsp
   1e734:      	movb	%r8b, %al
   1e737:      	movq	%rdi, (%rsp)
   1e73b:      	movq	%rsi, 0x8(%rsp)
   1e740:      	movq	%rdx, 0x10(%rsp)
   1e745:      	movb	%cl, 0x1e(%rsp)
   1e749:      	movb	%al, 0x1f(%rsp)
   1e74d:      	movq	%rdi, 0x20(%rsp)
   1e752:      	movzbl	%cl, %ecx
   1e755:      	movzbl	%al, %r8d
   1e759:      	movq	0x1ca50(%rip), %rax     # 0x3b1b0 <zlgk82z0l71lvh9+0x3b1b0>
   1e760:      	callq	*%rax
   1e762:      	addq	$0x28, %rsp
   1e766:      	retq
   1e767:      	int3
   1e768:      	int3
   1e769:      	int3
   1e76a:      	int3
   1e76b:      	int3
   1e76c:      	int3
   1e76d:      	int3
   1e76e:      	int3
   1e76f:      	int3

000000000001e770 <core::sync::atomic::AtomicUsize::load::h651f1220d9268ef8>:
   1e770:      	subq	$0x18, %rsp
   1e774:      	movb	%sil, %al
   1e777:      	movq	%rdi, (%rsp)
   1e77b:      	movb	%al, 0xf(%rsp)
   1e77f:      	movq	%rdi, 0x10(%rsp)
   1e784:      	movzbl	%al, %esi
   1e787:      	movq	0x1ca2a(%rip), %rax     # 0x3b1b8 <zlgk82z0l71lvh9+0x3b1b8>
   1e78e:      	callq	*%rax
   1e790:      	addq	$0x18, %rsp
   1e794:      	retq
   1e795:      	int3
   1e796:      	int3
   1e797:      	int3
   1e798:      	int3
   1e799:      	int3
   1e79a:      	int3
   1e79b:      	int3
   1e79c:      	int3
   1e79d:      	int3
   1e79e:      	int3
   1e79f:      	int3

000000000001e7a0 <core::sync::atomic::AtomicUsize::store::h66809f34a1c6eb65>:
   1e7a0:      	subq	$0x28, %rsp
   1e7a4:      	movb	%dl, %al
   1e7a6:      	movq	%rdi, 0x8(%rsp)
   1e7ab:      	movq	%rsi, 0x10(%rsp)
   1e7b0:      	movb	%al, 0x1f(%rsp)
   1e7b4:      	movq	%rdi, 0x20(%rsp)
   1e7b9:      	movzbl	%al, %edx
   1e7bc:      	movq	0x1ca05(%rip), %rax     # 0x3b1c8 <zlgk82z0l71lvh9+0x3b1c8>
   1e7c3:      	callq	*%rax
   1e7c5:      	addq	$0x28, %rsp
   1e7c9:      	retq
   1e7ca:      	int3
   1e7cb:      	int3
   1e7cc:      	int3
   1e7cd:      	int3
   1e7ce:      	int3
   1e7cf:      	int3

000000000001e7d0 <core::sync::atomic::atomic_store::h1a7cfc77ac01d6df>:
   1e7d0:      	subq	$0xa8, %rsp
   1e7d7:      	movq	%rsi, 0x18(%rsp)
   1e7dc:      	movq	%rdi, 0x20(%rsp)
   1e7e1:      	movb	%dl, %al
   1e7e3:      	movb	%al, 0x37(%rsp)
   1e7e7:      	movq	%rdi, 0x98(%rsp)
   1e7ef:      	movq	%rsi, 0xa0(%rsp)
   1e7f7:      	movzbl	0x37(%rsp), %eax
   1e7fc:      	movq	%rax, 0x28(%rsp)
   1e801:      	movq	0x28(%rsp), %rax
   1e806:      	leaq	-0xd6f1(%rip), %rcx     # 0x1111c <str.0+0x1c>
   1e80d:      	movslq	(%rcx,%rax,4), %rax
   1e811:      	addq	%rcx, %rax
   1e814:      	jmpq	*%rax
   1e816:      	ud2
   1e818:      	movq	0x20(%rsp), %rax
   1e81d:      	movq	0x18(%rsp), %rcx
   1e822:      	movq	%rcx, (%rax)
   1e825:      	jmp	0x1e8aa <core::sync::atomic::atomic_store::h1a7cfc77ac01d6df+0xda>
   1e82a:      	movq	0x20(%rsp), %rax
   1e82f:      	movq	0x18(%rsp), %rcx
   1e834:      	movq	%rcx, (%rax)
   1e837:      	jmp	0x1e8aa <core::sync::atomic::atomic_store::h1a7cfc77ac01d6df+0xda>
   1e839:      	leaq	0x1b360(%rip), %rsi     # 0x39ba0 <zlgk82z0l71lvh9+0x39ba0>
   1e840:      	leaq	0x38(%rsp), %rdi
   1e845:      	movq	%rdi, 0x10(%rsp)
   1e84a:      	movl	$0x1, %edx
   1e84f:      	callq	0x1e630 <core::fmt::Arguments::new_const::h6012810db05629a5>
   1e854:      	movq	0x10(%rsp), %rdi
   1e859:      	leaq	0x1b350(%rip), %rsi     # 0x39bb0 <zlgk82z0l71lvh9+0x39bb0>
   1e860:      	movq	0x1c659(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1e867:      	callq	*%rax
   1e869:      	ud2
   1e86b:      	leaq	0x1b356(%rip), %rsi     # 0x39bc8 <zlgk82z0l71lvh9+0x39bc8>
   1e872:      	leaq	0x68(%rsp), %rdi
   1e877:      	movq	%rdi, 0x8(%rsp)
   1e87c:      	movl	$0x1, %edx
   1e881:      	callq	0x1e630 <core::fmt::Arguments::new_const::h6012810db05629a5>
   1e886:      	movq	0x8(%rsp), %rdi
   1e88b:      	leaq	0x1b346(%rip), %rsi     # 0x39bd8 <zlgk82z0l71lvh9+0x39bd8>
   1e892:      	movq	0x1c627(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1e899:      	callq	*%rax
   1e89b:      	ud2
   1e89d:      	movq	0x20(%rsp), %rcx
   1e8a2:      	movq	0x18(%rsp), %rax
   1e8a7:      	xchgq	%rax, (%rcx)
   1e8aa:      	addq	$0xa8, %rsp
   1e8b1:      	retq
   1e8b2:      	int3
   1e8b3:      	int3
   1e8b4:      	int3
   1e8b5:      	int3
   1e8b6:      	int3
   1e8b7:      	int3
   1e8b8:      	int3
   1e8b9:      	int3
   1e8ba:      	int3
   1e8bb:      	int3
   1e8bc:      	int3
   1e8bd:      	int3
   1e8be:      	int3
   1e8bf:      	int3

000000000001e8c0 <core::sync::atomic::spin_loop_hint::h558d93636e2df07d>:
   1e8c0:      	pushq	%rax
   1e8c1:      	callq	0x1eeb0 <core::core_arch::x86::sse2::_mm_pause::hb508f7aac88993d1>
   1e8c6:      	popq	%rax
   1e8c7:      	retq
   1e8c8:      	int3
   1e8c9:      	int3
   1e8ca:      	int3
   1e8cb:      	int3
   1e8cc:      	int3
   1e8cd:      	int3
   1e8ce:      	int3
   1e8cf:      	int3

000000000001e8d0 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df>:
   1e8d0:      	subq	$0x118, %rsp            # imm = 0x118
   1e8d7:      	movq	%rdx, 0x40(%rsp)
   1e8dc:      	movq	%rsi, 0x48(%rsp)
   1e8e1:      	movq	%rdi, 0x50(%rsp)
   1e8e6:      	movb	%r8b, %al
   1e8e9:      	movq	%rdi, 0xe8(%rsp)
   1e8f1:      	movq	%rsi, 0xf0(%rsp)
   1e8f9:      	movq	%rdx, 0xf8(%rsp)
   1e901:      	movb	%cl, 0x106(%rsp)
   1e908:      	movb	%al, 0x107(%rsp)
   1e90f:      	movb	%cl, 0x86(%rsp)
   1e916:      	movb	%al, 0x87(%rsp)
   1e91d:      	movzbl	0x86(%rsp), %eax
   1e925:      	movq	%rax, 0x58(%rsp)
   1e92a:      	movq	0x58(%rsp), %rax
   1e92f:      	leaq	-0xd806(%rip), %rcx     # 0x11130 <str.0+0x30>
   1e936:      	movslq	(%rcx,%rax,4), %rax
   1e93a:      	addq	%rcx, %rax
   1e93d:      	jmpq	*%rax
   1e93f:      	ud2
   1e941:      	movzbl	0x87(%rsp), %eax
   1e949:      	movq	%rax, 0x38(%rsp)
   1e94e:      	testq	%rax, %rax
   1e951:      	je	0x1ea80 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x1b0>
   1e957:      	jmp	0x1e959 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x89>
   1e959:      	movq	0x38(%rsp), %rax
   1e95e:      	subq	$0x2, %rax
   1e962:      	je	0x1eaa7 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x1d7>
   1e968:      	jmp	0x1e96a <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x9a>
   1e96a:      	movq	0x38(%rsp), %rax
   1e96f:      	subq	$0x4, %rax
   1e973:      	je	0x1eace <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x1fe>
   1e979:      	jmp	0x1ea69 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x199>
   1e97e:      	movzbl	0x87(%rsp), %eax
   1e986:      	movq	%rax, 0x30(%rsp)
   1e98b:      	testq	%rax, %rax
   1e98e:      	je	0x1eb22 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x252>
   1e994:      	jmp	0x1e996 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0xc6>
   1e996:      	movq	0x30(%rsp), %rax
   1e99b:      	subq	$0x2, %rax
   1e99f:      	je	0x1eb49 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x279>
   1e9a5:      	jmp	0x1e9a7 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0xd7>
   1e9a7:      	movq	0x30(%rsp), %rax
   1e9ac:      	subq	$0x4, %rax
   1e9b0:      	je	0x1eb70 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x2a0>
   1e9b6:      	jmp	0x1ea69 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x199>
   1e9bb:      	movzbl	0x87(%rsp), %eax
   1e9c3:      	movq	%rax, 0x28(%rsp)
   1e9c8:      	testq	%rax, %rax
   1e9cb:      	je	0x1eb9a <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x2ca>
   1e9d1:      	jmp	0x1e9d3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x103>
   1e9d3:      	movq	0x28(%rsp), %rax
   1e9d8:      	subq	$0x2, %rax
   1e9dc:      	je	0x1ebc4 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x2f4>
   1e9e2:      	jmp	0x1e9e4 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x114>
   1e9e4:      	movq	0x28(%rsp), %rax
   1e9e9:      	subq	$0x4, %rax
   1e9ed:      	je	0x1ebee <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x31e>
   1e9f3:      	jmp	0x1ea69 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x199>
   1e9f5:      	movzbl	0x87(%rsp), %eax
   1e9fd:      	movq	%rax, 0x20(%rsp)
   1ea02:      	testq	%rax, %rax
   1ea05:      	je	0x1ec18 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x348>
   1ea0b:      	jmp	0x1ea0d <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x13d>
   1ea0d:      	movq	0x20(%rsp), %rax
   1ea12:      	subq	$0x2, %rax
   1ea16:      	je	0x1ec42 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x372>
   1ea1c:      	jmp	0x1ea1e <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x14e>
   1ea1e:      	movq	0x20(%rsp), %rax
   1ea23:      	subq	$0x4, %rax
   1ea27:      	je	0x1ec6c <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x39c>
   1ea2d:      	jmp	0x1ea69 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x199>
   1ea2f:      	movzbl	0x87(%rsp), %eax
   1ea37:      	movq	%rax, 0x18(%rsp)
   1ea3c:      	testq	%rax, %rax
   1ea3f:      	je	0x1ec96 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x3c6>
   1ea45:      	jmp	0x1ea47 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x177>
   1ea47:      	movq	0x18(%rsp), %rax
   1ea4c:      	subq	$0x2, %rax
   1ea50:      	je	0x1ecc0 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x3f0>
   1ea56:      	jmp	0x1ea58 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x188>
   1ea58:      	movq	0x18(%rsp), %rax
   1ea5d:      	subq	$0x4, %rax
   1ea61:      	je	0x1ecea <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x41a>
   1ea67:      	jmp	0x1ea69 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x199>
   1ea69:      	movzbl	0x87(%rsp), %eax
   1ea71:      	cmpq	$0x1, %rax
   1ea75:      	je	0x1ed4e <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x47e>
   1ea7b:      	jmp	0x1ed83 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x4b3>
   1ea80:      	movq	0x50(%rsp), %rcx
   1ea85:      	movq	0x40(%rsp), %rdx
   1ea8a:      	movq	0x48(%rsp), %rax
   1ea8f:      	lock
   1ea90:      	cmpxchgq	%rdx, (%rcx)
   1ea94:      	movq	%rax, %rcx
   1ea97:      	sete	%al
   1ea9a:      	andb	$0x1, %al
   1ea9c:      	movq	%rcx, 0x70(%rsp)
   1eaa1:      	movb	%al, 0x78(%rsp)
   1eaa5:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1eaa7:      	movq	0x50(%rsp), %rcx
   1eaac:      	movq	0x40(%rsp), %rdx
   1eab1:      	movq	0x48(%rsp), %rax
   1eab6:      	lock
   1eab7:      	cmpxchgq	%rdx, (%rcx)
   1eabb:      	movq	%rax, %rcx
   1eabe:      	sete	%al
   1eac1:      	andb	$0x1, %al
   1eac3:      	movq	%rcx, 0x70(%rsp)
   1eac8:      	movb	%al, 0x78(%rsp)
   1eacc:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1eace:      	movq	0x50(%rsp), %rcx
   1ead3:      	movq	0x40(%rsp), %rdx
   1ead8:      	movq	0x48(%rsp), %rax
   1eadd:      	lock
   1eade:      	cmpxchgq	%rdx, (%rcx)
   1eae2:      	movq	%rax, %rcx
   1eae5:      	sete	%al
   1eae8:      	andb	$0x1, %al
   1eaea:      	movq	%rcx, 0x70(%rsp)
   1eaef:      	movb	%al, 0x78(%rsp)
   1eaf3:      	movq	0x70(%rsp), %rax
   1eaf8:      	movq	%rax, 0x10(%rsp)
   1eafd:      	movq	%rax, 0x108(%rsp)
   1eb05:      	movb	0x78(%rsp), %al
   1eb09:      	movb	%al, %cl
   1eb0b:      	andb	$0x1, %cl
   1eb0e:      	movb	%cl, 0x117(%rsp)
   1eb15:      	testb	$0x1, %al
   1eb17:      	jne	0x1ed29 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x459>
   1eb1d:      	jmp	0x1ed14 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x444>
   1eb22:      	movq	0x50(%rsp), %rcx
   1eb27:      	movq	0x40(%rsp), %rdx
   1eb2c:      	movq	0x48(%rsp), %rax
   1eb31:      	lock
   1eb32:      	cmpxchgq	%rdx, (%rcx)
   1eb36:      	movq	%rax, %rcx
   1eb39:      	sete	%al
   1eb3c:      	andb	$0x1, %al
   1eb3e:      	movq	%rcx, 0x70(%rsp)
   1eb43:      	movb	%al, 0x78(%rsp)
   1eb47:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1eb49:      	movq	0x50(%rsp), %rcx
   1eb4e:      	movq	0x40(%rsp), %rdx
   1eb53:      	movq	0x48(%rsp), %rax
   1eb58:      	lock
   1eb59:      	cmpxchgq	%rdx, (%rcx)
   1eb5d:      	movq	%rax, %rcx
   1eb60:      	sete	%al
   1eb63:      	andb	$0x1, %al
   1eb65:      	movq	%rcx, 0x70(%rsp)
   1eb6a:      	movb	%al, 0x78(%rsp)
   1eb6e:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1eb70:      	movq	0x50(%rsp), %rcx
   1eb75:      	movq	0x40(%rsp), %rdx
   1eb7a:      	movq	0x48(%rsp), %rax
   1eb7f:      	lock
   1eb80:      	cmpxchgq	%rdx, (%rcx)
   1eb84:      	movq	%rax, %rcx
   1eb87:      	sete	%al
   1eb8a:      	andb	$0x1, %al
   1eb8c:      	movq	%rcx, 0x70(%rsp)
   1eb91:      	movb	%al, 0x78(%rsp)
   1eb95:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1eb9a:      	movq	0x50(%rsp), %rcx
   1eb9f:      	movq	0x40(%rsp), %rdx
   1eba4:      	movq	0x48(%rsp), %rax
   1eba9:      	lock
   1ebaa:      	cmpxchgq	%rdx, (%rcx)
   1ebae:      	movq	%rax, %rcx
   1ebb1:      	sete	%al
   1ebb4:      	andb	$0x1, %al
   1ebb6:      	movq	%rcx, 0x70(%rsp)
   1ebbb:      	movb	%al, 0x78(%rsp)
   1ebbf:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ebc4:      	movq	0x50(%rsp), %rcx
   1ebc9:      	movq	0x40(%rsp), %rdx
   1ebce:      	movq	0x48(%rsp), %rax
   1ebd3:      	lock
   1ebd4:      	cmpxchgq	%rdx, (%rcx)
   1ebd8:      	movq	%rax, %rcx
   1ebdb:      	sete	%al
   1ebde:      	andb	$0x1, %al
   1ebe0:      	movq	%rcx, 0x70(%rsp)
   1ebe5:      	movb	%al, 0x78(%rsp)
   1ebe9:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ebee:      	movq	0x50(%rsp), %rcx
   1ebf3:      	movq	0x40(%rsp), %rdx
   1ebf8:      	movq	0x48(%rsp), %rax
   1ebfd:      	lock
   1ebfe:      	cmpxchgq	%rdx, (%rcx)
   1ec02:      	movq	%rax, %rcx
   1ec05:      	sete	%al
   1ec08:      	andb	$0x1, %al
   1ec0a:      	movq	%rcx, 0x70(%rsp)
   1ec0f:      	movb	%al, 0x78(%rsp)
   1ec13:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ec18:      	movq	0x50(%rsp), %rcx
   1ec1d:      	movq	0x40(%rsp), %rdx
   1ec22:      	movq	0x48(%rsp), %rax
   1ec27:      	lock
   1ec28:      	cmpxchgq	%rdx, (%rcx)
   1ec2c:      	movq	%rax, %rcx
   1ec2f:      	sete	%al
   1ec32:      	andb	$0x1, %al
   1ec34:      	movq	%rcx, 0x70(%rsp)
   1ec39:      	movb	%al, 0x78(%rsp)
   1ec3d:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ec42:      	movq	0x50(%rsp), %rcx
   1ec47:      	movq	0x40(%rsp), %rdx
   1ec4c:      	movq	0x48(%rsp), %rax
   1ec51:      	lock
   1ec52:      	cmpxchgq	%rdx, (%rcx)
   1ec56:      	movq	%rax, %rcx
   1ec59:      	sete	%al
   1ec5c:      	andb	$0x1, %al
   1ec5e:      	movq	%rcx, 0x70(%rsp)
   1ec63:      	movb	%al, 0x78(%rsp)
   1ec67:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ec6c:      	movq	0x50(%rsp), %rcx
   1ec71:      	movq	0x40(%rsp), %rdx
   1ec76:      	movq	0x48(%rsp), %rax
   1ec7b:      	lock
   1ec7c:      	cmpxchgq	%rdx, (%rcx)
   1ec80:      	movq	%rax, %rcx
   1ec83:      	sete	%al
   1ec86:      	andb	$0x1, %al
   1ec88:      	movq	%rcx, 0x70(%rsp)
   1ec8d:      	movb	%al, 0x78(%rsp)
   1ec91:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ec96:      	movq	0x50(%rsp), %rcx
   1ec9b:      	movq	0x40(%rsp), %rdx
   1eca0:      	movq	0x48(%rsp), %rax
   1eca5:      	lock
   1eca6:      	cmpxchgq	%rdx, (%rcx)
   1ecaa:      	movq	%rax, %rcx
   1ecad:      	sete	%al
   1ecb0:      	andb	$0x1, %al
   1ecb2:      	movq	%rcx, 0x70(%rsp)
   1ecb7:      	movb	%al, 0x78(%rsp)
   1ecbb:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ecc0:      	movq	0x50(%rsp), %rcx
   1ecc5:      	movq	0x40(%rsp), %rdx
   1ecca:      	movq	0x48(%rsp), %rax
   1eccf:      	lock
   1ecd0:      	cmpxchgq	%rdx, (%rcx)
   1ecd4:      	movq	%rax, %rcx
   1ecd7:      	sete	%al
   1ecda:      	andb	$0x1, %al
   1ecdc:      	movq	%rcx, 0x70(%rsp)
   1ece1:      	movb	%al, 0x78(%rsp)
   1ece5:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ecea:      	movq	0x50(%rsp), %rcx
   1ecef:      	movq	0x40(%rsp), %rdx
   1ecf4:      	movq	0x48(%rsp), %rax
   1ecf9:      	lock
   1ecfa:      	cmpxchgq	%rdx, (%rcx)
   1ecfe:      	movq	%rax, %rcx
   1ed01:      	sete	%al
   1ed04:      	andb	$0x1, %al
   1ed06:      	movq	%rcx, 0x70(%rsp)
   1ed0b:      	movb	%al, 0x78(%rsp)
   1ed0f:      	jmp	0x1eaf3 <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x223>
   1ed14:      	movq	0x10(%rsp), %rax
   1ed19:      	movq	%rax, 0x68(%rsp)
   1ed1e:      	movq	$0x1, 0x60(%rsp)
   1ed27:      	jmp	0x1ed3c <core::sync::atomic::atomic_compare_exchange::h6f04336a085369df+0x46c>
   1ed29:      	movq	0x10(%rsp), %rax
   1ed2e:      	movq	%rax, 0x68(%rsp)
   1ed33:      	movq	$0x0, 0x60(%rsp)
   1ed3c:      	movq	0x60(%rsp), %rax
   1ed41:      	movq	0x68(%rsp), %rdx
   1ed46:      	addq	$0x118, %rsp            # imm = 0x118
   1ed4d:      	retq
   1ed4e:      	leaq	0x1ae9b(%rip), %rsi     # 0x39bf0 <zlgk82z0l71lvh9+0x39bf0>
   1ed55:      	leaq	0xb8(%rsp), %rdi
   1ed5d:      	movq	%rdi, 0x8(%rsp)
   1ed62:      	movl	$0x1, %edx
   1ed67:      	callq	0x1e630 <core::fmt::Arguments::new_const::h6012810db05629a5>
   1ed6c:      	movq	0x8(%rsp), %rdi
   1ed71:      	leaq	0x1ae88(%rip), %rsi     # 0x39c00 <zlgk82z0l71lvh9+0x39c00>
   1ed78:      	movq	0x1c141(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1ed7f:      	callq	*%rax
   1ed81:      	ud2
   1ed83:      	leaq	0x1ae8e(%rip), %rsi     # 0x39c18 <zlgk82z0l71lvh9+0x39c18>
   1ed8a:      	leaq	0x88(%rsp), %rdi
   1ed92:      	movq	%rdi, (%rsp)
   1ed96:      	movl	$0x1, %edx
   1ed9b:      	callq	0x1e630 <core::fmt::Arguments::new_const::h6012810db05629a5>
   1eda0:      	movq	(%rsp), %rdi
   1eda4:      	leaq	0x1ae7d(%rip), %rsi     # 0x39c28 <zlgk82z0l71lvh9+0x39c28>
   1edab:      	movq	0x1c10e(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1edb2:      	callq	*%rax
   1edb4:      	ud2
   1edb6:      	int3
   1edb7:      	int3
   1edb8:      	int3
   1edb9:      	int3
   1edba:      	int3
   1edbb:      	int3
   1edbc:      	int3
   1edbd:      	int3
   1edbe:      	int3
   1edbf:      	int3

000000000001edc0 <core::option::Option<T>::map::h3058626e737aa359>:
   1edc0:      	subq	$0x68, %rsp
   1edc4:      	movq	%rdi, 0x8(%rsp)
   1edc9:      	movq	%rdi, 0x10(%rsp)
   1edce:      	movq	%rsi, 0x18(%rsp)
   1edd3:      	movq	%rdx, 0x20(%rsp)
   1edd8:      	movb	$0x0, 0x56(%rsp)
   1eddd:      	movb	$0x1, 0x56(%rsp)
   1ede2:      	movq	0x18(%rsp), %rdx
   1ede7:      	movl	$0x1, %eax
   1edec:      	xorl	%ecx, %ecx
   1edee:      	cmpq	$0x0, %rdx
   1edf2:      	cmoveq	%rcx, %rax
   1edf6:      	cmpq	$0x0, %rax
   1edfa:      	jne	0x1ee0a <core::option::Option<T>::map::h3058626e737aa359+0x4a>
   1edfc:      	movq	0x8(%rsp), %rax
   1ee01:      	movq	$0x2, (%rax)
   1ee08:      	jmp	0x1ee60 <core::option::Option<T>::map::h3058626e737aa359+0xa0>
   1ee0a:      	movq	0x18(%rsp), %rcx
   1ee0f:      	movq	0x20(%rsp), %rax
   1ee14:      	movq	%rcx, 0x58(%rsp)
   1ee19:      	movq	%rax, 0x60(%rsp)
   1ee1e:      	movb	$0x0, 0x56(%rsp)
   1ee23:      	movq	%rcx, 0x40(%rsp)
   1ee28:      	movq	%rax, 0x48(%rsp)
   1ee2d:      	movq	0x40(%rsp), %rsi
   1ee32:      	movq	0x48(%rsp), %rdx
   1ee37:      	leaq	0x28(%rsp), %rdi
   1ee3c:      	callq	0x1e6e0 <core::ops::function::FnOnce::call_once::h28a1bfa40771e123>
   1ee41:      	movq	0x8(%rsp), %rax
   1ee46:      	movq	0x28(%rsp), %rcx
   1ee4b:      	movq	%rcx, (%rax)
   1ee4e:      	movq	0x30(%rsp), %rcx
   1ee53:      	movq	%rcx, 0x8(%rax)
   1ee57:      	movq	0x38(%rsp), %rcx
   1ee5c:      	movq	%rcx, 0x10(%rax)
   1ee60:      	testb	$0x1, 0x56(%rsp)
   1ee65:      	jne	0x1ee71 <core::option::Option<T>::map::h3058626e737aa359+0xb1>
   1ee67:      	movq	0x10(%rsp), %rax
   1ee6c:      	addq	$0x68, %rsp
   1ee70:      	retq
   1ee71:      	jmp	0x1ee67 <core::option::Option<T>::map::h3058626e737aa359+0xa7>
   1ee73:      	int3
   1ee74:      	int3
   1ee75:      	int3
   1ee76:      	int3
   1ee77:      	int3
   1ee78:      	int3
   1ee79:      	int3
   1ee7a:      	int3
   1ee7b:      	int3
   1ee7c:      	int3
   1ee7d:      	int3
   1ee7e:      	int3
   1ee7f:      	int3

000000000001ee80 <core::option::Option<T>::is_some::ha18c055ec97f1a45>:
   1ee80:      	pushq	%rax
   1ee81:      	movq	%rdi, (%rsp)
   1ee85:      	movq	(%rdi), %rdx
   1ee88:      	movl	$0x1, %eax
   1ee8d:      	xorl	%ecx, %ecx
   1ee8f:      	cmpq	$0x0, %rdx
   1ee93:      	cmoveq	%rcx, %rax
   1ee97:      	cmpq	$0x1, %rax
   1ee9b:      	sete	%al
   1ee9e:      	andb	$0x1, %al
   1eea0:      	movzbl	%al, %eax
   1eea3:      	popq	%rcx
   1eea4:      	retq
   1eea5:      	int3
   1eea6:      	int3
   1eea7:      	int3
   1eea8:      	int3
   1eea9:      	int3
   1eeaa:      	int3
   1eeab:      	int3
   1eeac:      	int3
   1eead:      	int3
   1eeae:      	int3
   1eeaf:      	int3

000000000001eeb0 <core::core_arch::x86::sse2::_mm_pause::hb508f7aac88993d1>:
   1eeb0:      	pause
   1eeb2:      	retq
   1eeb3:      	int3
   1eeb4:      	int3
   1eeb5:      	int3
   1eeb6:      	int3
   1eeb7:      	int3
   1eeb8:      	int3
   1eeb9:      	int3
   1eeba:      	int3
   1eebb:      	int3
   1eebc:      	int3
   1eebd:      	int3
   1eebe:      	int3
   1eebf:      	int3

000000000001eec0 <<core::fmt::Arguments as core::clone::Clone>::clone::h3d8749eb5802e964>:
   1eec0:      	pushq	%rax
   1eec1:      	movq	%rdi, %rax
   1eec4:      	movq	%rsi, (%rsp)
   1eec8:      	movq	0x28(%rsi), %rcx
   1eecc:      	movq	%rcx, 0x28(%rdi)
   1eed0:      	movq	0x20(%rsi), %rcx
   1eed4:      	movq	%rcx, 0x20(%rdi)
   1eed8:      	movq	0x18(%rsi), %rcx
   1eedc:      	movq	%rcx, 0x18(%rdi)
   1eee0:      	movq	0x10(%rsi), %rcx
   1eee4:      	movq	%rcx, 0x10(%rdi)
   1eee8:      	movq	(%rsi), %rcx
   1eeeb:      	movq	0x8(%rsi), %rdx
   1eeef:      	movq	%rdx, 0x8(%rdi)
   1eef3:      	movq	%rcx, (%rdi)
   1eef6:      	popq	%rcx
   1eef7:      	retq
   1eef8:      	int3
   1eef9:      	int3
   1eefa:      	int3
   1eefb:      	int3
   1eefc:      	int3
   1eefd:      	int3
   1eefe:      	int3
   1eeff:      	int3

000000000001ef00 <<core::option::Option<T> as core::clone::Clone>::clone::hba1fa147eba4e0e3>:
   1ef00:      	subq	$0x48, %rsp
   1ef04:      	movq	%rsi, 0x8(%rsp)
   1ef09:      	movq	%rdi, 0x10(%rsp)
   1ef0e:      	movq	%rdi, 0x18(%rsp)
   1ef13:      	movq	%rsi, 0x38(%rsp)
   1ef18:      	movl	$0x1, %eax
   1ef1d:      	xorl	%ecx, %ecx
   1ef1f:      	cmpq	$0x2, (%rsi)
   1ef23:      	cmoveq	%rcx, %rax
   1ef27:      	cmpq	$0x0, %rax
   1ef2b:      	jne	0x1ef3b <<core::option::Option<T> as core::clone::Clone>::clone::hba1fa147eba4e0e3+0x3b>
   1ef2d:      	movq	0x10(%rsp), %rax
   1ef32:      	movq	$0x2, (%rax)
   1ef39:      	jmp	0x1ef6e <<core::option::Option<T> as core::clone::Clone>::clone::hba1fa147eba4e0e3+0x6e>
   1ef3b:      	movq	0x8(%rsp), %rsi
   1ef40:      	movq	%rsi, 0x40(%rsp)
   1ef45:      	leaq	0x20(%rsp), %rdi
   1ef4a:      	callq	0x1f890 <<log::MaybeStaticStr as core::clone::Clone>::clone::h640919df8e39701c>
   1ef4f:      	movq	0x10(%rsp), %rax
   1ef54:      	movq	0x20(%rsp), %rcx
   1ef59:      	movq	%rcx, (%rax)
   1ef5c:      	movq	0x28(%rsp), %rcx
   1ef61:      	movq	%rcx, 0x8(%rax)
   1ef65:      	movq	0x30(%rsp), %rcx
   1ef6a:      	movq	%rcx, 0x10(%rax)
   1ef6e:      	movq	0x18(%rsp), %rax
   1ef73:      	addq	$0x48, %rsp
   1ef77:      	retq
   1ef78:      	int3
   1ef79:      	int3
   1ef7a:      	int3
   1ef7b:      	int3
   1ef7c:      	int3
   1ef7d:      	int3
   1ef7e:      	int3
   1ef7f:      	int3

000000000001ef80 <<core::option::Option<T> as core::clone::Clone>::clone::he7541d07777da739>:
   1ef80:      	subq	$0x28, %rsp
   1ef84:      	movq	%rdi, (%rsp)
   1ef88:      	movq	%rdi, 0x10(%rsp)
   1ef8d:      	movl	(%rdi), %eax
   1ef8f:      	cmpq	$0x0, %rax
   1ef93:      	jne	0x1ef9f <<core::option::Option<T> as core::clone::Clone>::clone::he7541d07777da739+0x1f>
   1ef95:      	movl	$0x0, 0x8(%rsp)
   1ef9d:      	jmp	0x1efc3 <<core::option::Option<T> as core::clone::Clone>::clone::he7541d07777da739+0x43>
   1ef9f:      	movq	(%rsp), %rax
   1efa3:      	movq	%rax, %rcx
   1efa6:      	addq	$0x4, %rcx
   1efaa:      	movq	%rcx, 0x18(%rsp)
   1efaf:      	movq	%rcx, 0x20(%rsp)
   1efb4:      	movl	0x4(%rax), %eax
   1efb7:      	movl	%eax, 0xc(%rsp)
   1efbb:      	movl	$0x1, 0x8(%rsp)
   1efc3:      	movl	0x8(%rsp), %eax
   1efc7:      	movl	0xc(%rsp), %edx
   1efcb:      	addq	$0x28, %rsp
   1efcf:      	retq

000000000001efd0 <<log::Level as core::fmt::Display>::fmt::h6c79fea22d99175f>:
   1efd0:      	subq	$0x18, %rsp
   1efd4:      	movq	%rsi, (%rsp)
   1efd8:      	movq	%rdi, 0x8(%rsp)
   1efdd:      	movq	%rsi, 0x10(%rsp)
   1efe2:      	movq	0x1c557(%rip), %rax     # 0x3b540 <zlgk82z0l71lvh9+0x3b540>
   1efe9:      	callq	*%rax
   1efeb:      	movq	(%rsp), %rdi
   1efef:      	movq	%rax, %rsi
   1eff2:      	movq	0x1c54f(%rip), %rax     # 0x3b548 <zlgk82z0l71lvh9+0x3b548>
   1eff9:      	callq	*%rax
   1effb:      	andb	$0x1, %al
   1effd:      	movzbl	%al, %eax
   1f000:      	addq	$0x18, %rsp
   1f004:      	retq
   1f005:      	int3
   1f006:      	int3
   1f007:      	int3
   1f008:      	int3
   1f009:      	int3
   1f00a:      	int3
   1f00b:      	int3
   1f00c:      	int3
   1f00d:      	int3
   1f00e:      	int3
   1f00f:      	int3

000000000001f010 <log::Level::as_str::hc0c5b88a80170a36>:
   1f010:      	subq	$0x18, %rsp
   1f014:      	movq	%rdi, 0x10(%rsp)
   1f019:      	movq	(%rdi), %rax
   1f01c:      	movq	%rax, 0x8(%rsp)
   1f021:      	movq	0x8(%rsp), %rax
   1f026:      	movq	%rax, (%rsp)
   1f02a:      	cmpq	$0x6, %rax
   1f02e:      	setb	%al
   1f031:      	testb	$0x1, %al
   1f033:      	jne	0x1f037 <log::Level::as_str::hc0c5b88a80170a36+0x27>
   1f035:      	jmp	0x1f054 <log::Level::as_str::hc0c5b88a80170a36+0x44>
   1f037:      	movq	(%rsp), %rcx
   1f03b:      	shlq	$0x4, %rcx
   1f03f:      	leaq	0x1ac2a(%rip), %rdx     # 0x39c70 <log::LOG_LEVEL_NAMES::ha9736777a93469be>
   1f046:      	movq	(%rcx,%rdx), %rax
   1f04a:      	movq	0x8(%rcx,%rdx), %rdx
   1f04f:      	addq	$0x18, %rsp
   1f053:      	retq
   1f054:      	movq	(%rsp), %rdi
   1f058:      	leaq	0x1ac71(%rip), %rdx     # 0x39cd0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x60>
   1f05f:      	movq	0x1bfb2(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   1f066:      	movl	$0x6, %esi
   1f06b:      	callq	*%rax
   1f06d:      	ud2
   1f06f:      	int3

000000000001f070 <log::Record::builder::h720c2998df783924>:
   1f070:      	pushq	%rax
   1f071:      	movq	%rdi, %rax
   1f074:      	movq	%rax, (%rsp)
   1f078:      	callq	0x1f090 <log::RecordBuilder::new::hd06a44a2811c5ba8>
   1f07d:      	movq	(%rsp), %rax
   1f081:      	popq	%rcx
   1f082:      	retq
   1f083:      	int3
   1f084:      	int3
   1f085:      	int3
   1f086:      	int3
   1f087:      	int3
   1f088:      	int3
   1f089:      	int3
   1f08a:      	int3
   1f08b:      	int3
   1f08c:      	int3
   1f08d:      	int3
   1f08e:      	int3
   1f08f:      	int3

000000000001f090 <log::RecordBuilder::new::hd06a44a2811c5ba8>:
   1f090:      	subq	$0x128, %rsp            # imm = 0x128
   1f097:      	movq	%rdi, (%rsp)
   1f09b:      	movq	%rdi, 0x8(%rsp)
   1f0a0:      	leaq	-0xdedf(%rip), %rsi     # 0x111c8 <str.0+0xc8>
   1f0a7:      	xorl	%eax, %eax
   1f0a9:      	movl	%eax, %edx
   1f0ab:      	leaq	0x90(%rsp), %rdi
   1f0b3:      	callq	0x1e630 <core::fmt::Arguments::new_const::h6012810db05629a5>
   1f0b8:      	leaq	0xd8(%rsp), %rdi
   1f0c0:      	callq	0x1f370 <log::Metadata::builder::h9008900c86607b98>
   1f0c5:      	leaq	0xc0(%rsp), %rdi
   1f0cd:      	leaq	0xd8(%rsp), %rsi
   1f0d5:      	callq	0x1f3e0 <log::MetadataBuilder::build::h5d63f5737c12db9c>
   1f0da:      	movq	(%rsp), %rdi
   1f0de:      	movq	0x8(%rsp), %rax
   1f0e3:      	movq	$0x2, 0xf0(%rsp)
   1f0ef:      	movq	$0x2, 0x108(%rsp)
   1f0fb:      	movl	$0x0, 0x120(%rsp)
   1f106:      	movq	0xc0(%rsp), %rcx
   1f10e:      	movq	%rcx, 0x40(%rsp)
   1f113:      	movq	0xc8(%rsp), %rcx
   1f11b:      	movq	%rcx, 0x48(%rsp)
   1f120:      	movq	0xd0(%rsp), %rcx
   1f128:      	movq	%rcx, 0x50(%rsp)
   1f12d:      	leaq	0x10(%rsp), %rcx
   1f132:      	addq	$0x50, %rcx
   1f136:      	movq	0xb8(%rsp), %rdx
   1f13e:      	movq	%rdx, 0x28(%rcx)
   1f142:      	movq	0xb0(%rsp), %rdx
   1f14a:      	movq	%rdx, 0x20(%rcx)
   1f14e:      	movq	0xa8(%rsp), %rdx
   1f156:      	movq	%rdx, 0x18(%rcx)
   1f15a:      	movq	0xa0(%rsp), %rdx
   1f162:      	movq	%rdx, 0x10(%rcx)
   1f166:      	movq	0x90(%rsp), %rdx
   1f16e:      	movq	0x98(%rsp), %rsi
   1f176:      	movq	%rsi, 0x8(%rcx)
   1f17a:      	movq	%rdx, (%rcx)
   1f17d:      	movq	0xf0(%rsp), %rcx
   1f185:      	movq	%rcx, 0x10(%rsp)
   1f18a:      	movq	0xf8(%rsp), %rcx
   1f192:      	movq	%rcx, 0x18(%rsp)
   1f197:      	movq	0x100(%rsp), %rcx
   1f19f:      	movq	%rcx, 0x20(%rsp)
   1f1a4:      	movq	0x108(%rsp), %rcx
   1f1ac:      	movq	%rcx, 0x28(%rsp)
   1f1b1:      	movq	0x110(%rsp), %rcx
   1f1b9:      	movq	%rcx, 0x30(%rsp)
   1f1be:      	movq	0x118(%rsp), %rcx
   1f1c6:      	movq	%rcx, 0x38(%rsp)
   1f1cb:      	movl	0x120(%rsp), %edx
   1f1d2:      	movl	0x124(%rsp), %ecx
   1f1d9:      	movl	%edx, 0x58(%rsp)
   1f1dd:      	movl	%ecx, 0x5c(%rsp)
   1f1e1:      	movl	$0x10, %ecx
   1f1e6:      	leaq	0x10(%rsp), %rsi
   1f1eb:      	rep		movsq	(%rsi), %es:(%rdi)
   1f1ee:      	addq	$0x128, %rsp            # imm = 0x128
   1f1f5:      	retq
   1f1f6:      	int3
   1f1f7:      	int3
   1f1f8:      	int3
   1f1f9:      	int3
   1f1fa:      	int3
   1f1fb:      	int3
   1f1fc:      	int3
   1f1fd:      	int3
   1f1fe:      	int3
   1f1ff:      	int3

000000000001f200 <log::RecordBuilder::args::hb49d55d1bb7d1366>:
   1f200:      	pushq	%rax
   1f201:      	movq	%rdi, %rax
   1f204:      	movq	%rax, (%rsp)
   1f208:      	movq	%rax, %rdi
   1f20b:      	addq	$0x50, %rdi
   1f20f:      	movq	0x28(%rsi), %rcx
   1f213:      	movq	%rcx, 0x28(%rdi)
   1f217:      	movq	0x20(%rsi), %rcx
   1f21b:      	movq	%rcx, 0x20(%rdi)
   1f21f:      	movq	0x18(%rsi), %rcx
   1f223:      	movq	%rcx, 0x18(%rdi)
   1f227:      	movq	0x10(%rsi), %rcx
   1f22b:      	movq	%rcx, 0x10(%rdi)
   1f22f:      	movq	(%rsi), %rcx
   1f232:      	movq	0x8(%rsi), %rdx
   1f236:      	movq	%rdx, 0x8(%rdi)
   1f23a:      	movq	%rcx, (%rdi)
   1f23d:      	popq	%rcx
   1f23e:      	retq
   1f23f:      	int3

000000000001f240 <log::RecordBuilder::level::hf3fa9aab817c4a9c>:
   1f240:      	subq	$0x10, %rsp
   1f244:      	movq	%rdi, %rax
   1f247:      	movq	%rax, (%rsp)
   1f24b:      	movq	%rsi, 0x8(%rsp)
   1f250:      	movq	%rsi, 0x30(%rax)
   1f254:      	addq	$0x10, %rsp
   1f258:      	retq
   1f259:      	int3
   1f25a:      	int3
   1f25b:      	int3
   1f25c:      	int3
   1f25d:      	int3
   1f25e:      	int3
   1f25f:      	int3

000000000001f260 <log::RecordBuilder::target::hb55c7af8dbc0e8a8>:
   1f260:      	subq	$0x18, %rsp
   1f264:      	movq	%rdi, %rax
   1f267:      	movq	%rax, (%rsp)
   1f26b:      	movq	%rsi, 0x8(%rsp)
   1f270:      	movq	%rdx, 0x10(%rsp)
   1f275:      	movq	%rsi, 0x38(%rax)
   1f279:      	movq	%rdx, 0x40(%rax)
   1f27d:      	addq	$0x18, %rsp
   1f281:      	retq
   1f282:      	int3
   1f283:      	int3
   1f284:      	int3
   1f285:      	int3
   1f286:      	int3
   1f287:      	int3
   1f288:      	int3
   1f289:      	int3
   1f28a:      	int3
   1f28b:      	int3
   1f28c:      	int3
   1f28d:      	int3
   1f28e:      	int3
   1f28f:      	int3

000000000001f290 <log::RecordBuilder::module_path_static::h1248f22d335ccbe6>:
   1f290:      	subq	$0x38, %rsp
   1f294:      	movq	%rdi, (%rsp)
   1f298:      	movq	%rdi, 0x20(%rsp)
   1f29d:      	movq	%rsi, 0x28(%rsp)
   1f2a2:      	movq	%rdx, 0x30(%rsp)
   1f2a7:      	movq	0x1c272(%rip), %rax     # 0x3b520 <zlgk82z0l71lvh9+0x3b520>
   1f2ae:      	leaq	0x8(%rsp), %rdi
   1f2b3:      	callq	*%rax
   1f2b5:      	movq	(%rsp), %rax
   1f2b9:      	movq	0x8(%rsp), %rcx
   1f2be:      	movq	%rcx, (%rax)
   1f2c1:      	movq	0x10(%rsp), %rcx
   1f2c6:      	movq	%rcx, 0x8(%rax)
   1f2ca:      	movq	0x18(%rsp), %rcx
   1f2cf:      	movq	%rcx, 0x10(%rax)
   1f2d3:      	addq	$0x38, %rsp
   1f2d7:      	retq
   1f2d8:      	int3
   1f2d9:      	int3
   1f2da:      	int3
   1f2db:      	int3
   1f2dc:      	int3
   1f2dd:      	int3
   1f2de:      	int3
   1f2df:      	int3

000000000001f2e0 <log::RecordBuilder::file_static::hf6e4799c597d7949>:
   1f2e0:      	subq	$0x38, %rsp
   1f2e4:      	movq	%rdi, (%rsp)
   1f2e8:      	movq	%rdi, 0x20(%rsp)
   1f2ed:      	movq	%rsi, 0x28(%rsp)
   1f2f2:      	movq	%rdx, 0x30(%rsp)
   1f2f7:      	movq	0x1c222(%rip), %rax     # 0x3b520 <zlgk82z0l71lvh9+0x3b520>
   1f2fe:      	leaq	0x8(%rsp), %rdi
   1f303:      	callq	*%rax
   1f305:      	movq	(%rsp), %rax
   1f309:      	movq	0x8(%rsp), %rcx
   1f30e:      	movq	%rcx, 0x18(%rax)
   1f312:      	movq	0x10(%rsp), %rcx
   1f317:      	movq	%rcx, 0x20(%rax)
   1f31b:      	movq	0x18(%rsp), %rcx
   1f320:      	movq	%rcx, 0x28(%rax)
   1f324:      	addq	$0x38, %rsp
   1f328:      	retq
   1f329:      	int3
   1f32a:      	int3
   1f32b:      	int3
   1f32c:      	int3
   1f32d:      	int3
   1f32e:      	int3
   1f32f:      	int3

000000000001f330 <log::RecordBuilder::line::hc6d71295f9b70e2d>:
   1f330:      	subq	$0x10, %rsp
   1f334:      	movq	%rdi, %rax
   1f337:      	movq	%rax, (%rsp)
   1f33b:      	movl	%esi, 0x8(%rsp)
   1f33f:      	movl	%edx, 0xc(%rsp)
   1f343:      	movl	%esi, 0x48(%rax)
   1f346:      	movl	%edx, 0x4c(%rax)
   1f349:      	addq	$0x10, %rsp
   1f34d:      	retq
   1f34e:      	int3
   1f34f:      	int3

000000000001f350 <log::RecordBuilder::build::h8e547bb2b59f40ab>:
   1f350:      	subq	$0x18, %rsp
   1f354:      	movq	%rdi, %rax
   1f357:      	movq	%rax, 0x8(%rsp)
   1f35c:      	movq	%rsi, 0x10(%rsp)
   1f361:      	callq	0x1f8b0 <<log::Record as core::clone::Clone>::clone::hfa6434a2aeab5736>
   1f366:      	movq	0x8(%rsp), %rax
   1f36b:      	addq	$0x18, %rsp
   1f36f:      	retq

000000000001f370 <log::Metadata::builder::h9008900c86607b98>:
   1f370:      	pushq	%rax
   1f371:      	movq	%rdi, %rax
   1f374:      	movq	%rax, (%rsp)
   1f378:      	callq	0x1f390 <log::MetadataBuilder::new::h008b95fd316df4b8>
   1f37d:      	movq	(%rsp), %rax
   1f381:      	popq	%rcx
   1f382:      	retq
   1f383:      	int3
   1f384:      	int3
   1f385:      	int3
   1f386:      	int3
   1f387:      	int3
   1f388:      	int3
   1f389:      	int3
   1f38a:      	int3
   1f38b:      	int3
   1f38c:      	int3
   1f38d:      	int3
   1f38e:      	int3
   1f38f:      	int3

000000000001f390 <log::MetadataBuilder::new::h008b95fd316df4b8>:
   1f390:      	subq	$0x20, %rsp
   1f394:      	movq	%rdi, %rax
   1f397:      	movq	$0x3, 0x18(%rsp)
   1f3a0:      	movq	0x18(%rsp), %rcx
   1f3a5:      	movq	%rcx, (%rsp)
   1f3a9:      	leaq	-0xe1e8(%rip), %rcx     # 0x111c8 <str.0+0xc8>
   1f3b0:      	movq	%rcx, 0x8(%rsp)
   1f3b5:      	movq	$0x0, 0x10(%rsp)
   1f3be:      	movq	(%rsp), %rcx
   1f3c2:      	movq	%rcx, (%rdi)
   1f3c5:      	movq	0x8(%rsp), %rcx
   1f3ca:      	movq	%rcx, 0x8(%rdi)
   1f3ce:      	movq	0x10(%rsp), %rcx
   1f3d3:      	movq	%rcx, 0x10(%rdi)
   1f3d7:      	addq	$0x20, %rsp
   1f3db:      	retq
   1f3dc:      	int3
   1f3dd:      	int3
   1f3de:      	int3
   1f3df:      	int3

000000000001f3e0 <log::MetadataBuilder::build::h5d63f5737c12db9c>:
   1f3e0:      	subq	$0x18, %rsp
   1f3e4:      	movq	%rdi, %rax
   1f3e7:      	movq	%rax, 0x8(%rsp)
   1f3ec:      	movq	%rsi, 0x10(%rsp)
   1f3f1:      	callq	0x1f9e0 <<log::Metadata as core::clone::Clone>::clone::hd3eb3684af6a92de>
   1f3f6:      	movq	0x8(%rsp), %rax
   1f3fb:      	addq	$0x18, %rsp
   1f3ff:      	retq

000000000001f400 <<log::NopLogger as log::Log>::enabled::h63f7bb95a8c3f10a>:
   1f400:      	subq	$0x10, %rsp
   1f404:      	movq	%rdi, (%rsp)
   1f408:      	movq	%rsi, 0x8(%rsp)
   1f40d:      	xorl	%eax, %eax
   1f40f:      	andb	$0x1, %al
   1f411:      	movzbl	%al, %eax
   1f414:      	addq	$0x10, %rsp
   1f418:      	retq
   1f419:      	int3
   1f41a:      	int3
   1f41b:      	int3
   1f41c:      	int3
   1f41d:      	int3
   1f41e:      	int3
   1f41f:      	int3

000000000001f420 <<log::NopLogger as log::Log>::log::h52f66a39429a9e70>:
   1f420:      	subq	$0x10, %rsp
   1f424:      	movq	%rdi, (%rsp)
   1f428:      	movq	%rsi, 0x8(%rsp)
   1f42d:      	addq	$0x10, %rsp
   1f431:      	retq
   1f432:      	int3
   1f433:      	int3
   1f434:      	int3
   1f435:      	int3
   1f436:      	int3
   1f437:      	int3
   1f438:      	int3
   1f439:      	int3
   1f43a:      	int3
   1f43b:      	int3
   1f43c:      	int3
   1f43d:      	int3
   1f43e:      	int3
   1f43f:      	int3

000000000001f440 <<log::NopLogger as log::Log>::flush::h7ef380cb51924f7c>:
   1f440:      	pushq	%rax
   1f441:      	movq	%rdi, (%rsp)
   1f445:      	popq	%rax
   1f446:      	retq
   1f447:      	int3
   1f448:      	int3
   1f449:      	int3
   1f44a:      	int3
   1f44b:      	int3
   1f44c:      	int3
   1f44d:      	int3
   1f44e:      	int3
   1f44f:      	int3

000000000001f450 <log::set_logger::hbb9f6340fee56ce5>:
   1f450:      	subq	$0x18, %rsp
   1f454:      	movq	%rdi, (%rsp)
   1f458:      	movq	%rsi, 0x8(%rsp)
   1f45d:      	movq	%rsp, %rax
   1f460:      	movq	%rax, 0x10(%rsp)
   1f465:      	movq	0x10(%rsp), %rdi
   1f46a:      	callq	0x1f4a0 <log::set_logger_inner::hec236fa8cb91b826>
   1f46f:      	andb	$0x1, %al
   1f471:      	movzbl	%al, %eax
   1f474:      	addq	$0x18, %rsp
   1f478:      	retq
   1f479:      	int3
   1f47a:      	int3
   1f47b:      	int3
   1f47c:      	int3
   1f47d:      	int3
   1f47e:      	int3
   1f47f:      	int3

000000000001f480 <log::set_logger::{{closure}}::hec22ada52ebcb6d9>:
   1f480:      	pushq	%rax
   1f481:      	movq	%rdi, (%rsp)
   1f485:      	movq	(%rsp), %rcx
   1f489:      	movq	(%rcx), %rax
   1f48c:      	movq	0x8(%rcx), %rdx
   1f490:      	popq	%rcx
   1f491:      	retq
   1f492:      	int3
   1f493:      	int3
   1f494:      	int3
   1f495:      	int3
   1f496:      	int3
   1f497:      	int3
   1f498:      	int3
   1f499:      	int3
   1f49a:      	int3
   1f49b:      	int3
   1f49c:      	int3
   1f49d:      	int3
   1f49e:      	int3
   1f49f:      	int3

000000000001f4a0 <log::set_logger_inner::hec236fa8cb91b826>:
   1f4a0:      	subq	$0x58, %rsp
   1f4a4:      	movq	%rdi, 0x10(%rsp)
   1f4a9:      	movq	%rdi, 0x48(%rsp)
   1f4ae:      	movb	$0x0, 0x47(%rsp)
   1f4b3:      	movb	$0x1, 0x47(%rsp)
   1f4b8:      	movb	$0x4, 0x36(%rsp)
   1f4bd:      	movb	$0x4, 0x37(%rsp)
   1f4c2:      	movzbl	0x37(%rsp), %r8d
   1f4c8:      	movzbl	0x36(%rsp), %ecx
   1f4cd:      	leaq	0x1fafc(%rip), %rdi     # 0x3efd0 <log::STATE::h9453e76d500348f8>
   1f4d4:      	xorl	%eax, %eax
   1f4d6:      	movl	%eax, %esi
   1f4d8:      	movl	$0x1, %edx
   1f4dd:      	callq	0x1e730 <core::sync::atomic::AtomicUsize::compare_exchange::h3d72f133ffc09556>
   1f4e2:      	movq	%rdx, 0x28(%rsp)
   1f4e7:      	movq	%rax, 0x20(%rsp)
   1f4ec:      	cmpq	$0x0, 0x20(%rsp)
   1f4f2:      	jne	0x1f500 <log::set_logger_inner::hec236fa8cb91b826+0x60>
   1f4f4:      	movq	0x28(%rsp), %rax
   1f4f9:      	movq	%rax, 0x38(%rsp)
   1f4fe:      	jmp	0x1f50a <log::set_logger_inner::hec236fa8cb91b826+0x6a>
   1f500:      	movq	0x28(%rsp), %rax
   1f505:      	movq	%rax, 0x38(%rsp)
   1f50a:      	movq	0x38(%rsp), %rax
   1f50f:      	movq	%rax, 0x8(%rsp)
   1f514:      	movq	%rax, 0x50(%rsp)
   1f519:      	testq	%rax, %rax
   1f51c:      	je	0x1f534 <log::set_logger_inner::hec236fa8cb91b826+0x94>
   1f51e:      	jmp	0x1f520 <log::set_logger_inner::hec236fa8cb91b826+0x80>
   1f520:      	movq	0x8(%rsp), %rax
   1f525:      	subq	$0x1, %rax
   1f529:      	je	0x1f575 <log::set_logger_inner::hec236fa8cb91b826+0xd5>
   1f52b:      	jmp	0x1f52d <log::set_logger_inner::hec236fa8cb91b826+0x8d>
   1f52d:      	movb	$0x1, 0x1f(%rsp)
   1f532:      	jmp	0x1f595 <log::set_logger_inner::hec236fa8cb91b826+0xf5>
   1f534:      	movq	0x10(%rsp), %rdi
   1f539:      	movb	$0x0, 0x47(%rsp)
   1f53e:      	callq	0x1f480 <log::set_logger::{{closure}}::hec22ada52ebcb6d9>
   1f543:      	movq	%rax, 0x1d986(%rip)     # 0x3ced0 <log::LOGGER::h034ceb6551ad4642>
   1f54a:      	movq	%rdx, 0x1d987(%rip)     # 0x3ced8 <log::LOGGER::h034ceb6551ad4642+0x8>
   1f551:      	movb	$0x4, 0x45(%rsp)
   1f556:      	movb	0x45(%rsp), %al
   1f55a:      	movzbl	%al, %edx
   1f55d:      	leaq	0x1fa6c(%rip), %rdi     # 0x3efd0 <log::STATE::h9453e76d500348f8>
   1f564:      	movl	$0x2, %esi
   1f569:      	callq	0x1e7a0 <core::sync::atomic::AtomicUsize::store::h66809f34a1c6eb65>
   1f56e:      	movb	$0x0, 0x1f(%rsp)
   1f573:      	jmp	0x1f595 <log::set_logger_inner::hec236fa8cb91b826+0xf5>
   1f575:      	movb	$0x4, 0x46(%rsp)
   1f57a:      	movb	0x46(%rsp), %al
   1f57e:      	movzbl	%al, %esi
   1f581:      	leaq	0x1fa48(%rip), %rdi     # 0x3efd0 <log::STATE::h9453e76d500348f8>
   1f588:      	callq	0x1e770 <core::sync::atomic::AtomicUsize::load::h651f1220d9268ef8>
   1f58d:      	cmpq	$0x1, %rax
   1f591:      	je	0x1f5a5 <log::set_logger_inner::hec236fa8cb91b826+0x105>
   1f593:      	jmp	0x1f59e <log::set_logger_inner::hec236fa8cb91b826+0xfe>
   1f595:      	testb	$0x1, 0x47(%rsp)
   1f59a:      	jne	0x1f5ba <log::set_logger_inner::hec236fa8cb91b826+0x11a>
   1f59c:      	jmp	0x1f5ac <log::set_logger_inner::hec236fa8cb91b826+0x10c>
   1f59e:      	movb	$0x1, 0x1f(%rsp)
   1f5a3:      	jmp	0x1f595 <log::set_logger_inner::hec236fa8cb91b826+0xf5>
   1f5a5:      	callq	0x1e8c0 <core::sync::atomic::spin_loop_hint::h558d93636e2df07d>
   1f5aa:      	jmp	0x1f575 <log::set_logger_inner::hec236fa8cb91b826+0xd5>
   1f5ac:      	movb	0x1f(%rsp), %al
   1f5b0:      	andb	$0x1, %al
   1f5b2:      	movzbl	%al, %eax
   1f5b5:      	addq	$0x58, %rsp
   1f5b9:      	retq
   1f5ba:      	jmp	0x1f5ac <log::set_logger_inner::hec236fa8cb91b826+0x10c>
   1f5bc:      	int3
   1f5bd:      	int3
   1f5be:      	int3
   1f5bf:      	int3

000000000001f5c0 <log::logger::hf34ee8740d6cb318>:
   1f5c0:      	subq	$0x18, %rsp
   1f5c4:      	movb	$0x4, 0x17(%rsp)
   1f5c9:      	movb	0x17(%rsp), %al
   1f5cd:      	movzbl	%al, %esi
   1f5d0:      	leaq	0x1f9f9(%rip), %rdi     # 0x3efd0 <log::STATE::h9453e76d500348f8>
   1f5d7:      	callq	0x1e770 <core::sync::atomic::AtomicUsize::load::h651f1220d9268ef8>
   1f5dc:      	cmpq	$0x2, %rax
   1f5e0:      	jne	0x1f5fb <log::logger::hf34ee8740d6cb318+0x3b>
   1f5e2:      	movq	0x1d8e7(%rip), %rcx     # 0x3ced0 <log::LOGGER::h034ceb6551ad4642>
   1f5e9:      	movq	0x1d8e8(%rip), %rax     # 0x3ced8 <log::LOGGER::h034ceb6551ad4642+0x8>
   1f5f0:      	movq	%rcx, (%rsp)
   1f5f4:      	movq	%rax, 0x8(%rsp)
   1f5f9:      	jmp	0x1f612 <log::logger::hf34ee8740d6cb318+0x52>
   1f5fb:      	leaq	-0xe26e(%rip), %rax     # 0x11394 <log::logger::NOP::hd0102fc29e41cf07>
   1f602:      	movq	%rax, (%rsp)
   1f606:      	leaq	0x1a633(%rip), %rax     # 0x39c40 <zlgk82z0l71lvh9+0x39c40>
   1f60d:      	movq	%rax, 0x8(%rsp)
   1f612:      	movq	(%rsp), %rax
   1f616:      	movq	0x8(%rsp), %rdx
   1f61b:      	addq	$0x18, %rsp
   1f61f:      	retq

000000000001f620 <log::__private_api::log::h2f4c096665e25501>:
   1f620:      	subq	$0x208, %rsp            # imm = 0x208
   1f627:      	movl	%ecx, 0x14(%rsp)
   1f62b:      	movq	%rsi, 0x18(%rsp)
   1f630:      	movq	%rdi, 0x20(%rsp)
   1f635:      	movq	%r8, 0x58(%rsp)
   1f63a:      	movq	%r9, 0x60(%rsp)
   1f63f:      	movq	%rsi, 0x190(%rsp)
   1f647:      	movq	%rdx, 0x198(%rsp)
   1f64f:      	movl	%ecx, 0x1a4(%rsp)
   1f656:      	movq	(%rdx), %rcx
   1f659:      	movq	%rcx, 0x28(%rsp)
   1f65e:      	movq	0x8(%rdx), %rax
   1f662:      	movq	%rax, 0x30(%rsp)
   1f667:      	movq	%rcx, 0x1a8(%rsp)
   1f66f:      	movq	%rax, 0x1b0(%rsp)
   1f677:      	movq	0x10(%rdx), %rcx
   1f67b:      	movq	%rcx, 0x38(%rsp)
   1f680:      	movq	0x18(%rdx), %rax
   1f684:      	movq	%rax, 0x40(%rsp)
   1f689:      	movq	%rcx, 0x1b8(%rsp)
   1f691:      	movq	%rax, 0x1c0(%rsp)
   1f699:      	movq	0x20(%rdx), %rcx
   1f69d:      	movq	%rcx, 0x48(%rsp)
   1f6a2:      	movq	0x28(%rdx), %rax
   1f6a6:      	movq	%rax, 0x50(%rsp)
   1f6ab:      	movq	%rcx, 0x1c8(%rsp)
   1f6b3:      	movq	%rax, 0x1d0(%rsp)
   1f6bb:      	movq	0x1be66(%rip), %rax     # 0x3b528 <zlgk82z0l71lvh9+0x3b528>
   1f6c2:      	leaq	0x58(%rsp), %rdi
   1f6c7:      	callq	*%rax
   1f6c9:      	testb	$0x1, %al
   1f6cb:      	jne	0x1f826 <log::__private_api::log::h2f4c096665e25501+0x206>
   1f6d1:      	movq	0x1be78(%rip), %rax     # 0x3b550 <zlgk82z0l71lvh9+0x3b550>
   1f6d8:      	callq	*%rax
   1f6da:      	movq	%rdx, 0x8(%rsp)
   1f6df:      	movq	%rax, (%rsp)
   1f6e3:      	leaq	0xe8(%rsp), %rdi
   1f6eb:      	callq	0x1f070 <log::Record::builder::h720c2998df783924>
   1f6f0:      	movq	0x20(%rsp), %rcx
   1f6f5:      	movq	0x28(%rcx), %rax
   1f6f9:      	movq	%rax, 0x200(%rsp)
   1f701:      	movq	0x20(%rcx), %rax
   1f705:      	movq	%rax, 0x1f8(%rsp)
   1f70d:      	movq	0x18(%rcx), %rax
   1f711:      	movq	%rax, 0x1f0(%rsp)
   1f719:      	movq	0x10(%rcx), %rax
   1f71d:      	movq	%rax, 0x1e8(%rsp)
   1f725:      	movq	(%rcx), %rax
   1f728:      	movq	0x8(%rcx), %rcx
   1f72c:      	movq	%rcx, 0x1e0(%rsp)
   1f734:      	movq	%rax, 0x1d8(%rsp)
   1f73c:      	leaq	0xe8(%rsp), %rdi
   1f744:      	leaq	0x1d8(%rsp), %rsi
   1f74c:      	callq	0x1f200 <log::RecordBuilder::args::hb49d55d1bb7d1366>
   1f751:      	movq	0x18(%rsp), %rsi
   1f756:      	movq	%rax, %rdi
   1f759:      	callq	0x1f240 <log::RecordBuilder::level::hf3fa9aab817c4a9c>
   1f75e:      	movq	0x28(%rsp), %rsi
   1f763:      	movq	0x30(%rsp), %rdx
   1f768:      	movq	%rax, %rdi
   1f76b:      	callq	0x1f260 <log::RecordBuilder::target::hb55c7af8dbc0e8a8>
   1f770:      	movq	0x38(%rsp), %rcx
   1f775:      	movq	%rax, %rdi
   1f778:      	movq	0x40(%rsp), %rax
   1f77d:      	movq	%rcx, 0x168(%rsp)
   1f785:      	movq	%rax, 0x170(%rsp)
   1f78d:      	movq	0x168(%rsp), %rsi
   1f795:      	movq	0x170(%rsp), %rdx
   1f79d:      	callq	0x1f290 <log::RecordBuilder::module_path_static::h1248f22d335ccbe6>
   1f7a2:      	movq	0x48(%rsp), %rcx
   1f7a7:      	movq	%rax, %rdi
   1f7aa:      	movq	0x50(%rsp), %rax
   1f7af:      	movq	%rcx, 0x178(%rsp)
   1f7b7:      	movq	%rax, 0x180(%rsp)
   1f7bf:      	movq	0x178(%rsp), %rsi
   1f7c7:      	movq	0x180(%rsp), %rdx
   1f7cf:      	callq	0x1f2e0 <log::RecordBuilder::file_static::hf6e4799c597d7949>
   1f7d4:      	movq	%rax, %rdi
   1f7d7:      	movl	0x14(%rsp), %eax
   1f7db:      	movl	%eax, 0x18c(%rsp)
   1f7e2:      	movl	$0x1, 0x188(%rsp)
   1f7ed:      	movl	0x188(%rsp), %esi
   1f7f4:      	movl	0x18c(%rsp), %edx
   1f7fb:      	callq	0x1f330 <log::RecordBuilder::line::hc6d71295f9b70e2d>
   1f800:      	movq	%rax, %rsi
   1f803:      	leaq	0x68(%rsp), %rdi
   1f808:      	callq	0x1f350 <log::RecordBuilder::build::h8e547bb2b59f40ab>
   1f80d:      	movq	(%rsp), %rdi
   1f811:      	movq	0x8(%rsp), %rdx
   1f816:      	leaq	0x68(%rsp), %rsi
   1f81b:      	callq	*0x20(%rdx)
   1f81e:      	addq	$0x208, %rsp            # imm = 0x208
   1f825:      	retq
   1f826:      	leaq	-0xe499(%rip), %rdi     # 0x11394 <log::logger::NOP::hd0102fc29e41cf07>
   1f82d:      	leaq	0x1a4b4(%rip), %rdx     # 0x39ce8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x78>
   1f834:      	movq	0x1b695(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   1f83b:      	movl	$0x55, %esi
   1f840:      	callq	*%rax
   1f842:      	ud2
   1f844:      	int3
   1f845:      	int3
   1f846:      	int3
   1f847:      	int3
   1f848:      	int3
   1f849:      	int3
   1f84a:      	int3
   1f84b:      	int3
   1f84c:      	int3
   1f84d:      	int3
   1f84e:      	int3
   1f84f:      	int3

000000000001f850 <<log::Level as core::clone::Clone>::clone::hc80997e3b6d92474>:
   1f850:      	pushq	%rax
   1f851:      	movq	%rdi, (%rsp)
   1f855:      	movq	(%rdi), %rax
   1f858:      	popq	%rcx
   1f859:      	retq
   1f85a:      	int3
   1f85b:      	int3
   1f85c:      	int3
   1f85d:      	int3
   1f85e:      	int3
   1f85f:      	int3

000000000001f860 <log::MaybeStaticStr::Static::h2931b18c3c0a033d>:
   1f860:      	subq	$0x10, %rsp
   1f864:      	movq	%rdi, %rax
   1f867:      	movq	%rsi, (%rsp)
   1f86b:      	movq	%rdx, 0x8(%rsp)
   1f870:      	movq	%rsi, 0x8(%rdi)
   1f874:      	movq	%rdx, 0x10(%rdi)
   1f878:      	movq	$0x0, (%rdi)
   1f87f:      	addq	$0x10, %rsp
   1f883:      	retq
   1f884:      	int3
   1f885:      	int3
   1f886:      	int3
   1f887:      	int3
   1f888:      	int3
   1f889:      	int3
   1f88a:      	int3
   1f88b:      	int3
   1f88c:      	int3
   1f88d:      	int3
   1f88e:      	int3
   1f88f:      	int3

000000000001f890 <<log::MaybeStaticStr as core::clone::Clone>::clone::h640919df8e39701c>:
   1f890:      	pushq	%rax
   1f891:      	movq	%rdi, %rax
   1f894:      	movq	%rsi, (%rsp)
   1f898:      	movq	(%rsi), %rcx
   1f89b:      	movq	%rcx, (%rdi)
   1f89e:      	movq	0x8(%rsi), %rcx
   1f8a2:      	movq	%rcx, 0x8(%rdi)
   1f8a6:      	movq	0x10(%rsi), %rcx
   1f8aa:      	movq	%rcx, 0x10(%rdi)
   1f8ae:      	popq	%rcx
   1f8af:      	retq

000000000001f8b0 <<log::Record as core::clone::Clone>::clone::hfa6434a2aeab5736>:
   1f8b0:      	subq	$0x98, %rsp
   1f8b7:      	movq	%rsi, (%rsp)
   1f8bb:      	movq	%rdi, 0x8(%rsp)
   1f8c0:      	movq	%rdi, 0x10(%rsp)
   1f8c5:      	movq	%rsi, 0x90(%rsp)
   1f8cd:      	addq	$0x30, %rsi
   1f8d1:      	leaq	0x18(%rsp), %rdi
   1f8d6:      	callq	0x1f9e0 <<log::Metadata as core::clone::Clone>::clone::hd3eb3684af6a92de>
   1f8db:      	movq	(%rsp), %rsi
   1f8df:      	addq	$0x50, %rsi
   1f8e3:      	leaq	0x30(%rsp), %rdi
   1f8e8:      	callq	0x1eec0 <<core::fmt::Arguments as core::clone::Clone>::clone::h3d8749eb5802e964>
   1f8ed:      	movq	(%rsp), %rsi
   1f8f1:      	movq	0x1bc38(%rip), %rax     # 0x3b530 <zlgk82z0l71lvh9+0x3b530>
   1f8f8:      	leaq	0x60(%rsp), %rdi
   1f8fd:      	callq	*%rax
   1f8ff:      	movq	(%rsp), %rsi
   1f903:      	addq	$0x18, %rsi
   1f907:      	movq	0x1bc22(%rip), %rax     # 0x3b530 <zlgk82z0l71lvh9+0x3b530>
   1f90e:      	leaq	0x78(%rsp), %rdi
   1f913:      	callq	*%rax
   1f915:      	movq	(%rsp), %rdi
   1f919:      	addq	$0x48, %rdi
   1f91d:      	movq	0x1bc14(%rip), %rax     # 0x3b538 <zlgk82z0l71lvh9+0x3b538>
   1f924:      	callq	*%rax
   1f926:      	movq	0x8(%rsp), %rdi
   1f92b:      	movl	%eax, %ecx
   1f92d:      	movq	0x10(%rsp), %rax
   1f932:      	movq	0x18(%rsp), %rsi
   1f937:      	movq	%rsi, 0x30(%rdi)
   1f93b:      	movq	0x20(%rsp), %rsi
   1f940:      	movq	%rsi, 0x38(%rdi)
   1f944:      	movq	0x28(%rsp), %rsi
   1f949:      	movq	%rsi, 0x40(%rdi)
   1f94d:      	movq	%rdi, %rsi
   1f950:      	addq	$0x50, %rsi
   1f954:      	movq	0x58(%rsp), %r8
   1f959:      	movq	%r8, 0x28(%rsi)
   1f95d:      	movq	0x50(%rsp), %r8
   1f962:      	movq	%r8, 0x20(%rsi)
   1f966:      	movq	0x48(%rsp), %r8
   1f96b:      	movq	%r8, 0x18(%rsi)
   1f96f:      	movq	0x40(%rsp), %r8
   1f974:      	movq	%r8, 0x10(%rsi)
   1f978:      	movq	0x30(%rsp), %r8
   1f97d:      	movq	0x38(%rsp), %r9
   1f982:      	movq	%r9, 0x8(%rsi)
   1f986:      	movq	%r8, (%rsi)
   1f989:      	movq	0x60(%rsp), %rsi
   1f98e:      	movq	%rsi, (%rdi)
   1f991:      	movq	0x68(%rsp), %rsi
   1f996:      	movq	%rsi, 0x8(%rdi)
   1f99a:      	movq	0x70(%rsp), %rsi
   1f99f:      	movq	%rsi, 0x10(%rdi)
   1f9a3:      	movq	0x78(%rsp), %rsi
   1f9a8:      	movq	%rsi, 0x18(%rdi)
   1f9ac:      	movq	0x80(%rsp), %rsi
   1f9b4:      	movq	%rsi, 0x20(%rdi)
   1f9b8:      	movq	0x88(%rsp), %rsi
   1f9c0:      	movq	%rsi, 0x28(%rdi)
   1f9c4:      	movl	%ecx, 0x48(%rdi)
   1f9c7:      	movl	%edx, 0x4c(%rdi)
   1f9ca:      	addq	$0x98, %rsp
   1f9d1:      	retq
   1f9d2:      	int3
   1f9d3:      	int3
   1f9d4:      	int3
   1f9d5:      	int3
   1f9d6:      	int3
   1f9d7:      	int3
   1f9d8:      	int3
   1f9d9:      	int3
   1f9da:      	int3
   1f9db:      	int3
   1f9dc:      	int3
   1f9dd:      	int3
   1f9de:      	int3
   1f9df:      	int3

000000000001f9e0 <<log::Metadata as core::clone::Clone>::clone::hd3eb3684af6a92de>:
   1f9e0:      	subq	$0x28, %rsp
   1f9e4:      	movq	%rsi, (%rsp)
   1f9e8:      	movq	%rdi, %rax
   1f9eb:      	movq	(%rsp), %rdi
   1f9ef:      	movq	%rax, 0x8(%rsp)
   1f9f4:      	movq	%rax, 0x10(%rsp)
   1f9f9:      	movq	%rdi, 0x18(%rsp)
   1f9fe:      	callq	0x1f850 <<log::Level as core::clone::Clone>::clone::hc80997e3b6d92474>
   1fa03:      	movq	(%rsp), %rcx
   1fa07:      	movq	0x8(%rsp), %rdi
   1fa0c:      	movq	%rax, %rsi
   1fa0f:      	movq	0x10(%rsp), %rax
   1fa14:      	movq	%rcx, %rdx
   1fa17:      	addq	$0x8, %rdx
   1fa1b:      	movq	%rdx, 0x20(%rsp)
   1fa20:      	movq	0x8(%rcx), %rdx
   1fa24:      	movq	0x10(%rcx), %rcx
   1fa28:      	movq	%rsi, (%rdi)
   1fa2b:      	movq	%rdx, 0x8(%rdi)
   1fa2f:      	movq	%rcx, 0x10(%rdi)
   1fa33:      	addq	$0x28, %rsp
   1fa37:      	retq
   1fa38:      	int3
   1fa39:      	int3
   1fa3a:      	int3
   1fa3b:      	int3
   1fa3c:      	int3
   1fa3d:      	int3
   1fa3e:      	int3
   1fa3f:      	int3

000000000001fa40 <<log::SetLoggerError as core::fmt::Debug>::fmt::h2e642ee7e4ea590f>:
   1fa40:      	subq	$0x28, %rsp
   1fa44:      	movq	%rsi, 0x8(%rsp)
   1fa49:      	movq	%rdi, %rax
   1fa4c:      	movq	0x8(%rsp), %rdi
   1fa51:      	movq	%rax, 0x18(%rsp)
   1fa56:      	movq	%rdi, 0x20(%rsp)
   1fa5b:      	movq	%rax, 0x10(%rsp)
   1fa60:      	leaq	-0xe612(%rip), %rsi     # 0x11455 <log::logger::NOP::hd0102fc29e41cf07+0xc1>
   1fa67:      	leaq	0x1a292(%rip), %r8      # 0x39d00 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x90>
   1fa6e:      	movq	0x1b793(%rip), %rax     # 0x3b208 <zlgk82z0l71lvh9+0x3b208>
   1fa75:      	movl	$0xe, %edx
   1fa7a:      	leaq	0x10(%rsp), %rcx
   1fa7f:      	callq	*%rax
   1fa81:      	andb	$0x1, %al
   1fa83:      	movzbl	%al, %eax
   1fa86:      	addq	$0x28, %rsp
   1fa8a:      	retq
   1fa8b:      	int3
   1fa8c:      	int3
   1fa8d:      	int3
   1fa8e:      	int3
   1fa8f:      	int3

000000000001fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>:
   1fa90:      	subq	$0x78, %rsp
   1fa94:      	movq	%rdx, 0x8(%rsp)
   1fa99:      	movq	%rsi, 0x10(%rsp)
   1fa9e:      	movq	%rdi, 0x18(%rsp)
   1faa3:      	movq	%rdi, 0x20(%rsp)
   1faa8:      	movq	%rsi, 0x68(%rsp)
   1faad:      	movq	%rdx, 0x70(%rsp)
   1fab2:      	cmpq	$0x1, %rdx
   1fab6:      	ja	0x1fb06 <core::fmt::Arguments::new_const::he0fb101e1b350ece+0x76>
   1fab8:      	movq	0x20(%rsp), %rax
   1fabd:      	movq	0x18(%rsp), %rcx
   1fac2:      	movq	0x8(%rsp), %rdx
   1fac7:      	movq	0x10(%rsp), %rsi
   1facc:      	movq	$0x0, 0x58(%rsp)
   1fad5:      	movq	%rsi, (%rcx)
   1fad8:      	movq	%rdx, 0x8(%rcx)
   1fadc:      	movq	0x58(%rsp), %rsi
   1fae1:      	movq	0x60(%rsp), %rdx
   1fae6:      	movq	%rsi, 0x20(%rcx)
   1faea:      	movq	%rdx, 0x28(%rcx)
   1faee:      	leaq	-0xe615(%rip), %rdx     # 0x114e0 <log::logger::NOP::hd0102fc29e41cf07+0x14c>
   1faf5:      	movq	%rdx, 0x10(%rcx)
   1faf9:      	movq	$0x0, 0x18(%rcx)
   1fb01:      	addq	$0x78, %rsp
   1fb05:      	retq
   1fb06:      	leaq	0x1a213(%rip), %rsi     # 0x39d20 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0xb0>
   1fb0d:      	leaq	0x28(%rsp), %rdi
   1fb12:      	movq	%rdi, (%rsp)
   1fb16:      	movl	$0x1, %edx
   1fb1b:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   1fb20:      	movq	(%rsp), %rdi
   1fb24:      	leaq	0x1a205(%rip), %rsi     # 0x39d30 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0xc0>
   1fb2b:      	movq	0x1b38e(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1fb32:      	callq	*%rax
   1fb34:      	ud2
   1fb36:      	int3
   1fb37:      	int3
   1fb38:      	int3
   1fb39:      	int3
   1fb3a:      	int3
   1fb3b:      	int3
   1fb3c:      	int3
   1fb3d:      	int3
   1fb3e:      	int3
   1fb3f:      	int3

000000000001fb40 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93>:
   1fb40:      	subq	$0xb8, %rsp
   1fb47:      	movq	%rdi, 0x20(%rsp)
   1fb4c:      	movb	%r8b, %al
   1fb4f:      	movb	%al, 0x2f(%rsp)
   1fb53:      	movb	%cl, 0x30(%rsp)
   1fb57:      	movb	%dl, 0x31(%rsp)
   1fb5b:      	movb	%sil, 0x32(%rsp)
   1fb60:      	movq	%rdi, 0xa0(%rsp)
   1fb68:      	andb	$0x1, %sil
   1fb6c:      	movb	%sil, 0xaa(%rsp)
   1fb74:      	andb	$0x1, %dl
   1fb77:      	movb	%dl, 0xab(%rsp)
   1fb7e:      	movb	%cl, 0xac(%rsp)
   1fb85:      	movb	%al, 0xad(%rsp)
   1fb8c:      	xorl	%eax, %eax
   1fb8e:      	testb	$0x1, %al
   1fb90:      	jne	0x1fbee <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0xae>
   1fb92:      	movq	0x20(%rsp), %rdi
   1fb97:      	movb	0x31(%rsp), %al
   1fb9b:      	movb	0x32(%rsp), %dl
   1fb9f:      	movb	0x2f(%rsp), %sil
   1fba4:      	movb	0x30(%rsp), %cl
   1fba8:      	movq	%rdi, 0xb0(%rsp)
   1fbb0:      	movzbl	%cl, %ecx
   1fbb3:      	movzbl	%sil, %r8d
   1fbb7:      	movzbl	%dl, %esi
   1fbba:      	andl	$0x1, %esi
   1fbbd:      	movzbl	%al, %edx
   1fbc0:      	andl	$0x1, %edx
   1fbc3:      	movq	0x1b98e(%rip), %rax     # 0x3b558 <zlgk82z0l71lvh9+0x3b558>
   1fbca:      	callq	*%rax
   1fbcc:      	movb	%dl, 0x9f(%rsp)
   1fbd3:      	movb	%al, 0x9e(%rsp)
   1fbda:      	movb	0x9e(%rsp), %al
   1fbe1:      	andb	$0x1, %al
   1fbe3:      	movzbl	%al, %eax
   1fbe6:      	cmpq	$0x0, %rax
   1fbea:      	je	0x1fc0b <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0xcb>
   1fbec:      	jmp	0x1fc2b <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0xeb>
   1fbee:      	movb	0x2f(%rsp), %al
   1fbf2:      	movb	0x30(%rsp), %cl
   1fbf6:      	movb	%cl, 0x36(%rsp)
   1fbfa:      	movb	%al, 0x37(%rsp)
   1fbfe:      	movzbl	0x36(%rsp), %eax
   1fc03:      	cmpq	$0x4, %rax
   1fc07:      	je	0x1fc59 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x119>
   1fc09:      	jmp	0x1fc60 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x120>
   1fc0b:      	movb	0x9f(%rsp), %al
   1fc12:      	movb	%al, 0xae(%rsp)
   1fc19:      	cmpb	$0x0, %al
   1fc1b:      	setne	%al
   1fc1e:      	andb	$0x1, %al
   1fc20:      	movb	%al, 0x34(%rsp)
   1fc24:      	movb	$0x0, 0x33(%rsp)
   1fc29:      	jmp	0x1fc49 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x109>
   1fc2b:      	movb	0x9f(%rsp), %al
   1fc32:      	movb	%al, 0xaf(%rsp)
   1fc39:      	cmpb	$0x0, %al
   1fc3b:      	setne	%al
   1fc3e:      	andb	$0x1, %al
   1fc40:      	movb	%al, 0x34(%rsp)
   1fc44:      	movb	$0x1, 0x33(%rsp)
   1fc49:      	movb	0x33(%rsp), %al
   1fc4d:      	movb	0x34(%rsp), %dl
   1fc51:      	addq	$0xb8, %rsp
   1fc58:      	retq
   1fc59:      	movb	$0x4, 0x35(%rsp)
   1fc5e:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fc60:      	movzbl	0x37(%rsp), %eax
   1fc65:      	cmpq	$0x4, %rax
   1fc69:      	je	0x1fc87 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x147>
   1fc6b:      	jmp	0x1fc8e <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x14e>
   1fc6d:      	movb	0x32(%rsp), %al
   1fc71:      	movb	0x31(%rsp), %cl
   1fc75:      	andb	$0x1, %cl
   1fc78:      	andb	$0x1, %al
   1fc7a:      	subb	%cl, %al
   1fc7c:      	je	0x1fdc2 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x282>
   1fc82:      	jmp	0x1fd9c <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x25c>
   1fc87:      	movb	$0x4, 0x35(%rsp)
   1fc8c:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fc8e:      	movzbl	0x36(%rsp), %eax
   1fc93:      	cmpq	$0x3, %rax
   1fc97:      	jne	0x1fca0 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x160>
   1fc99:      	movb	$0x3, 0x35(%rsp)
   1fc9e:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fca0:      	movzbl	0x37(%rsp), %eax
   1fca5:      	movq	%rax, 0x18(%rsp)
   1fcaa:      	subq	$0x2, %rax
   1fcae:      	je	0x1fccc <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x18c>
   1fcb0:      	jmp	0x1fcb2 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x172>
   1fcb2:      	movq	0x18(%rsp), %rax
   1fcb7:      	subq	$0x3, %rax
   1fcbb:      	je	0x1fcd9 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x199>
   1fcbd:      	jmp	0x1fcbf <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x17f>
   1fcbf:      	movzbl	0x36(%rsp), %eax
   1fcc4:      	cmpq	$0x2, %rax
   1fcc8:      	je	0x1fd15 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x1d5>
   1fcca:      	jmp	0x1fd1f <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x1df>
   1fccc:      	movzbl	0x36(%rsp), %eax
   1fcd1:      	cmpq	$0x1, %rax
   1fcd5:      	je	0x1fd0b <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x1cb>
   1fcd7:      	jmp	0x1fcbf <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x17f>
   1fcd9:      	leaq	0x1a068(%rip), %rsi     # 0x39d48 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0xd8>
   1fce0:      	leaq	0x38(%rsp), %rdi
   1fce5:      	movq	%rdi, 0x10(%rsp)
   1fcea:      	movl	$0x1, %edx
   1fcef:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   1fcf4:      	movq	0x10(%rsp), %rdi
   1fcf9:      	leaq	0x1a058(%rip), %rsi     # 0x39d58 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0xe8>
   1fd00:      	movq	0x1b1b9(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1fd07:      	callq	*%rax
   1fd09:      	ud2
   1fd0b:      	movb	$0x3, 0x35(%rsp)
   1fd10:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fd15:      	movb	$0x2, 0x35(%rsp)
   1fd1a:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fd1f:      	movzbl	0x37(%rsp), %eax
   1fd24:      	movq	%rax, 0x8(%rsp)
   1fd29:      	testq	%rax, %rax
   1fd2c:      	je	0x1fd41 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x201>
   1fd2e:      	jmp	0x1fd30 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x1f0>
   1fd30:      	movq	0x8(%rsp), %rax
   1fd35:      	subq	$0x1, %rax
   1fd39:      	je	0x1fd4e <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x20e>
   1fd3b:      	jmp	0x1fd3d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x1fd>
   1fd3d:      	jmp	0x1fd7e <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x23e>
   1fd3f:      	ud2
   1fd41:      	movzbl	0x36(%rsp), %eax
   1fd46:      	cmpq	$0x0, %rax
   1fd4a:      	je	0x1fd88 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x248>
   1fd4c:      	jmp	0x1fd92 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x252>
   1fd4e:      	leaq	0x1a01b(%rip), %rsi     # 0x39d70 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x100>
   1fd55:      	leaq	0x68(%rsp), %rdi
   1fd5a:      	movq	%rdi, (%rsp)
   1fd5e:      	movl	$0x1, %edx
   1fd63:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   1fd68:      	movq	(%rsp), %rdi
   1fd6c:      	leaq	0x1a00d(%rip), %rsi     # 0x39d80 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x110>
   1fd73:      	movq	0x1b146(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   1fd7a:      	callq	*%rax
   1fd7c:      	ud2
   1fd7e:      	movb	$0x2, 0x35(%rsp)
   1fd83:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fd88:      	movb	$0x0, 0x35(%rsp)
   1fd8d:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fd92:      	movb	$0x1, 0x35(%rsp)
   1fd97:      	jmp	0x1fc6d <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x12d>
   1fd9c:      	movq	0x20(%rsp), %rdi
   1fda1:      	movb	0x31(%rsp), %al
   1fda5:      	movb	0x35(%rsp), %cl
   1fda9:      	movzbl	%cl, %edx
   1fdac:      	movzbl	%al, %esi
   1fdaf:      	andl	$0x1, %esi
   1fdb2:      	callq	0x1ff70 <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219>
   1fdb7:      	andb	$0x1, %al
   1fdb9:      	movb	%al, 0x9d(%rsp)
   1fdc0:      	jmp	0x1fde0 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x2a0>
   1fdc2:      	movq	0x20(%rsp), %rdi
   1fdc7:      	movb	0x35(%rsp), %al
   1fdcb:      	xorl	%ecx, %ecx
   1fdcd:      	movzbl	%al, %edx
   1fdd0:      	xorl	%esi, %esi
   1fdd2:      	callq	0x20060 <core::sync::atomic::AtomicBool::fetch_or::hddab24a066743b86>
   1fdd7:      	andb	$0x1, %al
   1fdd9:      	movb	%al, 0x9d(%rsp)
   1fde0:      	movb	0x32(%rsp), %cl
   1fde4:      	movb	0x9d(%rsp), %al
   1fdeb:      	andb	$0x1, %cl
   1fdee:      	subb	%cl, %al
   1fdf0:      	je	0x1fe0b <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x2cb>
   1fdf2:      	jmp	0x1fdf4 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x2b4>
   1fdf4:      	movb	0x9d(%rsp), %al
   1fdfb:      	andb	$0x1, %al
   1fdfd:      	movb	%al, 0x34(%rsp)
   1fe01:      	movb	$0x1, 0x33(%rsp)
   1fe06:      	jmp	0x1fc49 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x109>
   1fe0b:      	movb	0x9d(%rsp), %al
   1fe12:      	andb	$0x1, %al
   1fe14:      	movb	%al, 0x34(%rsp)
   1fe18:      	movb	$0x0, 0x33(%rsp)
   1fe1d:      	jmp	0x1fc49 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93+0x109>
   1fe22:      	int3
   1fe23:      	int3
   1fe24:      	int3
   1fe25:      	int3
   1fe26:      	int3
   1fe27:      	int3
   1fe28:      	int3
   1fe29:      	int3
   1fe2a:      	int3
   1fe2b:      	int3
   1fe2c:      	int3
   1fe2d:      	int3
   1fe2e:      	int3
   1fe2f:      	int3

000000000001fe30 <core::sync::atomic::AtomicBool::compare_exchange_weak::h7e7ba3ecbbe3c2d3>:
   1fe30:      	subq	$0x28, %rsp
   1fe34:      	movq	%rdi, (%rsp)
   1fe38:      	movb	%r8b, %al
   1fe3b:      	movb	%al, 0x8(%rsp)
   1fe3f:      	movb	%cl, 0x9(%rsp)
   1fe43:      	movb	%dl, 0xa(%rsp)
   1fe47:      	movb	%sil, 0xb(%rsp)
   1fe4c:      	movq	%rdi, 0x10(%rsp)
   1fe51:      	andb	$0x1, %sil
   1fe55:      	movb	%sil, 0x1a(%rsp)
   1fe5a:      	andb	$0x1, %dl
   1fe5d:      	movb	%dl, 0x1b(%rsp)
   1fe61:      	movb	%cl, 0x1c(%rsp)
   1fe65:      	movb	%al, 0x1d(%rsp)
   1fe69:      	xorl	%eax, %eax
   1fe6b:      	testb	$0x1, %al
   1fe6d:      	jne	0x1febe <core::sync::atomic::AtomicBool::compare_exchange_weak::h7e7ba3ecbbe3c2d3+0x8e>
   1fe6f:      	movq	(%rsp), %rdi
   1fe73:      	movb	0xa(%rsp), %al
   1fe77:      	movb	0xb(%rsp), %dl
   1fe7b:      	movb	0x8(%rsp), %sil
   1fe80:      	movb	0x9(%rsp), %cl
   1fe84:      	movq	%rdi, 0x20(%rsp)
   1fe89:      	movzbl	%cl, %ecx
   1fe8c:      	movzbl	%sil, %r8d
   1fe90:      	movzbl	%dl, %esi
   1fe93:      	andl	$0x1, %esi
   1fe96:      	movzbl	%al, %edx
   1fe99:      	andl	$0x1, %edx
   1fe9c:      	movq	0x1b6bd(%rip), %rax     # 0x3b560 <zlgk82z0l71lvh9+0x3b560>
   1fea3:      	callq	*%rax
   1fea5:      	movb	%dl, 0xf(%rsp)
   1fea9:      	movb	%al, 0xe(%rsp)
   1fead:      	movb	0xe(%rsp), %al
   1feb1:      	andb	$0x1, %al
   1feb3:      	movzbl	%al, %eax
   1feb6:      	cmpq	$0x0, %rax
   1feba:      	je	0x1fef5 <core::sync::atomic::AtomicBool::compare_exchange_weak::h7e7ba3ecbbe3c2d3+0xc5>
   1febc:      	jmp	0x1ff0f <core::sync::atomic::AtomicBool::compare_exchange_weak::h7e7ba3ecbbe3c2d3+0xdf>
   1febe:      	movq	(%rsp), %rdi
   1fec2:      	movb	0xa(%rsp), %al
   1fec6:      	movb	0xb(%rsp), %dl
   1feca:      	movb	0x8(%rsp), %sil
   1fecf:      	movb	0x9(%rsp), %cl
   1fed3:      	movzbl	%cl, %ecx
   1fed6:      	movzbl	%sil, %r8d
   1feda:      	movzbl	%dl, %esi
   1fedd:      	andl	$0x1, %esi
   1fee0:      	movzbl	%al, %edx
   1fee3:      	andl	$0x1, %edx
   1fee6:      	callq	0x1fb40 <core::sync::atomic::AtomicBool::compare_exchange::h30bb619c451b4d93>
   1feeb:      	movb	%dl, 0xd(%rsp)
   1feef:      	movb	%al, 0xc(%rsp)
   1fef3:      	jmp	0x1ff27 <core::sync::atomic::AtomicBool::compare_exchange_weak::h7e7ba3ecbbe3c2d3+0xf7>
   1fef5:      	movb	0xf(%rsp), %al
   1fef9:      	movb	%al, 0x1e(%rsp)
   1fefd:      	cmpb	$0x0, %al
   1feff:      	setne	%al
   1ff02:      	andb	$0x1, %al
   1ff04:      	movb	%al, 0xd(%rsp)
   1ff08:      	movb	$0x0, 0xc(%rsp)
   1ff0d:      	jmp	0x1ff27 <core::sync::atomic::AtomicBool::compare_exchange_weak::h7e7ba3ecbbe3c2d3+0xf7>
   1ff0f:      	movb	0xf(%rsp), %al
   1ff13:      	movb	%al, 0x1f(%rsp)
   1ff17:      	cmpb	$0x0, %al
   1ff19:      	setne	%al
   1ff1c:      	andb	$0x1, %al
   1ff1e:      	movb	%al, 0xd(%rsp)
   1ff22:      	movb	$0x1, 0xc(%rsp)
   1ff27:      	movb	0xc(%rsp), %al
   1ff2b:      	movb	0xd(%rsp), %dl
   1ff2f:      	addq	$0x28, %rsp
   1ff33:      	retq
   1ff34:      	int3
   1ff35:      	int3
   1ff36:      	int3
   1ff37:      	int3
   1ff38:      	int3
   1ff39:      	int3
   1ff3a:      	int3
   1ff3b:      	int3
   1ff3c:      	int3
   1ff3d:      	int3
   1ff3e:      	int3
   1ff3f:      	int3

000000000001ff40 <core::sync::atomic::AtomicBool::load::hae659817c035986a>:
   1ff40:      	subq	$0x18, %rsp
   1ff44:      	movb	%sil, %al
   1ff47:      	movq	%rdi, (%rsp)
   1ff4b:      	movb	%al, 0xf(%rsp)
   1ff4f:      	movq	%rdi, 0x10(%rsp)
   1ff54:      	movzbl	%al, %esi
   1ff57:      	movq	0x1b632(%rip), %rax     # 0x3b590 <zlgk82z0l71lvh9+0x3b590>
   1ff5e:      	callq	*%rax
   1ff60:      	cmpb	$0x0, %al
   1ff62:      	setne	%al
   1ff65:      	andb	$0x1, %al
   1ff67:      	movzbl	%al, %eax
   1ff6a:      	addq	$0x18, %rsp
   1ff6e:      	retq
   1ff6f:      	int3

000000000001ff70 <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219>:
   1ff70:      	subq	$0x28, %rsp
   1ff74:      	movq	%rdi, (%rsp)
   1ff78:      	movb	%dl, %al
   1ff7a:      	movb	%al, 0xd(%rsp)
   1ff7e:      	movb	%sil, %cl
   1ff81:      	movb	%cl, 0xe(%rsp)
   1ff85:      	movq	%rdi, 0x10(%rsp)
   1ff8a:      	andb	$0x1, %cl
   1ff8d:      	movb	%cl, 0x1e(%rsp)
   1ff91:      	movb	%al, 0x1f(%rsp)
   1ff95:      	xorl	%eax, %eax
   1ff97:      	testb	$0x1, %al
   1ff99:      	jne	0x1ffcb <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219+0x5b>
   1ff9b:      	movq	(%rsp), %rdi
   1ff9f:      	movb	0xd(%rsp), %al
   1ffa3:      	movb	0xe(%rsp), %cl
   1ffa7:      	movq	%rdi, 0x20(%rsp)
   1ffac:      	andb	$0x1, %cl
   1ffaf:      	movzbl	%cl, %esi
   1ffb2:      	movzbl	%al, %edx
   1ffb5:      	movq	0x1b5ac(%rip), %rax     # 0x3b568 <zlgk82z0l71lvh9+0x3b568>
   1ffbc:      	callq	*%rax
   1ffbe:      	cmpb	$0x0, %al
   1ffc0:      	setne	%al
   1ffc3:      	andb	$0x1, %al
   1ffc5:      	movb	%al, 0xf(%rsp)
   1ffc9:      	jmp	0x1ffd5 <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219+0x65>
   1ffcb:      	movb	0xe(%rsp), %al
   1ffcf:      	testb	$0x1, %al
   1ffd1:      	jne	0x1ffff <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219+0x8f>
   1ffd3:      	jmp	0x1ffe3 <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219+0x73>
   1ffd5:      	movb	0xf(%rsp), %al
   1ffd9:      	andb	$0x1, %al
   1ffdb:      	movzbl	%al, %eax
   1ffde:      	addq	$0x28, %rsp
   1ffe2:      	retq
   1ffe3:      	movq	(%rsp), %rdi
   1ffe7:      	movb	0xd(%rsp), %al
   1ffeb:      	xorl	%ecx, %ecx
   1ffed:      	movzbl	%al, %edx
   1fff0:      	xorl	%esi, %esi
   1fff2:      	callq	0x200a0 <core::sync::atomic::AtomicBool::fetch_and::ha68adf105b273cfa>
   1fff7:      	andb	$0x1, %al
   1fff9:      	movb	%al, 0xf(%rsp)
   1fffd:      	jmp	0x1ffd5 <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219+0x65>
   1ffff:      	movq	(%rsp), %rdi
   20003:      	movb	0xd(%rsp), %al
   20007:      	movzbl	%al, %edx
   2000a:      	movl	$0x1, %esi
   2000f:      	callq	0x20060 <core::sync::atomic::AtomicBool::fetch_or::hddab24a066743b86>
   20014:      	andb	$0x1, %al
   20016:      	movb	%al, 0xf(%rsp)
   2001a:      	jmp	0x1ffd5 <core::sync::atomic::AtomicBool::swap::haaf82ccabdd85219+0x65>
   2001c:      	int3
   2001d:      	int3
   2001e:      	int3
   2001f:      	int3

0000000000020020 <core::sync::atomic::AtomicBool::store::h7df0dcd71b01540f>:
   20020:      	subq	$0x18, %rsp
   20024:      	movb	%dl, %al
   20026:      	movb	%sil, %cl
   20029:      	movq	%rdi, (%rsp)
   2002d:      	movb	%cl, %dl
   2002f:      	andb	$0x1, %dl
   20032:      	movb	%dl, 0xe(%rsp)
   20036:      	movb	%al, 0xf(%rsp)
   2003a:      	movq	%rdi, 0x10(%rsp)
   2003f:      	andb	$0x1, %cl
   20042:      	movzbl	%cl, %esi
   20045:      	movzbl	%al, %edx
   20048:      	movq	0x1b521(%rip), %rax     # 0x3b570 <zlgk82z0l71lvh9+0x3b570>
   2004f:      	callq	*%rax
   20051:      	addq	$0x18, %rsp
   20055:      	retq
   20056:      	int3
   20057:      	int3
   20058:      	int3
   20059:      	int3
   2005a:      	int3
   2005b:      	int3
   2005c:      	int3
   2005d:      	int3
   2005e:      	int3
   2005f:      	int3

0000000000020060 <core::sync::atomic::AtomicBool::fetch_or::hddab24a066743b86>:
   20060:      	subq	$0x18, %rsp
   20064:      	movb	%dl, %al
   20066:      	movb	%sil, %cl
   20069:      	movq	%rdi, (%rsp)
   2006d:      	movb	%cl, %dl
   2006f:      	andb	$0x1, %dl
   20072:      	movb	%dl, 0xe(%rsp)
   20076:      	movb	%al, 0xf(%rsp)
   2007a:      	movq	%rdi, 0x10(%rsp)
   2007f:      	andb	$0x1, %cl
   20082:      	movzbl	%cl, %esi
   20085:      	movzbl	%al, %edx
   20088:      	movq	0x1b4e9(%rip), %rax     # 0x3b578 <zlgk82z0l71lvh9+0x3b578>
   2008f:      	callq	*%rax
   20091:      	cmpb	$0x0, %al
   20093:      	setne	%al
   20096:      	andb	$0x1, %al
   20098:      	movzbl	%al, %eax
   2009b:      	addq	$0x18, %rsp
   2009f:      	retq

00000000000200a0 <core::sync::atomic::AtomicBool::fetch_and::ha68adf105b273cfa>:
   200a0:      	subq	$0x18, %rsp
   200a4:      	movb	%dl, %al
   200a6:      	movb	%sil, %cl
   200a9:      	movq	%rdi, (%rsp)
   200ad:      	movb	%cl, %dl
   200af:      	andb	$0x1, %dl
   200b2:      	movb	%dl, 0xe(%rsp)
   200b6:      	movb	%al, 0xf(%rsp)
   200ba:      	movq	%rdi, 0x10(%rsp)
   200bf:      	andb	$0x1, %cl
   200c2:      	movzbl	%cl, %esi
   200c5:      	movzbl	%al, %edx
   200c8:      	movq	0x1b4b1(%rip), %rax     # 0x3b580 <zlgk82z0l71lvh9+0x3b580>
   200cf:      	callq	*%rax
   200d1:      	cmpb	$0x0, %al
   200d3:      	setne	%al
   200d6:      	andb	$0x1, %al
   200d8:      	movzbl	%al, %eax
   200db:      	addq	$0x18, %rsp
   200df:      	retq

00000000000200e0 <core::sync::atomic::atomic_and::h6b28ce7faf08615a>:
   200e0:      	subq	$0x40, %rsp
   200e4:      	movq	%rdi, 0x10(%rsp)
   200e9:      	movb	%dl, %cl
   200eb:      	movb	%sil, %al
   200ee:      	movb	%al, 0x1f(%rsp)
   200f2:      	movb	%cl, 0x2e(%rsp)
   200f6:      	movq	%rdi, 0x30(%rsp)
   200fb:      	movb	%al, 0x3f(%rsp)
   200ff:      	movzbl	0x2e(%rsp), %eax
   20104:      	movq	%rax, 0x20(%rsp)
   20109:      	movq	0x20(%rsp), %rax
   2010e:      	leaq	-0xecb1(%rip), %rcx     # 0x11464 <log::logger::NOP::hd0102fc29e41cf07+0xd0>
   20115:      	movslq	(%rcx,%rax,4), %rax
   20119:      	addq	%rcx, %rax
   2011c:      	jmpq	*%rax
   2011e:      	ud2
   20120:      	movq	0x10(%rsp), %rax
   20125:      	movb	(%rax), %al
   20127:      	movb	%al, 0xf(%rsp)
   2012b:      	movb	0xf(%rsp), %al
   2012f:      	movq	0x10(%rsp), %rcx
   20134:      	movb	0x1f(%rsp), %sil
   20139:      	movb	%al, %dl
   2013b:      	andb	%sil, %dl
   2013e:      	lock
   2013f:      	cmpxchgb	%dl, (%rcx)
   20142:      	sete	%cl
   20145:      	movb	%al, 0xe(%rsp)
   20149:      	testb	$0x1, %cl
   2014c:      	movb	%al, 0xf(%rsp)
   20150:      	jne	0x20154 <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x74>
   20152:      	jmp	0x2012b <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x4b>
   20154:      	movb	0xe(%rsp), %al
   20158:      	movb	%al, 0x2f(%rsp)
   2015c:      	jmp	0x2025a <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x17a>
   20161:      	movq	0x10(%rsp), %rax
   20166:      	movb	(%rax), %al
   20168:      	movb	%al, 0xd(%rsp)
   2016c:      	movb	0xd(%rsp), %al
   20170:      	movq	0x10(%rsp), %rcx
   20175:      	movb	0x1f(%rsp), %sil
   2017a:      	movb	%al, %dl
   2017c:      	andb	%sil, %dl
   2017f:      	lock
   20180:      	cmpxchgb	%dl, (%rcx)
   20183:      	sete	%cl
   20186:      	movb	%al, 0xc(%rsp)
   2018a:      	testb	$0x1, %cl
   2018d:      	movb	%al, 0xd(%rsp)
   20191:      	jne	0x20195 <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0xb5>
   20193:      	jmp	0x2016c <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x8c>
   20195:      	movb	0xc(%rsp), %al
   20199:      	movb	%al, 0x2f(%rsp)
   2019d:      	jmp	0x2025a <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x17a>
   201a2:      	movq	0x10(%rsp), %rax
   201a7:      	movb	(%rax), %al
   201a9:      	movb	%al, 0xb(%rsp)
   201ad:      	movb	0xb(%rsp), %al
   201b1:      	movq	0x10(%rsp), %rcx
   201b6:      	movb	0x1f(%rsp), %sil
   201bb:      	movb	%al, %dl
   201bd:      	andb	%sil, %dl
   201c0:      	lock
   201c1:      	cmpxchgb	%dl, (%rcx)
   201c4:      	sete	%cl
   201c7:      	movb	%al, 0xa(%rsp)
   201cb:      	testb	$0x1, %cl
   201ce:      	movb	%al, 0xb(%rsp)
   201d2:      	jne	0x201d6 <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0xf6>
   201d4:      	jmp	0x201ad <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0xcd>
   201d6:      	movb	0xa(%rsp), %al
   201da:      	movb	%al, 0x2f(%rsp)
   201de:      	jmp	0x2025a <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x17a>
   201e0:      	movq	0x10(%rsp), %rax
   201e5:      	movb	(%rax), %al
   201e7:      	movb	%al, 0x9(%rsp)
   201eb:      	movb	0x9(%rsp), %al
   201ef:      	movq	0x10(%rsp), %rcx
   201f4:      	movb	0x1f(%rsp), %sil
   201f9:      	movb	%al, %dl
   201fb:      	andb	%sil, %dl
   201fe:      	lock
   201ff:      	cmpxchgb	%dl, (%rcx)
   20202:      	sete	%cl
   20205:      	movb	%al, 0x8(%rsp)
   20209:      	testb	$0x1, %cl
   2020c:      	movb	%al, 0x9(%rsp)
   20210:      	jne	0x20214 <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x134>
   20212:      	jmp	0x201eb <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x10b>
   20214:      	movb	0x8(%rsp), %al
   20218:      	movb	%al, 0x2f(%rsp)
   2021c:      	jmp	0x2025a <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x17a>
   2021e:      	movq	0x10(%rsp), %rax
   20223:      	movb	(%rax), %al
   20225:      	movb	%al, 0x7(%rsp)
   20229:      	movb	0x7(%rsp), %al
   2022d:      	movq	0x10(%rsp), %rcx
   20232:      	movb	0x1f(%rsp), %sil
   20237:      	movb	%al, %dl
   20239:      	andb	%sil, %dl
   2023c:      	lock
   2023d:      	cmpxchgb	%dl, (%rcx)
   20240:      	sete	%cl
   20243:      	movb	%al, 0x6(%rsp)
   20247:      	testb	$0x1, %cl
   2024a:      	movb	%al, 0x7(%rsp)
   2024e:      	jne	0x20252 <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x172>
   20250:      	jmp	0x20229 <core::sync::atomic::atomic_and::h6b28ce7faf08615a+0x149>
   20252:      	movb	0x6(%rsp), %al
   20256:      	movb	%al, 0x2f(%rsp)
   2025a:      	movb	0x2f(%rsp), %al
   2025e:      	addq	$0x40, %rsp
   20262:      	retq
   20263:      	int3
   20264:      	int3
   20265:      	int3
   20266:      	int3
   20267:      	int3
   20268:      	int3
   20269:      	int3
   2026a:      	int3
   2026b:      	int3
   2026c:      	int3
   2026d:      	int3
   2026e:      	int3
   2026f:      	int3

0000000000020270 <core::sync::atomic::atomic_swap::hee108df40ce594a4>:
   20270:      	subq	$0x30, %rsp
   20274:      	movq	%rdi, (%rsp)
   20278:      	movb	%dl, %cl
   2027a:      	movb	%sil, %al
   2027d:      	movb	%al, 0xf(%rsp)
   20281:      	movb	%cl, 0x1e(%rsp)
   20285:      	movq	%rdi, 0x20(%rsp)
   2028a:      	movb	%al, 0x2f(%rsp)
   2028e:      	movzbl	0x1e(%rsp), %eax
   20293:      	movq	%rax, 0x10(%rsp)
   20298:      	movq	0x10(%rsp), %rax
   2029d:      	leaq	-0xee2c(%rip), %rcx     # 0x11478 <log::logger::NOP::hd0102fc29e41cf07+0xe4>
   202a4:      	movslq	(%rcx,%rax,4), %rax
   202a8:      	addq	%rcx, %rax
   202ab:      	jmpq	*%rax
   202ad:      	ud2
   202af:      	movq	(%rsp), %rcx
   202b3:      	movb	0xf(%rsp), %al
   202b7:      	xchgb	%al, (%rcx)
   202b9:      	movb	%al, 0x1f(%rsp)
   202bd:      	jmp	0x202fd <core::sync::atomic::atomic_swap::hee108df40ce594a4+0x8d>
   202bf:      	movq	(%rsp), %rcx
   202c3:      	movb	0xf(%rsp), %al
   202c7:      	xchgb	%al, (%rcx)
   202c9:      	movb	%al, 0x1f(%rsp)
   202cd:      	jmp	0x202fd <core::sync::atomic::atomic_swap::hee108df40ce594a4+0x8d>
   202cf:      	movq	(%rsp), %rcx
   202d3:      	movb	0xf(%rsp), %al
   202d7:      	xchgb	%al, (%rcx)
   202d9:      	movb	%al, 0x1f(%rsp)
   202dd:      	jmp	0x202fd <core::sync::atomic::atomic_swap::hee108df40ce594a4+0x8d>
   202df:      	movq	(%rsp), %rcx
   202e3:      	movb	0xf(%rsp), %al
   202e7:      	xchgb	%al, (%rcx)
   202e9:      	movb	%al, 0x1f(%rsp)
   202ed:      	jmp	0x202fd <core::sync::atomic::atomic_swap::hee108df40ce594a4+0x8d>
   202ef:      	movq	(%rsp), %rcx
   202f3:      	movb	0xf(%rsp), %al
   202f7:      	xchgb	%al, (%rcx)
   202f9:      	movb	%al, 0x1f(%rsp)
   202fd:      	movb	0x1f(%rsp), %al
   20301:      	addq	$0x30, %rsp
   20305:      	retq
   20306:      	int3
   20307:      	int3
   20308:      	int3
   20309:      	int3
   2030a:      	int3
   2030b:      	int3
   2030c:      	int3
   2030d:      	int3
   2030e:      	int3
   2030f:      	int3

0000000000020310 <core::sync::atomic::atomic_store::h0429ddf7aabcfb66>:
   20310:      	subq	$0xa8, %rsp
   20317:      	movq	%rdi, 0x18(%rsp)
   2031c:      	movb	%dl, %cl
   2031e:      	movb	%sil, %al
   20321:      	movb	%al, 0x27(%rsp)
   20325:      	movb	%cl, 0x37(%rsp)
   20329:      	movq	%rdi, 0x98(%rsp)
   20331:      	movb	%al, 0xa7(%rsp)
   20338:      	movzbl	0x37(%rsp), %eax
   2033d:      	movq	%rax, 0x28(%rsp)
   20342:      	movq	0x28(%rsp), %rax
   20347:      	leaq	-0xeec2(%rip), %rcx     # 0x1148c <log::logger::NOP::hd0102fc29e41cf07+0xf8>
   2034e:      	movslq	(%rcx,%rax,4), %rax
   20352:      	addq	%rcx, %rax
   20355:      	jmpq	*%rax
   20357:      	ud2
   20359:      	movq	0x18(%rsp), %rax
   2035e:      	movb	0x27(%rsp), %cl
   20362:      	movb	%cl, (%rax)
   20364:      	jmp	0x203e2 <core::sync::atomic::atomic_store::h0429ddf7aabcfb66+0xd2>
   20366:      	movq	0x18(%rsp), %rax
   2036b:      	movb	0x27(%rsp), %cl
   2036f:      	movb	%cl, (%rax)
   20371:      	jmp	0x203e2 <core::sync::atomic::atomic_store::h0429ddf7aabcfb66+0xd2>
   20373:      	leaq	0x19a1e(%rip), %rsi     # 0x39d98 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x128>
   2037a:      	leaq	0x38(%rsp), %rdi
   2037f:      	movq	%rdi, 0x10(%rsp)
   20384:      	movl	$0x1, %edx
   20389:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   2038e:      	movq	0x10(%rsp), %rdi
   20393:      	leaq	0x19a0e(%rip), %rsi     # 0x39da8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x138>
   2039a:      	movq	0x1ab1f(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   203a1:      	callq	*%rax
   203a3:      	ud2
   203a5:      	leaq	0x19a14(%rip), %rsi     # 0x39dc0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x150>
   203ac:      	leaq	0x68(%rsp), %rdi
   203b1:      	movq	%rdi, 0x8(%rsp)
   203b6:      	movl	$0x1, %edx
   203bb:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   203c0:      	movq	0x8(%rsp), %rdi
   203c5:      	leaq	0x19a04(%rip), %rsi     # 0x39dd0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x160>
   203cc:      	movq	0x1aaed(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   203d3:      	callq	*%rax
   203d5:      	ud2
   203d7:      	movq	0x18(%rsp), %rcx
   203dc:      	movb	0x27(%rsp), %al
   203e0:      	xchgb	%al, (%rcx)
   203e2:      	addq	$0xa8, %rsp
   203e9:      	retq
   203ea:      	int3
   203eb:      	int3
   203ec:      	int3
   203ed:      	int3
   203ee:      	int3
   203ef:      	int3

00000000000203f0 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602>:
   203f0:      	subq	$0xd8, %rsp
   203f7:      	movq	%rdi, 0x48(%rsp)
   203fc:      	movb	%r8b, %al
   203ff:      	movb	%dl, 0x56(%rsp)
   20403:      	movb	%sil, 0x57(%rsp)
   20408:      	movq	%rdi, 0xc8(%rsp)
   20410:      	movb	%sil, 0xd2(%rsp)
   20418:      	movb	%dl, 0xd3(%rsp)
   2041f:      	movb	%cl, 0xd4(%rsp)
   20426:      	movb	%al, 0xd5(%rsp)
   2042d:      	movb	%cl, 0x66(%rsp)
   20431:      	movb	%al, 0x67(%rsp)
   20435:      	movzbl	0x66(%rsp), %eax
   2043a:      	movq	%rax, 0x58(%rsp)
   2043f:      	movq	0x58(%rsp), %rax
   20444:      	leaq	-0xefab(%rip), %rcx     # 0x114a0 <log::logger::NOP::hd0102fc29e41cf07+0x10c>
   2044b:      	movslq	(%rcx,%rax,4), %rax
   2044f:      	addq	%rcx, %rax
   20452:      	jmpq	*%rax
   20454:      	ud2
   20456:      	movzbl	0x67(%rsp), %eax
   2045b:      	movq	%rax, 0x40(%rsp)
   20460:      	testq	%rax, %rax
   20463:      	je	0x20583 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x193>
   20469:      	jmp	0x2046b <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x7b>
   2046b:      	movq	0x40(%rsp), %rax
   20470:      	subq	$0x2, %rax
   20474:      	je	0x205a5 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1b5>
   2047a:      	jmp	0x2047c <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x8c>
   2047c:      	movq	0x40(%rsp), %rax
   20481:      	subq	$0x4, %rax
   20485:      	je	0x205c7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1d7>
   2048b:      	jmp	0x2056f <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x17f>
   20490:      	movzbl	0x67(%rsp), %eax
   20495:      	movq	%rax, 0x38(%rsp)
   2049a:      	testq	%rax, %rax
   2049d:      	je	0x20613 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x223>
   204a3:      	jmp	0x204a5 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0xb5>
   204a5:      	movq	0x38(%rsp), %rax
   204aa:      	subq	$0x2, %rax
   204ae:      	je	0x20635 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x245>
   204b4:      	jmp	0x204b6 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0xc6>
   204b6:      	movq	0x38(%rsp), %rax
   204bb:      	subq	$0x4, %rax
   204bf:      	je	0x20657 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x267>
   204c5:      	jmp	0x2056f <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x17f>
   204ca:      	movzbl	0x67(%rsp), %eax
   204cf:      	movq	%rax, 0x30(%rsp)
   204d4:      	testq	%rax, %rax
   204d7:      	je	0x2067c <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x28c>
   204dd:      	jmp	0x204df <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0xef>
   204df:      	movq	0x30(%rsp), %rax
   204e4:      	subq	$0x2, %rax
   204e8:      	je	0x206a1 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x2b1>
   204ee:      	jmp	0x204f0 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x100>
   204f0:      	movq	0x30(%rsp), %rax
   204f5:      	subq	$0x4, %rax
   204f9:      	je	0x206c6 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x2d6>
   204ff:      	jmp	0x2056f <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x17f>
   20501:      	movzbl	0x67(%rsp), %eax
   20506:      	movq	%rax, 0x28(%rsp)
   2050b:      	testq	%rax, %rax
   2050e:      	je	0x206eb <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x2fb>
   20514:      	jmp	0x20516 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x126>
   20516:      	movq	0x28(%rsp), %rax
   2051b:      	subq	$0x2, %rax
   2051f:      	je	0x20710 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x320>
   20525:      	jmp	0x20527 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x137>
   20527:      	movq	0x28(%rsp), %rax
   2052c:      	subq	$0x4, %rax
   20530:      	je	0x20735 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x345>
   20536:      	jmp	0x2056f <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x17f>
   20538:      	movzbl	0x67(%rsp), %eax
   2053d:      	movq	%rax, 0x20(%rsp)
   20542:      	testq	%rax, %rax
   20545:      	je	0x2075a <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x36a>
   2054b:      	jmp	0x2054d <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x15d>
   2054d:      	movq	0x20(%rsp), %rax
   20552:      	subq	$0x2, %rax
   20556:      	je	0x2077f <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x38f>
   2055c:      	jmp	0x2055e <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x16e>
   2055e:      	movq	0x20(%rsp), %rax
   20563:      	subq	$0x4, %rax
   20567:      	je	0x207a4 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x3b4>
   2056d:      	jmp	0x2056f <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x17f>
   2056f:      	movzbl	0x67(%rsp), %eax
   20574:      	cmpq	$0x1, %rax
   20578:      	je	0x207f5 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x405>
   2057e:      	jmp	0x2082a <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x43a>
   20583:      	movq	0x48(%rsp), %rcx
   20588:      	movb	0x56(%rsp), %dl
   2058c:      	movb	0x57(%rsp), %al
   20590:      	lock
   20591:      	cmpxchgb	%dl, (%rcx)
   20594:      	movb	%al, %cl
   20596:      	sete	%al
   20599:      	andb	$0x1, %al
   2059b:      	movb	%cl, 0x64(%rsp)
   2059f:      	movb	%al, 0x65(%rsp)
   205a3:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   205a5:      	movq	0x48(%rsp), %rcx
   205aa:      	movb	0x56(%rsp), %dl
   205ae:      	movb	0x57(%rsp), %al
   205b2:      	lock
   205b3:      	cmpxchgb	%dl, (%rcx)
   205b6:      	movb	%al, %cl
   205b8:      	sete	%al
   205bb:      	andb	$0x1, %al
   205bd:      	movb	%cl, 0x64(%rsp)
   205c1:      	movb	%al, 0x65(%rsp)
   205c5:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   205c7:      	movq	0x48(%rsp), %rcx
   205cc:      	movb	0x56(%rsp), %dl
   205d0:      	movb	0x57(%rsp), %al
   205d4:      	lock
   205d5:      	cmpxchgb	%dl, (%rcx)
   205d8:      	movb	%al, %cl
   205da:      	sete	%al
   205dd:      	andb	$0x1, %al
   205df:      	movb	%cl, 0x64(%rsp)
   205e3:      	movb	%al, 0x65(%rsp)
   205e7:      	movb	0x64(%rsp), %al
   205eb:      	movb	%al, 0x1f(%rsp)
   205ef:      	movb	%al, 0xd6(%rsp)
   205f6:      	movb	0x65(%rsp), %al
   205fa:      	movb	%al, %cl
   205fc:      	andb	$0x1, %cl
   205ff:      	movb	%cl, 0xd7(%rsp)
   20606:      	testb	$0x1, %al
   20608:      	jne	0x207d8 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x3e8>
   2060e:      	jmp	0x207c9 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x3d9>
   20613:      	movq	0x48(%rsp), %rcx
   20618:      	movb	0x56(%rsp), %dl
   2061c:      	movb	0x57(%rsp), %al
   20620:      	lock
   20621:      	cmpxchgb	%dl, (%rcx)
   20624:      	movb	%al, %cl
   20626:      	sete	%al
   20629:      	andb	$0x1, %al
   2062b:      	movb	%cl, 0x64(%rsp)
   2062f:      	movb	%al, 0x65(%rsp)
   20633:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   20635:      	movq	0x48(%rsp), %rcx
   2063a:      	movb	0x56(%rsp), %dl
   2063e:      	movb	0x57(%rsp), %al
   20642:      	lock
   20643:      	cmpxchgb	%dl, (%rcx)
   20646:      	movb	%al, %cl
   20648:      	sete	%al
   2064b:      	andb	$0x1, %al
   2064d:      	movb	%cl, 0x64(%rsp)
   20651:      	movb	%al, 0x65(%rsp)
   20655:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   20657:      	movq	0x48(%rsp), %rcx
   2065c:      	movb	0x56(%rsp), %dl
   20660:      	movb	0x57(%rsp), %al
   20664:      	lock
   20665:      	cmpxchgb	%dl, (%rcx)
   20668:      	movb	%al, %cl
   2066a:      	sete	%al
   2066d:      	andb	$0x1, %al
   2066f:      	movb	%cl, 0x64(%rsp)
   20673:      	movb	%al, 0x65(%rsp)
   20677:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   2067c:      	movq	0x48(%rsp), %rcx
   20681:      	movb	0x56(%rsp), %dl
   20685:      	movb	0x57(%rsp), %al
   20689:      	lock
   2068a:      	cmpxchgb	%dl, (%rcx)
   2068d:      	movb	%al, %cl
   2068f:      	sete	%al
   20692:      	andb	$0x1, %al
   20694:      	movb	%cl, 0x64(%rsp)
   20698:      	movb	%al, 0x65(%rsp)
   2069c:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   206a1:      	movq	0x48(%rsp), %rcx
   206a6:      	movb	0x56(%rsp), %dl
   206aa:      	movb	0x57(%rsp), %al
   206ae:      	lock
   206af:      	cmpxchgb	%dl, (%rcx)
   206b2:      	movb	%al, %cl
   206b4:      	sete	%al
   206b7:      	andb	$0x1, %al
   206b9:      	movb	%cl, 0x64(%rsp)
   206bd:      	movb	%al, 0x65(%rsp)
   206c1:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   206c6:      	movq	0x48(%rsp), %rcx
   206cb:      	movb	0x56(%rsp), %dl
   206cf:      	movb	0x57(%rsp), %al
   206d3:      	lock
   206d4:      	cmpxchgb	%dl, (%rcx)
   206d7:      	movb	%al, %cl
   206d9:      	sete	%al
   206dc:      	andb	$0x1, %al
   206de:      	movb	%cl, 0x64(%rsp)
   206e2:      	movb	%al, 0x65(%rsp)
   206e6:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   206eb:      	movq	0x48(%rsp), %rcx
   206f0:      	movb	0x56(%rsp), %dl
   206f4:      	movb	0x57(%rsp), %al
   206f8:      	lock
   206f9:      	cmpxchgb	%dl, (%rcx)
   206fc:      	movb	%al, %cl
   206fe:      	sete	%al
   20701:      	andb	$0x1, %al
   20703:      	movb	%cl, 0x64(%rsp)
   20707:      	movb	%al, 0x65(%rsp)
   2070b:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   20710:      	movq	0x48(%rsp), %rcx
   20715:      	movb	0x56(%rsp), %dl
   20719:      	movb	0x57(%rsp), %al
   2071d:      	lock
   2071e:      	cmpxchgb	%dl, (%rcx)
   20721:      	movb	%al, %cl
   20723:      	sete	%al
   20726:      	andb	$0x1, %al
   20728:      	movb	%cl, 0x64(%rsp)
   2072c:      	movb	%al, 0x65(%rsp)
   20730:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   20735:      	movq	0x48(%rsp), %rcx
   2073a:      	movb	0x56(%rsp), %dl
   2073e:      	movb	0x57(%rsp), %al
   20742:      	lock
   20743:      	cmpxchgb	%dl, (%rcx)
   20746:      	movb	%al, %cl
   20748:      	sete	%al
   2074b:      	andb	$0x1, %al
   2074d:      	movb	%cl, 0x64(%rsp)
   20751:      	movb	%al, 0x65(%rsp)
   20755:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   2075a:      	movq	0x48(%rsp), %rcx
   2075f:      	movb	0x56(%rsp), %dl
   20763:      	movb	0x57(%rsp), %al
   20767:      	lock
   20768:      	cmpxchgb	%dl, (%rcx)
   2076b:      	movb	%al, %cl
   2076d:      	sete	%al
   20770:      	andb	$0x1, %al
   20772:      	movb	%cl, 0x64(%rsp)
   20776:      	movb	%al, 0x65(%rsp)
   2077a:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   2077f:      	movq	0x48(%rsp), %rcx
   20784:      	movb	0x56(%rsp), %dl
   20788:      	movb	0x57(%rsp), %al
   2078c:      	lock
   2078d:      	cmpxchgb	%dl, (%rcx)
   20790:      	movb	%al, %cl
   20792:      	sete	%al
   20795:      	andb	$0x1, %al
   20797:      	movb	%cl, 0x64(%rsp)
   2079b:      	movb	%al, 0x65(%rsp)
   2079f:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   207a4:      	movq	0x48(%rsp), %rcx
   207a9:      	movb	0x56(%rsp), %dl
   207ad:      	movb	0x57(%rsp), %al
   207b1:      	lock
   207b2:      	cmpxchgb	%dl, (%rcx)
   207b5:      	movb	%al, %cl
   207b7:      	sete	%al
   207ba:      	andb	$0x1, %al
   207bc:      	movb	%cl, 0x64(%rsp)
   207c0:      	movb	%al, 0x65(%rsp)
   207c4:      	jmp	0x205e7 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x1f7>
   207c9:      	movb	0x1f(%rsp), %al
   207cd:      	movb	%al, 0x63(%rsp)
   207d1:      	movb	$0x1, 0x62(%rsp)
   207d6:      	jmp	0x207e5 <core::sync::atomic::atomic_compare_exchange::h5cb5174d2fd81602+0x3f5>
   207d8:      	movb	0x1f(%rsp), %al
   207dc:      	movb	%al, 0x63(%rsp)
   207e0:      	movb	$0x0, 0x62(%rsp)
   207e5:      	movb	0x62(%rsp), %al
   207e9:      	movb	0x63(%rsp), %dl
   207ed:      	addq	$0xd8, %rsp
   207f4:      	retq
   207f5:      	leaq	0x19574(%rip), %rsi     # 0x39d70 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x100>
   207fc:      	leaq	0x98(%rsp), %rdi
   20804:      	movq	%rdi, 0x10(%rsp)
   20809:      	movl	$0x1, %edx
   2080e:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   20813:      	movq	0x10(%rsp), %rdi
   20818:      	leaq	0x195c9(%rip), %rsi     # 0x39de8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x178>
   2081f:      	movq	0x1a69a(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   20826:      	callq	*%rax
   20828:      	ud2
   2082a:      	leaq	0x19517(%rip), %rsi     # 0x39d48 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0xd8>
   20831:      	leaq	0x68(%rsp), %rdi
   20836:      	movq	%rdi, 0x8(%rsp)
   2083b:      	movl	$0x1, %edx
   20840:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   20845:      	movq	0x8(%rsp), %rdi
   2084a:      	leaq	0x195af(%rip), %rsi     # 0x39e00 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x190>
   20851:      	movq	0x1a668(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   20858:      	callq	*%rax
   2085a:      	ud2
   2085c:      	int3
   2085d:      	int3
   2085e:      	int3
   2085f:      	int3

0000000000020860 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4>:
   20860:      	subq	$0xd8, %rsp
   20867:      	movq	%rdi, 0x48(%rsp)
   2086c:      	movb	%r8b, %al
   2086f:      	movb	%dl, 0x56(%rsp)
   20873:      	movb	%sil, 0x57(%rsp)
   20878:      	movq	%rdi, 0xc8(%rsp)
   20880:      	movb	%sil, 0xd2(%rsp)
   20888:      	movb	%dl, 0xd3(%rsp)
   2088f:      	movb	%cl, 0xd4(%rsp)
   20896:      	movb	%al, 0xd5(%rsp)
   2089d:      	movb	%cl, 0x66(%rsp)
   208a1:      	movb	%al, 0x67(%rsp)
   208a5:      	movzbl	0x66(%rsp), %eax
   208aa:      	movq	%rax, 0x58(%rsp)
   208af:      	movq	0x58(%rsp), %rax
   208b4:      	leaq	-0xf407(%rip), %rcx     # 0x114b4 <log::logger::NOP::hd0102fc29e41cf07+0x120>
   208bb:      	movslq	(%rcx,%rax,4), %rax
   208bf:      	addq	%rcx, %rax
   208c2:      	jmpq	*%rax
   208c4:      	ud2
   208c6:      	movzbl	0x67(%rsp), %eax
   208cb:      	movq	%rax, 0x40(%rsp)
   208d0:      	testq	%rax, %rax
   208d3:      	je	0x209f3 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x193>
   208d9:      	jmp	0x208db <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x7b>
   208db:      	movq	0x40(%rsp), %rax
   208e0:      	subq	$0x2, %rax
   208e4:      	je	0x20a15 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1b5>
   208ea:      	jmp	0x208ec <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x8c>
   208ec:      	movq	0x40(%rsp), %rax
   208f1:      	subq	$0x4, %rax
   208f5:      	je	0x20a37 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1d7>
   208fb:      	jmp	0x209df <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x17f>
   20900:      	movzbl	0x67(%rsp), %eax
   20905:      	movq	%rax, 0x38(%rsp)
   2090a:      	testq	%rax, %rax
   2090d:      	je	0x20a83 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x223>
   20913:      	jmp	0x20915 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0xb5>
   20915:      	movq	0x38(%rsp), %rax
   2091a:      	subq	$0x2, %rax
   2091e:      	je	0x20aa5 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x245>
   20924:      	jmp	0x20926 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0xc6>
   20926:      	movq	0x38(%rsp), %rax
   2092b:      	subq	$0x4, %rax
   2092f:      	je	0x20ac7 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x267>
   20935:      	jmp	0x209df <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x17f>
   2093a:      	movzbl	0x67(%rsp), %eax
   2093f:      	movq	%rax, 0x30(%rsp)
   20944:      	testq	%rax, %rax
   20947:      	je	0x20aec <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x28c>
   2094d:      	jmp	0x2094f <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0xef>
   2094f:      	movq	0x30(%rsp), %rax
   20954:      	subq	$0x2, %rax
   20958:      	je	0x20b11 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x2b1>
   2095e:      	jmp	0x20960 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x100>
   20960:      	movq	0x30(%rsp), %rax
   20965:      	subq	$0x4, %rax
   20969:      	je	0x20b36 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x2d6>
   2096f:      	jmp	0x209df <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x17f>
   20971:      	movzbl	0x67(%rsp), %eax
   20976:      	movq	%rax, 0x28(%rsp)
   2097b:      	testq	%rax, %rax
   2097e:      	je	0x20b5b <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x2fb>
   20984:      	jmp	0x20986 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x126>
   20986:      	movq	0x28(%rsp), %rax
   2098b:      	subq	$0x2, %rax
   2098f:      	je	0x20b80 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x320>
   20995:      	jmp	0x20997 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x137>
   20997:      	movq	0x28(%rsp), %rax
   2099c:      	subq	$0x4, %rax
   209a0:      	je	0x20ba5 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x345>
   209a6:      	jmp	0x209df <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x17f>
   209a8:      	movzbl	0x67(%rsp), %eax
   209ad:      	movq	%rax, 0x20(%rsp)
   209b2:      	testq	%rax, %rax
   209b5:      	je	0x20bca <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x36a>
   209bb:      	jmp	0x209bd <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x15d>
   209bd:      	movq	0x20(%rsp), %rax
   209c2:      	subq	$0x2, %rax
   209c6:      	je	0x20bef <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x38f>
   209cc:      	jmp	0x209ce <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x16e>
   209ce:      	movq	0x20(%rsp), %rax
   209d3:      	subq	$0x4, %rax
   209d7:      	je	0x20c14 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x3b4>
   209dd:      	jmp	0x209df <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x17f>
   209df:      	movzbl	0x67(%rsp), %eax
   209e4:      	cmpq	$0x1, %rax
   209e8:      	je	0x20c65 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x405>
   209ee:      	jmp	0x20c9a <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x43a>
   209f3:      	movq	0x48(%rsp), %rcx
   209f8:      	movb	0x56(%rsp), %dl
   209fc:      	movb	0x57(%rsp), %al
   20a00:      	lock
   20a01:      	cmpxchgb	%dl, (%rcx)
   20a04:      	movb	%al, %cl
   20a06:      	sete	%al
   20a09:      	andb	$0x1, %al
   20a0b:      	movb	%cl, 0x64(%rsp)
   20a0f:      	movb	%al, 0x65(%rsp)
   20a13:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20a15:      	movq	0x48(%rsp), %rcx
   20a1a:      	movb	0x56(%rsp), %dl
   20a1e:      	movb	0x57(%rsp), %al
   20a22:      	lock
   20a23:      	cmpxchgb	%dl, (%rcx)
   20a26:      	movb	%al, %cl
   20a28:      	sete	%al
   20a2b:      	andb	$0x1, %al
   20a2d:      	movb	%cl, 0x64(%rsp)
   20a31:      	movb	%al, 0x65(%rsp)
   20a35:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20a37:      	movq	0x48(%rsp), %rcx
   20a3c:      	movb	0x56(%rsp), %dl
   20a40:      	movb	0x57(%rsp), %al
   20a44:      	lock
   20a45:      	cmpxchgb	%dl, (%rcx)
   20a48:      	movb	%al, %cl
   20a4a:      	sete	%al
   20a4d:      	andb	$0x1, %al
   20a4f:      	movb	%cl, 0x64(%rsp)
   20a53:      	movb	%al, 0x65(%rsp)
   20a57:      	movb	0x64(%rsp), %al
   20a5b:      	movb	%al, 0x1f(%rsp)
   20a5f:      	movb	%al, 0xd6(%rsp)
   20a66:      	movb	0x65(%rsp), %al
   20a6a:      	movb	%al, %cl
   20a6c:      	andb	$0x1, %cl
   20a6f:      	movb	%cl, 0xd7(%rsp)
   20a76:      	testb	$0x1, %al
   20a78:      	jne	0x20c48 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x3e8>
   20a7e:      	jmp	0x20c39 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x3d9>
   20a83:      	movq	0x48(%rsp), %rcx
   20a88:      	movb	0x56(%rsp), %dl
   20a8c:      	movb	0x57(%rsp), %al
   20a90:      	lock
   20a91:      	cmpxchgb	%dl, (%rcx)
   20a94:      	movb	%al, %cl
   20a96:      	sete	%al
   20a99:      	andb	$0x1, %al
   20a9b:      	movb	%cl, 0x64(%rsp)
   20a9f:      	movb	%al, 0x65(%rsp)
   20aa3:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20aa5:      	movq	0x48(%rsp), %rcx
   20aaa:      	movb	0x56(%rsp), %dl
   20aae:      	movb	0x57(%rsp), %al
   20ab2:      	lock
   20ab3:      	cmpxchgb	%dl, (%rcx)
   20ab6:      	movb	%al, %cl
   20ab8:      	sete	%al
   20abb:      	andb	$0x1, %al
   20abd:      	movb	%cl, 0x64(%rsp)
   20ac1:      	movb	%al, 0x65(%rsp)
   20ac5:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20ac7:      	movq	0x48(%rsp), %rcx
   20acc:      	movb	0x56(%rsp), %dl
   20ad0:      	movb	0x57(%rsp), %al
   20ad4:      	lock
   20ad5:      	cmpxchgb	%dl, (%rcx)
   20ad8:      	movb	%al, %cl
   20ada:      	sete	%al
   20add:      	andb	$0x1, %al
   20adf:      	movb	%cl, 0x64(%rsp)
   20ae3:      	movb	%al, 0x65(%rsp)
   20ae7:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20aec:      	movq	0x48(%rsp), %rcx
   20af1:      	movb	0x56(%rsp), %dl
   20af5:      	movb	0x57(%rsp), %al
   20af9:      	lock
   20afa:      	cmpxchgb	%dl, (%rcx)
   20afd:      	movb	%al, %cl
   20aff:      	sete	%al
   20b02:      	andb	$0x1, %al
   20b04:      	movb	%cl, 0x64(%rsp)
   20b08:      	movb	%al, 0x65(%rsp)
   20b0c:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20b11:      	movq	0x48(%rsp), %rcx
   20b16:      	movb	0x56(%rsp), %dl
   20b1a:      	movb	0x57(%rsp), %al
   20b1e:      	lock
   20b1f:      	cmpxchgb	%dl, (%rcx)
   20b22:      	movb	%al, %cl
   20b24:      	sete	%al
   20b27:      	andb	$0x1, %al
   20b29:      	movb	%cl, 0x64(%rsp)
   20b2d:      	movb	%al, 0x65(%rsp)
   20b31:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20b36:      	movq	0x48(%rsp), %rcx
   20b3b:      	movb	0x56(%rsp), %dl
   20b3f:      	movb	0x57(%rsp), %al
   20b43:      	lock
   20b44:      	cmpxchgb	%dl, (%rcx)
   20b47:      	movb	%al, %cl
   20b49:      	sete	%al
   20b4c:      	andb	$0x1, %al
   20b4e:      	movb	%cl, 0x64(%rsp)
   20b52:      	movb	%al, 0x65(%rsp)
   20b56:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20b5b:      	movq	0x48(%rsp), %rcx
   20b60:      	movb	0x56(%rsp), %dl
   20b64:      	movb	0x57(%rsp), %al
   20b68:      	lock
   20b69:      	cmpxchgb	%dl, (%rcx)
   20b6c:      	movb	%al, %cl
   20b6e:      	sete	%al
   20b71:      	andb	$0x1, %al
   20b73:      	movb	%cl, 0x64(%rsp)
   20b77:      	movb	%al, 0x65(%rsp)
   20b7b:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20b80:      	movq	0x48(%rsp), %rcx
   20b85:      	movb	0x56(%rsp), %dl
   20b89:      	movb	0x57(%rsp), %al
   20b8d:      	lock
   20b8e:      	cmpxchgb	%dl, (%rcx)
   20b91:      	movb	%al, %cl
   20b93:      	sete	%al
   20b96:      	andb	$0x1, %al
   20b98:      	movb	%cl, 0x64(%rsp)
   20b9c:      	movb	%al, 0x65(%rsp)
   20ba0:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20ba5:      	movq	0x48(%rsp), %rcx
   20baa:      	movb	0x56(%rsp), %dl
   20bae:      	movb	0x57(%rsp), %al
   20bb2:      	lock
   20bb3:      	cmpxchgb	%dl, (%rcx)
   20bb6:      	movb	%al, %cl
   20bb8:      	sete	%al
   20bbb:      	andb	$0x1, %al
   20bbd:      	movb	%cl, 0x64(%rsp)
   20bc1:      	movb	%al, 0x65(%rsp)
   20bc5:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20bca:      	movq	0x48(%rsp), %rcx
   20bcf:      	movb	0x56(%rsp), %dl
   20bd3:      	movb	0x57(%rsp), %al
   20bd7:      	lock
   20bd8:      	cmpxchgb	%dl, (%rcx)
   20bdb:      	movb	%al, %cl
   20bdd:      	sete	%al
   20be0:      	andb	$0x1, %al
   20be2:      	movb	%cl, 0x64(%rsp)
   20be6:      	movb	%al, 0x65(%rsp)
   20bea:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20bef:      	movq	0x48(%rsp), %rcx
   20bf4:      	movb	0x56(%rsp), %dl
   20bf8:      	movb	0x57(%rsp), %al
   20bfc:      	lock
   20bfd:      	cmpxchgb	%dl, (%rcx)
   20c00:      	movb	%al, %cl
   20c02:      	sete	%al
   20c05:      	andb	$0x1, %al
   20c07:      	movb	%cl, 0x64(%rsp)
   20c0b:      	movb	%al, 0x65(%rsp)
   20c0f:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20c14:      	movq	0x48(%rsp), %rcx
   20c19:      	movb	0x56(%rsp), %dl
   20c1d:      	movb	0x57(%rsp), %al
   20c21:      	lock
   20c22:      	cmpxchgb	%dl, (%rcx)
   20c25:      	movb	%al, %cl
   20c27:      	sete	%al
   20c2a:      	andb	$0x1, %al
   20c2c:      	movb	%cl, 0x64(%rsp)
   20c30:      	movb	%al, 0x65(%rsp)
   20c34:      	jmp	0x20a57 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x1f7>
   20c39:      	movb	0x1f(%rsp), %al
   20c3d:      	movb	%al, 0x63(%rsp)
   20c41:      	movb	$0x1, 0x62(%rsp)
   20c46:      	jmp	0x20c55 <core::sync::atomic::atomic_compare_exchange_weak::hd56a78ab0f5b09f4+0x3f5>
   20c48:      	movb	0x1f(%rsp), %al
   20c4c:      	movb	%al, 0x63(%rsp)
   20c50:      	movb	$0x0, 0x62(%rsp)
   20c55:      	movb	0x62(%rsp), %al
   20c59:      	movb	0x63(%rsp), %dl
   20c5d:      	addq	$0xd8, %rsp
   20c64:      	retq
   20c65:      	leaq	0x19104(%rip), %rsi     # 0x39d70 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x100>
   20c6c:      	leaq	0x98(%rsp), %rdi
   20c74:      	movq	%rdi, 0x10(%rsp)
   20c79:      	movl	$0x1, %edx
   20c7e:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   20c83:      	movq	0x10(%rsp), %rdi
   20c88:      	leaq	0x19189(%rip), %rsi     # 0x39e18 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x1a8>
   20c8f:      	movq	0x1a22a(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   20c96:      	callq	*%rax
   20c98:      	ud2
   20c9a:      	leaq	0x190a7(%rip), %rsi     # 0x39d48 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0xd8>
   20ca1:      	leaq	0x68(%rsp), %rdi
   20ca6:      	movq	%rdi, 0x8(%rsp)
   20cab:      	movl	$0x1, %edx
   20cb0:      	callq	0x1fa90 <core::fmt::Arguments::new_const::he0fb101e1b350ece>
   20cb5:      	movq	0x8(%rsp), %rdi
   20cba:      	leaq	0x1916f(%rip), %rsi     # 0x39e30 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x1c0>
   20cc1:      	movq	0x1a1f8(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   20cc8:      	callq	*%rax
   20cca:      	ud2
   20ccc:      	int3
   20ccd:      	int3
   20cce:      	int3
   20ccf:      	int3

0000000000020cd0 <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d>:
   20cd0:      	subq	$0x40, %rsp
   20cd4:      	movq	%rdi, 0x10(%rsp)
   20cd9:      	movb	%dl, %cl
   20cdb:      	movb	%sil, %al
   20cde:      	movb	%al, 0x1f(%rsp)
   20ce2:      	movb	%cl, 0x2e(%rsp)
   20ce6:      	movq	%rdi, 0x30(%rsp)
   20ceb:      	movb	%al, 0x3f(%rsp)
   20cef:      	movzbl	0x2e(%rsp), %eax
   20cf4:      	movq	%rax, 0x20(%rsp)
   20cf9:      	movq	0x20(%rsp), %rax
   20cfe:      	leaq	-0xf83d(%rip), %rcx     # 0x114c8 <log::logger::NOP::hd0102fc29e41cf07+0x134>
   20d05:      	movslq	(%rcx,%rax,4), %rax
   20d09:      	addq	%rcx, %rax
   20d0c:      	jmpq	*%rax
   20d0e:      	ud2
   20d10:      	movq	0x10(%rsp), %rax
   20d15:      	movb	(%rax), %al
   20d17:      	movb	%al, 0xf(%rsp)
   20d1b:      	movb	0xf(%rsp), %al
   20d1f:      	movq	0x10(%rsp), %rcx
   20d24:      	movb	0x1f(%rsp), %sil
   20d29:      	movb	%al, %dl
   20d2b:      	orb	%sil, %dl
   20d2e:      	lock
   20d2f:      	cmpxchgb	%dl, (%rcx)
   20d32:      	sete	%cl
   20d35:      	movb	%al, 0xe(%rsp)
   20d39:      	testb	$0x1, %cl
   20d3c:      	movb	%al, 0xf(%rsp)
   20d40:      	jne	0x20d44 <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x74>
   20d42:      	jmp	0x20d1b <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x4b>
   20d44:      	movb	0xe(%rsp), %al
   20d48:      	movb	%al, 0x2f(%rsp)
   20d4c:      	jmp	0x20e4a <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x17a>
   20d51:      	movq	0x10(%rsp), %rax
   20d56:      	movb	(%rax), %al
   20d58:      	movb	%al, 0xd(%rsp)
   20d5c:      	movb	0xd(%rsp), %al
   20d60:      	movq	0x10(%rsp), %rcx
   20d65:      	movb	0x1f(%rsp), %sil
   20d6a:      	movb	%al, %dl
   20d6c:      	orb	%sil, %dl
   20d6f:      	lock
   20d70:      	cmpxchgb	%dl, (%rcx)
   20d73:      	sete	%cl
   20d76:      	movb	%al, 0xc(%rsp)
   20d7a:      	testb	$0x1, %cl
   20d7d:      	movb	%al, 0xd(%rsp)
   20d81:      	jne	0x20d85 <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0xb5>
   20d83:      	jmp	0x20d5c <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x8c>
   20d85:      	movb	0xc(%rsp), %al
   20d89:      	movb	%al, 0x2f(%rsp)
   20d8d:      	jmp	0x20e4a <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x17a>
   20d92:      	movq	0x10(%rsp), %rax
   20d97:      	movb	(%rax), %al
   20d99:      	movb	%al, 0xb(%rsp)
   20d9d:      	movb	0xb(%rsp), %al
   20da1:      	movq	0x10(%rsp), %rcx
   20da6:      	movb	0x1f(%rsp), %sil
   20dab:      	movb	%al, %dl
   20dad:      	orb	%sil, %dl
   20db0:      	lock
   20db1:      	cmpxchgb	%dl, (%rcx)
   20db4:      	sete	%cl
   20db7:      	movb	%al, 0xa(%rsp)
   20dbb:      	testb	$0x1, %cl
   20dbe:      	movb	%al, 0xb(%rsp)
   20dc2:      	jne	0x20dc6 <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0xf6>
   20dc4:      	jmp	0x20d9d <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0xcd>
   20dc6:      	movb	0xa(%rsp), %al
   20dca:      	movb	%al, 0x2f(%rsp)
   20dce:      	jmp	0x20e4a <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x17a>
   20dd0:      	movq	0x10(%rsp), %rax
   20dd5:      	movb	(%rax), %al
   20dd7:      	movb	%al, 0x9(%rsp)
   20ddb:      	movb	0x9(%rsp), %al
   20ddf:      	movq	0x10(%rsp), %rcx
   20de4:      	movb	0x1f(%rsp), %sil
   20de9:      	movb	%al, %dl
   20deb:      	orb	%sil, %dl
   20dee:      	lock
   20def:      	cmpxchgb	%dl, (%rcx)
   20df2:      	sete	%cl
   20df5:      	movb	%al, 0x8(%rsp)
   20df9:      	testb	$0x1, %cl
   20dfc:      	movb	%al, 0x9(%rsp)
   20e00:      	jne	0x20e04 <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x134>
   20e02:      	jmp	0x20ddb <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x10b>
   20e04:      	movb	0x8(%rsp), %al
   20e08:      	movb	%al, 0x2f(%rsp)
   20e0c:      	jmp	0x20e4a <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x17a>
   20e0e:      	movq	0x10(%rsp), %rax
   20e13:      	movb	(%rax), %al
   20e15:      	movb	%al, 0x7(%rsp)
   20e19:      	movb	0x7(%rsp), %al
   20e1d:      	movq	0x10(%rsp), %rcx
   20e22:      	movb	0x1f(%rsp), %sil
   20e27:      	movb	%al, %dl
   20e29:      	orb	%sil, %dl
   20e2c:      	lock
   20e2d:      	cmpxchgb	%dl, (%rcx)
   20e30:      	sete	%cl
   20e33:      	movb	%al, 0x6(%rsp)
   20e37:      	testb	$0x1, %cl
   20e3a:      	movb	%al, 0x7(%rsp)
   20e3e:      	jne	0x20e42 <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x172>
   20e40:      	jmp	0x20e19 <core::sync::atomic::atomic_or::h6cc7d830ae6a0b8d+0x149>
   20e42:      	movb	0x6(%rsp), %al
   20e46:      	movb	%al, 0x2f(%rsp)
   20e4a:      	movb	0x2f(%rsp), %al
   20e4e:      	addq	$0x40, %rsp
   20e52:      	retq
   20e53:      	int3
   20e54:      	int3
   20e55:      	int3
   20e56:      	int3
   20e57:      	int3
   20e58:      	int3
   20e59:      	int3
   20e5a:      	int3
   20e5b:      	int3
   20e5c:      	int3
   20e5d:      	int3
   20e5e:      	int3
   20e5f:      	int3

0000000000020e60 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17hdd2f8a9e7bb3a836E>:
   20e60:      	pushq	%rax
   20e61:      	movq	%rdi, (%rsp)
   20e65:      	movb	(%rdi), %al
   20e67:      	andb	$0x1, %al
   20e69:      	movzbl	%al, %eax
   20e6c:      	cmpq	$0x0, %rax
   20e70:      	sete	%al
   20e73:      	andb	$0x1, %al
   20e75:      	movzbl	%al, %eax
   20e78:      	popq	%rcx
   20e79:      	retq
   20e7a:      	int3
   20e7b:      	int3
   20e7c:      	int3
   20e7d:      	int3
   20e7e:      	int3
   20e7f:      	int3

0000000000020e80 <core::core_arch::x86::sse2::_mm_pause::he400dec375aac779>:
   20e80:      	pause
   20e82:      	retq
   20e83:      	int3
   20e84:      	int3
   20e85:      	int3
   20e86:      	int3
   20e87:      	int3
   20e88:      	int3
   20e89:      	int3
   20e8a:      	int3
   20e8b:      	int3
   20e8c:      	int3
   20e8d:      	int3
   20e8e:      	int3
   20e8f:      	int3

0000000000020e90 <spinning_top::spinlock::RawSpinlock::try_lock_weak::hdff99cd468a8700c>:
   20e90:      	subq	$0x18, %rsp
   20e94:      	movq	%rdi, 0x10(%rsp)
   20e99:      	movb	$0x2, 0xe(%rsp)
   20e9e:      	movb	$0x0, 0xf(%rsp)
   20ea3:      	movzbl	0xf(%rsp), %r8d
   20ea9:      	movzbl	0xe(%rsp), %ecx
   20eae:      	xorl	%esi, %esi
   20eb0:      	movl	$0x1, %edx
   20eb5:      	callq	0x1fe30 <core::sync::atomic::AtomicBool::compare_exchange_weak::h7e7ba3ecbbe3c2d3>
   20eba:      	movb	%dl, 0xd(%rsp)
   20ebe:      	movb	%al, 0xc(%rsp)
   20ec2:      	movq	0x1a6bf(%rip), %rax     # 0x3b588 <zlgk82z0l71lvh9+0x3b588>
   20ec9:      	leaq	0xc(%rsp), %rdi
   20ece:      	callq	*%rax
   20ed0:      	andb	$0x1, %al
   20ed2:      	movzbl	%al, %eax
   20ed5:      	addq	$0x18, %rsp
   20ed9:      	retq
   20eda:      	int3
   20edb:      	int3
   20edc:      	int3
   20edd:      	int3
   20ede:      	int3
   20edf:      	int3

0000000000020ee0 <<spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex>::lock::h012fecaa4c7ce458>:
   20ee0:      	subq	$0x18, %rsp
   20ee4:      	movq	%rdi, 0x8(%rsp)
   20ee9:      	movq	%rdi, 0x10(%rsp)
   20eee:      	movq	0x8(%rsp), %rdi
   20ef3:      	callq	0x20e90 <spinning_top::spinlock::RawSpinlock::try_lock_weak::hdff99cd468a8700c>
   20ef8:      	testb	$0x1, %al
   20efa:      	jne	0x20f10 <<spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex>::lock::h012fecaa4c7ce458+0x30>
   20efc:      	movq	0x8(%rsp), %rdi
   20f01:      	movq	0x1a690(%rip), %rax     # 0x3b598 <zlgk82z0l71lvh9+0x3b598>
   20f08:      	callq	*%rax
   20f0a:      	testb	$0x1, %al
   20f0c:      	jne	0x20f15 <<spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex>::lock::h012fecaa4c7ce458+0x35>
   20f0e:      	jmp	0x20eee <<spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex>::lock::h012fecaa4c7ce458+0xe>
   20f10:      	addq	$0x18, %rsp
   20f14:      	retq
   20f15:      	callq	0x20e80 <core::core_arch::x86::sse2::_mm_pause::he400dec375aac779>
   20f1a:      	jmp	0x20efc <<spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex>::lock::h012fecaa4c7ce458+0x1c>
   20f1c:      	int3
   20f1d:      	int3
   20f1e:      	int3
   20f1f:      	int3

0000000000020f20 <<spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex>::unlock::h6d655334b30688df>:
   20f20:      	subq	$0x18, %rsp
   20f24:      	movq	%rdi, 0x10(%rsp)
   20f29:      	movb	$0x1, 0xf(%rsp)
   20f2e:      	movb	0xf(%rsp), %al
   20f32:      	xorl	%ecx, %ecx
   20f34:      	movzbl	%al, %edx
   20f37:      	xorl	%esi, %esi
   20f39:      	callq	0x20020 <core::sync::atomic::AtomicBool::store::h7df0dcd71b01540f>
   20f3e:      	addq	$0x18, %rsp
   20f42:      	retq
   20f43:      	int3
   20f44:      	int3
   20f45:      	int3
   20f46:      	int3
   20f47:      	int3
   20f48:      	int3
   20f49:      	int3
   20f4a:      	int3
   20f4b:      	int3
   20f4c:      	int3
   20f4d:      	int3
   20f4e:      	int3
   20f4f:      	int3

0000000000020f50 <<spinning_top::spinlock::RawSpinlock as lock_api::mutex::RawMutex>::is_locked::h1532873c1c347096>:
   20f50:      	subq	$0x18, %rsp
   20f54:      	movq	%rdi, 0x10(%rsp)
   20f59:      	movb	$0x0, 0xf(%rsp)
   20f5e:      	movb	0xf(%rsp), %al
   20f62:      	movzbl	%al, %esi
   20f65:      	callq	0x1ff40 <core::sync::atomic::AtomicBool::load::hae659817c035986a>
   20f6a:      	andb	$0x1, %al
   20f6c:      	movzbl	%al, %eax
   20f6f:      	addq	$0x18, %rsp
   20f73:      	retq
   20f74:      	int3
   20f75:      	int3
   20f76:      	int3
   20f77:      	int3
   20f78:      	int3
   20f79:      	int3
   20f7a:      	int3
   20f7b:      	int3
   20f7c:      	int3
   20f7d:      	int3
   20f7e:      	int3
   20f7f:      	int3

0000000000020f80 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::h322638659a7c87e8>:
   20f80:      	subq	$0x18, %rsp
   20f84:      	movq	%rdi, (%rsp)
   20f88:      	movq	%rdi, 0x8(%rsp)
   20f8d:      	movq	%rdi, 0x10(%rsp)
   20f92:      	cmpq	$0x0, %rdi
   20f96:      	sete	%al
   20f99:      	andb	$0x1, %al
   20f9b:      	movzbl	%al, %eax
   20f9e:      	addq	$0x18, %rsp
   20fa2:      	retq
   20fa3:      	int3
   20fa4:      	int3
   20fa5:      	int3
   20fa6:      	int3
   20fa7:      	int3
   20fa8:      	int3
   20fa9:      	int3
   20faa:      	int3
   20fab:      	int3
   20fac:      	int3
   20fad:      	int3
   20fae:      	int3
   20faf:      	int3

0000000000020fb0 <core::ptr::mut_ptr::<impl *mut T>::is_null::h68a073ad012fd5fa>:
   20fb0:      	subq	$0x18, %rsp
   20fb4:      	movq	%rdi, 0x10(%rsp)
   20fb9:      	movq	%rdi, 0x8(%rsp)
   20fbe:      	movq	0x8(%rsp), %rdi
   20fc3:      	callq	0x20f80 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::h322638659a7c87e8>
   20fc8:      	andb	$0x1, %al
   20fca:      	movzbl	%al, %eax
   20fcd:      	addq	$0x18, %rsp
   20fd1:      	retq
   20fd2:      	int3
   20fd3:      	int3
   20fd4:      	int3
   20fd5:      	int3
   20fd6:      	int3
   20fd7:      	int3
   20fd8:      	int3
   20fd9:      	int3
   20fda:      	int3
   20fdb:      	int3
   20fdc:      	int3
   20fdd:      	int3
   20fde:      	int3
   20fdf:      	int3

0000000000020fe0 <core::ptr::non_null::NonNull<T>::new_unchecked::h97bbb4ebf6440116>:
   20fe0:      	subq	$0x28, %rsp
   20fe4:      	movq	%rdi, (%rsp)
   20fe8:      	movq	%rdi, 0x18(%rsp)
   20fed:      	movb	$0x1, %al
   20fef:      	testb	$0x1, %al
   20ff1:      	jne	0x21006 <core::ptr::non_null::NonNull<T>::new_unchecked::h97bbb4ebf6440116+0x26>
   20ff3:      	movq	(%rsp), %rax
   20ff7:      	movq	%rax, 0x8(%rsp)
   20ffc:      	movq	0x8(%rsp), %rax
   21001:      	addq	$0x28, %rsp
   21005:      	retq
   21006:      	movq	(%rsp), %rax
   2100a:      	movq	%rax, 0x10(%rsp)
   2100f:      	movq	0x10(%rsp), %rdi
   21014:      	movq	%rdi, 0x20(%rsp)
   21019:      	movq	0x1a588(%rip), %rax     # 0x3b5a8 <zlgk82z0l71lvh9+0x3b5a8>
   21020:      	callq	*%rax
   21022:      	testb	$0x1, %al
   21024:      	jne	0x21028 <core::ptr::non_null::NonNull<T>::new_unchecked::h97bbb4ebf6440116+0x48>
   21026:      	jmp	0x2103f <core::ptr::non_null::NonNull<T>::new_unchecked::h97bbb4ebf6440116+0x5f>
   21028:      	leaq	-0xf982(%rip), %rdi     # 0x116ad <log::logger::NOP::hd0102fc29e41cf07+0x319>
   2102f:      	movq	0x1a13a(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   21036:      	movl	$0x5d, %esi
   2103b:      	callq	*%rax
   2103d:      	ud2
   2103f:      	jmp	0x20ff3 <core::ptr::non_null::NonNull<T>::new_unchecked::h97bbb4ebf6440116+0x13>
   21041:      	int3
   21042:      	int3
   21043:      	int3
   21044:      	int3
   21045:      	int3
   21046:      	int3
   21047:      	int3
   21048:      	int3
   21049:      	int3
   2104a:      	int3
   2104b:      	int3
   2104c:      	int3
   2104d:      	int3
   2104e:      	int3
   2104f:      	int3

0000000000021050 <core::ptr::non_null::NonNull<T>::add::h3199246fe828134c>:
   21050:      	subq	$0x28, %rsp
   21054:      	movq	%rdi, 0x8(%rsp)
   21059:      	movq	%rsi, 0x10(%rsp)
   2105e:      	movq	%rdi, 0x18(%rsp)
   21063:      	movq	%rsi, 0x20(%rsp)
   21068:      	shlq	$0x4, %rsi
   2106c:      	addq	%rsi, %rdi
   2106f:      	movq	%rdi, (%rsp)
   21073:      	movq	(%rsp), %rax
   21077:      	addq	$0x28, %rsp
   2107b:      	retq
   2107c:      	int3
   2107d:      	int3
   2107e:      	int3
   2107f:      	int3

0000000000021080 <core::slice::<impl [T]>::iter::hf2682f0790e1f88a>:
   21080:      	subq	$0x18, %rsp
   21084:      	movq	%rdi, 0x8(%rsp)
   21089:      	movq	%rsi, 0x10(%rsp)
   2108e:      	movq	0x1a52b(%rip), %rax     # 0x3b5c0 <zlgk82z0l71lvh9+0x3b5c0>
   21095:      	callq	*%rax
   21097:      	addq	$0x18, %rsp
   2109b:      	retq
   2109c:      	int3
   2109d:      	int3
   2109e:      	int3
   2109f:      	int3

00000000000210a0 <core::slice::iter::Iter<T>::new::h9f97e2713e3118e3>:
   210a0:      	subq	$0x68, %rsp
   210a4:      	movq	%rsi, (%rsp)
   210a8:      	movq	%rdi, 0x8(%rsp)
   210ad:      	movq	%rdi, 0x28(%rsp)
   210b2:      	movq	%rsi, 0x30(%rsp)
   210b7:      	movq	%rdi, 0x58(%rsp)
   210bc:      	movq	%rsi, 0x60(%rsp)
   210c1:      	movq	%rdi, 0x38(%rsp)
   210c6:      	xorl	%eax, %eax
   210c8:      	testb	$0x1, %al
   210ca:      	jne	0x210ed <core::slice::iter::Iter<T>::new::h9f97e2713e3118e3+0x4d>
   210cc:      	movq	0x8(%rsp), %rax
   210d1:      	movq	(%rsp), %rcx
   210d5:      	movq	%rax, 0x48(%rsp)
   210da:      	movq	%rcx, 0x50(%rsp)
   210df:      	shlq	$0x4, %rcx
   210e3:      	addq	%rcx, %rax
   210e6:      	movq	%rax, 0x20(%rsp)
   210eb:      	jmp	0x210fb <core::slice::iter::Iter<T>::new::h9f97e2713e3118e3+0x5b>
   210ed:      	movq	(%rsp), %rax
   210f1:      	movq	%rax, 0x40(%rsp)
   210f6:      	movq	%rax, 0x20(%rsp)
   210fb:      	movq	0x8(%rsp), %rdi
   21100:      	movq	0x1a4a9(%rip), %rax     # 0x3b5b0 <zlgk82z0l71lvh9+0x3b5b0>
   21107:      	callq	*%rax
   21109:      	movq	%rax, %rcx
   2110c:      	movq	0x20(%rsp), %rax
   21111:      	movq	%rcx, 0x10(%rsp)
   21116:      	movq	%rax, 0x18(%rsp)
   2111b:      	movq	0x10(%rsp), %rax
   21120:      	movq	0x18(%rsp), %rdx
   21125:      	addq	$0x68, %rsp
   21129:      	retq
   2112a:      	int3
   2112b:      	int3
   2112c:      	int3
   2112d:      	int3
   2112e:      	int3
   2112f:      	int3

0000000000021130 <<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq::h6c22b159d7814cf7>:
   21130:      	subq	$0x20, %rsp
   21134:      	movq	%rdi, (%rsp)
   21138:      	movq	%rsi, 0x8(%rsp)
   2113d:      	movq	(%rdi), %rax
   21140:      	movq	%rax, 0x18(%rsp)
   21145:      	movq	(%rsi), %rcx
   21148:      	movq	%rcx, 0x10(%rsp)
   2114d:      	cmpq	%rcx, %rax
   21150:      	sete	%al
   21153:      	andb	$0x1, %al
   21155:      	movzbl	%al, %eax
   21158:      	addq	$0x20, %rsp
   2115c:      	retq
   2115d:      	int3
   2115e:      	int3
   2115f:      	int3

0000000000021160 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h53cf7cc5878ccf0d>:
   21160:      	subq	$0x98, %rsp
   21167:      	movq	%rdi, 0x8(%rsp)
   2116c:      	movq	%rdi, 0x30(%rsp)
   21171:      	xorl	%eax, %eax
   21173:      	testb	$0x1, %al
   21175:      	jne	0x211a7 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h53cf7cc5878ccf0d+0x47>
   21177:      	movq	0x8(%rsp), %rdi
   2117c:      	movq	%rdi, %rax
   2117f:      	addq	$0x8, %rax
   21183:      	movq	%rax, 0x68(%rsp)
   21188:      	movq	0x8(%rdi), %rax
   2118c:      	movq	%rax, 0x20(%rsp)
   21191:      	movq	0x1a430(%rip), %rax     # 0x3b5c8 <zlgk82z0l71lvh9+0x3b5c8>
   21198:      	leaq	0x20(%rsp), %rsi
   2119d:      	callq	*%rax
   2119f:      	andb	$0x1, %al
   211a1:      	movb	%al, 0x1f(%rsp)
   211a5:      	jmp	0x211cc <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h53cf7cc5878ccf0d+0x6c>
   211a7:      	movq	0x8(%rsp), %rax
   211ac:      	movq	0x8(%rax), %rax
   211b0:      	movq	%rax, 0x58(%rsp)
   211b5:      	movq	%rax, 0x60(%rsp)
   211ba:      	movq	%rax, 0x38(%rsp)
   211bf:      	cmpq	$0x0, %rax
   211c3:      	sete	%al
   211c6:      	andb	$0x1, %al
   211c8:      	movb	%al, 0x1f(%rsp)
   211cc:      	testb	$0x1, 0x1f(%rsp)
   211d1:      	jne	0x21251 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h53cf7cc5878ccf0d+0xf1>
   211d3:      	movq	0x8(%rsp), %rax
   211d8:      	movq	%rax, 0x70(%rsp)
   211dd:      	movq	$0x1, 0x78(%rsp)
   211e6:      	movq	(%rax), %rcx
   211e9:      	movq	%rcx, (%rsp)
   211ed:      	movq	%rcx, 0x80(%rsp)
   211f5:      	movq	%rax, %rcx
   211f8:      	addq	$0x8, %rcx
   211fc:      	movq	%rcx, 0x90(%rsp)
   21204:      	movq	%rcx, 0x88(%rsp)
   2120c:      	movq	(%rax), %rdi
   2120f:      	movq	0x1a3a2(%rip), %rax     # 0x3b5b8 <zlgk82z0l71lvh9+0x3b5b8>
   21216:      	movl	$0x1, %esi
   2121b:      	callq	*%rax
   2121d:      	movq	0x8(%rsp), %rcx
   21222:      	movq	%rax, %rdx
   21225:      	movq	(%rsp), %rax
   21229:      	movq	%rdx, (%rcx)
   2122c:      	movq	%rax, 0x28(%rsp)
   21231:      	leaq	0x28(%rsp), %rax
   21236:      	movq	%rax, 0x40(%rsp)
   2123b:      	movq	0x28(%rsp), %rax
   21240:      	movq	%rax, 0x50(%rsp)
   21245:      	movq	%rax, 0x48(%rsp)
   2124a:      	movq	%rax, 0x10(%rsp)
   2124f:      	jmp	0x2125a <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h53cf7cc5878ccf0d+0xfa>
   21251:      	movq	$0x0, 0x10(%rsp)
   2125a:      	movq	0x10(%rsp), %rax
   2125f:      	addq	$0x98, %rsp
   21266:      	retq
   21267:      	int3
   21268:      	int3
   21269:      	int3
   2126a:      	int3
   2126b:      	int3
   2126c:      	int3
   2126d:      	int3
   2126e:      	int3
   2126f:      	int3

0000000000021270 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h865cede6888fc2bd>:
   21270:      	subq	$0x38, %rsp
   21274:      	movq	%rcx, 0x8(%rsp)
   21279:      	movq	%rdx, 0x10(%rsp)
   2127e:      	movq	%rsi, %rcx
   21281:      	movq	0x8(%rsp), %rsi
   21286:      	movq	%rdi, %rdx
   21289:      	movq	0x10(%rsp), %rdi
   2128e:      	movq	%rdx, 0x18(%rsp)
   21293:      	movq	%rcx, 0x20(%rsp)
   21298:      	movq	%rdi, 0x28(%rsp)
   2129d:      	movq	%rsi, 0x30(%rsp)
   212a2:      	movq	0x1a407(%rip), %rax     # 0x3b6b0 <zlgk82z0l71lvh9+0x3b6b0>
   212a9:      	callq	*%rax
   212ab:      	addq	$0x38, %rsp
   212af:      	retq

00000000000212b0 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc47bac39d9a071db>:
   212b0:      	subq	$0x28, %rsp
   212b4:      	movq	%rsi, (%rsp)
   212b8:      	movq	%rdi, %rax
   212bb:      	movq	(%rsp), %rdi
   212bf:      	movq	%rax, 0x8(%rsp)
   212c4:      	movq	%rax, 0x18(%rsp)
   212c9:      	movq	%rdi, 0x20(%rsp)
   212ce:      	movq	0x19e4b(%rip), %rax     # 0x3b120 <zlgk82z0l71lvh9+0x3b120>
   212d5:      	callq	*%rax
   212d7:      	testb	$0x1, %al
   212d9:      	jne	0x212ee <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc47bac39d9a071db+0x3e>
   212db:      	movq	(%rsp), %rdi
   212df:      	movq	0x19e42(%rip), %rax     # 0x3b128 <zlgk82z0l71lvh9+0x3b128>
   212e6:      	callq	*%rax
   212e8:      	testb	$0x1, %al
   212ea:      	jne	0x21322 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc47bac39d9a071db+0x72>
   212ec:      	jmp	0x21308 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc47bac39d9a071db+0x58>
   212ee:      	movq	(%rsp), %rsi
   212f2:      	movq	0x8(%rsp), %rdi
   212f7:      	movq	0x19e32(%rip), %rax     # 0x3b130 <zlgk82z0l71lvh9+0x3b130>
   212fe:      	callq	*%rax
   21300:      	andb	$0x1, %al
   21302:      	movb	%al, 0x17(%rsp)
   21306:      	jmp	0x2133a <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc47bac39d9a071db+0x8a>
   21308:      	movq	(%rsp), %rsi
   2130c:      	movq	0x8(%rsp), %rdi
   21311:      	movq	0x19e20(%rip), %rax     # 0x3b138 <zlgk82z0l71lvh9+0x3b138>
   21318:      	callq	*%rax
   2131a:      	andb	$0x1, %al
   2131c:      	movb	%al, 0x17(%rsp)
   21320:      	jmp	0x2133a <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc47bac39d9a071db+0x8a>
   21322:      	movq	(%rsp), %rsi
   21326:      	movq	0x8(%rsp), %rdi
   2132b:      	movq	0x19e0e(%rip), %rax     # 0x3b140 <zlgk82z0l71lvh9+0x3b140>
   21332:      	callq	*%rax
   21334:      	andb	$0x1, %al
   21336:      	movb	%al, 0x17(%rsp)
   2133a:      	movb	0x17(%rsp), %al
   2133e:      	andb	$0x1, %al
   21340:      	movzbl	%al, %eax
   21343:      	addq	$0x28, %rsp
   21347:      	retq
   21348:      	int3
   21349:      	int3
   2134a:      	int3
   2134b:      	int3
   2134c:      	int3
   2134d:      	int3
   2134e:      	int3
   2134f:      	int3

0000000000021350 <core::ptr::drop_in_place<u8>::h64db575292a3c4db>:
   21350:      	pushq	%rax
   21351:      	movq	%rdi, (%rsp)
   21355:      	popq	%rax
   21356:      	retq
   21357:      	int3
   21358:      	int3
   21359:      	int3
   2135a:      	int3
   2135b:      	int3
   2135c:      	int3
   2135d:      	int3
   2135e:      	int3
   2135f:      	int3

0000000000021360 <core::ptr::drop_in_place<&u8>::h4d25e6fa17c727c1>:
   21360:      	pushq	%rax
   21361:      	movq	%rdi, (%rsp)
   21365:      	popq	%rax
   21366:      	retq
   21367:      	int3
   21368:      	int3
   21369:      	int3
   2136a:      	int3
   2136b:      	int3
   2136c:      	int3
   2136d:      	int3
   2136e:      	int3
   2136f:      	int3

0000000000021370 <core::slice::raw::from_raw_parts_mut::h26623a27a67b2550>:
   21370:      	subq	$0x48, %rsp
   21374:      	movq	%rsi, 0x8(%rsp)
   21379:      	movq	%rdi, 0x10(%rsp)
   2137e:      	movq	%rdi, 0x28(%rsp)
   21383:      	movq	%rsi, 0x30(%rsp)
   21388:      	movb	$0x1, %al
   2138a:      	testb	$0x1, %al
   2138c:      	jne	0x213a6 <core::slice::raw::from_raw_parts_mut::h26623a27a67b2550+0x36>
   2138e:      	movq	0x8(%rsp), %rsi
   21393:      	movq	0x10(%rsp), %rdi
   21398:      	movq	0x1a329(%rip), %rax     # 0x3b6c8 <zlgk82z0l71lvh9+0x3b6c8>
   2139f:      	callq	*%rax
   213a1:      	addq	$0x48, %rsp
   213a5:      	retq
   213a6:      	movq	0x8(%rsp), %rax
   213ab:      	movq	0x10(%rsp), %rcx
   213b0:      	movq	%rcx, 0x18(%rsp)
   213b5:      	movq	%rax, 0x20(%rsp)
   213ba:      	movq	0x18(%rsp), %rdi
   213bf:      	movq	0x20(%rsp), %rax
   213c4:      	movq	%rax, (%rsp)
   213c8:      	movq	%rdi, 0x38(%rsp)
   213cd:      	movq	%rax, 0x40(%rsp)
   213d2:      	movq	0x19e97(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   213d9:      	callq	*%rax
   213db:      	testb	$0x1, %al
   213dd:      	jne	0x213f6 <core::slice::raw::from_raw_parts_mut::h26623a27a67b2550+0x86>
   213df:      	leaq	-0xfcca(%rip), %rdi     # 0x1171c <log::logger::NOP::hd0102fc29e41cf07+0x388>
   213e6:      	movq	0x19d83(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   213ed:      	movl	$0xa6, %esi
   213f2:      	callq	*%rax
   213f4:      	ud2
   213f6:      	movq	(%rsp), %rdi
   213fa:      	movq	0x1a2cf(%rip), %rax     # 0x3b6d0 <zlgk82z0l71lvh9+0x3b6d0>
   21401:      	callq	*%rax
   21403:      	testb	$0x1, %al
   21405:      	jne	0x21409 <core::slice::raw::from_raw_parts_mut::h26623a27a67b2550+0x99>
   21407:      	jmp	0x213df <core::slice::raw::from_raw_parts_mut::h26623a27a67b2550+0x6f>
   21409:      	jmp	0x2138e <core::slice::raw::from_raw_parts_mut::h26623a27a67b2550+0x1e>
   2140b:      	int3
   2140c:      	int3
   2140d:      	int3
   2140e:      	int3
   2140f:      	int3

0000000000021410 <bootloader_api::info::FrameBuffer::buffer_mut::h41154bcc6648f449>:
   21410:      	pushq	%rax
   21411:      	movq	%rdi, (%rsp)
   21415:      	callq	0x21420 <bootloader_api::info::FrameBuffer::create_buffer_mut::hf8f1eec68ae8b731>
   2141a:      	popq	%rcx
   2141b:      	retq
   2141c:      	int3
   2141d:      	int3
   2141e:      	int3
   2141f:      	int3

0000000000021420 <bootloader_api::info::FrameBuffer::create_buffer_mut::hf8f1eec68ae8b731>:
   21420:      	pushq	%rax
   21421:      	movq	%rdi, %rax
   21424:      	movq	%rax, (%rsp)
   21428:      	movq	(%rax), %rdi
   2142b:      	movq	0x8(%rax), %rsi
   2142f:      	movq	0x1a28a(%rip), %rax     # 0x3b6c0 <zlgk82z0l71lvh9+0x3b6c0>
   21436:      	callq	*%rax
   21438:      	popq	%rcx
   21439:      	retq
   2143a:      	int3
   2143b:      	int3
   2143c:      	int3
   2143d:      	int3
   2143e:      	int3
   2143f:      	int3

0000000000021440 <bootloader_api::info::FrameBuffer::info::h48722481d9ca8b05>:
   21440:      	pushq	%rax
   21441:      	movq	%rdi, %rax
   21444:      	movq	%rsi, (%rsp)
   21448:      	addq	$0x8, %rsi
   2144c:      	movq	0x28(%rsi), %rcx
   21450:      	movq	%rcx, 0x28(%rdi)
   21454:      	movq	0x20(%rsi), %rcx
   21458:      	movq	%rcx, 0x20(%rdi)
   2145c:      	movq	0x18(%rsi), %rcx
   21460:      	movq	%rcx, 0x18(%rdi)
   21464:      	movq	0x10(%rsi), %rcx
   21468:      	movq	%rcx, 0x10(%rdi)
   2146c:      	movq	(%rsi), %rcx
   2146f:      	movq	0x8(%rsi), %rdx
   21473:      	movq	%rdx, 0x8(%rdi)
   21477:      	movq	%rcx, (%rdi)
   2147a:      	popq	%rcx
   2147b:      	retq
   2147c:      	int3
   2147d:      	int3
   2147e:      	int3
   2147f:      	int3

0000000000021480 <bootloader_api::__force_use::h3d2273ef797ad429>:
   21480:      	subq	$0x28, %rsp
   21484:      	movq	%rdi, (%rsp)
   21488:      	movq	%rsi, 0x8(%rsp)
   2148d:      	movq	%rdi, 0x18(%rsp)
   21492:      	movq	%rsi, 0x20(%rsp)
   21497:      	movq	%rdi, 0x10(%rsp)
   2149c:      	addq	$0x0, %rdi
   214a0:      	addq	$0x28, %rsp
   214a4:      	retq
   214a5:      	int3
   214a6:      	int3
   214a7:      	int3
   214a8:      	int3
   214a9:      	int3
   214aa:      	int3
   214ab:      	int3
   214ac:      	int3
   214ad:      	int3
   214ae:      	int3
   214af:      	int3

00000000000214b0 <<bootloader_api::info::PixelFormat as core::fmt::Debug>::fmt::h9e3a30fd19c5a47f>:
   214b0:      	subq	$0x98, %rsp
   214b7:      	movq	%rsi, 0x50(%rsp)
   214bc:      	movq	%rdi, 0x58(%rsp)
   214c1:      	movq	%rdi, 0x78(%rsp)
   214c6:      	movq	%rsi, 0x80(%rsp)
   214ce:      	movl	(%rdi), %eax
   214d0:      	movq	%rax, 0x60(%rsp)
   214d5:      	movq	0x60(%rsp), %rax
   214da:      	leaq	-0xfdd5(%rip), %rcx     # 0x1170c <log::logger::NOP::hd0102fc29e41cf07+0x378>
   214e1:      	movslq	(%rcx,%rax,4), %rax
   214e5:      	addq	%rcx, %rax
   214e8:      	jmpq	*%rax
   214ea:      	ud2
   214ec:      	movq	0x50(%rsp), %rdi
   214f1:      	leaq	-0xfd36(%rip), %rsi     # 0x117c2 <log::logger::NOP::hd0102fc29e41cf07+0x42e>
   214f8:      	movq	0x19b99(%rip), %rax     # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   214ff:      	movl	$0x3, %edx
   21504:      	callq	*%rax
   21506:      	andb	$0x1, %al
   21508:      	movb	%al, 0x6f(%rsp)
   2150c:      	jmp	0x21608 <<bootloader_api::info::PixelFormat as core::fmt::Debug>::fmt::h9e3a30fd19c5a47f+0x158>
   21511:      	movq	0x50(%rsp), %rdi
   21516:      	leaq	-0xfd58(%rip), %rsi     # 0x117c5 <log::logger::NOP::hd0102fc29e41cf07+0x431>
   2151d:      	movq	0x19b74(%rip), %rax     # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   21524:      	movl	$0x3, %edx
   21529:      	callq	*%rax
   2152b:      	andb	$0x1, %al
   2152d:      	movb	%al, 0x6f(%rsp)
   21531:      	jmp	0x21608 <<bootloader_api::info::PixelFormat as core::fmt::Debug>::fmt::h9e3a30fd19c5a47f+0x158>
   21536:      	movq	0x50(%rsp), %rdi
   2153b:      	leaq	-0xfd7a(%rip), %rsi     # 0x117c8 <log::logger::NOP::hd0102fc29e41cf07+0x434>
   21542:      	movq	0x19b4f(%rip), %rax     # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   21549:      	movl	$0x2, %edx
   2154e:      	callq	*%rax
   21550:      	andb	$0x1, %al
   21552:      	movb	%al, 0x6f(%rsp)
   21556:      	jmp	0x21608 <<bootloader_api::info::PixelFormat as core::fmt::Debug>::fmt::h9e3a30fd19c5a47f+0x158>
   2155b:      	movq	0x50(%rsp), %rdi
   21560:      	movq	0x58(%rsp), %rax
   21565:      	movq	%rax, %r9
   21568:      	addq	$0x4, %r9
   2156c:      	movq	%r9, 0x88(%rsp)
   21574:      	movq	%rax, %rdx
   21577:      	addq	$0x5, %rdx
   2157b:      	movq	%rdx, 0x90(%rsp)
   21583:      	addq	$0x6, %rax
   21587:      	movq	%rax, 0x70(%rsp)
   2158c:      	leaq	0x188d5(%rip), %rcx     # 0x39e68 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x1f8>
   21593:      	movq	%rsp, %rax
   21596:      	movq	%rax, 0x48(%rsp)
   2159b:      	movq	%rcx, 0x40(%rax)
   2159f:      	leaq	0x70(%rsp), %rcx
   215a4:      	movq	%rcx, 0x38(%rax)
   215a8:      	leaq	-0xfdc4(%rip), %rcx     # 0x117eb <log::logger::NOP::hd0102fc29e41cf07+0x457>
   215af:      	movq	%rcx, 0x28(%rax)
   215b3:      	leaq	0x1888e(%rip), %rcx     # 0x39e48 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x1d8>
   215ba:      	movq	%rcx, 0x20(%rax)
   215be:      	movq	%rdx, 0x18(%rax)
   215c2:      	leaq	-0xfdec(%rip), %rdx     # 0x117dd <log::logger::NOP::hd0102fc29e41cf07+0x449>
   215c9:      	movq	%rdx, 0x8(%rax)
   215cd:      	movq	%rcx, (%rax)
   215d0:      	movq	$0xd, 0x30(%rax)
   215d8:      	movq	$0xe, 0x10(%rax)
   215e0:      	leaq	-0xfe1d(%rip), %rsi     # 0x117ca <log::logger::NOP::hd0102fc29e41cf07+0x436>
   215e7:      	leaq	-0xfe1d(%rip), %rcx     # 0x117d1 <log::logger::NOP::hd0102fc29e41cf07+0x43d>
   215ee:      	movq	0x19fdb(%rip), %rax     # 0x3b5d0 <zlgk82z0l71lvh9+0x3b5d0>
   215f5:      	movl	$0x7, %edx
   215fa:      	movl	$0xc, %r8d
   21600:      	callq	*%rax
   21602:      	andb	$0x1, %al
   21604:      	movb	%al, 0x6f(%rsp)
   21608:      	movb	0x6f(%rsp), %al
   2160c:      	andb	$0x1, %al
   2160e:      	movzbl	%al, %eax
   21611:      	addq	$0x98, %rsp
   21618:      	retq
   21619:      	int3
   2161a:      	int3
   2161b:      	int3
   2161c:      	int3
   2161d:      	int3
   2161e:      	int3
   2161f:      	int3

0000000000021620 <core::num::<impl u8>::is_utf8_char_boundary::h1301bf9b3fca3003>:
   21620:      	subq	$0x1, %rsp
   21624:      	movb	%dil, %al
   21627:      	movb	%al, (%rsp)
   2162a:      	cmpb	$-0x40, %al
   2162c:      	setge	%al
   2162f:      	andb	$0x1, %al
   21631:      	movzbl	%al, %eax
   21634:      	addq	$0x1, %rsp
   21638:      	retq
   21639:      	int3
   2163a:      	int3
   2163b:      	int3
   2163c:      	int3
   2163d:      	int3
   2163e:      	int3
   2163f:      	int3

0000000000021640 <core::num::<impl i32>::abs::h3a453d27bb1199a8>:
   21640:      	subq	$0x18, %rsp
   21644:      	movl	%edi, 0x8(%rsp)
   21648:      	movl	%edi, 0x10(%rsp)
   2164c:      	movl	%edi, 0x14(%rsp)
   21650:      	cmpl	$0x0, %edi
   21653:      	jl	0x2165f <core::num::<impl i32>::abs::h3a453d27bb1199a8+0x1f>
   21655:      	movl	0x8(%rsp), %eax
   21659:      	movl	%eax, 0xc(%rsp)
   2165d:      	jmp	0x21671 <core::num::<impl i32>::abs::h3a453d27bb1199a8+0x31>
   2165f:      	movl	0x8(%rsp), %eax
   21663:      	cmpl	$0x80000000, %eax       # imm = 0x80000000
   21668:      	sete	%al
   2166b:      	testb	$0x1, %al
   2166d:      	jne	0x21688 <core::num::<impl i32>::abs::h3a453d27bb1199a8+0x48>
   2166f:      	jmp	0x2167a <core::num::<impl i32>::abs::h3a453d27bb1199a8+0x3a>
   21671:      	movl	0xc(%rsp), %eax
   21675:      	addq	$0x18, %rsp
   21679:      	retq
   2167a:      	movl	0x8(%rsp), %ecx
   2167e:      	xorl	%eax, %eax
   21680:      	subl	%ecx, %eax
   21682:      	movl	%eax, 0xc(%rsp)
   21686:      	jmp	0x21671 <core::num::<impl i32>::abs::h3a453d27bb1199a8+0x31>
   21688:      	leaq	-0xfdef(%rip), %rdi     # 0x118a0 <str.2>
   2168f:      	leaq	0x187f2(%rip), %rdx     # 0x39e88 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x218>
   21696:      	movq	0x19833(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2169d:      	movl	$0x1f, %esi
   216a2:      	callq	*%rax
   216a4:      	ud2
   216a6:      	int3
   216a7:      	int3
   216a8:      	int3
   216a9:      	int3
   216aa:      	int3
   216ab:      	int3
   216ac:      	int3
   216ad:      	int3
   216ae:      	int3
   216af:      	int3

00000000000216b0 <core::num::<impl usize>::checked_mul::h0ea9e540f8b7d86e>:
   216b0:      	subq	$0x68, %rsp
   216b4:      	movq	%rdi, %rax
   216b7:      	movq	%rax, 0x18(%rsp)
   216bc:      	movq	%rsi, 0x20(%rsp)
   216c1:      	movq	%rax, 0x48(%rsp)
   216c6:      	movq	%rsi, 0x50(%rsp)
   216cb:      	mulq	%rsi
   216ce:      	movq	%rax, 0x58(%rsp)
   216d3:      	seto	0x67(%rsp)
   216d8:      	movq	%rax, 0x38(%rsp)
   216dd:      	seto	0x40(%rsp)
   216e2:      	movq	0x38(%rsp), %rcx
   216e7:      	movq	%rcx, (%rsp)
   216eb:      	movb	0x40(%rsp), %al
   216ef:      	movq	%rcx, 0x28(%rsp)
   216f4:      	movb	%al, %cl
   216f6:      	andb	$0x1, %cl
   216f9:      	movb	%cl, 0x36(%rsp)
   216fd:      	andb	$0x1, %al
   216ff:      	movb	%al, 0x37(%rsp)
   21703:      	testb	$0x1, 0x37(%rsp)
   21708:      	jne	0x2171e <core::num::<impl usize>::checked_mul::h0ea9e540f8b7d86e+0x6e>
   2170a:      	movq	(%rsp), %rax
   2170e:      	movq	%rax, 0x10(%rsp)
   21713:      	movq	$0x1, 0x8(%rsp)
   2171c:      	jmp	0x21727 <core::num::<impl usize>::checked_mul::h0ea9e540f8b7d86e+0x77>
   2171e:      	movq	$0x0, 0x8(%rsp)
   21727:      	movq	0x8(%rsp), %rax
   2172c:      	movq	0x10(%rsp), %rdx
   21731:      	addq	$0x68, %rsp
   21735:      	retq
   21736:      	int3
   21737:      	int3
   21738:      	int3
   21739:      	int3
   2173a:      	int3
   2173b:      	int3
   2173c:      	int3
   2173d:      	int3
   2173e:      	int3
   2173f:      	int3

0000000000021740 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61>:
   21740:      	subq	$0x48, %rsp
   21744:      	movq	%rsi, 0x18(%rsp)
   21749:      	movq	%rdi, 0x20(%rsp)
   2174e:      	movq	%rdi, 0x30(%rsp)
   21753:      	movq	%rsi, 0x38(%rsp)
   21758:      	movl	$0x8, %eax
   2175d:      	cmpq	$0x1, %rax
   21761:      	jne	0x21787 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0x47>
   21763:      	movq	0x18(%rsp), %rax
   21768:      	movq	0x20(%rsp), %rcx
   2176d:      	movl	%ecx, %edi
   2176f:      	movl	%edi, 0x40(%rsp)
   21773:      	movl	%eax, 0x44(%rsp)
   21777:      	subl	%eax, %edi
   21779:      	callq	0x21640 <core::num::<impl i32>::abs::h3a453d27bb1199a8>
   2177e:      	cltq
   21780:      	movq	%rax, 0x28(%rsp)
   21785:      	jmp	0x21798 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0x58>
   21787:      	movq	0x20(%rsp), %rax
   2178c:      	movq	0x18(%rsp), %rcx
   21791:      	cmpq	%rcx, %rax
   21794:      	jb	0x217c3 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0x83>
   21796:      	jmp	0x217a2 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0x62>
   21798:      	movq	0x28(%rsp), %rax
   2179d:      	addq	$0x48, %rsp
   217a1:      	retq
   217a2:      	movq	0x20(%rsp), %rax
   217a7:      	movq	0x18(%rsp), %rcx
   217ac:      	movq	%rax, %rdx
   217af:      	subq	%rcx, %rdx
   217b2:      	movq	%rdx, 0x10(%rsp)
   217b7:      	cmpq	%rcx, %rax
   217ba:      	setb	%al
   217bd:      	testb	$0x1, %al
   217bf:      	jne	0x217f0 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0xb0>
   217c1:      	jmp	0x217e4 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0xa4>
   217c3:      	movq	0x18(%rsp), %rax
   217c8:      	movq	0x20(%rsp), %rcx
   217cd:      	movq	%rax, %rdx
   217d0:      	subq	%rcx, %rdx
   217d3:      	movq	%rdx, 0x8(%rsp)
   217d8:      	cmpq	%rcx, %rax
   217db:      	setb	%al
   217de:      	testb	$0x1, %al
   217e0:      	jne	0x2181d <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0xdd>
   217e2:      	jmp	0x2180e <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0xce>
   217e4:      	movq	0x10(%rsp), %rax
   217e9:      	movq	%rax, 0x28(%rsp)
   217ee:      	jmp	0x21798 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0x58>
   217f0:      	leaq	-0xff87(%rip), %rdi     # 0x11870 <str.1>
   217f7:      	leaq	0x186a2(%rip), %rdx     # 0x39ea0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x230>
   217fe:      	movq	0x196cb(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   21805:      	movl	$0x21, %esi
   2180a:      	callq	*%rax
   2180c:      	ud2
   2180e:      	movq	0x8(%rsp), %rax
   21813:      	movq	%rax, 0x28(%rsp)
   21818:      	jmp	0x21798 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61+0x58>
   2181d:      	leaq	-0xffb4(%rip), %rdi     # 0x11870 <str.1>
   21824:      	leaq	0x18675(%rip), %rdx     # 0x39ea0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x230>
   2182b:      	movq	0x1969e(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   21832:      	movl	$0x21, %esi
   21837:      	callq	*%rax
   21839:      	ud2
   2183b:      	int3
   2183c:      	int3
   2183d:      	int3
   2183e:      	int3
   2183f:      	int3

0000000000021840 <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717>:
   21840:      	subq	$0x1d8, %rsp            # imm = 0x1D8
   21847:      	movq	%rdx, 0x28(%rsp)
   2184c:      	movb	%sil, %al
   2184f:      	movb	%al, 0x46(%rsp)
   21853:      	movq	%rdi, 0x118(%rsp)
   2185b:      	movq	%rdx, 0x120(%rsp)
   21863:      	movq	0x19e86(%rip), %rax     # 0x3b6f0 <zlgk82z0l71lvh9+0x3b6f0>
   2186a:      	callq	*%rax
   2186c:      	movb	%al, 0x47(%rsp)
   21870:      	leaq	0x46(%rsp), %rax
   21875:      	movq	%rax, 0x1c8(%rsp)
   2187d:      	leaq	0x47(%rsp), %rax
   21882:      	movq	%rax, 0x1d0(%rsp)
   2188a:      	movb	0x46(%rsp), %al
   2188e:      	cmpb	0x47(%rsp), %al
   21892:      	setae	%al
   21895:      	movb	%al, 0x44(%rsp)
   21899:      	andb	$0x1, %al
   2189b:      	movb	%al, 0x12e(%rsp)
   218a2:      	movb	0x167(%rsp), %cl
   218a9:      	leaq	0x48(%rsp), %rax
   218ae:      	movq	%rax, 0x30(%rsp)
   218b3:      	movzbl	%cl, %ecx
   218b6:      	movabsq	$0x101010101010101, %rdx # imm = 0x101010101010101
   218c0:      	imulq	%rdx, %rcx
   218c4:      	movq	%rcx, 0x38(%rsp)
   218c9:      	movq	%rcx, 0x78(%rax)
   218cd:      	movq	%rcx, 0x70(%rax)
   218d1:      	movq	%rcx, 0x68(%rax)
   218d5:      	movq	%rcx, 0x60(%rax)
   218d9:      	movq	%rcx, 0x58(%rax)
   218dd:      	movq	%rcx, 0x50(%rax)
   218e1:      	movq	%rcx, 0x48(%rax)
   218e5:      	movq	%rcx, 0x40(%rax)
   218e9:      	movq	%rcx, 0x38(%rax)
   218ed:      	movq	%rcx, 0x30(%rax)
   218f1:      	movq	%rcx, 0x28(%rax)
   218f5:      	movq	%rcx, 0x20(%rax)
   218f9:      	movq	%rcx, 0x18(%rax)
   218fd:      	movq	%rcx, 0x10(%rax)
   21901:      	movq	%rcx, 0x8(%rax)
   21905:      	movq	%rcx, (%rax)
   21908:      	movq	$0x80, 0xc8(%rsp)
   21914:      	movq	0x19ddd(%rip), %rax     # 0x3b6f8 <zlgk82z0l71lvh9+0x3b6f8>
   2191b:      	movl	$0x10, %edi
   21920:      	callq	*%rax
   21922:      	movb	%al, %cl
   21924:      	movb	0x44(%rsp), %al
   21928:      	movb	%cl, 0x45(%rsp)
   2192c:      	movb	%cl, 0x12f(%rsp)
   21933:      	testb	$0x1, %al
   21935:      	jne	0x2197a <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x13a>
   21937:      	movq	0x19e42(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   2193e:      	leaq	0x48(%rsp), %rdi
   21943:      	movl	$0x80, %esi
   21948:      	callq	*%rax
   2194a:      	movq	%rax, %rdi
   2194d:      	movq	%rdx, %rsi
   21950:      	movq	0x19e31(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   21957:      	callq	*%rax
   21959:      	movq	%rax, %rdi
   2195c:      	movq	%rdx, %rsi
   2195f:      	movq	0x19e2a(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   21966:      	callq	*%rax
   21968:      	movq	%rax, 0xf0(%rsp)
   21970:      	movq	%rdx, 0xf8(%rsp)
   21978:      	jmp	0x219c0 <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x180>
   2197a:      	movq	0x19dff(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   21981:      	leaq	0x48(%rsp), %rdi
   21986:      	movl	$0x80, %esi
   2198b:      	callq	*%rax
   2198d:      	movq	%rax, %rdi
   21990:      	movq	%rdx, %rsi
   21993:      	movq	0x19dee(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   2199a:      	callq	*%rax
   2199c:      	movq	%rax, %rdi
   2199f:      	movq	%rdx, %rsi
   219a2:      	movq	0x19de7(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   219a9:      	callq	*%rax
   219ab:      	movq	%rax, 0xd0(%rsp)
   219b3:      	movq	%rdx, 0xd8(%rsp)
   219bb:      	jmp	0x21bec <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x3ac>
   219c0:      	movq	0x19dd1(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   219c7:      	leaq	0xf0(%rsp), %rdi
   219cf:      	callq	*%rax
   219d1:      	movq	%rax, 0x100(%rsp)
   219d9:      	movq	0x100(%rsp), %rdx
   219e1:      	movl	$0x1, %eax
   219e6:      	xorl	%ecx, %ecx
   219e8:      	cmpq	$0x0, %rdx
   219ec:      	cmoveq	%rcx, %rax
   219f0:      	cmpq	$0x0, %rax
   219f4:      	jne	0x21ab8 <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x278>
   219fa:      	movq	0xc8(%rsp), %rax
   21a02:      	movq	%rax, 0x110(%rsp)
   21a0a:      	movq	0x110(%rsp), %rsi
   21a12:      	leaq	0x184cf(%rip), %rdx     # 0x39ee8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x278>
   21a19:      	movq	0x19d80(%rip), %rax     # 0x3b7a0 <zlgk82z0l71lvh9+0x3b7a0>
   21a20:      	leaq	0x48(%rsp), %rdi
   21a25:      	callq	*%rax
   21a27:      	movq	%rax, %rdi
   21a2a:      	movq	%rdx, %rsi
   21a2d:      	movq	%rdi, 0x140(%rsp)
   21a35:      	movq	%rsi, 0x148(%rsp)
   21a3d:      	movq	%rdi, 0x1a8(%rsp)
   21a45:      	movq	%rsi, 0x1b0(%rsp)
   21a4d:      	movq	%rdi, 0x1b8(%rsp)
   21a55:      	movq	%rsi, 0x1c0(%rsp)
   21a5d:      	movq	0x19b84(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   21a64:      	callq	*%rax
   21a66:      	movq	%rax, %rdi
   21a69:      	movq	%rdx, %rsi
   21a6c:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   21a71:      	movq	0x28(%rsp), %rdi
   21a76:      	movq	%rax, %r8
   21a79:      	movb	0x44(%rsp), %al
   21a7d:      	movq	%rdx, %r9
   21a80:      	movq	%r8, 0x150(%rsp)
   21a88:      	movq	%r9, 0x158(%rsp)
   21a90:      	movzbl	%al, %esi
   21a93:      	andl	$0x1, %esi
   21a96:      	leaq	-0x1013c(%rip), %rdx    # 0x11961 <str.0+0x21>
   21a9d:      	movq	0x19d04(%rip), %rax     # 0x3b7a8 <zlgk82z0l71lvh9+0x3b7a8>
   21aa4:      	movl	$0x2, %ecx
   21aa9:      	callq	*%rax
   21aab:      	andb	$0x1, %al
   21aad:      	movzbl	%al, %eax
   21ab0:      	addq	$0x1d8, %rsp            # imm = 0x1D8
   21ab7:      	retq
   21ab8:      	movb	0x45(%rsp), %al
   21abc:      	movq	0x100(%rsp), %rcx
   21ac4:      	movq	%rcx, 0x18(%rsp)
   21ac9:      	movq	%rcx, 0x130(%rsp)
   21ad1:      	movb	0x47(%rsp), %cl
   21ad5:      	movb	%cl, 0x17(%rsp)
   21ad9:      	movb	0x46(%rsp), %cl
   21add:      	movzbl	%cl, %edi
   21ae0:      	movzbl	%al, %esi
   21ae3:      	callq	0x2fac0 <<u8 as core::ops::arith::Rem>::rem::h0ff1b38ff5e2f387>
   21ae8:      	movb	0x17(%rsp), %cl
   21aec:      	movzbl	%cl, %edi
   21aef:      	movzbl	%al, %esi
   21af2:      	callq	0x2f810 <<u8 as core::ops::arith::Sub>::sub::h1e779299b457b7b4>
   21af7:      	movb	%al, %cl
   21af9:      	movb	0x45(%rsp), %al
   21afd:      	movb	%cl, 0x10f(%rsp)
   21b04:      	movb	0x46(%rsp), %cl
   21b08:      	movzbl	%cl, %edi
   21b0b:      	movzbl	%al, %esi
   21b0e:      	callq	0x2f960 <<u8 as core::ops::arith::Div>::div::ha800a8b9398cee7b>
   21b13:      	movb	%al, 0x46(%rsp)
   21b17:      	movq	0x19be2(%rip), %rax     # 0x3b700 <zlgk82z0l71lvh9+0x3b700>
   21b1e:      	leaq	0x10f(%rsp), %rdi
   21b26:      	callq	*%rax
   21b28:      	movzbl	%al, %edi
   21b2b:      	movq	0x19bae(%rip), %rax     # 0x3b6e0 <zlgk82z0l71lvh9+0x3b6e0>
   21b32:      	callq	*%rax
   21b34:      	movb	%al, %cl
   21b36:      	movq	0x18(%rsp), %rax
   21b3b:      	movq	%rax, 0x178(%rsp)
   21b43:      	movb	%cl, 0x183(%rsp)
   21b4a:      	movb	%cl, 0x185(%rsp)
   21b51:      	movb	%cl, 0x187(%rsp)
   21b58:      	movb	%cl, 0x186(%rsp)
   21b5f:      	movb	0x186(%rsp), %cl
   21b66:      	movb	%cl, 0x184(%rsp)
   21b6d:      	movb	0x184(%rsp), %cl
   21b74:      	movb	%cl, (%rax)
   21b76:      	movq	%rax, 0x188(%rsp)
   21b7e:      	movq	%rax, 0x190(%rsp)
   21b86:      	movq	0xc8(%rsp), %rax
   21b8e:      	movq	%rax, %rcx
   21b91:      	subq	$0x1, %rcx
   21b95:      	movq	%rcx, 0x20(%rsp)
   21b9a:      	cmpq	$0x1, %rax
   21b9e:      	setb	%al
   21ba1:      	testb	$0x1, %al
   21ba3:      	jne	0x21bce <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x38e>
   21ba5:      	movq	0x20(%rsp), %rax
   21baa:      	movq	%rax, 0xc8(%rsp)
   21bb2:      	leaq	0x46(%rsp), %rdi
   21bb7:      	leaq	0x47(%rsp), %rsi
   21bbc:      	callq	0x30fc0 <core::cmp::impls::<impl core::cmp::PartialEq for u8>::eq::hfa1ee48ca5d9a958>
   21bc1:      	testb	$0x1, %al
   21bc3:      	jne	0x219fa <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x1ba>
   21bc9:      	jmp	0x219c0 <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x180>
   21bce:      	leaq	-0x10295(%rip), %rdi    # 0x11940 <str.0>
   21bd5:      	leaq	0x182dc(%rip), %rdx     # 0x39eb8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x248>
   21bdc:      	movq	0x192ed(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   21be3:      	movl	$0x21, %esi
   21be8:      	callq	*%rax
   21bea:      	ud2
   21bec:      	movq	0x19ba5(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   21bf3:      	leaq	0xd0(%rsp), %rdi
   21bfb:      	callq	*%rax
   21bfd:      	movq	%rax, 0xe0(%rsp)
   21c05:      	movq	0xe0(%rsp), %rdx
   21c0d:      	movl	$0x1, %eax
   21c12:      	xorl	%ecx, %ecx
   21c14:      	cmpq	$0x0, %rdx
   21c18:      	cmoveq	%rcx, %rax
   21c1c:      	cmpq	$0x0, %rax
   21c20:      	je	0x219fa <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x1ba>
   21c26:      	movb	0x45(%rsp), %al
   21c2a:      	movq	0xe0(%rsp), %rcx
   21c32:      	movq	%rcx, (%rsp)
   21c36:      	movq	%rcx, 0x138(%rsp)
   21c3e:      	movb	0x46(%rsp), %cl
   21c42:      	movzbl	%cl, %edi
   21c45:      	movzbl	%al, %esi
   21c48:      	callq	0x2fac0 <<u8 as core::ops::arith::Rem>::rem::h0ff1b38ff5e2f387>
   21c4d:      	movb	%al, %cl
   21c4f:      	movb	0x45(%rsp), %al
   21c53:      	movb	%cl, 0xef(%rsp)
   21c5a:      	movb	0x46(%rsp), %cl
   21c5e:      	movzbl	%cl, %edi
   21c61:      	movzbl	%al, %esi
   21c64:      	callq	0x2f960 <<u8 as core::ops::arith::Div>::div::ha800a8b9398cee7b>
   21c69:      	movb	%al, 0x46(%rsp)
   21c6d:      	movq	0x19a8c(%rip), %rax     # 0x3b700 <zlgk82z0l71lvh9+0x3b700>
   21c74:      	leaq	0xef(%rsp), %rdi
   21c7c:      	callq	*%rax
   21c7e:      	movzbl	%al, %edi
   21c81:      	movq	0x19a58(%rip), %rax     # 0x3b6e0 <zlgk82z0l71lvh9+0x3b6e0>
   21c88:      	callq	*%rax
   21c8a:      	movb	%al, %cl
   21c8c:      	movq	(%rsp), %rax
   21c90:      	movq	%rax, 0x168(%rsp)
   21c98:      	movb	%cl, 0x173(%rsp)
   21c9f:      	movb	%cl, 0x175(%rsp)
   21ca6:      	movb	%cl, 0x177(%rsp)
   21cad:      	movb	%cl, 0x176(%rsp)
   21cb4:      	movb	0x176(%rsp), %cl
   21cbb:      	movb	%cl, 0x174(%rsp)
   21cc2:      	movb	0x174(%rsp), %cl
   21cc9:      	movb	%cl, (%rax)
   21ccb:      	movq	%rax, 0x198(%rsp)
   21cd3:      	movq	%rax, 0x1a0(%rsp)
   21cdb:      	movq	0xc8(%rsp), %rax
   21ce3:      	movq	%rax, %rcx
   21ce6:      	subq	$0x1, %rcx
   21cea:      	movq	%rcx, 0x8(%rsp)
   21cef:      	cmpq	$0x1, %rax
   21cf3:      	setb	%al
   21cf6:      	testb	$0x1, %al
   21cf8:      	jne	0x21d23 <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x4e3>
   21cfa:      	movq	0x8(%rsp), %rax
   21cff:      	movq	%rax, 0xc8(%rsp)
   21d07:      	leaq	0x46(%rsp), %rdi
   21d0c:      	leaq	0x47(%rsp), %rsi
   21d11:      	callq	0x30fc0 <core::cmp::impls::<impl core::cmp::PartialEq for u8>::eq::hfa1ee48ca5d9a958>
   21d16:      	testb	$0x1, %al
   21d18:      	jne	0x219fa <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x1ba>
   21d1e:      	jmp	0x21bec <core::fmt::num::GenericRadix::fmt_int::h0bbad0643d245717+0x3ac>
   21d23:      	leaq	-0x103ea(%rip), %rdi    # 0x11940 <str.0>
   21d2a:      	leaq	0x1819f(%rip), %rdx     # 0x39ed0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x260>
   21d31:      	movq	0x19198(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   21d38:      	movl	$0x21, %esi
   21d3d:      	callq	*%rax
   21d3f:      	ud2
   21d41:      	int3
   21d42:      	int3
   21d43:      	int3
   21d44:      	int3
   21d45:      	int3
   21d46:      	int3
   21d47:      	int3
   21d48:      	int3
   21d49:      	int3
   21d4a:      	int3
   21d4b:      	int3
   21d4c:      	int3
   21d4d:      	int3
   21d4e:      	int3
   21d4f:      	int3

0000000000021d50 <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02>:
   21d50:      	subq	$0x1d8, %rsp            # imm = 0x1D8
   21d57:      	movq	%rdx, 0x28(%rsp)
   21d5c:      	movb	%sil, %al
   21d5f:      	movb	%al, 0x46(%rsp)
   21d63:      	movq	%rdi, 0x118(%rsp)
   21d6b:      	movq	%rdx, 0x120(%rsp)
   21d73:      	movq	0x19976(%rip), %rax     # 0x3b6f0 <zlgk82z0l71lvh9+0x3b6f0>
   21d7a:      	callq	*%rax
   21d7c:      	movb	%al, 0x47(%rsp)
   21d80:      	leaq	0x46(%rsp), %rax
   21d85:      	movq	%rax, 0x1c8(%rsp)
   21d8d:      	leaq	0x47(%rsp), %rax
   21d92:      	movq	%rax, 0x1d0(%rsp)
   21d9a:      	movb	0x46(%rsp), %al
   21d9e:      	cmpb	0x47(%rsp), %al
   21da2:      	setae	%al
   21da5:      	movb	%al, 0x44(%rsp)
   21da9:      	andb	$0x1, %al
   21dab:      	movb	%al, 0x12e(%rsp)
   21db2:      	movb	0x167(%rsp), %cl
   21db9:      	leaq	0x48(%rsp), %rax
   21dbe:      	movq	%rax, 0x30(%rsp)
   21dc3:      	movzbl	%cl, %ecx
   21dc6:      	movabsq	$0x101010101010101, %rdx # imm = 0x101010101010101
   21dd0:      	imulq	%rdx, %rcx
   21dd4:      	movq	%rcx, 0x38(%rsp)
   21dd9:      	movq	%rcx, 0x78(%rax)
   21ddd:      	movq	%rcx, 0x70(%rax)
   21de1:      	movq	%rcx, 0x68(%rax)
   21de5:      	movq	%rcx, 0x60(%rax)
   21de9:      	movq	%rcx, 0x58(%rax)
   21ded:      	movq	%rcx, 0x50(%rax)
   21df1:      	movq	%rcx, 0x48(%rax)
   21df5:      	movq	%rcx, 0x40(%rax)
   21df9:      	movq	%rcx, 0x38(%rax)
   21dfd:      	movq	%rcx, 0x30(%rax)
   21e01:      	movq	%rcx, 0x28(%rax)
   21e05:      	movq	%rcx, 0x20(%rax)
   21e09:      	movq	%rcx, 0x18(%rax)
   21e0d:      	movq	%rcx, 0x10(%rax)
   21e11:      	movq	%rcx, 0x8(%rax)
   21e15:      	movq	%rcx, (%rax)
   21e18:      	movq	$0x80, 0xc8(%rsp)
   21e24:      	movq	0x198cd(%rip), %rax     # 0x3b6f8 <zlgk82z0l71lvh9+0x3b6f8>
   21e2b:      	movl	$0x10, %edi
   21e30:      	callq	*%rax
   21e32:      	movb	%al, %cl
   21e34:      	movb	0x44(%rsp), %al
   21e38:      	movb	%cl, 0x45(%rsp)
   21e3c:      	movb	%cl, 0x12f(%rsp)
   21e43:      	testb	$0x1, %al
   21e45:      	jne	0x21e8a <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x13a>
   21e47:      	movq	0x19932(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   21e4e:      	leaq	0x48(%rsp), %rdi
   21e53:      	movl	$0x80, %esi
   21e58:      	callq	*%rax
   21e5a:      	movq	%rax, %rdi
   21e5d:      	movq	%rdx, %rsi
   21e60:      	movq	0x19921(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   21e67:      	callq	*%rax
   21e69:      	movq	%rax, %rdi
   21e6c:      	movq	%rdx, %rsi
   21e6f:      	movq	0x1991a(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   21e76:      	callq	*%rax
   21e78:      	movq	%rax, 0xf0(%rsp)
   21e80:      	movq	%rdx, 0xf8(%rsp)
   21e88:      	jmp	0x21ed0 <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x180>
   21e8a:      	movq	0x198ef(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   21e91:      	leaq	0x48(%rsp), %rdi
   21e96:      	movl	$0x80, %esi
   21e9b:      	callq	*%rax
   21e9d:      	movq	%rax, %rdi
   21ea0:      	movq	%rdx, %rsi
   21ea3:      	movq	0x198de(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   21eaa:      	callq	*%rax
   21eac:      	movq	%rax, %rdi
   21eaf:      	movq	%rdx, %rsi
   21eb2:      	movq	0x198d7(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   21eb9:      	callq	*%rax
   21ebb:      	movq	%rax, 0xd0(%rsp)
   21ec3:      	movq	%rdx, 0xd8(%rsp)
   21ecb:      	jmp	0x220fc <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x3ac>
   21ed0:      	movq	0x198c1(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   21ed7:      	leaq	0xf0(%rsp), %rdi
   21edf:      	callq	*%rax
   21ee1:      	movq	%rax, 0x100(%rsp)
   21ee9:      	movq	0x100(%rsp), %rdx
   21ef1:      	movl	$0x1, %eax
   21ef6:      	xorl	%ecx, %ecx
   21ef8:      	cmpq	$0x0, %rdx
   21efc:      	cmoveq	%rcx, %rax
   21f00:      	cmpq	$0x0, %rax
   21f04:      	jne	0x21fc8 <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x278>
   21f0a:      	movq	0xc8(%rsp), %rax
   21f12:      	movq	%rax, 0x110(%rsp)
   21f1a:      	movq	0x110(%rsp), %rsi
   21f22:      	leaq	0x17fbf(%rip), %rdx     # 0x39ee8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x278>
   21f29:      	movq	0x19870(%rip), %rax     # 0x3b7a0 <zlgk82z0l71lvh9+0x3b7a0>
   21f30:      	leaq	0x48(%rsp), %rdi
   21f35:      	callq	*%rax
   21f37:      	movq	%rax, %rdi
   21f3a:      	movq	%rdx, %rsi
   21f3d:      	movq	%rdi, 0x140(%rsp)
   21f45:      	movq	%rsi, 0x148(%rsp)
   21f4d:      	movq	%rdi, 0x1a8(%rsp)
   21f55:      	movq	%rsi, 0x1b0(%rsp)
   21f5d:      	movq	%rdi, 0x1b8(%rsp)
   21f65:      	movq	%rsi, 0x1c0(%rsp)
   21f6d:      	movq	0x19674(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   21f74:      	callq	*%rax
   21f76:      	movq	%rax, %rdi
   21f79:      	movq	%rdx, %rsi
   21f7c:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   21f81:      	movq	0x28(%rsp), %rdi
   21f86:      	movq	%rax, %r8
   21f89:      	movb	0x44(%rsp), %al
   21f8d:      	movq	%rdx, %r9
   21f90:      	movq	%r8, 0x150(%rsp)
   21f98:      	movq	%r9, 0x158(%rsp)
   21fa0:      	movzbl	%al, %esi
   21fa3:      	andl	$0x1, %esi
   21fa6:      	leaq	-0x1064c(%rip), %rdx    # 0x11961 <str.0+0x21>
   21fad:      	movq	0x197f4(%rip), %rax     # 0x3b7a8 <zlgk82z0l71lvh9+0x3b7a8>
   21fb4:      	movl	$0x2, %ecx
   21fb9:      	callq	*%rax
   21fbb:      	andb	$0x1, %al
   21fbd:      	movzbl	%al, %eax
   21fc0:      	addq	$0x1d8, %rsp            # imm = 0x1D8
   21fc7:      	retq
   21fc8:      	movb	0x45(%rsp), %al
   21fcc:      	movq	0x100(%rsp), %rcx
   21fd4:      	movq	%rcx, 0x18(%rsp)
   21fd9:      	movq	%rcx, 0x130(%rsp)
   21fe1:      	movb	0x47(%rsp), %cl
   21fe5:      	movb	%cl, 0x17(%rsp)
   21fe9:      	movb	0x46(%rsp), %cl
   21fed:      	movzbl	%cl, %edi
   21ff0:      	movzbl	%al, %esi
   21ff3:      	callq	0x2fac0 <<u8 as core::ops::arith::Rem>::rem::h0ff1b38ff5e2f387>
   21ff8:      	movb	0x17(%rsp), %cl
   21ffc:      	movzbl	%cl, %edi
   21fff:      	movzbl	%al, %esi
   22002:      	callq	0x2f810 <<u8 as core::ops::arith::Sub>::sub::h1e779299b457b7b4>
   22007:      	movb	%al, %cl
   22009:      	movb	0x45(%rsp), %al
   2200d:      	movb	%cl, 0x10f(%rsp)
   22014:      	movb	0x46(%rsp), %cl
   22018:      	movzbl	%cl, %edi
   2201b:      	movzbl	%al, %esi
   2201e:      	callq	0x2f960 <<u8 as core::ops::arith::Div>::div::ha800a8b9398cee7b>
   22023:      	movb	%al, 0x46(%rsp)
   22027:      	movq	0x196d2(%rip), %rax     # 0x3b700 <zlgk82z0l71lvh9+0x3b700>
   2202e:      	leaq	0x10f(%rsp), %rdi
   22036:      	callq	*%rax
   22038:      	movzbl	%al, %edi
   2203b:      	movq	0x196ce(%rip), %rax     # 0x3b710 <zlgk82z0l71lvh9+0x3b710>
   22042:      	callq	*%rax
   22044:      	movb	%al, %cl
   22046:      	movq	0x18(%rsp), %rax
   2204b:      	movq	%rax, 0x178(%rsp)
   22053:      	movb	%cl, 0x183(%rsp)
   2205a:      	movb	%cl, 0x185(%rsp)
   22061:      	movb	%cl, 0x187(%rsp)
   22068:      	movb	%cl, 0x186(%rsp)
   2206f:      	movb	0x186(%rsp), %cl
   22076:      	movb	%cl, 0x184(%rsp)
   2207d:      	movb	0x184(%rsp), %cl
   22084:      	movb	%cl, (%rax)
   22086:      	movq	%rax, 0x188(%rsp)
   2208e:      	movq	%rax, 0x190(%rsp)
   22096:      	movq	0xc8(%rsp), %rax
   2209e:      	movq	%rax, %rcx
   220a1:      	subq	$0x1, %rcx
   220a5:      	movq	%rcx, 0x20(%rsp)
   220aa:      	cmpq	$0x1, %rax
   220ae:      	setb	%al
   220b1:      	testb	$0x1, %al
   220b3:      	jne	0x220de <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x38e>
   220b5:      	movq	0x20(%rsp), %rax
   220ba:      	movq	%rax, 0xc8(%rsp)
   220c2:      	leaq	0x46(%rsp), %rdi
   220c7:      	leaq	0x47(%rsp), %rsi
   220cc:      	callq	0x30fc0 <core::cmp::impls::<impl core::cmp::PartialEq for u8>::eq::hfa1ee48ca5d9a958>
   220d1:      	testb	$0x1, %al
   220d3:      	jne	0x21f0a <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x1ba>
   220d9:      	jmp	0x21ed0 <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x180>
   220de:      	leaq	-0x107a5(%rip), %rdi    # 0x11940 <str.0>
   220e5:      	leaq	0x17dcc(%rip), %rdx     # 0x39eb8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x248>
   220ec:      	movq	0x18ddd(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   220f3:      	movl	$0x21, %esi
   220f8:      	callq	*%rax
   220fa:      	ud2
   220fc:      	movq	0x19695(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   22103:      	leaq	0xd0(%rsp), %rdi
   2210b:      	callq	*%rax
   2210d:      	movq	%rax, 0xe0(%rsp)
   22115:      	movq	0xe0(%rsp), %rdx
   2211d:      	movl	$0x1, %eax
   22122:      	xorl	%ecx, %ecx
   22124:      	cmpq	$0x0, %rdx
   22128:      	cmoveq	%rcx, %rax
   2212c:      	cmpq	$0x0, %rax
   22130:      	je	0x21f0a <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x1ba>
   22136:      	movb	0x45(%rsp), %al
   2213a:      	movq	0xe0(%rsp), %rcx
   22142:      	movq	%rcx, (%rsp)
   22146:      	movq	%rcx, 0x138(%rsp)
   2214e:      	movb	0x46(%rsp), %cl
   22152:      	movzbl	%cl, %edi
   22155:      	movzbl	%al, %esi
   22158:      	callq	0x2fac0 <<u8 as core::ops::arith::Rem>::rem::h0ff1b38ff5e2f387>
   2215d:      	movb	%al, %cl
   2215f:      	movb	0x45(%rsp), %al
   22163:      	movb	%cl, 0xef(%rsp)
   2216a:      	movb	0x46(%rsp), %cl
   2216e:      	movzbl	%cl, %edi
   22171:      	movzbl	%al, %esi
   22174:      	callq	0x2f960 <<u8 as core::ops::arith::Div>::div::ha800a8b9398cee7b>
   22179:      	movb	%al, 0x46(%rsp)
   2217d:      	movq	0x1957c(%rip), %rax     # 0x3b700 <zlgk82z0l71lvh9+0x3b700>
   22184:      	leaq	0xef(%rsp), %rdi
   2218c:      	callq	*%rax
   2218e:      	movzbl	%al, %edi
   22191:      	movq	0x19578(%rip), %rax     # 0x3b710 <zlgk82z0l71lvh9+0x3b710>
   22198:      	callq	*%rax
   2219a:      	movb	%al, %cl
   2219c:      	movq	(%rsp), %rax
   221a0:      	movq	%rax, 0x168(%rsp)
   221a8:      	movb	%cl, 0x173(%rsp)
   221af:      	movb	%cl, 0x175(%rsp)
   221b6:      	movb	%cl, 0x177(%rsp)
   221bd:      	movb	%cl, 0x176(%rsp)
   221c4:      	movb	0x176(%rsp), %cl
   221cb:      	movb	%cl, 0x174(%rsp)
   221d2:      	movb	0x174(%rsp), %cl
   221d9:      	movb	%cl, (%rax)
   221db:      	movq	%rax, 0x198(%rsp)
   221e3:      	movq	%rax, 0x1a0(%rsp)
   221eb:      	movq	0xc8(%rsp), %rax
   221f3:      	movq	%rax, %rcx
   221f6:      	subq	$0x1, %rcx
   221fa:      	movq	%rcx, 0x8(%rsp)
   221ff:      	cmpq	$0x1, %rax
   22203:      	setb	%al
   22206:      	testb	$0x1, %al
   22208:      	jne	0x22233 <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x4e3>
   2220a:      	movq	0x8(%rsp), %rax
   2220f:      	movq	%rax, 0xc8(%rsp)
   22217:      	leaq	0x46(%rsp), %rdi
   2221c:      	leaq	0x47(%rsp), %rsi
   22221:      	callq	0x30fc0 <core::cmp::impls::<impl core::cmp::PartialEq for u8>::eq::hfa1ee48ca5d9a958>
   22226:      	testb	$0x1, %al
   22228:      	jne	0x21f0a <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x1ba>
   2222e:      	jmp	0x220fc <core::fmt::num::GenericRadix::fmt_int::h170d89f403926c02+0x3ac>
   22233:      	leaq	-0x108fa(%rip), %rdi    # 0x11940 <str.0>
   2223a:      	leaq	0x17c8f(%rip), %rdx     # 0x39ed0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x260>
   22241:      	movq	0x18c88(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   22248:      	movl	$0x21, %esi
   2224d:      	callq	*%rax
   2224f:      	ud2
   22251:      	int3
   22252:      	int3
   22253:      	int3
   22254:      	int3
   22255:      	int3
   22256:      	int3
   22257:      	int3
   22258:      	int3
   22259:      	int3
   2225a:      	int3
   2225b:      	int3
   2225c:      	int3
   2225d:      	int3
   2225e:      	int3
   2225f:      	int3

0000000000022260 <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6>:
   22260:      	subq	$0x1f8, %rsp            # imm = 0x1F8
   22267:      	movq	%rdx, 0x28(%rsp)
   2226c:      	movq	%rsi, 0x50(%rsp)
   22271:      	movq	%rdi, 0x130(%rsp)
   22279:      	movq	%rdx, 0x138(%rsp)
   22281:      	movq	0x194b0(%rip), %rax     # 0x3b738 <zlgk82z0l71lvh9+0x3b738>
   22288:      	callq	*%rax
   2228a:      	movq	%rax, 0x58(%rsp)
   2228f:      	leaq	0x50(%rsp), %rax
   22294:      	movq	%rax, 0x1e8(%rsp)
   2229c:      	leaq	0x58(%rsp), %rax
   222a1:      	movq	%rax, 0x1f0(%rsp)
   222a9:      	movq	0x50(%rsp), %rax
   222ae:      	cmpq	0x58(%rsp), %rax
   222b3:      	setae	%al
   222b6:      	movb	%al, 0x47(%rsp)
   222ba:      	andb	$0x1, %al
   222bc:      	movb	%al, 0x147(%rsp)
   222c3:      	movb	0x187(%rsp), %cl
   222ca:      	leaq	0x60(%rsp), %rax
   222cf:      	movq	%rax, 0x30(%rsp)
   222d4:      	movzbl	%cl, %ecx
   222d7:      	movabsq	$0x101010101010101, %rdx # imm = 0x101010101010101
   222e1:      	imulq	%rdx, %rcx
   222e5:      	movq	%rcx, 0x38(%rsp)
   222ea:      	movq	%rcx, 0x78(%rax)
   222ee:      	movq	%rcx, 0x70(%rax)
   222f2:      	movq	%rcx, 0x68(%rax)
   222f6:      	movq	%rcx, 0x60(%rax)
   222fa:      	movq	%rcx, 0x58(%rax)
   222fe:      	movq	%rcx, 0x50(%rax)
   22302:      	movq	%rcx, 0x48(%rax)
   22306:      	movq	%rcx, 0x40(%rax)
   2230a:      	movq	%rcx, 0x38(%rax)
   2230e:      	movq	%rcx, 0x30(%rax)
   22312:      	movq	%rcx, 0x28(%rax)
   22316:      	movq	%rcx, 0x20(%rax)
   2231a:      	movq	%rcx, 0x18(%rax)
   2231e:      	movq	%rcx, 0x10(%rax)
   22322:      	movq	%rcx, 0x8(%rax)
   22326:      	movq	%rcx, (%rax)
   22329:      	movq	$0x80, 0xe0(%rsp)
   22335:      	movq	0x19404(%rip), %rax     # 0x3b740 <zlgk82z0l71lvh9+0x3b740>
   2233c:      	movl	$0x10, %edi
   22341:      	callq	*%rax
   22343:      	movq	%rax, %rcx
   22346:      	movb	0x47(%rsp), %al
   2234a:      	movq	%rcx, 0x48(%rsp)
   2234f:      	movq	%rcx, 0x148(%rsp)
   22357:      	testb	$0x1, %al
   22359:      	jne	0x2239e <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x13e>
   2235b:      	movq	0x1941e(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   22362:      	leaq	0x60(%rsp), %rdi
   22367:      	movl	$0x80, %esi
   2236c:      	callq	*%rax
   2236e:      	movq	%rax, %rdi
   22371:      	movq	%rdx, %rsi
   22374:      	movq	0x1940d(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   2237b:      	callq	*%rax
   2237d:      	movq	%rax, %rdi
   22380:      	movq	%rdx, %rsi
   22383:      	movq	0x19406(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   2238a:      	callq	*%rax
   2238c:      	movq	%rax, 0x108(%rsp)
   22394:      	movq	%rdx, 0x110(%rsp)
   2239c:      	jmp	0x223e4 <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x184>
   2239e:      	movq	0x193db(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   223a5:      	leaq	0x60(%rsp), %rdi
   223aa:      	movl	$0x80, %esi
   223af:      	callq	*%rax
   223b1:      	movq	%rax, %rdi
   223b4:      	movq	%rdx, %rsi
   223b7:      	movq	0x193ca(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   223be:      	callq	*%rax
   223c0:      	movq	%rax, %rdi
   223c3:      	movq	%rdx, %rsi
   223c6:      	movq	0x193c3(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   223cd:      	callq	*%rax
   223cf:      	movq	%rax, 0xe8(%rsp)
   223d7:      	movq	%rdx, 0xf0(%rsp)
   223df:      	jmp	0x22608 <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x3a8>
   223e4:      	movq	0x193ad(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   223eb:      	leaq	0x108(%rsp), %rdi
   223f3:      	callq	*%rax
   223f5:      	movq	%rax, 0x118(%rsp)
   223fd:      	movq	0x118(%rsp), %rdx
   22405:      	movl	$0x1, %eax
   2240a:      	xorl	%ecx, %ecx
   2240c:      	cmpq	$0x0, %rdx
   22410:      	cmoveq	%rcx, %rax
   22414:      	cmpq	$0x0, %rax
   22418:      	jne	0x224dc <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x27c>
   2241e:      	movq	0xe0(%rsp), %rax
   22426:      	movq	%rax, 0x128(%rsp)
   2242e:      	movq	0x128(%rsp), %rsi
   22436:      	leaq	0x17aab(%rip), %rdx     # 0x39ee8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x278>
   2243d:      	movq	0x1935c(%rip), %rax     # 0x3b7a0 <zlgk82z0l71lvh9+0x3b7a0>
   22444:      	leaq	0x60(%rsp), %rdi
   22449:      	callq	*%rax
   2244b:      	movq	%rax, %rdi
   2244e:      	movq	%rdx, %rsi
   22451:      	movq	%rdi, 0x160(%rsp)
   22459:      	movq	%rsi, 0x168(%rsp)
   22461:      	movq	%rdi, 0x1c8(%rsp)
   22469:      	movq	%rsi, 0x1d0(%rsp)
   22471:      	movq	%rdi, 0x1d8(%rsp)
   22479:      	movq	%rsi, 0x1e0(%rsp)
   22481:      	movq	0x19160(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   22488:      	callq	*%rax
   2248a:      	movq	%rax, %rdi
   2248d:      	movq	%rdx, %rsi
   22490:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   22495:      	movq	0x28(%rsp), %rdi
   2249a:      	movq	%rax, %r8
   2249d:      	movb	0x47(%rsp), %al
   224a1:      	movq	%rdx, %r9
   224a4:      	movq	%r8, 0x170(%rsp)
   224ac:      	movq	%r9, 0x178(%rsp)
   224b4:      	movzbl	%al, %esi
   224b7:      	andl	$0x1, %esi
   224ba:      	leaq	-0x10b60(%rip), %rdx    # 0x11961 <str.0+0x21>
   224c1:      	movq	0x192e0(%rip), %rax     # 0x3b7a8 <zlgk82z0l71lvh9+0x3b7a8>
   224c8:      	movl	$0x2, %ecx
   224cd:      	callq	*%rax
   224cf:      	andb	$0x1, %al
   224d1:      	movzbl	%al, %eax
   224d4:      	addq	$0x1f8, %rsp            # imm = 0x1F8
   224db:      	retq
   224dc:      	movq	0x48(%rsp), %rsi
   224e1:      	movq	0x118(%rsp), %rax
   224e9:      	movq	%rax, 0x18(%rsp)
   224ee:      	movq	%rax, 0x150(%rsp)
   224f6:      	movq	0x58(%rsp), %rax
   224fb:      	movq	%rax, 0x10(%rsp)
   22500:      	movq	0x50(%rsp), %rdi
   22505:      	callq	0x2fb70 <<u64 as core::ops::arith::Rem>::rem::hd286ea914da001dd>
   2250a:      	movq	0x10(%rsp), %rdi
   2250f:      	movq	%rax, %rsi
   22512:      	callq	0x2f8b0 <<u64 as core::ops::arith::Sub>::sub::h56ef233acba06873>
   22517:      	movq	0x48(%rsp), %rsi
   2251c:      	movq	%rax, 0x120(%rsp)
   22524:      	movq	0x50(%rsp), %rdi
   22529:      	callq	0x2fa00 <<u64 as core::ops::arith::Div>::div::hc8d4786271e1fa7b>
   2252e:      	movq	%rax, 0x50(%rsp)
   22533:      	movq	0x1920e(%rip), %rax     # 0x3b748 <zlgk82z0l71lvh9+0x3b748>
   2253a:      	leaq	0x120(%rsp), %rdi
   22542:      	callq	*%rax
   22544:      	movzbl	%al, %edi
   22547:      	movq	0x191c2(%rip), %rax     # 0x3b710 <zlgk82z0l71lvh9+0x3b710>
   2254e:      	callq	*%rax
   22550:      	movb	%al, %cl
   22552:      	movq	0x18(%rsp), %rax
   22557:      	movq	%rax, 0x198(%rsp)
   2255f:      	movb	%cl, 0x1a3(%rsp)
   22566:      	movb	%cl, 0x1a5(%rsp)
   2256d:      	movb	%cl, 0x1a7(%rsp)
   22574:      	movb	%cl, 0x1a6(%rsp)
   2257b:      	movb	0x1a6(%rsp), %cl
   22582:      	movb	%cl, 0x1a4(%rsp)
   22589:      	movb	0x1a4(%rsp), %cl
   22590:      	movb	%cl, (%rax)
   22592:      	movq	%rax, 0x1a8(%rsp)
   2259a:      	movq	%rax, 0x1b0(%rsp)
   225a2:      	movq	0xe0(%rsp), %rax
   225aa:      	movq	%rax, %rcx
   225ad:      	subq	$0x1, %rcx
   225b1:      	movq	%rcx, 0x20(%rsp)
   225b6:      	cmpq	$0x1, %rax
   225ba:      	setb	%al
   225bd:      	testb	$0x1, %al
   225bf:      	jne	0x225ea <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x38a>
   225c1:      	movq	0x20(%rsp), %rax
   225c6:      	movq	%rax, 0xe0(%rsp)
   225ce:      	leaq	0x50(%rsp), %rdi
   225d3:      	leaq	0x58(%rsp), %rsi
   225d8:      	callq	0x31000 <core::cmp::impls::<impl core::cmp::PartialEq for u64>::eq::h99b26a78897b40e2>
   225dd:      	testb	$0x1, %al
   225df:      	jne	0x2241e <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x1be>
   225e5:      	jmp	0x223e4 <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x184>
   225ea:      	leaq	-0x10cb1(%rip), %rdi    # 0x11940 <str.0>
   225f1:      	leaq	0x178c0(%rip), %rdx     # 0x39eb8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x248>
   225f8:      	movq	0x188d1(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   225ff:      	movl	$0x21, %esi
   22604:      	callq	*%rax
   22606:      	ud2
   22608:      	movq	0x19189(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   2260f:      	leaq	0xe8(%rsp), %rdi
   22617:      	callq	*%rax
   22619:      	movq	%rax, 0xf8(%rsp)
   22621:      	movq	0xf8(%rsp), %rdx
   22629:      	movl	$0x1, %eax
   2262e:      	xorl	%ecx, %ecx
   22630:      	cmpq	$0x0, %rdx
   22634:      	cmoveq	%rcx, %rax
   22638:      	cmpq	$0x0, %rax
   2263c:      	je	0x2241e <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x1be>
   22642:      	movq	0x48(%rsp), %rsi
   22647:      	movq	0xf8(%rsp), %rax
   2264f:      	movq	%rax, (%rsp)
   22653:      	movq	%rax, 0x158(%rsp)
   2265b:      	movq	0x50(%rsp), %rdi
   22660:      	callq	0x2fb70 <<u64 as core::ops::arith::Rem>::rem::hd286ea914da001dd>
   22665:      	movq	0x48(%rsp), %rsi
   2266a:      	movq	%rax, 0x100(%rsp)
   22672:      	movq	0x50(%rsp), %rdi
   22677:      	callq	0x2fa00 <<u64 as core::ops::arith::Div>::div::hc8d4786271e1fa7b>
   2267c:      	movq	%rax, 0x50(%rsp)
   22681:      	movq	0x190c0(%rip), %rax     # 0x3b748 <zlgk82z0l71lvh9+0x3b748>
   22688:      	leaq	0x100(%rsp), %rdi
   22690:      	callq	*%rax
   22692:      	movzbl	%al, %edi
   22695:      	movq	0x19074(%rip), %rax     # 0x3b710 <zlgk82z0l71lvh9+0x3b710>
   2269c:      	callq	*%rax
   2269e:      	movb	%al, %cl
   226a0:      	movq	(%rsp), %rax
   226a4:      	movq	%rax, 0x188(%rsp)
   226ac:      	movb	%cl, 0x193(%rsp)
   226b3:      	movb	%cl, 0x195(%rsp)
   226ba:      	movb	%cl, 0x197(%rsp)
   226c1:      	movb	%cl, 0x196(%rsp)
   226c8:      	movb	0x196(%rsp), %cl
   226cf:      	movb	%cl, 0x194(%rsp)
   226d6:      	movb	0x194(%rsp), %cl
   226dd:      	movb	%cl, (%rax)
   226df:      	movq	%rax, 0x1b8(%rsp)
   226e7:      	movq	%rax, 0x1c0(%rsp)
   226ef:      	movq	0xe0(%rsp), %rax
   226f7:      	movq	%rax, %rcx
   226fa:      	subq	$0x1, %rcx
   226fe:      	movq	%rcx, 0x8(%rsp)
   22703:      	cmpq	$0x1, %rax
   22707:      	setb	%al
   2270a:      	testb	$0x1, %al
   2270c:      	jne	0x22737 <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x4d7>
   2270e:      	movq	0x8(%rsp), %rax
   22713:      	movq	%rax, 0xe0(%rsp)
   2271b:      	leaq	0x50(%rsp), %rdi
   22720:      	leaq	0x58(%rsp), %rsi
   22725:      	callq	0x31000 <core::cmp::impls::<impl core::cmp::PartialEq for u64>::eq::h99b26a78897b40e2>
   2272a:      	testb	$0x1, %al
   2272c:      	jne	0x2241e <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x1be>
   22732:      	jmp	0x22608 <core::fmt::num::GenericRadix::fmt_int::h3cfe78b9beafe7f6+0x3a8>
   22737:      	leaq	-0x10dfe(%rip), %rdi    # 0x11940 <str.0>
   2273e:      	leaq	0x1778b(%rip), %rdx     # 0x39ed0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x260>
   22745:      	movq	0x18784(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2274c:      	movl	$0x21, %esi
   22751:      	callq	*%rax
   22753:      	ud2
   22755:      	int3
   22756:      	int3
   22757:      	int3
   22758:      	int3
   22759:      	int3
   2275a:      	int3
   2275b:      	int3
   2275c:      	int3
   2275d:      	int3
   2275e:      	int3
   2275f:      	int3

0000000000022760 <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805>:
   22760:      	subq	$0x1f8, %rsp            # imm = 0x1F8
   22767:      	movq	%rdx, 0x28(%rsp)
   2276c:      	movq	%rsi, 0x50(%rsp)
   22771:      	movq	%rdi, 0x130(%rsp)
   22779:      	movq	%rdx, 0x138(%rsp)
   22781:      	movq	0x18f90(%rip), %rax     # 0x3b718 <zlgk82z0l71lvh9+0x3b718>
   22788:      	callq	*%rax
   2278a:      	movq	%rax, 0x58(%rsp)
   2278f:      	leaq	0x50(%rsp), %rax
   22794:      	movq	%rax, 0x1e8(%rsp)
   2279c:      	leaq	0x58(%rsp), %rax
   227a1:      	movq	%rax, 0x1f0(%rsp)
   227a9:      	movq	0x50(%rsp), %rax
   227ae:      	cmpq	0x58(%rsp), %rax
   227b3:      	setae	%al
   227b6:      	movb	%al, 0x47(%rsp)
   227ba:      	andb	$0x1, %al
   227bc:      	movb	%al, 0x147(%rsp)
   227c3:      	movb	0x187(%rsp), %cl
   227ca:      	leaq	0x60(%rsp), %rax
   227cf:      	movq	%rax, 0x30(%rsp)
   227d4:      	movzbl	%cl, %ecx
   227d7:      	movabsq	$0x101010101010101, %rdx # imm = 0x101010101010101
   227e1:      	imulq	%rdx, %rcx
   227e5:      	movq	%rcx, 0x38(%rsp)
   227ea:      	movq	%rcx, 0x78(%rax)
   227ee:      	movq	%rcx, 0x70(%rax)
   227f2:      	movq	%rcx, 0x68(%rax)
   227f6:      	movq	%rcx, 0x60(%rax)
   227fa:      	movq	%rcx, 0x58(%rax)
   227fe:      	movq	%rcx, 0x50(%rax)
   22802:      	movq	%rcx, 0x48(%rax)
   22806:      	movq	%rcx, 0x40(%rax)
   2280a:      	movq	%rcx, 0x38(%rax)
   2280e:      	movq	%rcx, 0x30(%rax)
   22812:      	movq	%rcx, 0x28(%rax)
   22816:      	movq	%rcx, 0x20(%rax)
   2281a:      	movq	%rcx, 0x18(%rax)
   2281e:      	movq	%rcx, 0x10(%rax)
   22822:      	movq	%rcx, 0x8(%rax)
   22826:      	movq	%rcx, (%rax)
   22829:      	movq	$0x80, 0xe0(%rsp)
   22835:      	movq	0x18ee4(%rip), %rax     # 0x3b720 <zlgk82z0l71lvh9+0x3b720>
   2283c:      	movl	$0x10, %edi
   22841:      	callq	*%rax
   22843:      	movq	%rax, %rcx
   22846:      	movb	0x47(%rsp), %al
   2284a:      	movq	%rcx, 0x48(%rsp)
   2284f:      	movq	%rcx, 0x148(%rsp)
   22857:      	testb	$0x1, %al
   22859:      	jne	0x2289e <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x13e>
   2285b:      	movq	0x18f1e(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   22862:      	leaq	0x60(%rsp), %rdi
   22867:      	movl	$0x80, %esi
   2286c:      	callq	*%rax
   2286e:      	movq	%rax, %rdi
   22871:      	movq	%rdx, %rsi
   22874:      	movq	0x18f0d(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   2287b:      	callq	*%rax
   2287d:      	movq	%rax, %rdi
   22880:      	movq	%rdx, %rsi
   22883:      	movq	0x18f06(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   2288a:      	callq	*%rax
   2288c:      	movq	%rax, 0x108(%rsp)
   22894:      	movq	%rdx, 0x110(%rsp)
   2289c:      	jmp	0x228e4 <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x184>
   2289e:      	movq	0x18edb(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   228a5:      	leaq	0x60(%rsp), %rdi
   228aa:      	movl	$0x80, %esi
   228af:      	callq	*%rax
   228b1:      	movq	%rax, %rdi
   228b4:      	movq	%rdx, %rsi
   228b7:      	movq	0x18eca(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   228be:      	callq	*%rax
   228c0:      	movq	%rax, %rdi
   228c3:      	movq	%rdx, %rsi
   228c6:      	movq	0x18ec3(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   228cd:      	callq	*%rax
   228cf:      	movq	%rax, 0xe8(%rsp)
   228d7:      	movq	%rdx, 0xf0(%rsp)
   228df:      	jmp	0x22b08 <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x3a8>
   228e4:      	movq	0x18ead(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   228eb:      	leaq	0x108(%rsp), %rdi
   228f3:      	callq	*%rax
   228f5:      	movq	%rax, 0x118(%rsp)
   228fd:      	movq	0x118(%rsp), %rdx
   22905:      	movl	$0x1, %eax
   2290a:      	xorl	%ecx, %ecx
   2290c:      	cmpq	$0x0, %rdx
   22910:      	cmoveq	%rcx, %rax
   22914:      	cmpq	$0x0, %rax
   22918:      	jne	0x229dc <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x27c>
   2291e:      	movq	0xe0(%rsp), %rax
   22926:      	movq	%rax, 0x128(%rsp)
   2292e:      	movq	0x128(%rsp), %rsi
   22936:      	leaq	0x175ab(%rip), %rdx     # 0x39ee8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x278>
   2293d:      	movq	0x18e5c(%rip), %rax     # 0x3b7a0 <zlgk82z0l71lvh9+0x3b7a0>
   22944:      	leaq	0x60(%rsp), %rdi
   22949:      	callq	*%rax
   2294b:      	movq	%rax, %rdi
   2294e:      	movq	%rdx, %rsi
   22951:      	movq	%rdi, 0x160(%rsp)
   22959:      	movq	%rsi, 0x168(%rsp)
   22961:      	movq	%rdi, 0x1c8(%rsp)
   22969:      	movq	%rsi, 0x1d0(%rsp)
   22971:      	movq	%rdi, 0x1d8(%rsp)
   22979:      	movq	%rsi, 0x1e0(%rsp)
   22981:      	movq	0x18c60(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   22988:      	callq	*%rax
   2298a:      	movq	%rax, %rdi
   2298d:      	movq	%rdx, %rsi
   22990:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   22995:      	movq	0x28(%rsp), %rdi
   2299a:      	movq	%rax, %r8
   2299d:      	movb	0x47(%rsp), %al
   229a1:      	movq	%rdx, %r9
   229a4:      	movq	%r8, 0x170(%rsp)
   229ac:      	movq	%r9, 0x178(%rsp)
   229b4:      	movzbl	%al, %esi
   229b7:      	andl	$0x1, %esi
   229ba:      	leaq	-0x11060(%rip), %rdx    # 0x11961 <str.0+0x21>
   229c1:      	movq	0x18de0(%rip), %rax     # 0x3b7a8 <zlgk82z0l71lvh9+0x3b7a8>
   229c8:      	movl	$0x2, %ecx
   229cd:      	callq	*%rax
   229cf:      	andb	$0x1, %al
   229d1:      	movzbl	%al, %eax
   229d4:      	addq	$0x1f8, %rsp            # imm = 0x1F8
   229db:      	retq
   229dc:      	movq	0x48(%rsp), %rsi
   229e1:      	movq	0x118(%rsp), %rax
   229e9:      	movq	%rax, 0x18(%rsp)
   229ee:      	movq	%rax, 0x150(%rsp)
   229f6:      	movq	0x58(%rsp), %rax
   229fb:      	movq	%rax, 0x10(%rsp)
   22a00:      	movq	0x50(%rsp), %rdi
   22a05:      	callq	0x2fa60 <<usize as core::ops::arith::Rem>::rem::hc48f557f0608a0c1>
   22a0a:      	movq	0x10(%rsp), %rdi
   22a0f:      	movq	%rax, %rsi
   22a12:      	callq	0x2f7c0 <<usize as core::ops::arith::Sub>::sub::hc5a3d01df045b7e0>
   22a17:      	movq	0x48(%rsp), %rsi
   22a1c:      	movq	%rax, 0x120(%rsp)
   22a24:      	movq	0x50(%rsp), %rdi
   22a29:      	callq	0x2f900 <<usize as core::ops::arith::Div>::div::h82f69659cfa15bfe>
   22a2e:      	movq	%rax, 0x50(%rsp)
   22a33:      	movq	0x18cee(%rip), %rax     # 0x3b728 <zlgk82z0l71lvh9+0x3b728>
   22a3a:      	leaq	0x120(%rsp), %rdi
   22a42:      	callq	*%rax
   22a44:      	movzbl	%al, %edi
   22a47:      	movq	0x18c92(%rip), %rax     # 0x3b6e0 <zlgk82z0l71lvh9+0x3b6e0>
   22a4e:      	callq	*%rax
   22a50:      	movb	%al, %cl
   22a52:      	movq	0x18(%rsp), %rax
   22a57:      	movq	%rax, 0x198(%rsp)
   22a5f:      	movb	%cl, 0x1a3(%rsp)
   22a66:      	movb	%cl, 0x1a5(%rsp)
   22a6d:      	movb	%cl, 0x1a7(%rsp)
   22a74:      	movb	%cl, 0x1a6(%rsp)
   22a7b:      	movb	0x1a6(%rsp), %cl
   22a82:      	movb	%cl, 0x1a4(%rsp)
   22a89:      	movb	0x1a4(%rsp), %cl
   22a90:      	movb	%cl, (%rax)
   22a92:      	movq	%rax, 0x1a8(%rsp)
   22a9a:      	movq	%rax, 0x1b0(%rsp)
   22aa2:      	movq	0xe0(%rsp), %rax
   22aaa:      	movq	%rax, %rcx
   22aad:      	subq	$0x1, %rcx
   22ab1:      	movq	%rcx, 0x20(%rsp)
   22ab6:      	cmpq	$0x1, %rax
   22aba:      	setb	%al
   22abd:      	testb	$0x1, %al
   22abf:      	jne	0x22aea <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x38a>
   22ac1:      	movq	0x20(%rsp), %rax
   22ac6:      	movq	%rax, 0xe0(%rsp)
   22ace:      	leaq	0x50(%rsp), %rdi
   22ad3:      	leaq	0x58(%rsp), %rsi
   22ad8:      	callq	0x30fa0 <core::cmp::impls::<impl core::cmp::PartialEq for usize>::eq::heb1a1db01a862a79>
   22add:      	testb	$0x1, %al
   22adf:      	jne	0x2291e <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x1be>
   22ae5:      	jmp	0x228e4 <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x184>
   22aea:      	leaq	-0x111b1(%rip), %rdi    # 0x11940 <str.0>
   22af1:      	leaq	0x173c0(%rip), %rdx     # 0x39eb8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x248>
   22af8:      	movq	0x183d1(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   22aff:      	movl	$0x21, %esi
   22b04:      	callq	*%rax
   22b06:      	ud2
   22b08:      	movq	0x18c89(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   22b0f:      	leaq	0xe8(%rsp), %rdi
   22b17:      	callq	*%rax
   22b19:      	movq	%rax, 0xf8(%rsp)
   22b21:      	movq	0xf8(%rsp), %rdx
   22b29:      	movl	$0x1, %eax
   22b2e:      	xorl	%ecx, %ecx
   22b30:      	cmpq	$0x0, %rdx
   22b34:      	cmoveq	%rcx, %rax
   22b38:      	cmpq	$0x0, %rax
   22b3c:      	je	0x2291e <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x1be>
   22b42:      	movq	0x48(%rsp), %rsi
   22b47:      	movq	0xf8(%rsp), %rax
   22b4f:      	movq	%rax, (%rsp)
   22b53:      	movq	%rax, 0x158(%rsp)
   22b5b:      	movq	0x50(%rsp), %rdi
   22b60:      	callq	0x2fa60 <<usize as core::ops::arith::Rem>::rem::hc48f557f0608a0c1>
   22b65:      	movq	0x48(%rsp), %rsi
   22b6a:      	movq	%rax, 0x100(%rsp)
   22b72:      	movq	0x50(%rsp), %rdi
   22b77:      	callq	0x2f900 <<usize as core::ops::arith::Div>::div::h82f69659cfa15bfe>
   22b7c:      	movq	%rax, 0x50(%rsp)
   22b81:      	movq	0x18ba0(%rip), %rax     # 0x3b728 <zlgk82z0l71lvh9+0x3b728>
   22b88:      	leaq	0x100(%rsp), %rdi
   22b90:      	callq	*%rax
   22b92:      	movzbl	%al, %edi
   22b95:      	movq	0x18b44(%rip), %rax     # 0x3b6e0 <zlgk82z0l71lvh9+0x3b6e0>
   22b9c:      	callq	*%rax
   22b9e:      	movb	%al, %cl
   22ba0:      	movq	(%rsp), %rax
   22ba4:      	movq	%rax, 0x188(%rsp)
   22bac:      	movb	%cl, 0x193(%rsp)
   22bb3:      	movb	%cl, 0x195(%rsp)
   22bba:      	movb	%cl, 0x197(%rsp)
   22bc1:      	movb	%cl, 0x196(%rsp)
   22bc8:      	movb	0x196(%rsp), %cl
   22bcf:      	movb	%cl, 0x194(%rsp)
   22bd6:      	movb	0x194(%rsp), %cl
   22bdd:      	movb	%cl, (%rax)
   22bdf:      	movq	%rax, 0x1b8(%rsp)
   22be7:      	movq	%rax, 0x1c0(%rsp)
   22bef:      	movq	0xe0(%rsp), %rax
   22bf7:      	movq	%rax, %rcx
   22bfa:      	subq	$0x1, %rcx
   22bfe:      	movq	%rcx, 0x8(%rsp)
   22c03:      	cmpq	$0x1, %rax
   22c07:      	setb	%al
   22c0a:      	testb	$0x1, %al
   22c0c:      	jne	0x22c37 <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x4d7>
   22c0e:      	movq	0x8(%rsp), %rax
   22c13:      	movq	%rax, 0xe0(%rsp)
   22c1b:      	leaq	0x50(%rsp), %rdi
   22c20:      	leaq	0x58(%rsp), %rsi
   22c25:      	callq	0x30fa0 <core::cmp::impls::<impl core::cmp::PartialEq for usize>::eq::heb1a1db01a862a79>
   22c2a:      	testb	$0x1, %al
   22c2c:      	jne	0x2291e <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x1be>
   22c32:      	jmp	0x22b08 <core::fmt::num::GenericRadix::fmt_int::h9966e57072382805+0x3a8>
   22c37:      	leaq	-0x112fe(%rip), %rdi    # 0x11940 <str.0>
   22c3e:      	leaq	0x1728b(%rip), %rdx     # 0x39ed0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x260>
   22c45:      	movq	0x18284(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   22c4c:      	movl	$0x21, %esi
   22c51:      	callq	*%rax
   22c53:      	ud2
   22c55:      	int3
   22c56:      	int3
   22c57:      	int3
   22c58:      	int3
   22c59:      	int3
   22c5a:      	int3
   22c5b:      	int3
   22c5c:      	int3
   22c5d:      	int3
   22c5e:      	int3
   22c5f:      	int3

0000000000022c60 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96>:
   22c60:      	subq	$0x1e8, %rsp            # imm = 0x1E8
   22c67:      	movq	%rdx, 0x30(%rsp)
   22c6c:      	movl	%esi, 0x50(%rsp)
   22c70:      	movq	%rdi, 0x128(%rsp)
   22c78:      	movq	%rdx, 0x130(%rsp)
   22c80:      	movq	0x18ac9(%rip), %rax     # 0x3b750 <zlgk82z0l71lvh9+0x3b750>
   22c87:      	callq	*%rax
   22c89:      	movl	%eax, 0x54(%rsp)
   22c8d:      	leaq	0x50(%rsp), %rax
   22c92:      	movq	%rax, 0x1d8(%rsp)
   22c9a:      	leaq	0x54(%rsp), %rax
   22c9f:      	movq	%rax, 0x1e0(%rsp)
   22ca7:      	movl	0x50(%rsp), %eax
   22cab:      	cmpl	0x54(%rsp), %eax
   22caf:      	setae	%al
   22cb2:      	movb	%al, 0x4b(%rsp)
   22cb6:      	andb	$0x1, %al
   22cb8:      	movb	%al, 0x13b(%rsp)
   22cbf:      	movb	0x177(%rsp), %cl
   22cc6:      	leaq	0x58(%rsp), %rax
   22ccb:      	movq	%rax, 0x38(%rsp)
   22cd0:      	movzbl	%cl, %ecx
   22cd3:      	movabsq	$0x101010101010101, %rdx # imm = 0x101010101010101
   22cdd:      	imulq	%rdx, %rcx
   22ce1:      	movq	%rcx, 0x40(%rsp)
   22ce6:      	movq	%rcx, 0x78(%rax)
   22cea:      	movq	%rcx, 0x70(%rax)
   22cee:      	movq	%rcx, 0x68(%rax)
   22cf2:      	movq	%rcx, 0x60(%rax)
   22cf6:      	movq	%rcx, 0x58(%rax)
   22cfa:      	movq	%rcx, 0x50(%rax)
   22cfe:      	movq	%rcx, 0x48(%rax)
   22d02:      	movq	%rcx, 0x40(%rax)
   22d06:      	movq	%rcx, 0x38(%rax)
   22d0a:      	movq	%rcx, 0x30(%rax)
   22d0e:      	movq	%rcx, 0x28(%rax)
   22d12:      	movq	%rcx, 0x20(%rax)
   22d16:      	movq	%rcx, 0x18(%rax)
   22d1a:      	movq	%rcx, 0x10(%rax)
   22d1e:      	movq	%rcx, 0x8(%rax)
   22d22:      	movq	%rcx, (%rax)
   22d25:      	movq	$0x80, 0xd8(%rsp)
   22d31:      	movq	0x18a20(%rip), %rax     # 0x3b758 <zlgk82z0l71lvh9+0x3b758>
   22d38:      	movl	$0x10, %edi
   22d3d:      	callq	*%rax
   22d3f:      	movl	%eax, %ecx
   22d41:      	movb	0x4b(%rsp), %al
   22d45:      	movl	%ecx, 0x4c(%rsp)
   22d49:      	movl	%ecx, 0x13c(%rsp)
   22d50:      	testb	$0x1, %al
   22d52:      	jne	0x22d97 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x137>
   22d54:      	movq	0x18a25(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   22d5b:      	leaq	0x58(%rsp), %rdi
   22d60:      	movl	$0x80, %esi
   22d65:      	callq	*%rax
   22d67:      	movq	%rax, %rdi
   22d6a:      	movq	%rdx, %rsi
   22d6d:      	movq	0x18a14(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   22d74:      	callq	*%rax
   22d76:      	movq	%rax, %rdi
   22d79:      	movq	%rdx, %rsi
   22d7c:      	movq	0x18a0d(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   22d83:      	callq	*%rax
   22d85:      	movq	%rax, 0x100(%rsp)
   22d8d:      	movq	%rdx, 0x108(%rsp)
   22d95:      	jmp	0x22ddd <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x17d>
   22d97:      	movq	0x189e2(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   22d9e:      	leaq	0x58(%rsp), %rdi
   22da3:      	movl	$0x80, %esi
   22da8:      	callq	*%rax
   22daa:      	movq	%rax, %rdi
   22dad:      	movq	%rdx, %rsi
   22db0:      	movq	0x189d1(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   22db7:      	callq	*%rax
   22db9:      	movq	%rax, %rdi
   22dbc:      	movq	%rdx, %rsi
   22dbf:      	movq	0x189ca(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   22dc6:      	callq	*%rax
   22dc8:      	movq	%rax, 0xe0(%rsp)
   22dd0:      	movq	%rdx, 0xe8(%rsp)
   22dd8:      	jmp	0x22ff7 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x397>
   22ddd:      	movq	0x189b4(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   22de4:      	leaq	0x100(%rsp), %rdi
   22dec:      	callq	*%rax
   22dee:      	movq	%rax, 0x110(%rsp)
   22df6:      	movq	0x110(%rsp), %rdx
   22dfe:      	movl	$0x1, %eax
   22e03:      	xorl	%ecx, %ecx
   22e05:      	cmpq	$0x0, %rdx
   22e09:      	cmoveq	%rcx, %rax
   22e0d:      	cmpq	$0x0, %rax
   22e11:      	jne	0x22ed5 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x275>
   22e17:      	movq	0xd8(%rsp), %rax
   22e1f:      	movq	%rax, 0x120(%rsp)
   22e27:      	movq	0x120(%rsp), %rsi
   22e2f:      	leaq	0x170b2(%rip), %rdx     # 0x39ee8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x278>
   22e36:      	movq	0x18963(%rip), %rax     # 0x3b7a0 <zlgk82z0l71lvh9+0x3b7a0>
   22e3d:      	leaq	0x58(%rsp), %rdi
   22e42:      	callq	*%rax
   22e44:      	movq	%rax, %rdi
   22e47:      	movq	%rdx, %rsi
   22e4a:      	movq	%rdi, 0x150(%rsp)
   22e52:      	movq	%rsi, 0x158(%rsp)
   22e5a:      	movq	%rdi, 0x1b8(%rsp)
   22e62:      	movq	%rsi, 0x1c0(%rsp)
   22e6a:      	movq	%rdi, 0x1c8(%rsp)
   22e72:      	movq	%rsi, 0x1d0(%rsp)
   22e7a:      	movq	0x18767(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   22e81:      	callq	*%rax
   22e83:      	movq	%rax, %rdi
   22e86:      	movq	%rdx, %rsi
   22e89:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   22e8e:      	movq	0x30(%rsp), %rdi
   22e93:      	movq	%rax, %r8
   22e96:      	movb	0x4b(%rsp), %al
   22e9a:      	movq	%rdx, %r9
   22e9d:      	movq	%r8, 0x160(%rsp)
   22ea5:      	movq	%r9, 0x168(%rsp)
   22ead:      	movzbl	%al, %esi
   22eb0:      	andl	$0x1, %esi
   22eb3:      	leaq	-0x11559(%rip), %rdx    # 0x11961 <str.0+0x21>
   22eba:      	movq	0x188e7(%rip), %rax     # 0x3b7a8 <zlgk82z0l71lvh9+0x3b7a8>
   22ec1:      	movl	$0x2, %ecx
   22ec6:      	callq	*%rax
   22ec8:      	andb	$0x1, %al
   22eca:      	movzbl	%al, %eax
   22ecd:      	addq	$0x1e8, %rsp            # imm = 0x1E8
   22ed4:      	retq
   22ed5:      	movl	0x4c(%rsp), %esi
   22ed9:      	movq	0x110(%rsp), %rax
   22ee1:      	movq	%rax, 0x20(%rsp)
   22ee6:      	movq	%rax, 0x140(%rsp)
   22eee:      	movl	0x54(%rsp), %eax
   22ef2:      	movl	%eax, 0x1c(%rsp)
   22ef6:      	movl	0x50(%rsp), %edi
   22efa:      	callq	0x2fb20 <<u32 as core::ops::arith::Rem>::rem::h20d945228922c7a4>
   22eff:      	movl	0x1c(%rsp), %edi
   22f03:      	movl	%eax, %esi
   22f05:      	callq	0x2f860 <<u32 as core::ops::arith::Sub>::sub::hc260d332fd620640>
   22f0a:      	movl	0x4c(%rsp), %esi
   22f0e:      	movl	%eax, 0x11c(%rsp)
   22f15:      	movl	0x50(%rsp), %edi
   22f19:      	callq	0x2f9b0 <<u32 as core::ops::arith::Div>::div::h3e00c19ee333945a>
   22f1e:      	movl	%eax, 0x50(%rsp)
   22f22:      	movq	0x18837(%rip), %rax     # 0x3b760 <zlgk82z0l71lvh9+0x3b760>
   22f29:      	leaq	0x11c(%rsp), %rdi
   22f31:      	callq	*%rax
   22f33:      	movzbl	%al, %edi
   22f36:      	movq	0x187d3(%rip), %rax     # 0x3b710 <zlgk82z0l71lvh9+0x3b710>
   22f3d:      	callq	*%rax
   22f3f:      	movb	%al, %cl
   22f41:      	movq	0x20(%rsp), %rax
   22f46:      	movq	%rax, 0x188(%rsp)
   22f4e:      	movb	%cl, 0x193(%rsp)
   22f55:      	movb	%cl, 0x195(%rsp)
   22f5c:      	movb	%cl, 0x197(%rsp)
   22f63:      	movb	%cl, 0x196(%rsp)
   22f6a:      	movb	0x196(%rsp), %cl
   22f71:      	movb	%cl, 0x194(%rsp)
   22f78:      	movb	0x194(%rsp), %cl
   22f7f:      	movb	%cl, (%rax)
   22f81:      	movq	%rax, 0x198(%rsp)
   22f89:      	movq	%rax, 0x1a0(%rsp)
   22f91:      	movq	0xd8(%rsp), %rax
   22f99:      	movq	%rax, %rcx
   22f9c:      	subq	$0x1, %rcx
   22fa0:      	movq	%rcx, 0x28(%rsp)
   22fa5:      	cmpq	$0x1, %rax
   22fa9:      	setb	%al
   22fac:      	testb	$0x1, %al
   22fae:      	jne	0x22fd9 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x379>
   22fb0:      	movq	0x28(%rsp), %rax
   22fb5:      	movq	%rax, 0xd8(%rsp)
   22fbd:      	leaq	0x50(%rsp), %rdi
   22fc2:      	leaq	0x54(%rsp), %rsi
   22fc7:      	callq	0x30fe0 <core::cmp::impls::<impl core::cmp::PartialEq for u32>::eq::h8083bd9c761ea911>
   22fcc:      	testb	$0x1, %al
   22fce:      	jne	0x22e17 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x1b7>
   22fd4:      	jmp	0x22ddd <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x17d>
   22fd9:      	leaq	-0x116a0(%rip), %rdi    # 0x11940 <str.0>
   22fe0:      	leaq	0x16ed1(%rip), %rdx     # 0x39eb8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x248>
   22fe7:      	movq	0x17ee2(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   22fee:      	movl	$0x21, %esi
   22ff3:      	callq	*%rax
   22ff5:      	ud2
   22ff7:      	movq	0x1879a(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   22ffe:      	leaq	0xe0(%rsp), %rdi
   23006:      	callq	*%rax
   23008:      	movq	%rax, 0xf0(%rsp)
   23010:      	movq	0xf0(%rsp), %rdx
   23018:      	movl	$0x1, %eax
   2301d:      	xorl	%ecx, %ecx
   2301f:      	cmpq	$0x0, %rdx
   23023:      	cmoveq	%rcx, %rax
   23027:      	cmpq	$0x0, %rax
   2302b:      	je	0x22e17 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x1b7>
   23031:      	movl	0x4c(%rsp), %esi
   23035:      	movq	0xf0(%rsp), %rax
   2303d:      	movq	%rax, 0x8(%rsp)
   23042:      	movq	%rax, 0x148(%rsp)
   2304a:      	movl	0x50(%rsp), %edi
   2304e:      	callq	0x2fb20 <<u32 as core::ops::arith::Rem>::rem::h20d945228922c7a4>
   23053:      	movl	0x4c(%rsp), %esi
   23057:      	movl	%eax, 0xfc(%rsp)
   2305e:      	movl	0x50(%rsp), %edi
   23062:      	callq	0x2f9b0 <<u32 as core::ops::arith::Div>::div::h3e00c19ee333945a>
   23067:      	movl	%eax, 0x50(%rsp)
   2306b:      	movq	0x186ee(%rip), %rax     # 0x3b760 <zlgk82z0l71lvh9+0x3b760>
   23072:      	leaq	0xfc(%rsp), %rdi
   2307a:      	callq	*%rax
   2307c:      	movzbl	%al, %edi
   2307f:      	movq	0x1868a(%rip), %rax     # 0x3b710 <zlgk82z0l71lvh9+0x3b710>
   23086:      	callq	*%rax
   23088:      	movb	%al, %cl
   2308a:      	movq	0x8(%rsp), %rax
   2308f:      	movq	%rax, 0x178(%rsp)
   23097:      	movb	%cl, 0x183(%rsp)
   2309e:      	movb	%cl, 0x185(%rsp)
   230a5:      	movb	%cl, 0x187(%rsp)
   230ac:      	movb	%cl, 0x186(%rsp)
   230b3:      	movb	0x186(%rsp), %cl
   230ba:      	movb	%cl, 0x184(%rsp)
   230c1:      	movb	0x184(%rsp), %cl
   230c8:      	movb	%cl, (%rax)
   230ca:      	movq	%rax, 0x1a8(%rsp)
   230d2:      	movq	%rax, 0x1b0(%rsp)
   230da:      	movq	0xd8(%rsp), %rax
   230e2:      	movq	%rax, %rcx
   230e5:      	subq	$0x1, %rcx
   230e9:      	movq	%rcx, 0x10(%rsp)
   230ee:      	cmpq	$0x1, %rax
   230f2:      	setb	%al
   230f5:      	testb	$0x1, %al
   230f7:      	jne	0x23122 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x4c2>
   230f9:      	movq	0x10(%rsp), %rax
   230fe:      	movq	%rax, 0xd8(%rsp)
   23106:      	leaq	0x50(%rsp), %rdi
   2310b:      	leaq	0x54(%rsp), %rsi
   23110:      	callq	0x30fe0 <core::cmp::impls::<impl core::cmp::PartialEq for u32>::eq::h8083bd9c761ea911>
   23115:      	testb	$0x1, %al
   23117:      	jne	0x22e17 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x1b7>
   2311d:      	jmp	0x22ff7 <core::fmt::num::GenericRadix::fmt_int::hab3b0a4eaa439b96+0x397>
   23122:      	leaq	-0x117e9(%rip), %rdi    # 0x11940 <str.0>
   23129:      	leaq	0x16da0(%rip), %rdx     # 0x39ed0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x260>
   23130:      	movq	0x17d99(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   23137:      	movl	$0x21, %esi
   2313c:      	callq	*%rax
   2313e:      	ud2

0000000000023140 <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135>:
   23140:      	subq	$0x1f8, %rsp            # imm = 0x1F8
   23147:      	movq	%rdx, 0x28(%rsp)
   2314c:      	movq	%rsi, 0x50(%rsp)
   23151:      	movq	%rdi, 0x130(%rsp)
   23159:      	movq	%rdx, 0x138(%rsp)
   23161:      	movq	0x185d0(%rip), %rax     # 0x3b738 <zlgk82z0l71lvh9+0x3b738>
   23168:      	callq	*%rax
   2316a:      	movq	%rax, 0x58(%rsp)
   2316f:      	leaq	0x50(%rsp), %rax
   23174:      	movq	%rax, 0x1e8(%rsp)
   2317c:      	leaq	0x58(%rsp), %rax
   23181:      	movq	%rax, 0x1f0(%rsp)
   23189:      	movq	0x50(%rsp), %rax
   2318e:      	cmpq	0x58(%rsp), %rax
   23193:      	setae	%al
   23196:      	movb	%al, 0x47(%rsp)
   2319a:      	andb	$0x1, %al
   2319c:      	movb	%al, 0x147(%rsp)
   231a3:      	movb	0x187(%rsp), %cl
   231aa:      	leaq	0x60(%rsp), %rax
   231af:      	movq	%rax, 0x30(%rsp)
   231b4:      	movzbl	%cl, %ecx
   231b7:      	movabsq	$0x101010101010101, %rdx # imm = 0x101010101010101
   231c1:      	imulq	%rdx, %rcx
   231c5:      	movq	%rcx, 0x38(%rsp)
   231ca:      	movq	%rcx, 0x78(%rax)
   231ce:      	movq	%rcx, 0x70(%rax)
   231d2:      	movq	%rcx, 0x68(%rax)
   231d6:      	movq	%rcx, 0x60(%rax)
   231da:      	movq	%rcx, 0x58(%rax)
   231de:      	movq	%rcx, 0x50(%rax)
   231e2:      	movq	%rcx, 0x48(%rax)
   231e6:      	movq	%rcx, 0x40(%rax)
   231ea:      	movq	%rcx, 0x38(%rax)
   231ee:      	movq	%rcx, 0x30(%rax)
   231f2:      	movq	%rcx, 0x28(%rax)
   231f6:      	movq	%rcx, 0x20(%rax)
   231fa:      	movq	%rcx, 0x18(%rax)
   231fe:      	movq	%rcx, 0x10(%rax)
   23202:      	movq	%rcx, 0x8(%rax)
   23206:      	movq	%rcx, (%rax)
   23209:      	movq	$0x80, 0xe0(%rsp)
   23215:      	movq	0x18524(%rip), %rax     # 0x3b740 <zlgk82z0l71lvh9+0x3b740>
   2321c:      	movl	$0x10, %edi
   23221:      	callq	*%rax
   23223:      	movq	%rax, %rcx
   23226:      	movb	0x47(%rsp), %al
   2322a:      	movq	%rcx, 0x48(%rsp)
   2322f:      	movq	%rcx, 0x148(%rsp)
   23237:      	testb	$0x1, %al
   23239:      	jne	0x2327e <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x13e>
   2323b:      	movq	0x1853e(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   23242:      	leaq	0x60(%rsp), %rdi
   23247:      	movl	$0x80, %esi
   2324c:      	callq	*%rax
   2324e:      	movq	%rax, %rdi
   23251:      	movq	%rdx, %rsi
   23254:      	movq	0x1852d(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   2325b:      	callq	*%rax
   2325d:      	movq	%rax, %rdi
   23260:      	movq	%rdx, %rsi
   23263:      	movq	0x18526(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   2326a:      	callq	*%rax
   2326c:      	movq	%rax, 0x108(%rsp)
   23274:      	movq	%rdx, 0x110(%rsp)
   2327c:      	jmp	0x232c4 <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x184>
   2327e:      	movq	0x184fb(%rip), %rax     # 0x3b780 <zlgk82z0l71lvh9+0x3b780>
   23285:      	leaq	0x60(%rsp), %rdi
   2328a:      	movl	$0x80, %esi
   2328f:      	callq	*%rax
   23291:      	movq	%rax, %rdi
   23294:      	movq	%rdx, %rsi
   23297:      	movq	0x184ea(%rip), %rax     # 0x3b788 <zlgk82z0l71lvh9+0x3b788>
   2329e:      	callq	*%rax
   232a0:      	movq	%rax, %rdi
   232a3:      	movq	%rdx, %rsi
   232a6:      	movq	0x184e3(%rip), %rax     # 0x3b790 <zlgk82z0l71lvh9+0x3b790>
   232ad:      	callq	*%rax
   232af:      	movq	%rax, 0xe8(%rsp)
   232b7:      	movq	%rdx, 0xf0(%rsp)
   232bf:      	jmp	0x234e8 <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x3a8>
   232c4:      	movq	0x184cd(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   232cb:      	leaq	0x108(%rsp), %rdi
   232d3:      	callq	*%rax
   232d5:      	movq	%rax, 0x118(%rsp)
   232dd:      	movq	0x118(%rsp), %rdx
   232e5:      	movl	$0x1, %eax
   232ea:      	xorl	%ecx, %ecx
   232ec:      	cmpq	$0x0, %rdx
   232f0:      	cmoveq	%rcx, %rax
   232f4:      	cmpq	$0x0, %rax
   232f8:      	jne	0x233bc <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x27c>
   232fe:      	movq	0xe0(%rsp), %rax
   23306:      	movq	%rax, 0x128(%rsp)
   2330e:      	movq	0x128(%rsp), %rsi
   23316:      	leaq	0x16bcb(%rip), %rdx     # 0x39ee8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x278>
   2331d:      	movq	0x1847c(%rip), %rax     # 0x3b7a0 <zlgk82z0l71lvh9+0x3b7a0>
   23324:      	leaq	0x60(%rsp), %rdi
   23329:      	callq	*%rax
   2332b:      	movq	%rax, %rdi
   2332e:      	movq	%rdx, %rsi
   23331:      	movq	%rdi, 0x160(%rsp)
   23339:      	movq	%rsi, 0x168(%rsp)
   23341:      	movq	%rdi, 0x1c8(%rsp)
   23349:      	movq	%rsi, 0x1d0(%rsp)
   23351:      	movq	%rdi, 0x1d8(%rsp)
   23359:      	movq	%rsi, 0x1e0(%rsp)
   23361:      	movq	0x18280(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   23368:      	callq	*%rax
   2336a:      	movq	%rax, %rdi
   2336d:      	movq	%rdx, %rsi
   23370:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   23375:      	movq	0x28(%rsp), %rdi
   2337a:      	movq	%rax, %r8
   2337d:      	movb	0x47(%rsp), %al
   23381:      	movq	%rdx, %r9
   23384:      	movq	%r8, 0x170(%rsp)
   2338c:      	movq	%r9, 0x178(%rsp)
   23394:      	movzbl	%al, %esi
   23397:      	andl	$0x1, %esi
   2339a:      	leaq	-0x11a40(%rip), %rdx    # 0x11961 <str.0+0x21>
   233a1:      	movq	0x18400(%rip), %rax     # 0x3b7a8 <zlgk82z0l71lvh9+0x3b7a8>
   233a8:      	movl	$0x2, %ecx
   233ad:      	callq	*%rax
   233af:      	andb	$0x1, %al
   233b1:      	movzbl	%al, %eax
   233b4:      	addq	$0x1f8, %rsp            # imm = 0x1F8
   233bb:      	retq
   233bc:      	movq	0x48(%rsp), %rsi
   233c1:      	movq	0x118(%rsp), %rax
   233c9:      	movq	%rax, 0x18(%rsp)
   233ce:      	movq	%rax, 0x150(%rsp)
   233d6:      	movq	0x58(%rsp), %rax
   233db:      	movq	%rax, 0x10(%rsp)
   233e0:      	movq	0x50(%rsp), %rdi
   233e5:      	callq	0x2fb70 <<u64 as core::ops::arith::Rem>::rem::hd286ea914da001dd>
   233ea:      	movq	0x10(%rsp), %rdi
   233ef:      	movq	%rax, %rsi
   233f2:      	callq	0x2f8b0 <<u64 as core::ops::arith::Sub>::sub::h56ef233acba06873>
   233f7:      	movq	0x48(%rsp), %rsi
   233fc:      	movq	%rax, 0x120(%rsp)
   23404:      	movq	0x50(%rsp), %rdi
   23409:      	callq	0x2fa00 <<u64 as core::ops::arith::Div>::div::hc8d4786271e1fa7b>
   2340e:      	movq	%rax, 0x50(%rsp)
   23413:      	movq	0x1832e(%rip), %rax     # 0x3b748 <zlgk82z0l71lvh9+0x3b748>
   2341a:      	leaq	0x120(%rsp), %rdi
   23422:      	callq	*%rax
   23424:      	movzbl	%al, %edi
   23427:      	movq	0x182b2(%rip), %rax     # 0x3b6e0 <zlgk82z0l71lvh9+0x3b6e0>
   2342e:      	callq	*%rax
   23430:      	movb	%al, %cl
   23432:      	movq	0x18(%rsp), %rax
   23437:      	movq	%rax, 0x198(%rsp)
   2343f:      	movb	%cl, 0x1a3(%rsp)
   23446:      	movb	%cl, 0x1a5(%rsp)
   2344d:      	movb	%cl, 0x1a7(%rsp)
   23454:      	movb	%cl, 0x1a6(%rsp)
   2345b:      	movb	0x1a6(%rsp), %cl
   23462:      	movb	%cl, 0x1a4(%rsp)
   23469:      	movb	0x1a4(%rsp), %cl
   23470:      	movb	%cl, (%rax)
   23472:      	movq	%rax, 0x1a8(%rsp)
   2347a:      	movq	%rax, 0x1b0(%rsp)
   23482:      	movq	0xe0(%rsp), %rax
   2348a:      	movq	%rax, %rcx
   2348d:      	subq	$0x1, %rcx
   23491:      	movq	%rcx, 0x20(%rsp)
   23496:      	cmpq	$0x1, %rax
   2349a:      	setb	%al
   2349d:      	testb	$0x1, %al
   2349f:      	jne	0x234ca <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x38a>
   234a1:      	movq	0x20(%rsp), %rax
   234a6:      	movq	%rax, 0xe0(%rsp)
   234ae:      	leaq	0x50(%rsp), %rdi
   234b3:      	leaq	0x58(%rsp), %rsi
   234b8:      	callq	0x31000 <core::cmp::impls::<impl core::cmp::PartialEq for u64>::eq::h99b26a78897b40e2>
   234bd:      	testb	$0x1, %al
   234bf:      	jne	0x232fe <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x1be>
   234c5:      	jmp	0x232c4 <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x184>
   234ca:      	leaq	-0x11b91(%rip), %rdi    # 0x11940 <str.0>
   234d1:      	leaq	0x169e0(%rip), %rdx     # 0x39eb8 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x248>
   234d8:      	movq	0x179f1(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   234df:      	movl	$0x21, %esi
   234e4:      	callq	*%rax
   234e6:      	ud2
   234e8:      	movq	0x182a9(%rip), %rax     # 0x3b798 <zlgk82z0l71lvh9+0x3b798>
   234ef:      	leaq	0xe8(%rsp), %rdi
   234f7:      	callq	*%rax
   234f9:      	movq	%rax, 0xf8(%rsp)
   23501:      	movq	0xf8(%rsp), %rdx
   23509:      	movl	$0x1, %eax
   2350e:      	xorl	%ecx, %ecx
   23510:      	cmpq	$0x0, %rdx
   23514:      	cmoveq	%rcx, %rax
   23518:      	cmpq	$0x0, %rax
   2351c:      	je	0x232fe <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x1be>
   23522:      	movq	0x48(%rsp), %rsi
   23527:      	movq	0xf8(%rsp), %rax
   2352f:      	movq	%rax, (%rsp)
   23533:      	movq	%rax, 0x158(%rsp)
   2353b:      	movq	0x50(%rsp), %rdi
   23540:      	callq	0x2fb70 <<u64 as core::ops::arith::Rem>::rem::hd286ea914da001dd>
   23545:      	movq	0x48(%rsp), %rsi
   2354a:      	movq	%rax, 0x100(%rsp)
   23552:      	movq	0x50(%rsp), %rdi
   23557:      	callq	0x2fa00 <<u64 as core::ops::arith::Div>::div::hc8d4786271e1fa7b>
   2355c:      	movq	%rax, 0x50(%rsp)
   23561:      	movq	0x181e0(%rip), %rax     # 0x3b748 <zlgk82z0l71lvh9+0x3b748>
   23568:      	leaq	0x100(%rsp), %rdi
   23570:      	callq	*%rax
   23572:      	movzbl	%al, %edi
   23575:      	movq	0x18164(%rip), %rax     # 0x3b6e0 <zlgk82z0l71lvh9+0x3b6e0>
   2357c:      	callq	*%rax
   2357e:      	movb	%al, %cl
   23580:      	movq	(%rsp), %rax
   23584:      	movq	%rax, 0x188(%rsp)
   2358c:      	movb	%cl, 0x193(%rsp)
   23593:      	movb	%cl, 0x195(%rsp)
   2359a:      	movb	%cl, 0x197(%rsp)
   235a1:      	movb	%cl, 0x196(%rsp)
   235a8:      	movb	0x196(%rsp), %cl
   235af:      	movb	%cl, 0x194(%rsp)
   235b6:      	movb	0x194(%rsp), %cl
   235bd:      	movb	%cl, (%rax)
   235bf:      	movq	%rax, 0x1b8(%rsp)
   235c7:      	movq	%rax, 0x1c0(%rsp)
   235cf:      	movq	0xe0(%rsp), %rax
   235d7:      	movq	%rax, %rcx
   235da:      	subq	$0x1, %rcx
   235de:      	movq	%rcx, 0x8(%rsp)
   235e3:      	cmpq	$0x1, %rax
   235e7:      	setb	%al
   235ea:      	testb	$0x1, %al
   235ec:      	jne	0x23617 <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x4d7>
   235ee:      	movq	0x8(%rsp), %rax
   235f3:      	movq	%rax, 0xe0(%rsp)
   235fb:      	leaq	0x50(%rsp), %rdi
   23600:      	leaq	0x58(%rsp), %rsi
   23605:      	callq	0x31000 <core::cmp::impls::<impl core::cmp::PartialEq for u64>::eq::h99b26a78897b40e2>
   2360a:      	testb	$0x1, %al
   2360c:      	jne	0x232fe <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x1be>
   23612:      	jmp	0x234e8 <core::fmt::num::GenericRadix::fmt_int::hf33f38895b685135+0x3a8>
   23617:      	leaq	-0x11cde(%rip), %rdi    # 0x11940 <str.0>
   2361e:      	leaq	0x168ab(%rip), %rdx     # 0x39ed0 <log::LOG_LEVEL_NAMES::ha9736777a93469be+0x260>
   23625:      	movq	0x178a4(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2362c:      	movl	$0x21, %esi
   23631:      	callq	*%rax
   23633:      	ud2
   23635:      	int3
   23636:      	int3
   23637:      	int3
   23638:      	int3
   23639:      	int3
   2363a:      	int3
   2363b:      	int3
   2363c:      	int3
   2363d:      	int3
   2363e:      	int3
   2363f:      	int3

0000000000023640 <<u8 as core::fmt::num::DisplayInt>::zero::h011c34dcbf85f4b3>:
   23640:      	xorl	%eax, %eax
   23642:      	retq
   23643:      	int3
   23644:      	int3
   23645:      	int3
   23646:      	int3
   23647:      	int3
   23648:      	int3
   23649:      	int3
   2364a:      	int3
   2364b:      	int3
   2364c:      	int3
   2364d:      	int3
   2364e:      	int3
   2364f:      	int3

0000000000023650 <<u8 as core::fmt::num::DisplayInt>::from_u8::h515ede59cec3eae7>:
   23650:      	subq	$0x1, %rsp
   23654:      	movb	%dil, %al
   23657:      	movb	%al, (%rsp)
   2365a:      	addq	$0x1, %rsp
   2365e:      	retq
   2365f:      	int3

0000000000023660 <<u8 as core::fmt::num::DisplayInt>::to_u8::hb307c74bad104563>:
   23660:      	pushq	%rax
   23661:      	movq	%rdi, (%rsp)
   23665:      	movb	(%rdi), %al
   23667:      	popq	%rcx
   23668:      	retq
   23669:      	int3
   2366a:      	int3
   2366b:      	int3
   2366c:      	int3
   2366d:      	int3
   2366e:      	int3
   2366f:      	int3

0000000000023670 <<u8 as core::fmt::num::DisplayInt>::to_u64::h6aaf1d989f35636a>:
   23670:      	pushq	%rax
   23671:      	movq	%rdi, (%rsp)
   23675:      	movzbl	(%rdi), %eax
   23678:      	popq	%rcx
   23679:      	retq
   2367a:      	int3
   2367b:      	int3
   2367c:      	int3
   2367d:      	int3
   2367e:      	int3
   2367f:      	int3

0000000000023680 <<u32 as core::fmt::num::DisplayInt>::zero::h714aa7980317448b>:
   23680:      	xorl	%eax, %eax
   23682:      	retq
   23683:      	int3
   23684:      	int3
   23685:      	int3
   23686:      	int3
   23687:      	int3
   23688:      	int3
   23689:      	int3
   2368a:      	int3
   2368b:      	int3
   2368c:      	int3
   2368d:      	int3
   2368e:      	int3
   2368f:      	int3

0000000000023690 <<u32 as core::fmt::num::DisplayInt>::from_u8::h78d9a8579dcc6e6c>:
   23690:      	subq	$0x1, %rsp
   23694:      	movb	%dil, %al
   23697:      	movb	%al, (%rsp)
   2369a:      	movzbl	%al, %eax
   2369d:      	addq	$0x1, %rsp
   236a1:      	retq
   236a2:      	int3
   236a3:      	int3
   236a4:      	int3
   236a5:      	int3
   236a6:      	int3
   236a7:      	int3
   236a8:      	int3
   236a9:      	int3
   236aa:      	int3
   236ab:      	int3
   236ac:      	int3
   236ad:      	int3
   236ae:      	int3
   236af:      	int3

00000000000236b0 <<u32 as core::fmt::num::DisplayInt>::to_u8::hc7904c8fc05b8b18>:
   236b0:      	pushq	%rax
   236b1:      	movq	%rdi, (%rsp)
   236b5:      	movl	(%rdi), %eax
   236b7:      	popq	%rcx
   236b8:      	retq
   236b9:      	int3
   236ba:      	int3
   236bb:      	int3
   236bc:      	int3
   236bd:      	int3
   236be:      	int3
   236bf:      	int3

00000000000236c0 <<u64 as core::fmt::num::DisplayInt>::zero::hb121bd37b1d76f96>:
   236c0:      	xorl	%eax, %eax
   236c2:      	retq
   236c3:      	int3
   236c4:      	int3
   236c5:      	int3
   236c6:      	int3
   236c7:      	int3
   236c8:      	int3
   236c9:      	int3
   236ca:      	int3
   236cb:      	int3
   236cc:      	int3
   236cd:      	int3
   236ce:      	int3
   236cf:      	int3

00000000000236d0 <<u64 as core::fmt::num::DisplayInt>::from_u8::hd4bcb4796b1b8bc4>:
   236d0:      	subq	$0x1, %rsp
   236d4:      	movb	%dil, %al
   236d7:      	movb	%al, (%rsp)
   236da:      	movzbl	%al, %eax
   236dd:      	addq	$0x1, %rsp
   236e1:      	retq
   236e2:      	int3
   236e3:      	int3
   236e4:      	int3
   236e5:      	int3
   236e6:      	int3
   236e7:      	int3
   236e8:      	int3
   236e9:      	int3
   236ea:      	int3
   236eb:      	int3
   236ec:      	int3
   236ed:      	int3
   236ee:      	int3
   236ef:      	int3

00000000000236f0 <<u64 as core::fmt::num::DisplayInt>::to_u8::hc7382b5c0a06f205>:
   236f0:      	pushq	%rax
   236f1:      	movq	%rdi, (%rsp)
   236f5:      	movq	(%rdi), %rax
   236f8:      	popq	%rcx
   236f9:      	retq
   236fa:      	int3
   236fb:      	int3
   236fc:      	int3
   236fd:      	int3
   236fe:      	int3
   236ff:      	int3

0000000000023700 <<u64 as core::fmt::num::DisplayInt>::to_u64::h288896eb9fda04ed>:
   23700:      	pushq	%rax
   23701:      	movq	%rdi, (%rsp)
   23705:      	movq	(%rdi), %rax
   23708:      	popq	%rcx
   23709:      	retq
   2370a:      	int3
   2370b:      	int3
   2370c:      	int3
   2370d:      	int3
   2370e:      	int3
   2370f:      	int3

0000000000023710 <<usize as core::fmt::num::DisplayInt>::zero::hf2ebb7bf7569d735>:
   23710:      	xorl	%eax, %eax
   23712:      	retq
   23713:      	int3
   23714:      	int3
   23715:      	int3
   23716:      	int3
   23717:      	int3
   23718:      	int3
   23719:      	int3
   2371a:      	int3
   2371b:      	int3
   2371c:      	int3
   2371d:      	int3
   2371e:      	int3
   2371f:      	int3

0000000000023720 <<usize as core::fmt::num::DisplayInt>::from_u8::h2aa016ba82661b70>:
   23720:      	subq	$0x1, %rsp
   23724:      	movb	%dil, %al
   23727:      	movb	%al, (%rsp)
   2372a:      	movzbl	%al, %eax
   2372d:      	addq	$0x1, %rsp
   23731:      	retq
   23732:      	int3
   23733:      	int3
   23734:      	int3
   23735:      	int3
   23736:      	int3
   23737:      	int3
   23738:      	int3
   23739:      	int3
   2373a:      	int3
   2373b:      	int3
   2373c:      	int3
   2373d:      	int3
   2373e:      	int3
   2373f:      	int3

0000000000023740 <<usize as core::fmt::num::DisplayInt>::to_u8::hc7e934c2a23ce3d9>:
   23740:      	pushq	%rax
   23741:      	movq	%rdi, (%rsp)
   23745:      	movq	(%rdi), %rax
   23748:      	popq	%rcx
   23749:      	retq
   2374a:      	int3
   2374b:      	int3
   2374c:      	int3
   2374d:      	int3
   2374e:      	int3
   2374f:      	int3

0000000000023750 <<usize as core::fmt::num::DisplayInt>::to_u64::h60ca2343721258b4>:
   23750:      	pushq	%rax
   23751:      	movq	%rdi, (%rsp)
   23755:      	movq	(%rdi), %rax
   23758:      	popq	%rcx
   23759:      	retq
   2375a:      	int3
   2375b:      	int3
   2375c:      	int3
   2375d:      	int3
   2375e:      	int3
   2375f:      	int3

0000000000023760 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e>:
   23760:      	subq	$0xc8, %rsp
   23767:      	movb	%dil, %cl
   2376a:      	movb	%cl, 0x1d(%rsp)
   2376e:      	movb	%cl, 0x77(%rsp)
   23772:      	xorl	%eax, %eax
   23774:      	cmpb	%cl, %al
   23776:      	jbe	0x23788 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x28>
   23778:      	movb	0x1d(%rsp), %cl
   2377c:      	movb	$0xa, %al
   2377e:      	cmpb	%cl, %al
   23780:      	jbe	0x23881 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x121>
   23786:      	jmp	0x237aa <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x4a>
   23788:      	movb	0x1d(%rsp), %al
   2378c:      	cmpb	$0x9, %al
   2378e:      	ja	0x23778 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x18>
   23790:      	movb	0x1d(%rsp), %al
   23794:      	addb	$0x30, %al
   23796:      	movb	%al, 0x1c(%rsp)
   2379a:      	setb	%al
   2379d:      	testb	$0x1, %al
   2379f:      	jne	0x23912 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x1b2>
   237a5:      	jmp	0x23908 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x1a8>
   237aa:      	movb	0x1d(%rsp), %al
   237ae:      	movb	%al, 0x1f(%rsp)
   237b2:      	leaq	-0x11d4f(%rip), %rcx    # 0x11a6a <str.3+0x3a>
   237b9:      	movq	%rcx, 0xa0(%rsp)
   237c1:      	movq	%rcx, 0xb8(%rsp)
   237c9:      	movq	0x17968(%rip), %rax     # 0x3b138 <zlgk82z0l71lvh9+0x3b138>
   237d0:      	movq	%rax, 0xc0(%rsp)
   237d8:      	movq	%rcx, 0xa8(%rsp)
   237e0:      	movq	%rax, 0xb0(%rsp)
   237e8:      	movq	0xa8(%rsp), %rsi
   237f0:      	movq	0xb0(%rsp), %rdx
   237f8:      	leaq	0x1f(%rsp), %rcx
   237fd:      	movq	%rcx, 0x78(%rsp)
   23802:      	movq	%rcx, 0x90(%rsp)
   2380a:      	movq	%rax, 0x98(%rsp)
   23812:      	movq	%rcx, 0x80(%rsp)
   2381a:      	movq	%rax, 0x88(%rsp)
   23822:      	movq	0x80(%rsp), %rcx
   2382a:      	movq	0x88(%rsp), %rax
   23832:      	movq	%rsi, 0x50(%rsp)
   23837:      	movq	%rdx, 0x58(%rsp)
   2383c:      	movq	%rcx, 0x60(%rsp)
   23841:      	movq	%rax, 0x68(%rsp)
   23846:      	leaq	0x166bb(%rip), %rsi     # 0x39f08 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x8>
   2384d:      	leaq	0x20(%rsp), %rdi
   23852:      	movq	%rdi, 0x10(%rsp)
   23857:      	leaq	0x50(%rsp), %rcx
   2385c:      	movl	$0x2, %r8d
   23862:      	movq	%r8, %rdx
   23865:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   2386a:      	movq	0x10(%rsp), %rdi
   2386f:      	leaq	0x166b2(%rip), %rsi     # 0x39f28 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x28>
   23876:      	movq	0x17643(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2387d:      	callq	*%rax
   2387f:      	ud2
   23881:      	movb	0x1d(%rsp), %al
   23885:      	cmpb	$0xf, %al
   23887:      	ja	0x237aa <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x4a>
   2388d:      	movb	0x1d(%rsp), %al
   23891:      	movb	%al, %cl
   23893:      	subb	$0xa, %cl
   23896:      	movb	%cl, 0xf(%rsp)
   2389a:      	cmpb	$0xa, %al
   2389c:      	setb	%al
   2389f:      	testb	$0x1, %al
   238a1:      	jne	0x238b6 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x156>
   238a3:      	movb	0xf(%rsp), %al
   238a7:      	addb	$0x61, %al
   238a9:      	movb	%al, 0xe(%rsp)
   238ad:      	setb	%al
   238b0:      	testb	$0x1, %al
   238b2:      	jne	0x238de <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x17e>
   238b4:      	jmp	0x238d4 <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x174>
   238b6:      	leaq	-0x11f7d(%rip), %rdi    # 0x11940 <str.0>
   238bd:      	leaq	0x1667c(%rip), %rdx     # 0x39f40 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x40>
   238c4:      	movq	0x17605(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   238cb:      	movl	$0x21, %esi
   238d0:      	callq	*%rax
   238d2:      	ud2
   238d4:      	movb	0xe(%rsp), %al
   238d8:      	movb	%al, 0x1e(%rsp)
   238dc:      	jmp	0x238fc <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x19c>
   238de:      	leaq	-0x11eb5(%rip), %rdi    # 0x11a30 <str.3>
   238e5:      	leaq	0x1666c(%rip), %rdx     # 0x39f58 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x58>
   238ec:      	movq	0x175dd(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   238f3:      	movl	$0x1c, %esi
   238f8:      	callq	*%rax
   238fa:      	ud2
   238fc:      	movb	0x1e(%rsp), %al
   23900:      	addq	$0xc8, %rsp
   23907:      	retq
   23908:      	movb	0x1c(%rsp), %al
   2390c:      	movb	%al, 0x1e(%rsp)
   23910:      	jmp	0x238fc <<core::fmt::num::LowerHex as core::fmt::num::GenericRadix>::digit::hea0b45a6c335a39e+0x19c>
   23912:      	leaq	-0x11ee9(%rip), %rdi    # 0x11a30 <str.3>
   23919:      	leaq	0x16650(%rip), %rdx     # 0x39f70 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x70>
   23920:      	movq	0x175a9(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   23927:      	movl	$0x1c, %esi
   2392c:      	callq	*%rax
   2392e:      	ud2

0000000000023930 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499>:
   23930:      	subq	$0xc8, %rsp
   23937:      	movb	%dil, %cl
   2393a:      	movb	%cl, 0x1d(%rsp)
   2393e:      	movb	%cl, 0x77(%rsp)
   23942:      	xorl	%eax, %eax
   23944:      	cmpb	%cl, %al
   23946:      	jbe	0x23958 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x28>
   23948:      	movb	0x1d(%rsp), %cl
   2394c:      	movb	$0xa, %al
   2394e:      	cmpb	%cl, %al
   23950:      	jbe	0x23a51 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x121>
   23956:      	jmp	0x2397a <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x4a>
   23958:      	movb	0x1d(%rsp), %al
   2395c:      	cmpb	$0x9, %al
   2395e:      	ja	0x23948 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x18>
   23960:      	movb	0x1d(%rsp), %al
   23964:      	addb	$0x30, %al
   23966:      	movb	%al, 0x1c(%rsp)
   2396a:      	setb	%al
   2396d:      	testb	$0x1, %al
   2396f:      	jne	0x23ae2 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x1b2>
   23975:      	jmp	0x23ad8 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x1a8>
   2397a:      	movb	0x1d(%rsp), %al
   2397e:      	movb	%al, 0x1f(%rsp)
   23982:      	leaq	-0x11f1f(%rip), %rcx    # 0x11a6a <str.3+0x3a>
   23989:      	movq	%rcx, 0xa0(%rsp)
   23991:      	movq	%rcx, 0xb8(%rsp)
   23999:      	movq	0x17798(%rip), %rax     # 0x3b138 <zlgk82z0l71lvh9+0x3b138>
   239a0:      	movq	%rax, 0xc0(%rsp)
   239a8:      	movq	%rcx, 0xa8(%rsp)
   239b0:      	movq	%rax, 0xb0(%rsp)
   239b8:      	movq	0xa8(%rsp), %rsi
   239c0:      	movq	0xb0(%rsp), %rdx
   239c8:      	leaq	0x1f(%rsp), %rcx
   239cd:      	movq	%rcx, 0x78(%rsp)
   239d2:      	movq	%rcx, 0x90(%rsp)
   239da:      	movq	%rax, 0x98(%rsp)
   239e2:      	movq	%rcx, 0x80(%rsp)
   239ea:      	movq	%rax, 0x88(%rsp)
   239f2:      	movq	0x80(%rsp), %rcx
   239fa:      	movq	0x88(%rsp), %rax
   23a02:      	movq	%rsi, 0x50(%rsp)
   23a07:      	movq	%rdx, 0x58(%rsp)
   23a0c:      	movq	%rcx, 0x60(%rsp)
   23a11:      	movq	%rax, 0x68(%rsp)
   23a16:      	leaq	0x164eb(%rip), %rsi     # 0x39f08 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x8>
   23a1d:      	leaq	0x20(%rsp), %rdi
   23a22:      	movq	%rdi, 0x10(%rsp)
   23a27:      	leaq	0x50(%rsp), %rcx
   23a2c:      	movl	$0x2, %r8d
   23a32:      	movq	%r8, %rdx
   23a35:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   23a3a:      	movq	0x10(%rsp), %rdi
   23a3f:      	leaq	0x16542(%rip), %rsi     # 0x39f88 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x88>
   23a46:      	movq	0x17473(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   23a4d:      	callq	*%rax
   23a4f:      	ud2
   23a51:      	movb	0x1d(%rsp), %al
   23a55:      	cmpb	$0xf, %al
   23a57:      	ja	0x2397a <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x4a>
   23a5d:      	movb	0x1d(%rsp), %al
   23a61:      	movb	%al, %cl
   23a63:      	subb	$0xa, %cl
   23a66:      	movb	%cl, 0xf(%rsp)
   23a6a:      	cmpb	$0xa, %al
   23a6c:      	setb	%al
   23a6f:      	testb	$0x1, %al
   23a71:      	jne	0x23a86 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x156>
   23a73:      	movb	0xf(%rsp), %al
   23a77:      	addb	$0x41, %al
   23a79:      	movb	%al, 0xe(%rsp)
   23a7d:      	setb	%al
   23a80:      	testb	$0x1, %al
   23a82:      	jne	0x23aae <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x17e>
   23a84:      	jmp	0x23aa4 <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x174>
   23a86:      	leaq	-0x1214d(%rip), %rdi    # 0x11940 <str.0>
   23a8d:      	leaq	0x1650c(%rip), %rdx     # 0x39fa0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0xa0>
   23a94:      	movq	0x17435(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   23a9b:      	movl	$0x21, %esi
   23aa0:      	callq	*%rax
   23aa2:      	ud2
   23aa4:      	movb	0xe(%rsp), %al
   23aa8:      	movb	%al, 0x1e(%rsp)
   23aac:      	jmp	0x23acc <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x19c>
   23aae:      	leaq	-0x12085(%rip), %rdi    # 0x11a30 <str.3>
   23ab5:      	leaq	0x164fc(%rip), %rdx     # 0x39fb8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0xb8>
   23abc:      	movq	0x1740d(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   23ac3:      	movl	$0x1c, %esi
   23ac8:      	callq	*%rax
   23aca:      	ud2
   23acc:      	movb	0x1e(%rsp), %al
   23ad0:      	addq	$0xc8, %rsp
   23ad7:      	retq
   23ad8:      	movb	0x1c(%rsp), %al
   23adc:      	movb	%al, 0x1e(%rsp)
   23ae0:      	jmp	0x23acc <<core::fmt::num::UpperHex as core::fmt::num::GenericRadix>::digit::h4e5e76df13cb0499+0x19c>
   23ae2:      	leaq	-0x120b9(%rip), %rdi    # 0x11a30 <str.3>
   23ae9:      	leaq	0x164e0(%rip), %rdx     # 0x39fd0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0xd0>
   23af0:      	movq	0x173d9(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   23af7:      	movl	$0x1c, %esi
   23afc:      	callq	*%rax
   23afe:      	ud2

0000000000023b00 <core::fmt::num::<impl core::fmt::LowerHex for usize>::fmt::h0e73434931b8c66d>:
   23b00:      	subq	$0x18, %rsp
   23b04:      	movq	%rsi, %rdx
   23b07:      	movq	%rdi, 0x8(%rsp)
   23b0c:      	movq	%rdx, 0x10(%rsp)
   23b11:      	movq	(%rdi), %rsi
   23b14:      	leaq	-0x120cf(%rip), %rdi    # 0x11a4c <str.3+0x1c>
   23b1b:      	movq	0x17c46(%rip), %rax     # 0x3b768 <zlgk82z0l71lvh9+0x3b768>
   23b22:      	callq	*%rax
   23b24:      	andb	$0x1, %al
   23b26:      	movzbl	%al, %eax
   23b29:      	addq	$0x18, %rsp
   23b2d:      	retq
   23b2e:      	int3
   23b2f:      	int3

0000000000023b30 <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt::h36be0e4e3672735a>:
   23b30:      	subq	$0x18, %rsp
   23b34:      	movq	%rsi, %rdx
   23b37:      	movq	%rdi, 0x8(%rsp)
   23b3c:      	movq	%rdx, 0x10(%rsp)
   23b41:      	movb	(%rdi), %al
   23b43:      	movzbl	%al, %esi
   23b46:      	leaq	-0x12101(%rip), %rdi    # 0x11a4c <str.3+0x1c>
   23b4d:      	movq	0x17b94(%rip), %rax     # 0x3b6e8 <zlgk82z0l71lvh9+0x3b6e8>
   23b54:      	callq	*%rax
   23b56:      	andb	$0x1, %al
   23b58:      	movzbl	%al, %eax
   23b5b:      	addq	$0x18, %rsp
   23b5f:      	retq

0000000000023b60 <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt::h208f3e28144e3cba>:
   23b60:      	subq	$0x18, %rsp
   23b64:      	movq	%rsi, %rdx
   23b67:      	movq	%rdi, 0x8(%rsp)
   23b6c:      	movq	%rdx, 0x10(%rsp)
   23b71:      	movb	(%rdi), %al
   23b73:      	movzbl	%al, %esi
   23b76:      	leaq	-0x12131(%rip), %rdi    # 0x11a4c <str.3+0x1c>
   23b7d:      	movq	0x17b84(%rip), %rax     # 0x3b708 <zlgk82z0l71lvh9+0x3b708>
   23b84:      	callq	*%rax
   23b86:      	andb	$0x1, %al
   23b88:      	movzbl	%al, %eax
   23b8b:      	addq	$0x18, %rsp
   23b8f:      	retq

0000000000023b90 <core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt::h4083a774f99e0e3b>:
   23b90:      	subq	$0x18, %rsp
   23b94:      	movq	%rsi, %rdx
   23b97:      	movq	%rdi, 0x8(%rsp)
   23b9c:      	movq	%rdx, 0x10(%rsp)
   23ba1:      	movl	(%rdi), %esi
   23ba3:      	leaq	-0x1215e(%rip), %rdi    # 0x11a4c <str.3+0x1c>
   23baa:      	movq	0x17bbf(%rip), %rax     # 0x3b770 <zlgk82z0l71lvh9+0x3b770>
   23bb1:      	callq	*%rax
   23bb3:      	andb	$0x1, %al
   23bb5:      	movzbl	%al, %eax
   23bb8:      	addq	$0x18, %rsp
   23bbc:      	retq
   23bbd:      	int3
   23bbe:      	int3
   23bbf:      	int3

0000000000023bc0 <core::fmt::num::<impl core::fmt::LowerHex for u64>::fmt::hbbbd58204cac9a91>:
   23bc0:      	subq	$0x18, %rsp
   23bc4:      	movq	%rsi, %rdx
   23bc7:      	movq	%rdi, 0x8(%rsp)
   23bcc:      	movq	%rdx, 0x10(%rsp)
   23bd1:      	movq	(%rdi), %rsi
   23bd4:      	leaq	-0x1218f(%rip), %rdi    # 0x11a4c <str.3+0x1c>
   23bdb:      	movq	0x17b96(%rip), %rax     # 0x3b778 <zlgk82z0l71lvh9+0x3b778>
   23be2:      	callq	*%rax
   23be4:      	andb	$0x1, %al
   23be6:      	movzbl	%al, %eax
   23be9:      	addq	$0x18, %rsp
   23bed:      	retq
   23bee:      	int3
   23bef:      	int3

0000000000023bf0 <core::fmt::num::<impl core::fmt::UpperHex for u64>::fmt::hc1de31b75fb23da4>:
   23bf0:      	subq	$0x18, %rsp
   23bf4:      	movq	%rsi, %rdx
   23bf7:      	movq	%rdi, 0x8(%rsp)
   23bfc:      	movq	%rdx, 0x10(%rsp)
   23c01:      	movq	(%rdi), %rsi
   23c04:      	leaq	-0x121bf(%rip), %rdi    # 0x11a4c <str.3+0x1c>
   23c0b:      	movq	0x17b1e(%rip), %rax     # 0x3b730 <zlgk82z0l71lvh9+0x3b730>
   23c12:      	callq	*%rax
   23c14:      	andb	$0x1, %al
   23c16:      	movzbl	%al, %eax
   23c19:      	addq	$0x18, %rsp
   23c1d:      	retq
   23c1e:      	int3
   23c1f:      	int3

0000000000023c20 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc7a1478787852acc>:
   23c20:      	subq	$0x28, %rsp
   23c24:      	movq	%rsi, (%rsp)
   23c28:      	movq	%rdi, %rax
   23c2b:      	movq	(%rsp), %rdi
   23c2f:      	movq	%rax, 0x8(%rsp)
   23c34:      	movq	%rax, 0x18(%rsp)
   23c39:      	movq	%rdi, 0x20(%rsp)
   23c3e:      	movq	0x174db(%rip), %rax     # 0x3b120 <zlgk82z0l71lvh9+0x3b120>
   23c45:      	callq	*%rax
   23c47:      	testb	$0x1, %al
   23c49:      	jne	0x23c5e <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc7a1478787852acc+0x3e>
   23c4b:      	movq	(%rsp), %rdi
   23c4f:      	movq	0x174d2(%rip), %rax     # 0x3b128 <zlgk82z0l71lvh9+0x3b128>
   23c56:      	callq	*%rax
   23c58:      	testb	$0x1, %al
   23c5a:      	jne	0x23c92 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc7a1478787852acc+0x72>
   23c5c:      	jmp	0x23c78 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc7a1478787852acc+0x58>
   23c5e:      	movq	(%rsp), %rsi
   23c62:      	movq	0x8(%rsp), %rdi
   23c67:      	movq	0x174c2(%rip), %rax     # 0x3b130 <zlgk82z0l71lvh9+0x3b130>
   23c6e:      	callq	*%rax
   23c70:      	andb	$0x1, %al
   23c72:      	movb	%al, 0x17(%rsp)
   23c76:      	jmp	0x23caa <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc7a1478787852acc+0x8a>
   23c78:      	movq	(%rsp), %rsi
   23c7c:      	movq	0x8(%rsp), %rdi
   23c81:      	movq	0x174b0(%rip), %rax     # 0x3b138 <zlgk82z0l71lvh9+0x3b138>
   23c88:      	callq	*%rax
   23c8a:      	andb	$0x1, %al
   23c8c:      	movb	%al, 0x17(%rsp)
   23c90:      	jmp	0x23caa <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc7a1478787852acc+0x8a>
   23c92:      	movq	(%rsp), %rsi
   23c96:      	movq	0x8(%rsp), %rdi
   23c9b:      	movq	0x1749e(%rip), %rax     # 0x3b140 <zlgk82z0l71lvh9+0x3b140>
   23ca2:      	callq	*%rax
   23ca4:      	andb	$0x1, %al
   23ca6:      	movb	%al, 0x17(%rsp)
   23caa:      	movb	0x17(%rsp), %al
   23cae:      	andb	$0x1, %al
   23cb0:      	movzbl	%al, %eax
   23cb3:      	addq	$0x28, %rsp
   23cb7:      	retq
   23cb8:      	int3
   23cb9:      	int3
   23cba:      	int3
   23cbb:      	int3
   23cbc:      	int3
   23cbd:      	int3
   23cbe:      	int3
   23cbf:      	int3

0000000000023cc0 <core::fmt::num::<impl core::fmt::Debug for u64>::fmt::hde03d4a9e432bbfe>:
   23cc0:      	subq	$0x28, %rsp
   23cc4:      	movq	%rsi, (%rsp)
   23cc8:      	movq	%rdi, %rax
   23ccb:      	movq	(%rsp), %rdi
   23ccf:      	movq	%rax, 0x8(%rsp)
   23cd4:      	movq	%rax, 0x18(%rsp)
   23cd9:      	movq	%rdi, 0x20(%rsp)
   23cde:      	movq	0x1743b(%rip), %rax     # 0x3b120 <zlgk82z0l71lvh9+0x3b120>
   23ce5:      	callq	*%rax
   23ce7:      	testb	$0x1, %al
   23ce9:      	jne	0x23cfe <core::fmt::num::<impl core::fmt::Debug for u64>::fmt::hde03d4a9e432bbfe+0x3e>
   23ceb:      	movq	(%rsp), %rdi
   23cef:      	movq	0x17432(%rip), %rax     # 0x3b128 <zlgk82z0l71lvh9+0x3b128>
   23cf6:      	callq	*%rax
   23cf8:      	testb	$0x1, %al
   23cfa:      	jne	0x23d32 <core::fmt::num::<impl core::fmt::Debug for u64>::fmt::hde03d4a9e432bbfe+0x72>
   23cfc:      	jmp	0x23d18 <core::fmt::num::<impl core::fmt::Debug for u64>::fmt::hde03d4a9e432bbfe+0x58>
   23cfe:      	movq	(%rsp), %rsi
   23d02:      	movq	0x8(%rsp), %rdi
   23d07:      	movq	0x17442(%rip), %rax     # 0x3b150 <zlgk82z0l71lvh9+0x3b150>
   23d0e:      	callq	*%rax
   23d10:      	andb	$0x1, %al
   23d12:      	movb	%al, 0x17(%rsp)
   23d16:      	jmp	0x23d4a <core::fmt::num::<impl core::fmt::Debug for u64>::fmt::hde03d4a9e432bbfe+0x8a>
   23d18:      	movq	(%rsp), %rsi
   23d1c:      	movq	0x8(%rsp), %rdi
   23d21:      	movq	0x17430(%rip), %rax     # 0x3b158 <zlgk82z0l71lvh9+0x3b158>
   23d28:      	callq	*%rax
   23d2a:      	andb	$0x1, %al
   23d2c:      	movb	%al, 0x17(%rsp)
   23d30:      	jmp	0x23d4a <core::fmt::num::<impl core::fmt::Debug for u64>::fmt::hde03d4a9e432bbfe+0x8a>
   23d32:      	movq	(%rsp), %rsi
   23d36:      	movq	0x8(%rsp), %rdi
   23d3b:      	movq	0x1741e(%rip), %rax     # 0x3b160 <zlgk82z0l71lvh9+0x3b160>
   23d42:      	callq	*%rax
   23d44:      	andb	$0x1, %al
   23d46:      	movb	%al, 0x17(%rsp)
   23d4a:      	movb	0x17(%rsp), %al
   23d4e:      	andb	$0x1, %al
   23d50:      	movzbl	%al, %eax
   23d53:      	addq	$0x28, %rsp
   23d57:      	retq
   23d58:      	int3
   23d59:      	int3
   23d5a:      	int3
   23d5b:      	int3
   23d5c:      	int3
   23d5d:      	int3
   23d5e:      	int3
   23d5f:      	int3

0000000000023d60 <core::option::Option<T>::is_some::h50c211ad7561e0db>:
   23d60:      	pushq	%rax
   23d61:      	movq	%rdi, (%rsp)
   23d65:      	movq	(%rdi), %rdx
   23d68:      	movl	$0x1, %eax
   23d6d:      	xorl	%ecx, %ecx
   23d6f:      	cmpq	$0x0, %rdx
   23d73:      	cmoveq	%rcx, %rax
   23d77:      	cmpq	$0x1, %rax
   23d7b:      	sete	%al
   23d7e:      	andb	$0x1, %al
   23d80:      	movzbl	%al, %eax
   23d83:      	popq	%rcx
   23d84:      	retq
   23d85:      	int3
   23d86:      	int3
   23d87:      	int3
   23d88:      	int3
   23d89:      	int3
   23d8a:      	int3
   23d8b:      	int3
   23d8c:      	int3
   23d8d:      	int3
   23d8e:      	int3
   23d8f:      	int3

0000000000023d90 <core::option::Option<T>::is_some::h9008aa05749c20b8>:
   23d90:      	pushq	%rax
   23d91:      	movq	%rdi, (%rsp)
   23d95:      	cmpq	$0x1, (%rdi)
   23d99:      	sete	%al
   23d9c:      	andb	$0x1, %al
   23d9e:      	movzbl	%al, %eax
   23da1:      	popq	%rcx
   23da2:      	retq
   23da3:      	int3
   23da4:      	int3
   23da5:      	int3
   23da6:      	int3
   23da7:      	int3
   23da8:      	int3
   23da9:      	int3
   23daa:      	int3
   23dab:      	int3
   23dac:      	int3
   23dad:      	int3
   23dae:      	int3
   23daf:      	int3

0000000000023db0 <core::option::Option<T>::is_some::h9092f1e4e8458625>:
   23db0:      	pushq	%rax
   23db1:      	movq	%rdi, (%rsp)
   23db5:      	movl	$0x1, %eax
   23dba:      	xorl	%ecx, %ecx
   23dbc:      	cmpl	$0x110000, 0x8(%rdi)    # imm = 0x110000
   23dc3:      	cmoveq	%rcx, %rax
   23dc7:      	cmpq	$0x1, %rax
   23dcb:      	sete	%al
   23dce:      	andb	$0x1, %al
   23dd0:      	movzbl	%al, %eax
   23dd3:      	popq	%rcx
   23dd4:      	retq
   23dd5:      	int3
   23dd6:      	int3
   23dd7:      	int3
   23dd8:      	int3
   23dd9:      	int3
   23dda:      	int3
   23ddb:      	int3
   23ddc:      	int3
   23ddd:      	int3
   23dde:      	int3
   23ddf:      	int3

0000000000023de0 <core::option::Option<T>::is_some::ha9081d22288b0be0>:
   23de0:      	pushq	%rax
   23de1:      	movq	%rdi, (%rsp)
   23de5:      	movq	(%rdi), %rdx
   23de8:      	movl	$0x1, %eax
   23ded:      	xorl	%ecx, %ecx
   23def:      	cmpq	$0x0, %rdx
   23df3:      	cmoveq	%rcx, %rax
   23df7:      	cmpq	$0x1, %rax
   23dfb:      	sete	%al
   23dfe:      	andb	$0x1, %al
   23e00:      	movzbl	%al, %eax
   23e03:      	popq	%rcx
   23e04:      	retq
   23e05:      	int3
   23e06:      	int3
   23e07:      	int3
   23e08:      	int3
   23e09:      	int3
   23e0a:      	int3
   23e0b:      	int3
   23e0c:      	int3
   23e0d:      	int3
   23e0e:      	int3
   23e0f:      	int3

0000000000023e10 <core::option::Option<T>::is_none::h0808052552463ca5>:
   23e10:      	pushq	%rax
   23e11:      	movq	%rdi, (%rsp)
   23e15:      	movq	0x179c4(%rip), %rax     # 0x3b7e0 <zlgk82z0l71lvh9+0x3b7e0>
   23e1c:      	callq	*%rax
   23e1e:      	xorb	$-0x1, %al
   23e20:      	andb	$0x1, %al
   23e22:      	movzbl	%al, %eax
   23e25:      	popq	%rcx
   23e26:      	retq
   23e27:      	int3
   23e28:      	int3
   23e29:      	int3
   23e2a:      	int3
   23e2b:      	int3
   23e2c:      	int3
   23e2d:      	int3
   23e2e:      	int3
   23e2f:      	int3

0000000000023e30 <core::option::Option<T>::is_none::hd1fcaa0699bff4d8>:
   23e30:      	pushq	%rax
   23e31:      	movq	%rdi, (%rsp)
   23e35:      	movq	0x179ac(%rip), %rax     # 0x3b7e8 <zlgk82z0l71lvh9+0x3b7e8>
   23e3c:      	callq	*%rax
   23e3e:      	xorb	$-0x1, %al
   23e40:      	andb	$0x1, %al
   23e42:      	movzbl	%al, %eax
   23e45:      	popq	%rcx
   23e46:      	retq
   23e47:      	int3
   23e48:      	int3
   23e49:      	int3
   23e4a:      	int3
   23e4b:      	int3
   23e4c:      	int3
   23e4d:      	int3
   23e4e:      	int3
   23e4f:      	int3

0000000000023e50 <core::option::Option<T>::as_mut::h3a698398ac5dec2d>:
   23e50:      	subq	$0x20, %rsp
   23e54:      	movq	%rdi, (%rsp)
   23e58:      	movq	%rdi, 0x10(%rsp)
   23e5d:      	movq	(%rdi), %rdx
   23e60:      	movl	$0x1, %eax
   23e65:      	xorl	%ecx, %ecx
   23e67:      	cmpq	$0x0, %rdx
   23e6b:      	cmoveq	%rcx, %rax
   23e6f:      	cmpq	$0x0, %rax
   23e73:      	jne	0x23e80 <core::option::Option<T>::as_mut::h3a698398ac5dec2d+0x30>
   23e75:      	movq	$0x0, 0x8(%rsp)
   23e7e:      	jmp	0x23e8e <core::option::Option<T>::as_mut::h3a698398ac5dec2d+0x3e>
   23e80:      	movq	(%rsp), %rax
   23e84:      	movq	%rax, 0x18(%rsp)
   23e89:      	movq	%rax, 0x8(%rsp)
   23e8e:      	movq	0x8(%rsp), %rax
   23e93:      	addq	$0x20, %rsp
   23e97:      	retq
   23e98:      	int3
   23e99:      	int3
   23e9a:      	int3
   23e9b:      	int3
   23e9c:      	int3
   23e9d:      	int3
   23e9e:      	int3
   23e9f:      	int3

0000000000023ea0 <core::option::Option<T>::expect::h1ce9fec5389a96d9>:
   23ea0:      	subq	$0x48, %rsp
   23ea4:      	movq	%r8, 0x8(%rsp)
   23ea9:      	movq	%rcx, 0x10(%rsp)
   23eae:      	movq	%rdx, 0x18(%rsp)
   23eb3:      	movq	%rdi, 0x20(%rsp)
   23eb8:      	movq	%rsi, 0x28(%rsp)
   23ebd:      	movq	%rdx, 0x30(%rsp)
   23ec2:      	movq	%rcx, 0x38(%rsp)
   23ec7:      	cmpq	$0x0, 0x20(%rsp)
   23ecd:      	jne	0x23ee9 <core::option::Option<T>::expect::h1ce9fec5389a96d9+0x49>
   23ecf:      	movq	0x8(%rsp), %rdx
   23ed4:      	movq	0x10(%rsp), %rsi
   23ed9:      	movq	0x18(%rsp), %rdi
   23ede:      	movq	0x17553(%rip), %rax     # 0x3b438 <zlgk82z0l71lvh9+0x3b438>
   23ee5:      	callq	*%rax
   23ee7:      	ud2
   23ee9:      	movq	0x28(%rsp), %rax
   23eee:      	movq	%rax, 0x40(%rsp)
   23ef3:      	addq	$0x48, %rsp
   23ef7:      	retq
   23ef8:      	int3
   23ef9:      	int3
   23efa:      	int3
   23efb:      	int3
   23efc:      	int3
   23efd:      	int3
   23efe:      	int3
   23eff:      	int3

0000000000023f00 <core::option::Option<T>::unwrap::hb2638b1f4ec116c0>:
   23f00:      	subq	$0x18, %rsp
   23f04:      	movq	%rsi, 0x8(%rsp)
   23f09:      	movl	%edi, 0x10(%rsp)
   23f0d:      	movl	$0x1, %eax
   23f12:      	xorl	%ecx, %ecx
   23f14:      	cmpl	$0x110000, 0x10(%rsp)   # imm = 0x110000
   23f1c:      	cmoveq	%rcx, %rax
   23f20:      	cmpq	$0x0, %rax
   23f24:      	jne	0x23f42 <core::option::Option<T>::unwrap::hb2638b1f4ec116c0+0x42>
   23f26:      	movq	0x8(%rsp), %rdx
   23f2b:      	leaq	-0x124c7(%rip), %rdi    # 0x11a6b <str.3+0x3b>
   23f32:      	movq	0x16f97(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   23f39:      	movl	$0x2b, %esi
   23f3e:      	callq	*%rax
   23f40:      	ud2
   23f42:      	movl	0x10(%rsp), %eax
   23f46:      	movl	%eax, 0x14(%rsp)
   23f4a:      	addq	$0x18, %rsp
   23f4e:      	retq
   23f4f:      	int3

0000000000023f50 <core::option::Option<T>::unwrap_or::he2542bf85e96f24d>:
   23f50:      	subq	$0x58, %rsp
   23f54:      	movq	%rcx, (%rsp)
   23f58:      	movq	%rdx, 0x8(%rsp)
   23f5d:      	movq	%rdi, 0x10(%rsp)
   23f62:      	movq	%rsi, 0x18(%rsp)
   23f67:      	movq	%rdx, 0x38(%rsp)
   23f6c:      	movq	%rcx, 0x40(%rsp)
   23f71:      	movb	$0x0, 0x37(%rsp)
   23f76:      	movb	$0x1, 0x37(%rsp)
   23f7b:      	movq	0x10(%rsp), %rdx
   23f80:      	movl	$0x1, %eax
   23f85:      	xorl	%ecx, %ecx
   23f87:      	cmpq	$0x0, %rdx
   23f8b:      	cmoveq	%rcx, %rax
   23f8f:      	cmpq	$0x0, %rax
   23f93:      	jne	0x23faf <core::option::Option<T>::unwrap_or::he2542bf85e96f24d+0x5f>
   23f95:      	movq	(%rsp), %rax
   23f99:      	movq	0x8(%rsp), %rcx
   23f9e:      	movb	$0x0, 0x37(%rsp)
   23fa3:      	movq	%rcx, 0x20(%rsp)
   23fa8:      	movq	%rax, 0x28(%rsp)
   23fad:      	jmp	0x23fcd <core::option::Option<T>::unwrap_or::he2542bf85e96f24d+0x7d>
   23faf:      	movq	0x10(%rsp), %rcx
   23fb4:      	movq	0x18(%rsp), %rax
   23fb9:      	movq	%rcx, 0x48(%rsp)
   23fbe:      	movq	%rax, 0x50(%rsp)
   23fc3:      	movq	%rcx, 0x20(%rsp)
   23fc8:      	movq	%rax, 0x28(%rsp)
   23fcd:      	testb	$0x1, 0x37(%rsp)
   23fd2:      	jne	0x23fe3 <core::option::Option<T>::unwrap_or::he2542bf85e96f24d+0x93>
   23fd4:      	movq	0x20(%rsp), %rax
   23fd9:      	movq	0x28(%rsp), %rdx
   23fde:      	addq	$0x58, %rsp
   23fe2:      	retq
   23fe3:      	jmp	0x23fd4 <core::option::Option<T>::unwrap_or::he2542bf85e96f24d+0x84>
   23fe5:      	int3
   23fe6:      	int3
   23fe7:      	int3
   23fe8:      	int3
   23fe9:      	int3
   23fea:      	int3
   23feb:      	int3
   23fec:      	int3
   23fed:      	int3
   23fee:      	int3
   23fef:      	int3

0000000000023ff0 <core::option::Option<T>::unwrap_unchecked::h9eff6b9600726a34>:
   23ff0:      	subq	$0x18, %rsp
   23ff4:      	movq	%rsi, (%rsp)
   23ff8:      	movq	%rdi, 0x8(%rsp)
   23ffd:      	movb	$0x1, %al
   23fff:      	testb	$0x1, %al
   24001:      	jne	0x2401f <core::option::Option<T>::unwrap_unchecked::h9eff6b9600726a34+0x2f>
   24003:      	movq	0x8(%rsp), %rdx
   24008:      	movl	$0x1, %eax
   2400d:      	xorl	%ecx, %ecx
   2400f:      	cmpq	$0x0, %rdx
   24013:      	cmoveq	%rcx, %rax
   24017:      	cmpq	$0x0, %rax
   2401b:      	je	0x2404c <core::option::Option<T>::unwrap_unchecked::h9eff6b9600726a34+0x5c>
   2401d:      	jmp	0x24053 <core::option::Option<T>::unwrap_unchecked::h9eff6b9600726a34+0x63>
   2401f:      	movq	0x177ca(%rip), %rax     # 0x3b7f0 <zlgk82z0l71lvh9+0x3b7f0>
   24026:      	leaq	0x8(%rsp), %rdi
   2402b:      	callq	*%rax
   2402d:      	testb	$0x1, %al
   2402f:      	jne	0x24003 <core::option::Option<T>::unwrap_unchecked::h9eff6b9600726a34+0x13>
   24031:      	movq	(%rsp), %rdx
   24035:      	leaq	-0x125a6(%rip), %rdi    # 0x11a96 <str.3+0x66>
   2403c:      	movq	0x16e8d(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   24043:      	movl	$0x20, %esi
   24048:      	callq	*%rax
   2404a:      	ud2
   2404c:      	callq	0x25ff0 <core::hint::unreachable_unchecked::h502b3bb1fd2b564c>
   24051:      	ud2
   24053:      	movq	0x8(%rsp), %rax
   24058:      	movq	%rax, 0x10(%rsp)
   2405d:      	addq	$0x18, %rsp
   24061:      	retq
   24062:      	int3
   24063:      	int3
   24064:      	int3
   24065:      	int3
   24066:      	int3
   24067:      	int3
   24068:      	int3
   24069:      	int3
   2406a:      	int3
   2406b:      	int3
   2406c:      	int3
   2406d:      	int3
   2406e:      	int3
   2406f:      	int3

0000000000024070 <core::option::Option<T>::unwrap_unchecked::hcd03264962d670e4>:
   24070:      	subq	$0x18, %rsp
   24074:      	movq	%rsi, (%rsp)
   24078:      	movq	%rdi, 0x8(%rsp)
   2407d:      	movb	$0x1, %al
   2407f:      	testb	$0x1, %al
   24081:      	jne	0x2409f <core::option::Option<T>::unwrap_unchecked::hcd03264962d670e4+0x2f>
   24083:      	movq	0x8(%rsp), %rdx
   24088:      	movl	$0x1, %eax
   2408d:      	xorl	%ecx, %ecx
   2408f:      	cmpq	$0x0, %rdx
   24093:      	cmoveq	%rcx, %rax
   24097:      	cmpq	$0x0, %rax
   2409b:      	je	0x240cc <core::option::Option<T>::unwrap_unchecked::hcd03264962d670e4+0x5c>
   2409d:      	jmp	0x240d3 <core::option::Option<T>::unwrap_unchecked::hcd03264962d670e4+0x63>
   2409f:      	movq	0x17732(%rip), %rax     # 0x3b7d8 <zlgk82z0l71lvh9+0x3b7d8>
   240a6:      	leaq	0x8(%rsp), %rdi
   240ab:      	callq	*%rax
   240ad:      	testb	$0x1, %al
   240af:      	jne	0x24083 <core::option::Option<T>::unwrap_unchecked::hcd03264962d670e4+0x13>
   240b1:      	movq	(%rsp), %rdx
   240b5:      	leaq	-0x12626(%rip), %rdi    # 0x11a96 <str.3+0x66>
   240bc:      	movq	0x16e0d(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   240c3:      	movl	$0x20, %esi
   240c8:      	callq	*%rax
   240ca:      	ud2
   240cc:      	callq	0x25ff0 <core::hint::unreachable_unchecked::h502b3bb1fd2b564c>
   240d1:      	ud2
   240d3:      	movq	0x8(%rsp), %rax
   240d8:      	movq	%rax, 0x10(%rsp)
   240dd:      	addq	$0x18, %rsp
   240e1:      	retq
   240e2:      	int3
   240e3:      	int3
   240e4:      	int3
   240e5:      	int3
   240e6:      	int3
   240e7:      	int3
   240e8:      	int3
   240e9:      	int3
   240ea:      	int3
   240eb:      	int3
   240ec:      	int3
   240ed:      	int3
   240ee:      	int3
   240ef:      	int3

00000000000240f0 <core::option::Option<T>::map::h585f81b077dfd00c>:
   240f0:      	subq	$0x18, %rsp
   240f4:      	movl	%edi, (%rsp)
   240f7:      	movl	%esi, 0x4(%rsp)
   240fb:      	movb	$0x0, 0x12(%rsp)
   24100:      	movb	$0x1, 0x12(%rsp)
   24105:      	movl	(%rsp), %eax
   24108:      	cmpq	$0x0, %rax
   2410c:      	jne	0x24118 <core::option::Option<T>::map::h585f81b077dfd00c+0x28>
   2410e:      	movl	$0x110000, 0x8(%rsp)    # imm = 0x110000
   24116:      	jmp	0x2413a <core::option::Option<T>::map::h585f81b077dfd00c+0x4a>
   24118:      	movl	0x4(%rsp), %eax
   2411c:      	movl	%eax, 0x14(%rsp)
   24120:      	movb	$0x0, 0x12(%rsp)
   24125:      	movl	%eax, 0xc(%rsp)
   24129:      	movl	0xc(%rsp), %edi
   2412d:      	movq	0x176e4(%rip), %rax     # 0x3b818 <zlgk82z0l71lvh9+0x3b818>
   24134:      	callq	*%rax
   24136:      	movl	%eax, 0x8(%rsp)
   2413a:      	testb	$0x1, 0x12(%rsp)
   2413f:      	jne	0x2414a <core::option::Option<T>::map::h585f81b077dfd00c+0x5a>
   24141:      	movl	0x8(%rsp), %eax
   24145:      	addq	$0x18, %rsp
   24149:      	retq
   2414a:      	jmp	0x24141 <core::option::Option<T>::map::h585f81b077dfd00c+0x51>
   2414c:      	int3
   2414d:      	int3
   2414e:      	int3
   2414f:      	int3

0000000000024150 <core::option::Option<T>::insert::hc392ef36f1512395>:
   24150:      	subq	$0x28, %rsp
   24154:      	movq	%rdi, 0x20(%rsp)
   24159:      	movq	(%rsi), %rax
   2415c:      	movq	%rax, 0x8(%rsp)
   24161:      	movq	0x8(%rsi), %rax
   24165:      	movq	%rax, 0x10(%rsp)
   2416a:      	movq	0x10(%rsi), %rax
   2416e:      	movq	%rax, 0x18(%rsp)
   24173:      	movq	0x8(%rsp), %rax
   24178:      	movq	%rax, (%rdi)
   2417b:      	movq	0x10(%rsp), %rax
   24180:      	movq	%rax, 0x8(%rdi)
   24184:      	movq	0x18(%rsp), %rax
   24189:      	movq	%rax, 0x10(%rdi)
   2418d:      	movq	0x1766c(%rip), %rax     # 0x3b800 <zlgk82z0l71lvh9+0x3b800>
   24194:      	callq	*%rax
   24196:      	movq	%rax, %rdi
   24199:      	leaq	0x15e48(%rip), %rsi     # 0x39fe8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0xe8>
   241a0:      	movq	0x17669(%rip), %rax     # 0x3b810 <zlgk82z0l71lvh9+0x3b810>
   241a7:      	callq	*%rax
   241a9:      	addq	$0x28, %rsp
   241ad:      	retq
   241ae:      	int3
   241af:      	int3

00000000000241b0 <core::option::expect_failed::h28ba62c214f88ed4>:
   241b0:      	subq	$0x18, %rsp
   241b4:      	movq	%rdi, 0x8(%rsp)
   241b9:      	movq	%rsi, 0x10(%rsp)
   241be:      	callq	0x293c0 <core::panicking::panic_str::h1d6e7140eac69a5b>
   241c3:      	ud2
   241c5:      	int3
   241c6:      	int3
   241c7:      	int3
   241c8:      	int3
   241c9:      	int3
   241ca:      	int3
   241cb:      	int3
   241cc:      	int3
   241cd:      	int3
   241ce:      	int3
   241cf:      	int3

00000000000241d0 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h350b1a8e96c867eb>:
   241d0:      	subq	$0x18, %rsp
   241d4:      	movq	%rdi, (%rsp)
   241d8:      	movq	(%rsp), %rdx
   241dc:      	movl	$0x1, %eax
   241e1:      	xorl	%ecx, %ecx
   241e3:      	cmpq	$0x0, %rdx
   241e7:      	cmoveq	%rcx, %rax
   241eb:      	cmpq	$0x0, %rax
   241ef:      	jne	0x241fc <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h350b1a8e96c867eb+0x2c>
   241f1:      	movq	$0x0, 0x8(%rsp)
   241fa:      	jmp	0x2420a <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h350b1a8e96c867eb+0x3a>
   241fc:      	movq	(%rsp), %rax
   24200:      	movq	%rax, 0x10(%rsp)
   24205:      	movq	%rax, 0x8(%rsp)
   2420a:      	movq	0x8(%rsp), %rax
   2420f:      	addq	$0x18, %rsp
   24213:      	retq
   24214:      	int3
   24215:      	int3
   24216:      	int3
   24217:      	int3
   24218:      	int3
   24219:      	int3
   2421a:      	int3
   2421b:      	int3
   2421c:      	int3
   2421d:      	int3
   2421e:      	int3
   2421f:      	int3

0000000000024220 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h6d3b3f4cd3ea96ff>:
   24220:      	subq	$0x18, %rsp
   24224:      	movq	%rdi, (%rsp)
   24228:      	movq	(%rsp), %rdx
   2422c:      	movl	$0x1, %eax
   24231:      	xorl	%ecx, %ecx
   24233:      	cmpq	$0x0, %rdx
   24237:      	cmoveq	%rcx, %rax
   2423b:      	cmpq	$0x0, %rax
   2423f:      	jne	0x2424c <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h6d3b3f4cd3ea96ff+0x2c>
   24241:      	movq	$0x0, 0x8(%rsp)
   2424a:      	jmp	0x2425a <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h6d3b3f4cd3ea96ff+0x3a>
   2424c:      	movq	(%rsp), %rax
   24250:      	movq	%rax, 0x10(%rsp)
   24255:      	movq	%rax, 0x8(%rsp)
   2425a:      	movq	0x8(%rsp), %rax
   2425f:      	addq	$0x18, %rsp
   24263:      	retq
   24264:      	int3
   24265:      	int3
   24266:      	int3
   24267:      	int3
   24268:      	int3
   24269:      	int3
   2426a:      	int3
   2426b:      	int3
   2426c:      	int3
   2426d:      	int3
   2426e:      	int3
   2426f:      	int3

0000000000024270 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h891e87522ed98181>:
   24270:      	subq	$0x18, %rsp
   24274:      	movq	%rdi, (%rsp)
   24278:      	movq	(%rsp), %rdx
   2427c:      	movl	$0x1, %eax
   24281:      	xorl	%ecx, %ecx
   24283:      	cmpq	$0x0, %rdx
   24287:      	cmoveq	%rcx, %rax
   2428b:      	cmpq	$0x0, %rax
   2428f:      	jne	0x2429c <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h891e87522ed98181+0x2c>
   24291:      	movq	$0x0, 0x8(%rsp)
   2429a:      	jmp	0x242aa <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h891e87522ed98181+0x3a>
   2429c:      	movq	(%rsp), %rax
   242a0:      	movq	%rax, 0x10(%rsp)
   242a5:      	movq	%rax, 0x8(%rsp)
   242aa:      	movq	0x8(%rsp), %rax
   242af:      	addq	$0x18, %rsp
   242b3:      	retq
   242b4:      	int3
   242b5:      	int3
   242b6:      	int3
   242b7:      	int3
   242b8:      	int3
   242b9:      	int3
   242ba:      	int3
   242bb:      	int3
   242bc:      	int3
   242bd:      	int3
   242be:      	int3
   242bf:      	int3

00000000000242c0 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h8de4b12391bc1fbb>:
   242c0:      	subq	$0x30, %rsp
   242c4:      	movq	%rdi, (%rsp)
   242c8:      	movq	%rsi, 0x8(%rsp)
   242cd:      	movq	(%rsp), %rdx
   242d1:      	movl	$0x1, %eax
   242d6:      	xorl	%ecx, %ecx
   242d8:      	cmpq	$0x0, %rdx
   242dc:      	cmoveq	%rcx, %rax
   242e0:      	cmpq	$0x0, %rax
   242e4:      	jne	0x242f1 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h8de4b12391bc1fbb+0x31>
   242e6:      	movq	$0x0, 0x10(%rsp)
   242ef:      	jmp	0x2430e <<core::option::Option<T> as core::ops::try_trait::Try>::branch::h8de4b12391bc1fbb+0x4e>
   242f1:      	movq	(%rsp), %rcx
   242f5:      	movq	0x8(%rsp), %rax
   242fa:      	movq	%rcx, 0x20(%rsp)
   242ff:      	movq	%rax, 0x28(%rsp)
   24304:      	movq	%rcx, 0x10(%rsp)
   24309:      	movq	%rax, 0x18(%rsp)
   2430e:      	movq	0x10(%rsp), %rax
   24313:      	movq	0x18(%rsp), %rdx
   24318:      	addq	$0x30, %rsp
   2431c:      	retq
   2431d:      	int3
   2431e:      	int3
   2431f:      	int3

0000000000024320 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::hc15422df285a40da>:
   24320:      	subq	$0x3, %rsp
   24324:      	movb	%dil, %al
   24327:      	andb	$0x1, %al
   24329:      	movb	%al, (%rsp)
   2432c:      	movb	(%rsp), %al
   2432f:      	andb	$0x1, %al
   24331:      	movzbl	%al, %eax
   24334:      	cmpq	$0x0, %rax
   24338:      	jne	0x24341 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::hc15422df285a40da+0x21>
   2433a:      	movb	$0x1, 0x1(%rsp)
   2433f:      	jmp	0x24346 <<core::option::Option<T> as core::ops::try_trait::Try>::branch::hc15422df285a40da+0x26>
   24341:      	movb	$0x0, 0x1(%rsp)
   24346:      	movb	0x1(%rsp), %al
   2434a:      	andb	$0x1, %al
   2434c:      	movzbl	%al, %eax
   2434f:      	addq	$0x3, %rsp
   24353:      	retq
   24354:      	int3
   24355:      	int3
   24356:      	int3
   24357:      	int3
   24358:      	int3
   24359:      	int3
   2435a:      	int3
   2435b:      	int3
   2435c:      	int3
   2435d:      	int3
   2435e:      	int3
   2435f:      	int3

0000000000024360 <<core::option::Option<T> as core::ops::try_trait::FromResidual>::from_residual::h5b04f71306d8877d>:
   24360:      	subq	$0x20, %rsp
   24364:      	movl	$0x110000, 0x10(%rsp)   # imm = 0x110000
   2436c:      	movq	0x8(%rsp), %rax
   24371:      	movl	0x10(%rsp), %edx
   24375:      	addq	$0x20, %rsp
   24379:      	retq
   2437a:      	int3
   2437b:      	int3
   2437c:      	int3
   2437d:      	int3
   2437e:      	int3
   2437f:      	int3

0000000000024380 <<core::option::Option<T> as core::ops::try_trait::FromResidual>::from_residual::h6f4dec37f05efc73>:
   24380:      	subq	$0x10, %rsp
   24384:      	movl	$0x0, 0x4(%rsp)
   2438c:      	movl	0x4(%rsp), %eax
   24390:      	movl	0x8(%rsp), %edx
   24394:      	addq	$0x10, %rsp
   24398:      	retq
   24399:      	int3
   2439a:      	int3
   2439b:      	int3
   2439c:      	int3
   2439d:      	int3
   2439e:      	int3
   2439f:      	int3

00000000000243a0 <<core::option::Option<T> as core::ops::try_trait::FromResidual>::from_residual::h870666c33816be90>:
   243a0:      	subq	$0x20, %rsp
   243a4:      	movq	$0x0, 0x10(%rsp)
   243ad:      	movq	0x8(%rsp), %rax
   243b2:      	movq	0x10(%rsp), %rdx
   243b7:      	addq	$0x20, %rsp
   243bb:      	retq
   243bc:      	int3
   243bd:      	int3
   243be:      	int3
   243bf:      	int3

00000000000243c0 <<core::option::Option<T> as core::ops::try_trait::FromResidual>::from_residual::h94fcd148dee9486c>:
   243c0:      	subq	$0x2, %rsp
   243c4:      	movq	%rdi, %rax
   243c7:      	movq	$0x0, (%rdi)
   243ce:      	addq	$0x2, %rsp
   243d2:      	retq
   243d3:      	int3
   243d4:      	int3
   243d5:      	int3
   243d6:      	int3
   243d7:      	int3
   243d8:      	int3
   243d9:      	int3
   243da:      	int3
   243db:      	int3
   243dc:      	int3
   243dd:      	int3
   243de:      	int3
   243df:      	int3

00000000000243e0 <<core::option::Option<T> as core::ops::try_trait::FromResidual>::from_residual::h9dcd13b1aed0a531>:
   243e0:      	subq	$0x20, %rsp
   243e4:      	movq	$0x0, 0x10(%rsp)
   243ed:      	movq	0x8(%rsp), %rax
   243f2:      	movq	0x10(%rsp), %rdx
   243f7:      	addq	$0x20, %rsp
   243fb:      	retq
   243fc:      	int3
   243fd:      	int3
   243fe:      	int3
   243ff:      	int3

0000000000024400 <<core::option::Option<T> as core::ops::try_trait::FromResidual>::from_residual::hf5bafa6704ff804f>:
   24400:      	subq	$0x20, %rsp
   24404:      	movq	$0x0, 0x10(%rsp)
   2440d:      	movq	0x8(%rsp), %rax
   24412:      	movq	0x10(%rsp), %rdx
   24417:      	addq	$0x20, %rsp
   2441b:      	retq
   2441c:      	int3
   2441d:      	int3
   2441e:      	int3
   2441f:      	int3

0000000000024420 <core::ops::function::FnOnce::call_once::h40253926fd1940b9>:
   24420:      	subq	$0x18, %rsp
   24424:      	movq	%rdi, (%rsp)
   24428:      	movq	%rsi, 0x8(%rsp)
   2442d:      	movq	(%rsp), %rdi
   24431:      	movq	0x8(%rsp), %rsi
   24436:      	callq	0x31020 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::h5ed48b10352067fe>
   2443b:      	addq	$0x18, %rsp
   2443f:      	retq

0000000000024440 <core::ops::function::FnOnce::call_once::h86fc862936e408d5>:
   24440:      	subq	$0x18, %rsp
   24444:      	movq	%rdi, 0x8(%rsp)
   24449:      	movq	%rsi, 0x10(%rsp)
   2444e:      	movq	0x8(%rsp), %rsi
   24453:      	movq	0x10(%rsp), %rdx
   24458:      	movq	0x17401(%rip), %rax     # 0x3b860 <zlgk82z0l71lvh9+0x3b860>
   2445f:      	leaq	0x7(%rsp), %rdi
   24464:      	callq	*%rax
   24466:      	andb	$0x1, %al
   24468:      	movzbl	%al, %eax
   2446b:      	addq	$0x18, %rsp
   2446f:      	retq

0000000000024470 <core::ptr::drop_in_place<core::fmt::Error>::hdf1b5a1ddf67700b>:
   24470:      	pushq	%rax
   24471:      	movq	%rdi, (%rsp)
   24475:      	popq	%rax
   24476:      	retq
   24477:      	int3
   24478:      	int3
   24479:      	int3
   2447a:      	int3
   2447b:      	int3
   2447c:      	int3
   2447d:      	int3
   2447e:      	int3
   2447f:      	int3

0000000000024480 <core::ptr::drop_in_place<core::fmt::builders::PadAdapter>::hc15eb9e68e367e7c>:
   24480:      	pushq	%rax
   24481:      	movq	%rdi, (%rsp)
   24485:      	popq	%rax
   24486:      	retq
   24487:      	int3
   24488:      	int3
   24489:      	int3
   2448a:      	int3
   2448b:      	int3
   2448c:      	int3
   2448d:      	int3
   2448e:      	int3
   2448f:      	int3

0000000000024490 <core::ptr::drop_in_place<&mut core::fmt::builders::PadAdapter>::h30ea0c9fa4dc0dc8>:
   24490:      	pushq	%rax
   24491:      	movq	%rdi, (%rsp)
   24495:      	popq	%rax
   24496:      	retq
   24497:      	int3
   24498:      	int3
   24499:      	int3
   2449a:      	int3
   2449b:      	int3
   2449c:      	int3
   2449d:      	int3
   2449e:      	int3
   2449f:      	int3

00000000000244a0 <core::ptr::drop_in_place<core::panic::panic_info::PanicInfo::internal_constructor::NoPayload>::hb55ee9dc1b90428c>:
   244a0:      	pushq	%rax
   244a1:      	movq	%rdi, (%rsp)
   244a5:      	popq	%rax
   244a6:      	retq
   244a7:      	int3
   244a8:      	int3
   244a9:      	int3
   244aa:      	int3
   244ab:      	int3
   244ac:      	int3
   244ad:      	int3
   244ae:      	int3
   244af:      	int3

00000000000244b0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h79e9730acc4ad22cE>:
   244b0:      	subq	$0x10, %rsp
   244b4:      	movq	%rdi, (%rsp)
   244b8:      	movl	$0x1, %eax
   244bd:      	xorl	%ecx, %ecx
   244bf:      	cmpq	$0x0, (%rsp)
   244c4:      	cmoveq	%rcx, %rax
   244c8:      	cmpq	$0x0, %rax
   244cc:      	jne	0x244d5 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h79e9730acc4ad22cE+0x25>
   244ce:      	movb	$0x1, 0xe(%rsp)
   244d3:      	jmp	0x244da <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h79e9730acc4ad22cE+0x2a>
   244d5:      	movb	$0x0, 0xe(%rsp)
   244da:      	movl	$0x1, %eax
   244df:      	xorl	%ecx, %ecx
   244e1:      	cmpq	$0x0, (%rsp)
   244e6:      	cmoveq	%rcx, %rax
   244ea:      	cmpq	$0x0, %rax
   244ee:      	jne	0x244fe <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h79e9730acc4ad22cE+0x4e>
   244f0:      	movb	0xe(%rsp), %al
   244f4:      	andb	$0x1, %al
   244f6:      	movzbl	%al, %eax
   244f9:      	addq	$0x10, %rsp
   244fd:      	retq
   244fe:      	jmp	0x244f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h79e9730acc4ad22cE+0x40>

0000000000024500 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6d342beff17dc2d1E>:
   24500:      	subq	$0x18, %rsp
   24504:      	movq	%rsi, 0x8(%rsp)
   24509:      	movb	%dil, %al
   2450c:      	andb	$0x1, %al
   2450e:      	movb	%al, 0x15(%rsp)
   24512:      	movb	0x15(%rsp), %al
   24516:      	andb	$0x1, %al
   24518:      	movzbl	%al, %eax
   2451b:      	cmpq	$0x0, %rax
   2451f:      	jne	0x24526 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6d342beff17dc2d1E+0x26>
   24521:      	addq	$0x18, %rsp
   24525:      	retq
   24526:      	movq	0x8(%rsp), %r8
   2452b:      	leaq	-0x129a6(%rip), %rdi    # 0x11b8c <str.1+0x1c>
   24532:      	leaq	0x15ac7(%rip), %rcx     # 0x3a000 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x100>
   24539:      	movq	0x16cb8(%rip), %rax     # 0x3b1f8 <zlgk82z0l71lvh9+0x3b1f8>
   24540:      	movl	$0x2b, %esi
   24545:      	leaq	0x16(%rsp), %rdx
   2454a:      	callq	*%rax
   2454c:      	ud2
   2454e:      	int3
   2454f:      	int3

0000000000024550 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h0bc78309ed1f3797E>:
   24550:      	subq	$0x28, %rsp
   24554:      	movq	%rsi, 0x8(%rsp)
   24559:      	movb	%dil, %al
   2455c:      	andb	$0x1, %al
   2455e:      	movb	%al, 0x15(%rsp)
   24562:      	movq	%rsi, 0x18(%rsp)
   24567:      	movb	$0x0, 0x17(%rsp)
   2456c:      	movb	$0x1, 0x17(%rsp)
   24571:      	movb	0x15(%rsp), %al
   24575:      	andb	$0x1, %al
   24577:      	movzbl	%al, %eax
   2457a:      	cmpq	$0x0, %rax
   2457e:      	jne	0x24597 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h0bc78309ed1f3797E+0x47>
   24580:      	movq	0x8(%rsp), %rdi
   24585:      	movb	$0x0, 0x17(%rsp)
   2458a:      	callq	0x304b0 <core::fmt::builders::DebugStruct::finish::{{closure}}::h0d25f7a53ef95ae5>
   2458f:      	andb	$0x1, %al
   24591:      	movb	%al, 0x16(%rsp)
   24595:      	jmp	0x2459c <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h0bc78309ed1f3797E+0x4c>
   24597:      	movb	$0x1, 0x16(%rsp)
   2459c:      	testb	$0x1, 0x17(%rsp)
   245a1:      	jne	0x245b1 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h0bc78309ed1f3797E+0x61>
   245a3:      	movb	0x16(%rsp), %al
   245a7:      	andb	$0x1, %al
   245a9:      	movzbl	%al, %eax
   245ac:      	addq	$0x28, %rsp
   245b0:      	retq
   245b1:      	jmp	0x245a3 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h0bc78309ed1f3797E+0x53>
   245b3:      	int3
   245b4:      	int3
   245b5:      	int3
   245b6:      	int3
   245b7:      	int3
   245b8:      	int3
   245b9:      	int3
   245ba:      	int3
   245bb:      	int3
   245bc:      	int3
   245bd:      	int3
   245be:      	int3
   245bf:      	int3

00000000000245c0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h45be21d2492b0de0E>:
   245c0:      	subq	$0x28, %rsp
   245c4:      	movq	%rsi, 0x8(%rsp)
   245c9:      	movb	%dil, %al
   245cc:      	andb	$0x1, %al
   245ce:      	movb	%al, 0x15(%rsp)
   245d2:      	movq	%rsi, 0x18(%rsp)
   245d7:      	movb	$0x0, 0x17(%rsp)
   245dc:      	movb	$0x1, 0x17(%rsp)
   245e1:      	movb	0x15(%rsp), %al
   245e5:      	andb	$0x1, %al
   245e7:      	movzbl	%al, %eax
   245ea:      	cmpq	$0x0, %rax
   245ee:      	jne	0x24607 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h45be21d2492b0de0E+0x47>
   245f0:      	movq	0x8(%rsp), %rdi
   245f5:      	movb	$0x0, 0x17(%rsp)
   245fa:      	callq	0x30900 <core::fmt::builders::DebugTuple::finish::{{closure}}::h623e1053cb8d19f8>
   245ff:      	andb	$0x1, %al
   24601:      	movb	%al, 0x16(%rsp)
   24605:      	jmp	0x2460c <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h45be21d2492b0de0E+0x4c>
   24607:      	movb	$0x1, 0x16(%rsp)
   2460c:      	testb	$0x1, 0x17(%rsp)
   24611:      	jne	0x24621 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h45be21d2492b0de0E+0x61>
   24613:      	movb	0x16(%rsp), %al
   24617:      	andb	$0x1, %al
   24619:      	movzbl	%al, %eax
   2461c:      	addq	$0x28, %rsp
   24620:      	retq
   24621:      	jmp	0x24613 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h45be21d2492b0de0E+0x53>
   24623:      	int3
   24624:      	int3
   24625:      	int3
   24626:      	int3
   24627:      	int3
   24628:      	int3
   24629:      	int3
   2462a:      	int3
   2462b:      	int3
   2462c:      	int3
   2462d:      	int3
   2462e:      	int3
   2462f:      	int3

0000000000024630 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h6e5545468694b629E>:
   24630:      	subq	$0x38, %rsp
   24634:      	movq	%rsi, 0x8(%rsp)
   24639:      	movb	%dil, %al
   2463c:      	andb	$0x1, %al
   2463e:      	movb	%al, 0x16(%rsp)
   24642:      	movb	$0x0, 0x35(%rsp)
   24647:      	movb	$0x1, 0x35(%rsp)
   2464c:      	movb	0x16(%rsp), %al
   24650:      	andb	$0x1, %al
   24652:      	movzbl	%al, %eax
   24655:      	cmpq	$0x0, %rax
   24659:      	jne	0x24691 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h6e5545468694b629E+0x61>
   2465b:      	movq	0x8(%rsp), %rax
   24660:      	movb	$0x0, 0x35(%rsp)
   24665:      	movq	(%rax), %rcx
   24668:      	movq	%rcx, 0x18(%rsp)
   2466d:      	movq	0x8(%rax), %rcx
   24671:      	movq	%rcx, 0x20(%rsp)
   24676:      	movq	0x10(%rax), %rax
   2467a:      	movq	%rax, 0x28(%rsp)
   2467f:      	leaq	0x18(%rsp), %rdi
   24684:      	callq	0x30670 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af>
   24689:      	andb	$0x1, %al
   2468b:      	movb	%al, 0x17(%rsp)
   2468f:      	jmp	0x24696 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h6e5545468694b629E+0x66>
   24691:      	movb	$0x1, 0x17(%rsp)
   24696:      	testb	$0x1, 0x35(%rsp)
   2469b:      	jne	0x246ab <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h6e5545468694b629E+0x7b>
   2469d:      	movb	0x17(%rsp), %al
   246a1:      	andb	$0x1, %al
   246a3:      	movzbl	%al, %eax
   246a6:      	addq	$0x38, %rsp
   246aa:      	retq
   246ab:      	jmp	0x2469d <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17h6e5545468694b629E+0x6d>
   246ad:      	int3
   246ae:      	int3
   246af:      	int3

00000000000246b0 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17hce399f849b44c46fE>:
   246b0:      	subq	$0x48, %rsp
   246b4:      	movq	%rsi, 0x8(%rsp)
   246b9:      	movb	%dil, %al
   246bc:      	andb	$0x1, %al
   246be:      	movb	%al, 0x16(%rsp)
   246c2:      	movb	$0x0, 0x45(%rsp)
   246c7:      	movb	$0x1, 0x45(%rsp)
   246cc:      	movb	0x16(%rsp), %al
   246d0:      	andb	$0x1, %al
   246d2:      	movzbl	%al, %eax
   246d5:      	cmpq	$0x0, %rax
   246d9:      	jne	0x24723 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17hce399f849b44c46fE+0x73>
   246db:      	movq	0x8(%rsp), %rcx
   246e0:      	movb	$0x0, 0x45(%rsp)
   246e5:      	movq	0x20(%rcx), %rax
   246e9:      	movq	%rax, 0x38(%rsp)
   246ee:      	movq	0x18(%rcx), %rax
   246f2:      	movq	%rax, 0x30(%rsp)
   246f7:      	movq	0x10(%rcx), %rax
   246fb:      	movq	%rax, 0x28(%rsp)
   24700:      	movq	(%rcx), %rax
   24703:      	movq	0x8(%rcx), %rcx
   24707:      	movq	%rcx, 0x20(%rsp)
   2470c:      	movq	%rax, 0x18(%rsp)
   24711:      	leaq	0x18(%rsp), %rdi
   24716:      	callq	0x300b0 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a>
   2471b:      	andb	$0x1, %al
   2471d:      	movb	%al, 0x17(%rsp)
   24721:      	jmp	0x24728 <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17hce399f849b44c46fE+0x78>
   24723:      	movb	$0x1, 0x17(%rsp)
   24728:      	testb	$0x1, 0x45(%rsp)
   2472d:      	jne	0x2473d <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17hce399f849b44c46fE+0x8d>
   2472f:      	movb	0x17(%rsp), %al
   24733:      	andb	$0x1, %al
   24735:      	movzbl	%al, %eax
   24738:      	addq	$0x48, %rsp
   2473c:      	retq
   2473d:      	jmp	0x2472f <_ZN4core6result19Result$LT$T$C$E$GT$8and_then17hce399f849b44c46fE+0x7f>
   2473f:      	int3

0000000000024740 <core::result::unwrap_failed::h51c6a07caa82c67b>:
   24740:      	subq	$0xd8, %rsp
   24747:      	movq	%r8, 0x10(%rsp)
   2474c:      	movq	%rdi, 0x18(%rsp)
   24751:      	movq	%rsi, 0x20(%rsp)
   24756:      	movq	%rdx, 0x28(%rsp)
   2475b:      	movq	%rcx, 0x30(%rsp)
   24760:      	leaq	0x18(%rsp), %rcx
   24765:      	movq	%rcx, 0x88(%rsp)
   2476d:      	movq	%rcx, 0xa0(%rsp)
   24775:      	movq	0x16d24(%rip), %rax     # 0x3b4a0 <zlgk82z0l71lvh9+0x3b4a0>
   2477c:      	movq	%rax, 0xa8(%rsp)
   24784:      	movq	%rcx, 0x90(%rsp)
   2478c:      	movq	%rax, 0x98(%rsp)
   24794:      	movq	0x90(%rsp), %rsi
   2479c:      	movq	0x98(%rsp), %rdx
   247a4:      	leaq	0x28(%rsp), %rcx
   247a9:      	movq	%rcx, 0xb0(%rsp)
   247b1:      	movq	%rcx, 0xc8(%rsp)
   247b9:      	movq	0x170c8(%rip), %rax     # 0x3b888 <zlgk82z0l71lvh9+0x3b888>
   247c0:      	movq	%rax, 0xd0(%rsp)
   247c8:      	movq	%rcx, 0xb8(%rsp)
   247d0:      	movq	%rax, 0xc0(%rsp)
   247d8:      	movq	0xb8(%rsp), %rcx
   247e0:      	movq	0xc0(%rsp), %rax
   247e8:      	movq	%rsi, 0x68(%rsp)
   247ed:      	movq	%rdx, 0x70(%rsp)
   247f2:      	movq	%rcx, 0x78(%rsp)
   247f7:      	movq	%rax, 0x80(%rsp)
   247ff:      	leaq	0x1581a(%rip), %rsi     # 0x3a020 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x120>
   24806:      	leaq	0x38(%rsp), %rdi
   2480b:      	movq	%rdi, 0x8(%rsp)
   24810:      	leaq	0x68(%rsp), %rcx
   24815:      	movl	$0x2, %r8d
   2481b:      	movq	%r8, %rdx
   2481e:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   24823:      	movq	0x8(%rsp), %rdi
   24828:      	movq	0x10(%rsp), %rsi
   2482d:      	movq	0x1668c(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   24834:      	callq	*%rax
   24836:      	ud2
   24838:      	int3
   24839:      	int3
   2483a:      	int3
   2483b:      	int3
   2483c:      	int3
   2483d:      	int3
   2483e:      	int3
   2483f:      	int3

0000000000024840 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd6ff73ee2695f89fE>:
   24840:      	subq	$0x4, %rsp
   24844:      	movb	%dil, %al
   24847:      	andb	$0x1, %al
   24849:      	movb	%al, (%rsp)
   2484c:      	movb	(%rsp), %al
   2484f:      	andb	$0x1, %al
   24851:      	movzbl	%al, %eax
   24854:      	cmpq	$0x0, %rax
   24858:      	jne	0x24861 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd6ff73ee2695f89fE+0x21>
   2485a:      	movb	$0x0, 0x1(%rsp)
   2485f:      	jmp	0x24866 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hd6ff73ee2695f89fE+0x26>
   24861:      	movb	$0x1, 0x1(%rsp)
   24866:      	movb	0x1(%rsp), %al
   2486a:      	andb	$0x1, %al
   2486c:      	movzbl	%al, %eax
   2486f:      	addq	$0x4, %rsp
   24873:      	retq
   24874:      	int3
   24875:      	int3
   24876:      	int3
   24877:      	int3
   24878:      	int3
   24879:      	int3
   2487a:      	int3
   2487b:      	int3
   2487c:      	int3
   2487d:      	int3
   2487e:      	int3
   2487f:      	int3

0000000000024880 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he909d5181c46e415E>:
   24880:      	subq	$0x38, %rsp
   24884:      	movq	%rdi, (%rsp)
   24888:      	movl	%esi, 0x8(%rsp)
   2488c:      	xorl	%eax, %eax
   2488e:      	movl	$0x1, %ecx
   24893:      	cmpl	$0x110000, 0x8(%rsp)    # imm = 0x110000
   2489b:      	cmoveq	%rcx, %rax
   2489f:      	cmpq	$0x0, %rax
   248a3:      	jne	0x248c1 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he909d5181c46e415E+0x41>
   248a5:      	movq	(%rsp), %rcx
   248a9:      	movl	0x8(%rsp), %eax
   248ad:      	movq	%rcx, 0x28(%rsp)
   248b2:      	movl	%eax, 0x30(%rsp)
   248b6:      	movq	%rcx, 0x10(%rsp)
   248bb:      	movl	%eax, 0x18(%rsp)
   248bf:      	jmp	0x248c9 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he909d5181c46e415E+0x49>
   248c1:      	movl	$0x110000, 0x18(%rsp)   # imm = 0x110000
   248c9:      	movq	0x10(%rsp), %rax
   248ce:      	movl	0x18(%rsp), %edx
   248d2:      	addq	$0x38, %rsp
   248d6:      	retq
   248d7:      	int3
   248d8:      	int3
   248d9:      	int3
   248da:      	int3
   248db:      	int3
   248dc:      	int3
   248dd:      	int3
   248de:      	int3
   248df:      	int3

00000000000248e0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h5d54e01256ddfd8dE>:
   248e0:      	subq	$0x3, %rsp
   248e4:      	movb	$0x1, (%rsp)
   248e8:      	movb	(%rsp), %al
   248eb:      	andb	$0x1, %al
   248ed:      	movzbl	%al, %eax
   248f0:      	addq	$0x3, %rsp
   248f4:      	retq
   248f5:      	int3
   248f6:      	int3
   248f7:      	int3
   248f8:      	int3
   248f9:      	int3
   248fa:      	int3
   248fb:      	int3
   248fc:      	int3
   248fd:      	int3
   248fe:      	int3
   248ff:      	int3

0000000000024900 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hb99373de5250ec8bE>:
   24900:      	subq	$0x18, %rsp
   24904:      	movl	$0x110000, 0x8(%rsp)    # imm = 0x110000
   2490c:      	movq	(%rsp), %rax
   24910:      	movl	0x8(%rsp), %edx
   24914:      	addq	$0x18, %rsp
   24918:      	retq
   24919:      	int3
   2491a:      	int3
   2491b:      	int3
   2491c:      	int3
   2491d:      	int3
   2491e:      	int3
   2491f:      	int3

0000000000024920 <<usize as core::iter::traits::accum::Sum>::sum::h4e53741096522590>:
   24920:      	subq	$0x18, %rsp
   24924:      	movq	%rdi, 0x8(%rsp)
   24929:      	movq	%rsi, 0x10(%rsp)
   2492e:      	xorl	%eax, %eax
   24930:      	movq	0x16f71(%rip), %rax     # 0x3b8a8 <zlgk82z0l71lvh9+0x3b8a8>
   24937:      	xorl	%ecx, %ecx
   24939:      	movl	%ecx, %edx
   2493b:      	callq	*%rax
   2493d:      	addq	$0x18, %rsp
   24941:      	retq
   24942:      	int3
   24943:      	int3
   24944:      	int3
   24945:      	int3
   24946:      	int3
   24947:      	int3
   24948:      	int3
   24949:      	int3
   2494a:      	int3
   2494b:      	int3
   2494c:      	int3
   2494d:      	int3
   2494e:      	int3
   2494f:      	int3

0000000000024950 <<usize as core::iter::traits::accum::Sum>::sum::{{closure}}::hda709a64d13130be>:
   24950:      	subq	$0x28, %rsp
   24954:      	movq	%rdi, 0x10(%rsp)
   24959:      	movq	%rsi, 0x18(%rsp)
   2495e:      	movq	%rdx, 0x20(%rsp)
   24963:      	addq	%rdx, %rsi
   24966:      	movq	%rsi, 0x8(%rsp)
   2496b:      	setb	%al
   2496e:      	testb	$0x1, %al
   24970:      	jne	0x2497c <<usize as core::iter::traits::accum::Sum>::sum::{{closure}}::hda709a64d13130be+0x2c>
   24972:      	movq	0x8(%rsp), %rax
   24977:      	addq	$0x28, %rsp
   2497b:      	retq
   2497c:      	leaq	-0x12e13(%rip), %rdi    # 0x11b70 <str.1>
   24983:      	leaq	0x156b6(%rip), %rdx     # 0x3a040 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x140>
   2498a:      	movq	0x1653f(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   24991:      	movl	$0x1c, %esi
   24996:      	callq	*%rax
   24998:      	ud2
   2499a:      	int3
   2499b:      	int3
   2499c:      	int3
   2499d:      	int3
   2499e:      	int3
   2499f:      	int3

00000000000249a0 <core::any::TypeId::of::h56b6db70dc30bb63>:
   249a0:      	subq	$0x30, %rsp
   249a4:      	movabsq	$-0x32a16da9485dd1b4, %rax # imm = 0xCD5E9256B7A22E4C
   249ae:      	movq	%rax, 0x18(%rsp)
   249b3:      	movabsq	$-0x6df5c00b16ee54ce, %rax # imm = 0x920A3FF4E911AB32
   249bd:      	movq	%rax, 0x10(%rsp)
   249c2:      	movq	0x10(%rsp), %rax
   249c7:      	movq	0x18(%rsp), %rcx
   249cc:      	movq	%rcx, 0x28(%rsp)
   249d1:      	movq	%rax, 0x20(%rsp)
   249d6:      	movq	%rcx, 0x8(%rsp)
   249db:      	movq	%rax, (%rsp)
   249df:      	movq	(%rsp), %rax
   249e3:      	movq	0x8(%rsp), %rdx
   249e8:      	addq	$0x30, %rsp
   249ec:      	retq
   249ed:      	int3
   249ee:      	int3
   249ef:      	int3

00000000000249f0 <core::sync::atomic::atomic_load::h202ddd643bb1a36f>:
   249f0:      	subq	$0x98, %rsp
   249f7:      	movq	%rdi, 0x10(%rsp)
   249fc:      	movb	%sil, %al
   249ff:      	movb	%al, 0x27(%rsp)
   24a03:      	movq	%rdi, 0x90(%rsp)
   24a0b:      	movzbl	0x27(%rsp), %eax
   24a10:      	movq	%rax, 0x18(%rsp)
   24a15:      	movq	0x18(%rsp), %rax
   24a1a:      	leaq	-0x12de5(%rip), %rcx    # 0x11c3c <str.1+0xcc>
   24a21:      	movslq	(%rcx,%rax,4), %rax
   24a25:      	addq	%rcx, %rax
   24a28:      	jmpq	*%rax
   24a2a:      	ud2
   24a2c:      	movq	0x10(%rsp), %rax
   24a31:      	movq	(%rax), %rax
   24a34:      	movq	%rax, 0x28(%rsp)
   24a39:      	jmp	0x24ab9 <core::sync::atomic::atomic_load::h202ddd643bb1a36f+0xc9>
   24a3b:      	leaq	0x15616(%rip), %rsi     # 0x3a058 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x158>
   24a42:      	leaq	0x30(%rsp), %rdi
   24a47:      	movq	%rdi, 0x8(%rsp)
   24a4c:      	movl	$0x1, %edx
   24a51:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   24a56:      	movq	0x8(%rsp), %rdi
   24a5b:      	leaq	0x15606(%rip), %rsi     # 0x3a068 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x168>
   24a62:      	movq	0x16457(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   24a69:      	callq	*%rax
   24a6b:      	ud2
   24a6d:      	movq	0x10(%rsp), %rax
   24a72:      	movq	(%rax), %rax
   24a75:      	movq	%rax, 0x28(%rsp)
   24a7a:      	jmp	0x24ab9 <core::sync::atomic::atomic_load::h202ddd643bb1a36f+0xc9>
   24a7c:      	leaq	0x155fd(%rip), %rsi     # 0x3a080 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x180>
   24a83:      	leaq	0x60(%rsp), %rdi
   24a88:      	movq	%rdi, (%rsp)
   24a8c:      	movl	$0x1, %edx
   24a91:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   24a96:      	movq	(%rsp), %rdi
   24a9a:      	leaq	0x155ef(%rip), %rsi     # 0x3a090 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x190>
   24aa1:      	movq	0x16418(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   24aa8:      	callq	*%rax
   24aaa:      	ud2
   24aac:      	movq	0x10(%rsp), %rax
   24ab1:      	movq	(%rax), %rax
   24ab4:      	movq	%rax, 0x28(%rsp)
   24ab9:      	movq	0x28(%rsp), %rax
   24abe:      	addq	$0x98, %rsp
   24ac5:      	retq
   24ac6:      	int3
   24ac7:      	int3
   24ac8:      	int3
   24ac9:      	int3
   24aca:      	int3
   24acb:      	int3
   24acc:      	int3
   24acd:      	int3
   24ace:      	int3
   24acf:      	int3

0000000000024ad0 <core::sync::atomic::atomic_load::hf819486bf4abf677>:
   24ad0:      	subq	$0x98, %rsp
   24ad7:      	movq	%rdi, 0x18(%rsp)
   24adc:      	movb	%sil, %al
   24adf:      	movb	%al, 0x2e(%rsp)
   24ae3:      	movq	%rdi, 0x90(%rsp)
   24aeb:      	movzbl	0x2e(%rsp), %eax
   24af0:      	movq	%rax, 0x20(%rsp)
   24af5:      	movq	0x20(%rsp), %rax
   24afa:      	leaq	-0x12eb1(%rip), %rcx    # 0x11c50 <str.1+0xe0>
   24b01:      	movslq	(%rcx,%rax,4), %rax
   24b05:      	addq	%rcx, %rax
   24b08:      	jmpq	*%rax
   24b0a:      	ud2
   24b0c:      	movq	0x18(%rsp), %rax
   24b11:      	movb	(%rax), %al
   24b13:      	movb	%al, 0x2f(%rsp)
   24b17:      	jmp	0x24b95 <core::sync::atomic::atomic_load::hf819486bf4abf677+0xc5>
   24b19:      	leaq	0x15538(%rip), %rsi     # 0x3a058 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x158>
   24b20:      	leaq	0x30(%rsp), %rdi
   24b25:      	movq	%rdi, 0x10(%rsp)
   24b2a:      	movl	$0x1, %edx
   24b2f:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   24b34:      	movq	0x10(%rsp), %rdi
   24b39:      	leaq	0x15528(%rip), %rsi     # 0x3a068 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x168>
   24b40:      	movq	0x16379(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   24b47:      	callq	*%rax
   24b49:      	ud2
   24b4b:      	movq	0x18(%rsp), %rax
   24b50:      	movb	(%rax), %al
   24b52:      	movb	%al, 0x2f(%rsp)
   24b56:      	jmp	0x24b95 <core::sync::atomic::atomic_load::hf819486bf4abf677+0xc5>
   24b58:      	leaq	0x15521(%rip), %rsi     # 0x3a080 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x180>
   24b5f:      	leaq	0x60(%rsp), %rdi
   24b64:      	movq	%rdi, 0x8(%rsp)
   24b69:      	movl	$0x1, %edx
   24b6e:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   24b73:      	movq	0x8(%rsp), %rdi
   24b78:      	leaq	0x15511(%rip), %rsi     # 0x3a090 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x190>
   24b7f:      	movq	0x1633a(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   24b86:      	callq	*%rax
   24b88:      	ud2
   24b8a:      	movq	0x18(%rsp), %rax
   24b8f:      	movb	(%rax), %al
   24b91:      	movb	%al, 0x2f(%rsp)
   24b95:      	movb	0x2f(%rsp), %al
   24b99:      	addq	$0x98, %rsp
   24ba0:      	retq
   24ba1:      	int3
   24ba2:      	int3
   24ba3:      	int3
   24ba4:      	int3
   24ba5:      	int3
   24ba6:      	int3
   24ba7:      	int3
   24ba8:      	int3
   24ba9:      	int3
   24baa:      	int3
   24bab:      	int3
   24bac:      	int3
   24bad:      	int3
   24bae:      	int3
   24baf:      	int3

0000000000024bb0 <core::slice::memchr::contains_zero_byte::h70b91f54afc65c10>:
   24bb0:      	subq	$0x18, %rsp
   24bb4:      	movq	%rdi, (%rsp)
   24bb8:      	movq	%rdi, 0x8(%rsp)
   24bbd:      	movabsq	$0x101010101010101, %rax # imm = 0x101010101010101
   24bc7:      	movq	%rax, 0x10(%rsp)
   24bcc:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   24bd6:      	movq	%rdi, %rax
   24bd9:      	subq	%rcx, %rax
   24bdc:      	xorq	$-0x1, %rdi
   24be0:      	andq	%rdi, %rax
   24be3:      	movabsq	$-0x7f7f7f7f7f7f7f80, %rcx # imm = 0x8080808080808080
   24bed:      	andq	%rcx, %rax
   24bf0:      	cmpq	$0x0, %rax
   24bf4:      	setne	%al
   24bf7:      	andb	$0x1, %al
   24bf9:      	movzbl	%al, %eax
   24bfc:      	addq	$0x18, %rsp
   24c00:      	retq
   24c01:      	int3
   24c02:      	int3
   24c03:      	int3
   24c04:      	int3
   24c05:      	int3
   24c06:      	int3
   24c07:      	int3
   24c08:      	int3
   24c09:      	int3
   24c0a:      	int3
   24c0b:      	int3
   24c0c:      	int3
   24c0d:      	int3
   24c0e:      	int3
   24c0f:      	int3

0000000000024c10 <core::slice::memchr::repeat_byte::h8dd3dfa3513d8b2a>:
   24c10:      	subq	$0x18, %rsp
   24c14:      	movb	%dil, %al
   24c17:      	movb	%al, 0x17(%rsp)
   24c1b:      	movzbl	%al, %eax
   24c1e:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   24c28:      	mulq	%rcx
   24c2b:      	movq	%rax, 0x8(%rsp)
   24c30:      	seto	%al
   24c33:      	testb	$0x1, %al
   24c35:      	jne	0x24c41 <core::slice::memchr::repeat_byte::h8dd3dfa3513d8b2a+0x31>
   24c37:      	movq	0x8(%rsp), %rax
   24c3c:      	addq	$0x18, %rsp
   24c40:      	retq
   24c41:      	leaq	-0x12f88(%rip), %rdi    # 0x11cc0 <str.5>
   24c48:      	leaq	0x15459(%rip), %rdx     # 0x3a0a8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x1a8>
   24c4f:      	movq	0x1627a(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   24c56:      	movl	$0x21, %esi
   24c5b:      	callq	*%rax
   24c5d:      	ud2
   24c5f:      	int3

0000000000024c60 <core::slice::memchr::memchr::h2a6b17698e102805>:
   24c60:      	subq	$0x48, %rsp
   24c64:      	movq	%rdx, (%rsp)
   24c68:      	movq	%rsi, 0x8(%rsp)
   24c6d:      	movb	%dil, %al
   24c70:      	movb	%al, 0x17(%rsp)
   24c74:      	movb	%al, 0x37(%rsp)
   24c78:      	movq	%rsi, 0x38(%rsp)
   24c7d:      	movq	%rdx, 0x40(%rsp)
   24c82:      	movl	$0x2, %eax
   24c87:      	movl	$0x8, %ecx
   24c8c:      	mulq	%rcx
   24c8f:      	movq	%rax, 0x18(%rsp)
   24c94:      	seto	%al
   24c97:      	testb	$0x1, %al
   24c99:      	jne	0x24cab <core::slice::memchr::memchr::h2a6b17698e102805+0x4b>
   24c9b:      	movq	(%rsp), %rax
   24c9f:      	movq	0x18(%rsp), %rcx
   24ca4:      	cmpq	%rcx, %rax
   24ca7:      	jb	0x24cee <core::slice::memchr::memchr::h2a6b17698e102805+0x8e>
   24ca9:      	jmp	0x24cc9 <core::slice::memchr::memchr::h2a6b17698e102805+0x69>
   24cab:      	leaq	-0x12ff2(%rip), %rdi    # 0x11cc0 <str.5>
   24cb2:      	leaq	0x15407(%rip), %rdx     # 0x3a0c0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x1c0>
   24cb9:      	movq	0x16210(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   24cc0:      	movl	$0x21, %esi
   24cc5:      	callq	*%rax
   24cc7:      	ud2
   24cc9:      	movq	(%rsp), %rdx
   24ccd:      	movq	0x8(%rsp), %rsi
   24cd2:      	movb	0x17(%rsp), %al
   24cd6:      	movzbl	%al, %edi
   24cd9:      	movq	0x169b0(%rip), %rax     # 0x3b690 <zlgk82z0l71lvh9+0x3b690>
   24ce0:      	callq	*%rax
   24ce2:      	movq	%rdx, 0x28(%rsp)
   24ce7:      	movq	%rax, 0x20(%rsp)
   24cec:      	jmp	0x24d0d <core::slice::memchr::memchr::h2a6b17698e102805+0xad>
   24cee:      	movq	(%rsp), %rdx
   24cf2:      	movq	0x8(%rsp), %rsi
   24cf7:      	movb	0x17(%rsp), %al
   24cfb:      	movzbl	%al, %edi
   24cfe:      	callq	0x24d20 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8>
   24d03:      	movq	%rdx, 0x28(%rsp)
   24d08:      	movq	%rax, 0x20(%rsp)
   24d0d:      	movq	0x20(%rsp), %rax
   24d12:      	movq	0x28(%rsp), %rdx
   24d17:      	addq	$0x48, %rsp
   24d1b:      	retq
   24d1c:      	int3
   24d1d:      	int3
   24d1e:      	int3
   24d1f:      	int3

0000000000024d20 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8>:
   24d20:      	subq	$0x58, %rsp
   24d24:      	movq	%rdx, 0x10(%rsp)
   24d29:      	movq	%rsi, 0x18(%rsp)
   24d2e:      	movb	%dil, %al
   24d31:      	movb	%al, 0x27(%rsp)
   24d35:      	movb	%al, 0x47(%rsp)
   24d39:      	movq	%rsi, 0x48(%rsp)
   24d3e:      	movq	%rdx, 0x50(%rsp)
   24d43:      	movq	$0x0, 0x38(%rsp)
   24d4c:      	movq	0x10(%rsp), %rax
   24d51:      	cmpq	%rax, 0x38(%rsp)
   24d56:      	jb	0x24d63 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0x43>
   24d58:      	movq	$0x0, 0x28(%rsp)
   24d61:      	jmp	0x24d7e <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0x5e>
   24d63:      	movq	0x10(%rsp), %rcx
   24d68:      	movq	0x38(%rsp), %rax
   24d6d:      	movq	%rax, 0x8(%rsp)
   24d72:      	cmpq	%rcx, %rax
   24d75:      	setb	%al
   24d78:      	testb	$0x1, %al
   24d7a:      	jne	0x24d8d <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0x6d>
   24d7c:      	jmp	0x24da2 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0x82>
   24d7e:      	movq	0x28(%rsp), %rax
   24d83:      	movq	0x30(%rsp), %rdx
   24d88:      	addq	$0x58, %rsp
   24d8c:      	retq
   24d8d:      	movq	0x18(%rsp), %rax
   24d92:      	movq	0x8(%rsp), %rcx
   24d97:      	movb	0x27(%rsp), %dl
   24d9b:      	cmpb	%dl, (%rax,%rcx)
   24d9e:      	je	0x24dd4 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0xb4>
   24da0:      	jmp	0x24dbe <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0x9e>
   24da2:      	movq	0x10(%rsp), %rsi
   24da7:      	movq	0x8(%rsp), %rdi
   24dac:      	leaq	0x15325(%rip), %rdx     # 0x3a0d8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x1d8>
   24db3:      	movq	0x1625e(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   24dba:      	callq	*%rax
   24dbc:      	ud2
   24dbe:      	movq	0x38(%rsp), %rax
   24dc3:      	addq	$0x1, %rax
   24dc7:      	movq	%rax, (%rsp)
   24dcb:      	setb	%al
   24dce:      	testb	$0x1, %al
   24dd0:      	jne	0x24df7 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0xd7>
   24dd2:      	jmp	0x24de9 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0xc9>
   24dd4:      	movq	0x38(%rsp), %rax
   24dd9:      	movq	%rax, 0x30(%rsp)
   24dde:      	movq	$0x1, 0x28(%rsp)
   24de7:      	jmp	0x24d7e <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0x5e>
   24de9:      	movq	(%rsp), %rax
   24ded:      	movq	%rax, 0x38(%rsp)
   24df2:      	jmp	0x24d4c <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8+0x2c>
   24df7:      	leaq	-0x1318e(%rip), %rdi    # 0x11c70 <str.1>
   24dfe:      	leaq	0x152eb(%rip), %rdx     # 0x3a0f0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x1f0>
   24e05:      	movq	0x160c4(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   24e0c:      	movl	$0x1c, %esi
   24e11:      	callq	*%rax
   24e13:      	ud2
   24e15:      	int3
   24e16:      	int3
   24e17:      	int3
   24e18:      	int3
   24e19:      	int3
   24e1a:      	int3
   24e1b:      	int3
   24e1c:      	int3
   24e1d:      	int3
   24e1e:      	int3
   24e1f:      	int3

0000000000024e20 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11>:
   24e20:      	subq	$0x198, %rsp            # imm = 0x198
   24e27:      	movq	%rdx, 0x68(%rsp)
   24e2c:      	movq	%rsi, 0x70(%rsp)
   24e31:      	movl	%edi, %eax
   24e33:      	movq	0x70(%rsp), %rdi
   24e38:      	movb	%al, 0x7f(%rsp)
   24e3c:      	movb	%al, 0xc7(%rsp)
   24e43:      	movq	%rdi, 0xc8(%rsp)
   24e4b:      	movq	%rdx, 0xd0(%rsp)
   24e53:      	movq	%rdx, 0xd8(%rsp)
   24e5b:      	movq	%rdi, 0x188(%rsp)
   24e63:      	movq	%rdx, 0x190(%rsp)
   24e6b:      	movq	%rdi, 0xe0(%rsp)
   24e73:      	movq	0x16a46(%rip), %rax     # 0x3b8c0 <zlgk82z0l71lvh9+0x3b8c0>
   24e7a:      	movl	$0x8, %esi
   24e7f:      	callq	*%rax
   24e81:      	movq	%rax, 0x90(%rsp)
   24e89:      	cmpq	$0x0, 0x90(%rsp)
   24e92:      	ja	0x24eb2 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x92>
   24e94:      	movb	0x7f(%rsp), %al
   24e98:      	movzbl	%al, %edi
   24e9b:      	callq	0x24c10 <core::slice::memchr::repeat_byte::h8dd3dfa3513d8b2a>
   24ea0:      	movq	%rax, 0x60(%rsp)
   24ea5:      	movq	%rax, 0x100(%rsp)
   24ead:      	jmp	0x24f95 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x175>
   24eb2:      	movq	0x68(%rsp), %rax
   24eb7:      	cmpq	%rax, 0x90(%rsp)
   24ebf:      	jb	0x24ed0 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0xb0>
   24ec1:      	movq	0x68(%rsp), %rax
   24ec6:      	movq	%rax, 0x98(%rsp)
   24ece:      	jmp	0x24ee0 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0xc0>
   24ed0:      	movq	0x90(%rsp), %rax
   24ed8:      	movq	%rax, 0x98(%rsp)
   24ee0:      	movq	0x70(%rsp), %rdi
   24ee5:      	movq	0x68(%rsp), %rax
   24eea:      	movq	0x98(%rsp), %rcx
   24ef2:      	movq	%rcx, 0x90(%rsp)
   24efa:      	movq	%rdi, 0x178(%rsp)
   24f02:      	movq	%rax, 0x180(%rsp)
   24f0a:      	movq	0x90(%rsp), %rsi
   24f12:      	movq	0x166cf(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   24f19:      	callq	*%rax
   24f1b:      	movq	%rax, %rsi
   24f1e:      	movb	0x7f(%rsp), %al
   24f22:      	movq	%rsi, 0xe8(%rsp)
   24f2a:      	movq	%rdx, 0xf0(%rsp)
   24f32:      	movzbl	%al, %edi
   24f35:      	callq	0x24d20 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8>
   24f3a:      	movq	%rdx, 0xa8(%rsp)
   24f42:      	movq	%rax, 0xa0(%rsp)
   24f4a:      	cmpq	$0x1, 0xa0(%rsp)
   24f53:      	jne	0x24e94 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x74>
   24f59:      	movq	0xa8(%rsp), %rax
   24f61:      	movq	%rax, 0xf8(%rsp)
   24f69:      	movq	%rax, 0x88(%rsp)
   24f71:      	movq	$0x1, 0x80(%rsp)
   24f7d:      	movq	0x80(%rsp), %rax
   24f85:      	movq	0x88(%rsp), %rdx
   24f8d:      	addq	$0x198, %rsp            # imm = 0x198
   24f94:      	retq
   24f95:      	movq	0x90(%rsp), %rax
   24f9d:      	movq	%rax, 0x50(%rsp)
   24fa2:      	movl	$0x2, %eax
   24fa7:      	movl	$0x8, %ecx
   24fac:      	mulq	%rcx
   24faf:      	movq	%rax, 0x58(%rsp)
   24fb4:      	seto	%al
   24fb7:      	testb	$0x1, %al
   24fb9:      	jne	0x24fdc <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x1bc>
   24fbb:      	movq	0x68(%rsp), %rax
   24fc0:      	movq	0x58(%rsp), %rcx
   24fc5:      	movq	%rax, %rdx
   24fc8:      	subq	%rcx, %rdx
   24fcb:      	movq	%rdx, 0x48(%rsp)
   24fd0:      	cmpq	%rcx, %rax
   24fd3:      	setb	%al
   24fd6:      	testb	$0x1, %al
   24fd8:      	jne	0x2500f <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x1ef>
   24fda:      	jmp	0x24ffa <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x1da>
   24fdc:      	leaq	-0x13323(%rip), %rdi    # 0x11cc0 <str.5>
   24fe3:      	leaq	0x1511e(%rip), %rdx     # 0x3a108 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x208>
   24fea:      	movq	0x15edf(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   24ff1:      	movl	$0x21, %esi
   24ff6:      	callq	*%rax
   24ff8:      	ud2
   24ffa:      	movq	0x50(%rsp), %rax
   24fff:      	movq	0x48(%rsp), %rcx
   25004:      	cmpq	%rcx, %rax
   25007:      	jbe	0x2508d <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x26d>
   2500d:      	jmp	0x2502d <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x20d>
   2500f:      	leaq	-0x13386(%rip), %rdi    # 0x11c90 <str.2>
   25016:      	leaq	0x15103(%rip), %rdx     # 0x3a120 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x220>
   2501d:      	movq	0x15eac(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25024:      	movl	$0x21, %esi
   25029:      	callq	*%rax
   2502b:      	ud2
   2502d:      	movq	0x68(%rsp), %rax
   25032:      	movq	0x70(%rsp), %rcx
   25037:      	movq	%rcx, 0x168(%rsp)
   2503f:      	movq	%rax, 0x170(%rsp)
   25047:      	movq	0x90(%rsp), %rdx
   2504f:      	movq	%rcx, 0x138(%rsp)
   25057:      	movq	%rdx, 0x140(%rsp)
   2505f:      	addq	%rdx, %rcx
   25062:      	movq	%rcx, 0x38(%rsp)
   25067:      	movq	0x90(%rsp), %rcx
   2506f:      	movq	%rax, %rdx
   25072:      	subq	%rcx, %rdx
   25075:      	movq	%rdx, 0x40(%rsp)
   2507a:      	cmpq	%rcx, %rax
   2507d:      	setb	%al
   25080:      	testb	$0x1, %al
   25082:      	jne	0x2524d <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x42d>
   25088:      	jmp	0x251fe <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x3de>
   2508d:      	movq	0x70(%rsp), %rax
   25092:      	movq	0x90(%rsp), %rcx
   2509a:      	movq	%rax, 0x158(%rsp)
   250a2:      	movq	%rcx, 0x160(%rsp)
   250aa:      	movq	(%rax,%rcx), %rax
   250ae:      	movq	%rax, 0x28(%rsp)
   250b3:      	movq	%rax, 0x108(%rsp)
   250bb:      	movq	0x90(%rsp), %rax
   250c3:      	addq	$0x8, %rax
   250c7:      	movq	%rax, 0x30(%rsp)
   250cc:      	setb	%al
   250cf:      	testb	$0x1, %al
   250d1:      	jne	0x25150 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x330>
   250d3:      	movq	0x60(%rsp), %rax
   250d8:      	movq	0x28(%rsp), %rdi
   250dd:      	movq	0x70(%rsp), %rcx
   250e2:      	movq	0x30(%rsp), %rdx
   250e7:      	movq	%rcx, 0x148(%rsp)
   250ef:      	movq	%rdx, 0x150(%rsp)
   250f7:      	movq	(%rcx,%rdx), %rcx
   250fb:      	movq	%rcx, 0x18(%rsp)
   25100:      	movq	%rcx, 0x110(%rsp)
   25108:      	xorq	%rax, %rdi
   2510b:      	callq	0x24bb0 <core::slice::memchr::contains_zero_byte::h70b91f54afc65c10>
   25110:      	movq	0x18(%rsp), %rdi
   25115:      	movb	%al, %cl
   25117:      	movq	0x60(%rsp), %rax
   2511c:      	movb	%cl, 0x26(%rsp)
   25120:      	andb	$0x1, %cl
   25123:      	movb	%cl, 0x11e(%rsp)
   2512a:      	xorq	%rax, %rdi
   2512d:      	callq	0x24bb0 <core::slice::memchr::contains_zero_byte::h70b91f54afc65c10>
   25132:      	movb	%al, %cl
   25134:      	movb	0x26(%rsp), %al
   25138:      	movb	%cl, 0x27(%rsp)
   2513c:      	andb	$0x1, %cl
   2513f:      	movb	%cl, 0x11f(%rsp)
   25146:      	testb	$0x1, %al
   25148:      	jne	0x2502d <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x20d>
   2514e:      	jmp	0x2516e <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x34e>
   25150:      	leaq	-0x134e7(%rip), %rdi    # 0x11c70 <str.1>
   25157:      	leaq	0x14fda(%rip), %rdx     # 0x3a138 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x238>
   2515e:      	movq	0x15d6b(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25165:      	movl	$0x1c, %esi
   2516a:      	callq	*%rax
   2516c:      	ud2
   2516e:      	movb	0x27(%rsp), %al
   25172:      	testb	$0x1, %al
   25174:      	jne	0x2502d <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x20d>
   2517a:      	jmp	0x2517c <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x35c>
   2517c:      	movl	$0x8, %eax
   25181:      	movl	$0x2, %ecx
   25186:      	mulq	%rcx
   25189:      	movq	%rax, 0x10(%rsp)
   2518e:      	seto	%al
   25191:      	testb	$0x1, %al
   25193:      	jne	0x251b0 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x390>
   25195:      	movq	0x10(%rsp), %rax
   2519a:      	addq	0x90(%rsp), %rax
   251a2:      	movq	%rax, 0x8(%rsp)
   251a7:      	setb	%al
   251aa:      	testb	$0x1, %al
   251ac:      	jne	0x251e0 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x3c0>
   251ae:      	jmp	0x251ce <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x3ae>
   251b0:      	leaq	-0x134f7(%rip), %rdi    # 0x11cc0 <str.5>
   251b7:      	leaq	0x14f92(%rip), %rdx     # 0x3a150 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x250>
   251be:      	movq	0x15d0b(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   251c5:      	movl	$0x21, %esi
   251ca:      	callq	*%rax
   251cc:      	ud2
   251ce:      	movq	0x8(%rsp), %rax
   251d3:      	movq	%rax, 0x90(%rsp)
   251db:      	jmp	0x24f95 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x175>
   251e0:      	leaq	-0x13577(%rip), %rdi    # 0x11c70 <str.1>
   251e7:      	leaq	0x14f7a(%rip), %rdx     # 0x3a168 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x268>
   251ee:      	movq	0x15cdb(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   251f5:      	movl	$0x1c, %esi
   251fa:      	callq	*%rax
   251fc:      	ud2
   251fe:      	movq	0x40(%rsp), %rsi
   25203:      	movq	0x38(%rsp), %rdi
   25208:      	movq	0x163d9(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   2520f:      	callq	*%rax
   25211:      	movq	%rax, %rsi
   25214:      	movb	0x7f(%rsp), %al
   25218:      	movq	%rsi, 0x120(%rsp)
   25220:      	movq	%rdx, 0x128(%rsp)
   25228:      	movzbl	%al, %edi
   2522b:      	callq	0x24d20 <core::slice::memchr::memchr_naive::h8e129a15b4fa58b8>
   25230:      	movq	%rdx, 0xb8(%rsp)
   25238:      	movq	%rax, 0xb0(%rsp)
   25240:      	cmpq	$0x1, 0xb0(%rsp)
   25249:      	je	0x2526b <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x44b>
   2524b:      	jmp	0x25290 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x470>
   2524d:      	leaq	-0x135c4(%rip), %rdi    # 0x11c90 <str.2>
   25254:      	leaq	0x14f25(%rip), %rdx     # 0x3a180 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x280>
   2525b:      	movq	0x15c6e(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25262:      	movl	$0x21, %esi
   25267:      	callq	*%rax
   25269:      	ud2
   2526b:      	movq	0xb8(%rsp), %rax
   25273:      	movq	%rax, 0x130(%rsp)
   2527b:      	addq	0x90(%rsp), %rax
   25283:      	movq	%rax, (%rsp)
   25287:      	setb	%al
   2528a:      	testb	$0x1, %al
   2528c:      	jne	0x252be <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x49e>
   2528e:      	jmp	0x252a1 <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x481>
   25290:      	movq	$0x0, 0x80(%rsp)
   2529c:      	jmp	0x24f7d <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x15d>
   252a1:      	movq	(%rsp), %rax
   252a5:      	movq	%rax, 0x88(%rsp)
   252ad:      	movq	$0x1, 0x80(%rsp)
   252b9:      	jmp	0x24f7d <core::slice::memchr::memchr_aligned::h79ffd90d7b62cc11+0x15d>
   252be:      	leaq	-0x13655(%rip), %rdi    # 0x11c70 <str.1>
   252c5:      	leaq	0x14ecc(%rip), %rdx     # 0x3a198 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x298>
   252cc:      	movq	0x15bfd(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   252d3:      	movl	$0x1c, %esi
   252d8:      	callq	*%rax
   252da:      	ud2
   252dc:      	int3
   252dd:      	int3
   252de:      	int3
   252df:      	int3

00000000000252e0 <core::slice::cmp::<impl core::cmp::PartialEq<[B]> for [A]>::eq::he031cec34014f36f>:
   252e0:      	subq	$0x28, %rsp
   252e4:      	movq	%rdi, 0x8(%rsp)
   252e9:      	movq	%rsi, 0x10(%rsp)
   252ee:      	movq	%rdx, 0x18(%rsp)
   252f3:      	movq	%rcx, 0x20(%rsp)
   252f8:      	movq	0x165d1(%rip), %rax     # 0x3b8d0 <zlgk82z0l71lvh9+0x3b8d0>
   252ff:      	callq	*%rax
   25301:      	andb	$0x1, %al
   25303:      	movzbl	%al, %eax
   25306:      	addq	$0x28, %rsp
   2530a:      	retq
   2530b:      	int3
   2530c:      	int3
   2530d:      	int3
   2530e:      	int3
   2530f:      	int3

0000000000025310 <<[A] as core::slice::cmp::SlicePartialEq<B>>::equal::hd64ff01d7b4bf862>:
   25310:      	subq	$0x78, %rsp
   25314:      	movq	%rcx, (%rsp)
   25318:      	movq	%rdx, 0x8(%rsp)
   2531d:      	movq	%rsi, 0x10(%rsp)
   25322:      	movq	%rdi, 0x18(%rsp)
   25327:      	movq	%rdi, 0x28(%rsp)
   2532c:      	movq	%rsi, 0x30(%rsp)
   25331:      	movq	%rdx, 0x38(%rsp)
   25336:      	movq	%rcx, 0x40(%rsp)
   2533b:      	cmpq	%rcx, %rsi
   2533e:      	jne	0x2539f <<[A] as core::slice::cmp::SlicePartialEq<B>>::equal::hd64ff01d7b4bf862+0x8f>
   25340:      	movq	0x18(%rsp), %rdi
   25345:      	movq	0x10(%rsp), %rsi
   2534a:      	movq	0x1658f(%rip), %rax     # 0x3b8e0 <zlgk82z0l71lvh9+0x3b8e0>
   25351:      	callq	*%rax
   25353:      	movq	0x10(%rsp), %rcx
   25358:      	movq	0x18(%rsp), %rdi
   2535d:      	movq	0x8(%rsp), %rsi
   25362:      	movq	%rax, %rdx
   25365:      	movq	(%rsp), %rax
   25369:      	movq	%rdx, 0x48(%rsp)
   2536e:      	movq	%rdi, 0x68(%rsp)
   25373:      	movq	%rcx, 0x70(%rsp)
   25378:      	movq	%rsi, 0x58(%rsp)
   2537d:      	movq	%rax, 0x60(%rsp)
   25382:      	movq	0x1654f(%rip), %rax     # 0x3b8d8 <zlgk82z0l71lvh9+0x3b8d8>
   25389:      	callq	*%rax
   2538b:      	movl	%eax, 0x54(%rsp)
   2538f:      	cmpl	$0x0, 0x54(%rsp)
   25394:      	sete	%al
   25397:      	andb	$0x1, %al
   25399:      	movb	%al, 0x27(%rsp)
   2539d:      	jmp	0x253a4 <<[A] as core::slice::cmp::SlicePartialEq<B>>::equal::hd64ff01d7b4bf862+0x94>
   2539f:      	movb	$0x0, 0x27(%rsp)
   253a4:      	movb	0x27(%rsp), %al
   253a8:      	andb	$0x1, %al
   253aa:      	movzbl	%al, %eax
   253ad:      	addq	$0x78, %rsp
   253b1:      	retq
   253b2:      	int3
   253b3:      	int3
   253b4:      	int3
   253b5:      	int3
   253b6:      	int3
   253b7:      	int3
   253b8:      	int3
   253b9:      	int3
   253ba:      	int3
   253bb:      	int3
   253bc:      	int3
   253bd:      	int3
   253be:      	int3
   253bf:      	int3

00000000000253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>:
   253c0:      	subq	$0x10, %rsp
   253c4:      	movq	%rsi, %rdx
   253c7:      	movq	%rdi, %rax
   253ca:      	movq	%rax, (%rsp)
   253ce:      	movq	%rdx, 0x8(%rsp)
   253d3:      	addq	$0x10, %rsp
   253d7:      	retq
   253d8:      	int3
   253d9:      	int3
   253da:      	int3
   253db:      	int3
   253dc:      	int3
   253dd:      	int3
   253de:      	int3
   253df:      	int3

00000000000253e0 <core::str::converts::from_utf8_unchecked_mut::h17570e59e35676c5>:
   253e0:      	subq	$0x10, %rsp
   253e4:      	movq	%rsi, %rdx
   253e7:      	movq	%rdi, %rax
   253ea:      	movq	%rax, (%rsp)
   253ee:      	movq	%rdx, 0x8(%rsp)
   253f3:      	addq	$0x10, %rsp
   253f7:      	retq
   253f8:      	int3
   253f9:      	int3
   253fa:      	int3
   253fb:      	int3
   253fc:      	int3
   253fd:      	int3
   253fe:      	int3
   253ff:      	int3

0000000000025400 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670>:
   25400:      	subq	$0x3b8, %rsp            # imm = 0x3B8
   25407:      	movq	%rdx, 0x110(%rsp)
   2540f:      	movb	%sil, %al
   25412:      	movb	%al, 0x11f(%rsp)
   25419:      	movq	%rdi, 0x128(%rsp)
   25421:      	andb	$0x1, %al
   25423:      	movb	%al, 0x16f(%rsp)
   2542a:      	movq	%rdx, 0x170(%rsp)
   25432:      	movzbl	0x287(%rsp), %eax
   2543a:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   25444:      	imulq	%rcx, %rax
   25448:      	movq	%rax, 0x14f(%rsp)
   25450:      	movq	%rax, 0x148(%rsp)
   25458:      	movq	%rax, 0x140(%rsp)
   25460:      	movq	%rax, 0x138(%rsp)
   25468:      	movq	%rax, 0x130(%rsp)
   25470:      	movq	$0x27, 0x158(%rsp)
   2547c:      	leaq	0x130(%rsp), %rax
   25484:      	movq	%rax, 0x288(%rsp)
   2548c:      	movq	$0x27, 0x290(%rsp)
   25498:      	movq	%rax, 0x348(%rsp)
   254a0:      	movq	$0x27, 0x350(%rsp)
   254ac:      	movq	%rax, 0x178(%rsp)
   254b4:      	movq	0x14a45(%rip), %rax     # 0x39f00 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3>
   254bb:      	movq	%rax, 0x120(%rsp)
   254c3:      	movq	%rax, 0x338(%rsp)
   254cb:      	movq	$0xc8, 0x340(%rsp)
   254d7:      	movq	%rax, 0x180(%rsp)
   254df:      	movl	$0x8, %eax
   254e4:      	cmpq	$0x2, %rax
   254e8:      	jae	0x25508 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x108>
   254ea:      	leaq	-0x13618(%rip), %rdi    # 0x11ed9 <str.5+0x219>
   254f1:      	leaq	0x14cb8(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   254f8:      	movq	0x159d1(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   254ff:      	movl	$0x33, %esi
   25504:      	callq	*%rax
   25506:      	ud2
   25508:      	cmpq	$0x2710, 0x128(%rsp)    # imm = 0x2710
   25514:      	jae	0x2553a <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x13a>
   25516:      	movq	0x128(%rsp), %rax
   2551e:      	movq	%rax, 0x160(%rsp)
   25526:      	cmpq	$0x64, 0x160(%rsp)
   2552f:      	jae	0x25605 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x205>
   25535:      	jmp	0x255f1 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x1f1>
   2553a:      	movq	0x128(%rsp), %rax
   25542:      	movl	$0x2710, %ecx           # imm = 0x2710
   25547:      	xorl	%edx, %edx
   25549:      	divq	%rcx
   2554c:      	movq	%rdx, 0xf0(%rsp)
   25554:      	movq	%rdx, 0x1a8(%rsp)
   2555c:      	movq	0x128(%rsp), %rax
   25564:      	movl	$0x2710, %ecx           # imm = 0x2710
   25569:      	xorl	%edx, %edx
   2556b:      	divq	%rcx
   2556e:      	movq	%rax, %rcx
   25571:      	movq	0xf0(%rsp), %rax
   25579:      	movq	%rcx, 0x128(%rsp)
   25581:      	movl	$0x64, %ecx
   25586:      	xorl	%edx, %edx
   25588:      	divq	%rcx
   2558b:      	movq	%rax, %rcx
   2558e:      	movq	0xf0(%rsp), %rax
   25596:      	shlq	%rcx
   25599:      	movq	%rcx, 0xf8(%rsp)
   255a1:      	movq	%rcx, 0x1b0(%rsp)
   255a9:      	movl	$0x64, %ecx
   255ae:      	xorl	%edx, %edx
   255b0:      	divq	%rcx
   255b3:      	shlq	%rdx
   255b6:      	movq	%rdx, 0x100(%rsp)
   255be:      	movq	%rdx, 0x1b8(%rsp)
   255c6:      	movq	0x158(%rsp), %rax
   255ce:      	movq	%rax, %rcx
   255d1:      	subq	$0x4, %rcx
   255d5:      	movq	%rcx, 0x108(%rsp)
   255dd:      	cmpq	$0x4, %rax
   255e1:      	setb	%al
   255e4:      	testb	$0x1, %al
   255e6:      	jne	0x25ce2 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x8e2>
   255ec:      	jmp	0x25b57 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x757>
   255f1:      	cmpq	$0xa, 0x160(%rsp)
   255fa:      	jb	0x25836 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x436>
   25600:      	jmp	0x257f3 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x3f3>
   25605:      	movq	0x160(%rsp), %rax
   2560d:      	movl	$0x64, %ecx
   25612:      	xorl	%edx, %edx
   25614:      	divq	%rcx
   25617:      	shlq	%rdx
   2561a:      	movq	%rdx, 0xe0(%rsp)
   25622:      	movq	%rdx, 0x188(%rsp)
   2562a:      	movq	0x160(%rsp), %rax
   25632:      	movl	$0x64, %ecx
   25637:      	xorl	%edx, %edx
   25639:      	divq	%rcx
   2563c:      	movq	%rax, 0x160(%rsp)
   25644:      	movq	0x158(%rsp), %rax
   2564c:      	movq	%rax, %rcx
   2564f:      	subq	$0x2, %rcx
   25653:      	movq	%rcx, 0xe8(%rsp)
   2565b:      	cmpq	$0x2, %rax
   2565f:      	setb	%al
   25662:      	testb	$0x1, %al
   25664:      	jne	0x257d5 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x3d5>
   2566a:      	movq	0xe0(%rsp), %rax
   25672:      	movq	0x120(%rsp), %rcx
   2567a:      	movq	0xe8(%rsp), %rdx
   25682:      	movq	%rdx, 0x158(%rsp)
   2568a:      	movq	%rcx, 0x2c8(%rsp)
   25692:      	movq	%rax, 0x2d0(%rsp)
   2569a:      	addq	%rax, %rcx
   2569d:      	movq	%rcx, 0xb8(%rsp)
   256a5:      	movq	0x158(%rsp), %rdx
   256ad:      	leaq	0x130(%rsp), %rax
   256b5:      	movq	%rax, 0x328(%rsp)
   256bd:      	movq	%rdx, 0x330(%rsp)
   256c5:      	leaq	0x130(%rsp), %rax
   256cd:      	addq	%rdx, %rax
   256d0:      	movq	%rax, 0xc0(%rsp)
   256d8:      	movq	%rcx, 0x268(%rsp)
   256e0:      	movq	%rax, 0x270(%rsp)
   256e8:      	movq	$0x2, 0x278(%rsp)
   256f4:      	movq	%rcx, 0x250(%rsp)
   256fc:      	movq	%rax, 0x258(%rsp)
   25704:      	movq	$0x2, 0x260(%rsp)
   25710:      	movq	0x250(%rsp), %rdi
   25718:      	movq	%rdi, 0xc8(%rsp)
   25720:      	movq	0x258(%rsp), %rcx
   25728:      	movq	%rcx, 0xd0(%rsp)
   25730:      	movq	0x260(%rsp), %rax
   25738:      	movq	%rax, 0xd8(%rsp)
   25740:      	movq	%rdi, 0x358(%rsp)
   25748:      	movq	%rcx, 0x360(%rsp)
   25750:      	movq	%rax, 0x368(%rsp)
   25758:      	movq	0x15b11(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   2575f:      	callq	*%rax
   25761:      	testb	$0x1, %al
   25763:      	jne	0x2577c <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x37c>
   25765:      	leaq	-0x13939(%rip), %rdi    # 0x11e33 <str.5+0x173>
   2576c:      	movq	0x159fd(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   25773:      	movl	$0xa6, %esi
   25778:      	callq	*%rax
   2577a:      	ud2
   2577c:      	movq	0xd0(%rsp), %rdi
   25784:      	movq	0x15ae5(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   2578b:      	callq	*%rax
   2578d:      	testb	$0x1, %al
   2578f:      	jne	0x25793 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x393>
   25791:      	jmp	0x25765 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x365>
   25793:      	movq	0xd8(%rsp), %rdx
   2579b:      	movq	0xd0(%rsp), %rsi
   257a3:      	movq	0xc8(%rsp), %rdi
   257ab:      	movq	0x15ffe(%rip), %rax     # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   257b2:      	callq	*%rax
   257b4:      	testb	$0x1, %al
   257b6:      	jne	0x257ba <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x3ba>
   257b8:      	jmp	0x25765 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x365>
   257ba:      	movq	0xc0(%rsp), %rax
   257c2:      	movq	0xb8(%rsp), %rcx
   257ca:      	movw	(%rcx), %cx
   257cd:      	movw	%cx, (%rax)
   257d0:      	jmp	0x255f1 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x1f1>
   257d5:      	leaq	-0x13b4c(%rip), %rdi    # 0x11c90 <str.2>
   257dc:      	leaq	0x149cd(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   257e3:      	movq	0x156e6(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   257ea:      	movl	$0x21, %esi
   257ef:      	callq	*%rax
   257f1:      	ud2
   257f3:      	movq	0x160(%rsp), %rax
   257fb:      	shlq	%rax
   257fe:      	movq	%rax, 0xa8(%rsp)
   25806:      	movq	%rax, 0x190(%rsp)
   2580e:      	movq	0x158(%rsp), %rax
   25816:      	movq	%rax, %rcx
   25819:      	subq	$0x2, %rcx
   2581d:      	movq	%rcx, 0xb0(%rsp)
   25825:      	cmpq	$0x2, %rax
   25829:      	setb	%al
   2582c:      	testb	$0x1, %al
   2582e:      	jne	0x259c3 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x5c3>
   25834:      	jmp	0x25861 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x461>
   25836:      	movq	0x158(%rsp), %rax
   2583e:      	movq	%rax, %rcx
   25841:      	subq	$0x1, %rcx
   25845:      	movq	%rcx, 0xa0(%rsp)
   2584d:      	cmpq	$0x1, %rax
   25851:      	setb	%al
   25854:      	testb	$0x1, %al
   25856:      	jne	0x25a65 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x665>
   2585c:      	jmp	0x25a3e <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x63e>
   25861:      	movq	0xa8(%rsp), %rax
   25869:      	movq	0x120(%rsp), %rcx
   25871:      	movq	0xb0(%rsp), %rdx
   25879:      	movq	%rdx, 0x158(%rsp)
   25881:      	movq	%rcx, 0x2b8(%rsp)
   25889:      	movq	%rax, 0x2c0(%rsp)
   25891:      	addq	%rax, %rcx
   25894:      	movq	%rcx, 0x78(%rsp)
   25899:      	movq	0x158(%rsp), %rdx
   258a1:      	leaq	0x130(%rsp), %rax
   258a9:      	movq	%rax, 0x318(%rsp)
   258b1:      	movq	%rdx, 0x320(%rsp)
   258b9:      	leaq	0x130(%rsp), %rax
   258c1:      	addq	%rdx, %rax
   258c4:      	movq	%rax, 0x80(%rsp)
   258cc:      	movq	%rcx, 0x238(%rsp)
   258d4:      	movq	%rax, 0x240(%rsp)
   258dc:      	movq	$0x2, 0x248(%rsp)
   258e8:      	movq	%rcx, 0x220(%rsp)
   258f0:      	movq	%rax, 0x228(%rsp)
   258f8:      	movq	$0x2, 0x230(%rsp)
   25904:      	movq	0x220(%rsp), %rdi
   2590c:      	movq	%rdi, 0x88(%rsp)
   25914:      	movq	0x228(%rsp), %rcx
   2591c:      	movq	%rcx, 0x90(%rsp)
   25924:      	movq	0x230(%rsp), %rax
   2592c:      	movq	%rax, 0x98(%rsp)
   25934:      	movq	%rdi, 0x370(%rsp)
   2593c:      	movq	%rcx, 0x378(%rsp)
   25944:      	movq	%rax, 0x380(%rsp)
   2594c:      	movq	0x1591d(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   25953:      	callq	*%rax
   25955:      	testb	$0x1, %al
   25957:      	jne	0x25970 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x570>
   25959:      	leaq	-0x13b2d(%rip), %rdi    # 0x11e33 <str.5+0x173>
   25960:      	movq	0x15809(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   25967:      	movl	$0xa6, %esi
   2596c:      	callq	*%rax
   2596e:      	ud2
   25970:      	movq	0x90(%rsp), %rdi
   25978:      	movq	0x158f1(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   2597f:      	callq	*%rax
   25981:      	testb	$0x1, %al
   25983:      	jne	0x25987 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x587>
   25985:      	jmp	0x25959 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x559>
   25987:      	movq	0x98(%rsp), %rdx
   2598f:      	movq	0x90(%rsp), %rsi
   25997:      	movq	0x88(%rsp), %rdi
   2599f:      	movq	0x15e0a(%rip), %rax     # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   259a6:      	callq	*%rax
   259a8:      	testb	$0x1, %al
   259aa:      	jne	0x259ae <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x5ae>
   259ac:      	jmp	0x25959 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x559>
   259ae:      	movq	0x80(%rsp), %rax
   259b6:      	movq	0x78(%rsp), %rcx
   259bb:      	movw	(%rcx), %cx
   259be:      	movw	%cx, (%rax)
   259c1:      	jmp	0x259e1 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x5e1>
   259c3:      	leaq	-0x13d3a(%rip), %rdi    # 0x11c90 <str.2>
   259ca:      	leaq	0x147df(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   259d1:      	movq	0x154f8(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   259d8:      	movl	$0x21, %esi
   259dd:      	callq	*%rax
   259df:      	ud2
   259e1:      	movq	0x158(%rsp), %rcx
   259e9:      	leaq	0x130(%rsp), %rax
   259f1:      	movq	%rax, 0x2f8(%rsp)
   259f9:      	movq	%rcx, 0x300(%rsp)
   25a01:      	leaq	0x130(%rsp), %rax
   25a09:      	addq	%rcx, %rax
   25a0c:      	movq	%rax, 0x68(%rsp)
   25a11:      	movq	0x158(%rsp), %rcx
   25a19:      	movl	$0x27, %eax
   25a1e:      	subq	%rcx, %rax
   25a21:      	movq	%rax, 0x70(%rsp)
   25a26:      	movl	$0x27, %eax
   25a2b:      	cmpq	%rcx, %rax
   25a2e:      	setb	%al
   25a31:      	testb	$0x1, %al
   25a33:      	jne	0x25b39 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x739>
   25a39:      	jmp	0x25ad1 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x6d1>
   25a3e:      	movq	0xa0(%rsp), %rax
   25a46:      	movq	%rax, 0x158(%rsp)
   25a4e:      	movq	0x160(%rsp), %rax
   25a56:      	addb	$0x30, %al
   25a58:      	movb	%al, 0x67(%rsp)
   25a5c:      	setb	%al
   25a5f:      	testb	$0x1, %al
   25a61:      	jne	0x25ab3 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x6b3>
   25a63:      	jmp	0x25a83 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x683>
   25a65:      	leaq	-0x13ddc(%rip), %rdi    # 0x11c90 <str.2>
   25a6c:      	leaq	0x1473d(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   25a73:      	movq	0x15456(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25a7a:      	movl	$0x21, %esi
   25a7f:      	callq	*%rax
   25a81:      	ud2
   25a83:      	movb	0x67(%rsp), %cl
   25a87:      	movq	0x158(%rsp), %rax
   25a8f:      	leaq	0x130(%rsp), %rdx
   25a97:      	movq	%rdx, 0x308(%rsp)
   25a9f:      	movq	%rax, 0x310(%rsp)
   25aa7:      	movb	%cl, 0x130(%rsp,%rax)
   25aae:      	jmp	0x259e1 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x5e1>
   25ab3:      	leaq	-0x13e4a(%rip), %rdi    # 0x11c70 <str.1>
   25aba:      	leaq	0x146ef(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   25ac1:      	movq	0x15408(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25ac8:      	movl	$0x1c, %esi
   25acd:      	callq	*%rax
   25acf:      	ud2
   25ad1:      	movq	0x70(%rsp), %rsi
   25ad6:      	movq	0x68(%rsp), %rdi
   25adb:      	movq	0x15b06(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   25ae2:      	callq	*%rax
   25ae4:      	movq	%rax, %rdi
   25ae7:      	movq	%rdx, %rsi
   25aea:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   25aef:      	movq	0x110(%rsp), %rdi
   25af7:      	movq	%rax, %r8
   25afa:      	movb	0x11f(%rsp), %al
   25b01:      	movq	%rdx, %r9
   25b04:      	movq	%r8, 0x198(%rsp)
   25b0c:      	movq	%r9, 0x1a0(%rsp)
   25b14:      	movzbl	%al, %esi
   25b17:      	andl	$0x1, %esi
   25b1a:      	leaq	-0x13b9d(%rip), %rdx    # 0x11f84 <str.5+0x2c4>
   25b21:      	movq	0x15c80(%rip), %rax     # 0x3b7a8 <zlgk82z0l71lvh9+0x3b7a8>
   25b28:      	xorl	%ecx, %ecx
   25b2a:      	callq	*%rax
   25b2c:      	andb	$0x1, %al
   25b2e:      	movzbl	%al, %eax
   25b31:      	addq	$0x3b8, %rsp            # imm = 0x3B8
   25b38:      	retq
   25b39:      	leaq	-0x13eb0(%rip), %rdi    # 0x11c90 <str.2>
   25b40:      	leaq	0x14669(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   25b47:      	movq	0x15382(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25b4e:      	movl	$0x21, %esi
   25b53:      	callq	*%rax
   25b55:      	ud2
   25b57:      	movq	0xf8(%rsp), %rax
   25b5f:      	movq	0x120(%rsp), %rcx
   25b67:      	movq	0x108(%rsp), %rdx
   25b6f:      	movq	%rdx, 0x158(%rsp)
   25b77:      	movq	%rcx, 0x2a8(%rsp)
   25b7f:      	movq	%rax, 0x2b0(%rsp)
   25b87:      	addq	%rax, %rcx
   25b8a:      	movq	%rcx, 0x38(%rsp)
   25b8f:      	movq	0x158(%rsp), %rdx
   25b97:      	leaq	0x130(%rsp), %rax
   25b9f:      	movq	%rax, 0x2e8(%rsp)
   25ba7:      	movq	%rdx, 0x2f0(%rsp)
   25baf:      	leaq	0x130(%rsp), %rax
   25bb7:      	addq	%rdx, %rax
   25bba:      	movq	%rax, 0x40(%rsp)
   25bbf:      	movq	%rcx, 0x208(%rsp)
   25bc7:      	movq	%rax, 0x210(%rsp)
   25bcf:      	movq	$0x2, 0x218(%rsp)
   25bdb:      	movq	%rcx, 0x1f0(%rsp)
   25be3:      	movq	%rax, 0x1f8(%rsp)
   25beb:      	movq	$0x2, 0x200(%rsp)
   25bf7:      	movq	0x1f0(%rsp), %rdi
   25bff:      	movq	%rdi, 0x48(%rsp)
   25c04:      	movq	0x1f8(%rsp), %rcx
   25c0c:      	movq	%rcx, 0x50(%rsp)
   25c11:      	movq	0x200(%rsp), %rax
   25c19:      	movq	%rax, 0x58(%rsp)
   25c1e:      	movq	%rdi, 0x388(%rsp)
   25c26:      	movq	%rcx, 0x390(%rsp)
   25c2e:      	movq	%rax, 0x398(%rsp)
   25c36:      	movq	0x15633(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   25c3d:      	callq	*%rax
   25c3f:      	testb	$0x1, %al
   25c41:      	jne	0x25c5a <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x85a>
   25c43:      	leaq	-0x13e17(%rip), %rdi    # 0x11e33 <str.5+0x173>
   25c4a:      	movq	0x1551f(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   25c51:      	movl	$0xa6, %esi
   25c56:      	callq	*%rax
   25c58:      	ud2
   25c5a:      	movq	0x50(%rsp), %rdi
   25c5f:      	movq	0x1560a(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   25c66:      	callq	*%rax
   25c68:      	testb	$0x1, %al
   25c6a:      	jne	0x25c6e <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x86e>
   25c6c:      	jmp	0x25c43 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x843>
   25c6e:      	movq	0x58(%rsp), %rdx
   25c73:      	movq	0x50(%rsp), %rsi
   25c78:      	movq	0x48(%rsp), %rdi
   25c7d:      	movq	0x15b2c(%rip), %rax     # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   25c84:      	callq	*%rax
   25c86:      	testb	$0x1, %al
   25c88:      	jne	0x25c8c <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x88c>
   25c8a:      	jmp	0x25c43 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x843>
   25c8c:      	movq	0x100(%rsp), %rcx
   25c94:      	movq	0x120(%rsp), %rax
   25c9c:      	movq	0x40(%rsp), %rdx
   25ca1:      	movq	0x38(%rsp), %rsi
   25ca6:      	movw	(%rsi), %si
   25ca9:      	movw	%si, (%rdx)
   25cac:      	movq	%rax, 0x298(%rsp)
   25cb4:      	movq	%rcx, 0x2a0(%rsp)
   25cbc:      	addq	%rcx, %rax
   25cbf:      	movq	%rax, 0x28(%rsp)
   25cc4:      	movq	0x158(%rsp), %rax
   25ccc:      	addq	$0x2, %rax
   25cd0:      	movq	%rax, 0x30(%rsp)
   25cd5:      	setb	%al
   25cd8:      	testb	$0x1, %al
   25cda:      	jne	0x25e14 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0xa14>
   25ce0:      	jmp	0x25d00 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x900>
   25ce2:      	leaq	-0x14059(%rip), %rdi    # 0x11c90 <str.2>
   25ce9:      	leaq	0x144c0(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   25cf0:      	movq	0x151d9(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25cf7:      	movl	$0x21, %esi
   25cfc:      	callq	*%rax
   25cfe:      	ud2
   25d00:      	movq	0x28(%rsp), %rcx
   25d05:      	movq	0x30(%rsp), %rdx
   25d0a:      	leaq	0x130(%rsp), %rax
   25d12:      	movq	%rax, 0x2d8(%rsp)
   25d1a:      	movq	%rdx, 0x2e0(%rsp)
   25d22:      	leaq	0x130(%rsp), %rax
   25d2a:      	addq	%rdx, %rax
   25d2d:      	movq	%rax, 0x8(%rsp)
   25d32:      	movq	%rcx, 0x1d8(%rsp)
   25d3a:      	movq	%rax, 0x1e0(%rsp)
   25d42:      	movq	$0x2, 0x1e8(%rsp)
   25d4e:      	movq	%rcx, 0x1c0(%rsp)
   25d56:      	movq	%rax, 0x1c8(%rsp)
   25d5e:      	movq	$0x2, 0x1d0(%rsp)
   25d6a:      	movq	0x1c0(%rsp), %rdi
   25d72:      	movq	%rdi, 0x10(%rsp)
   25d77:      	movq	0x1c8(%rsp), %rcx
   25d7f:      	movq	%rcx, 0x18(%rsp)
   25d84:      	movq	0x1d0(%rsp), %rax
   25d8c:      	movq	%rax, 0x20(%rsp)
   25d91:      	movq	%rdi, 0x3a0(%rsp)
   25d99:      	movq	%rcx, 0x3a8(%rsp)
   25da1:      	movq	%rax, 0x3b0(%rsp)
   25da9:      	movq	0x154c0(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   25db0:      	callq	*%rax
   25db2:      	testb	$0x1, %al
   25db4:      	jne	0x25dcd <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x9cd>
   25db6:      	leaq	-0x13f8a(%rip), %rdi    # 0x11e33 <str.5+0x173>
   25dbd:      	movq	0x153ac(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   25dc4:      	movl	$0xa6, %esi
   25dc9:      	callq	*%rax
   25dcb:      	ud2
   25dcd:      	movq	0x18(%rsp), %rdi
   25dd2:      	movq	0x15497(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   25dd9:      	callq	*%rax
   25ddb:      	testb	$0x1, %al
   25ddd:      	jne	0x25de1 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x9e1>
   25ddf:      	jmp	0x25db6 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x9b6>
   25de1:      	movq	0x20(%rsp), %rdx
   25de6:      	movq	0x18(%rsp), %rsi
   25deb:      	movq	0x10(%rsp), %rdi
   25df0:      	movq	0x159b9(%rip), %rax     # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   25df7:      	callq	*%rax
   25df9:      	testb	$0x1, %al
   25dfb:      	jne	0x25dff <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x9ff>
   25dfd:      	jmp	0x25db6 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x9b6>
   25dff:      	movq	0x8(%rsp), %rax
   25e04:      	movq	0x28(%rsp), %rcx
   25e09:      	movw	(%rcx), %cx
   25e0c:      	movw	%cx, (%rax)
   25e0f:      	jmp	0x25508 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670+0x108>
   25e14:      	leaq	-0x141ab(%rip), %rdi    # 0x11c70 <str.1>
   25e1b:      	leaq	0x1438e(%rip), %rdx     # 0x3a1b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2b0>
   25e22:      	movq	0x150a7(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   25e29:      	movl	$0x1c, %esi
   25e2e:      	callq	*%rax
   25e30:      	ud2
   25e32:      	int3
   25e33:      	int3
   25e34:      	int3
   25e35:      	int3
   25e36:      	int3
   25e37:      	int3
   25e38:      	int3
   25e39:      	int3
   25e3a:      	int3
   25e3b:      	int3
   25e3c:      	int3
   25e3d:      	int3
   25e3e:      	int3
   25e3f:      	int3

0000000000025e40 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt::h2319e9ea2c130fec>:
   25e40:      	subq	$0x48, %rsp
   25e44:      	movq	%rsi, (%rsp)
   25e48:      	movq	%rdi, 0x8(%rsp)
   25e4d:      	movq	%rdi, 0x20(%rsp)
   25e52:      	movq	%rsi, 0x28(%rsp)
   25e57:      	cmpb	$0x0, (%rdi)
   25e5a:      	setae	%al
   25e5d:      	movb	%al, 0x17(%rsp)
   25e61:      	movb	%al, %cl
   25e63:      	andb	$0x1, %cl
   25e66:      	movb	%cl, 0x37(%rsp)
   25e6a:      	testb	$0x1, %al
   25e6c:      	jne	0x25e99 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt::h2319e9ea2c130fec+0x59>
   25e6e:      	movq	0x8(%rsp), %rdi
   25e73:      	movq	0x1593e(%rip), %rax     # 0x3b7b8 <zlgk82z0l71lvh9+0x3b7b8>
   25e7a:      	callq	*%rax
   25e7c:      	xorq	$-0x1, %rax
   25e80:      	movq	%rax, 0x38(%rsp)
   25e85:      	movq	$0x1, 0x40(%rsp)
   25e8e:      	addq	$0x1, %rax
   25e92:      	movq	%rax, 0x18(%rsp)
   25e97:      	jmp	0x25eac <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt::h2319e9ea2c130fec+0x6c>
   25e99:      	movq	0x8(%rsp), %rdi
   25e9e:      	movq	0x15913(%rip), %rax     # 0x3b7b8 <zlgk82z0l71lvh9+0x3b7b8>
   25ea5:      	callq	*%rax
   25ea7:      	movq	%rax, 0x18(%rsp)
   25eac:      	movq	(%rsp), %rdx
   25eb0:      	movb	0x17(%rsp), %al
   25eb4:      	movq	0x18(%rsp), %rdi
   25eb9:      	movzbl	%al, %esi
   25ebc:      	andl	$0x1, %esi
   25ebf:      	callq	0x25400 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670>
   25ec4:      	andb	$0x1, %al
   25ec6:      	movzbl	%al, %eax
   25ec9:      	addq	$0x48, %rsp
   25ecd:      	retq
   25ece:      	int3
   25ecf:      	int3

0000000000025ed0 <core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt::h3ce129ae7db7c20e>:
   25ed0:      	subq	$0x48, %rsp
   25ed4:      	movq	%rsi, (%rsp)
   25ed8:      	movq	%rdi, 0x8(%rsp)
   25edd:      	movq	%rdi, 0x20(%rsp)
   25ee2:      	movq	%rsi, 0x28(%rsp)
   25ee7:      	cmpq	$0x0, (%rdi)
   25eeb:      	setae	%al
   25eee:      	movb	%al, 0x17(%rsp)
   25ef2:      	movb	%al, %cl
   25ef4:      	andb	$0x1, %cl
   25ef7:      	movb	%cl, 0x37(%rsp)
   25efb:      	testb	$0x1, %al
   25efd:      	jne	0x25f2a <core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt::h3ce129ae7db7c20e+0x5a>
   25eff:      	movq	0x8(%rsp), %rdi
   25f04:      	movq	0x158b5(%rip), %rax     # 0x3b7c0 <zlgk82z0l71lvh9+0x3b7c0>
   25f0b:      	callq	*%rax
   25f0d:      	xorq	$-0x1, %rax
   25f11:      	movq	%rax, 0x38(%rsp)
   25f16:      	movq	$0x1, 0x40(%rsp)
   25f1f:      	addq	$0x1, %rax
   25f23:      	movq	%rax, 0x18(%rsp)
   25f28:      	jmp	0x25f3d <core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt::h3ce129ae7db7c20e+0x6d>
   25f2a:      	movq	0x8(%rsp), %rdi
   25f2f:      	movq	0x1588a(%rip), %rax     # 0x3b7c0 <zlgk82z0l71lvh9+0x3b7c0>
   25f36:      	callq	*%rax
   25f38:      	movq	%rax, 0x18(%rsp)
   25f3d:      	movq	(%rsp), %rdx
   25f41:      	movb	0x17(%rsp), %al
   25f45:      	movq	0x18(%rsp), %rdi
   25f4a:      	movzbl	%al, %esi
   25f4d:      	andl	$0x1, %esi
   25f50:      	callq	0x25400 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670>
   25f55:      	andb	$0x1, %al
   25f57:      	movzbl	%al, %eax
   25f5a:      	addq	$0x48, %rsp
   25f5e:      	retq
   25f5f:      	int3

0000000000025f60 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8c094e17fe3d7635>:
   25f60:      	subq	$0x48, %rsp
   25f64:      	movq	%rsi, (%rsp)
   25f68:      	movq	%rdi, 0x8(%rsp)
   25f6d:      	movq	%rdi, 0x20(%rsp)
   25f72:      	movq	%rsi, 0x28(%rsp)
   25f77:      	cmpq	$0x0, (%rdi)
   25f7b:      	setae	%al
   25f7e:      	movb	%al, 0x17(%rsp)
   25f82:      	movb	%al, %cl
   25f84:      	andb	$0x1, %cl
   25f87:      	movb	%cl, 0x37(%rsp)
   25f8b:      	testb	$0x1, %al
   25f8d:      	jne	0x25fba <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8c094e17fe3d7635+0x5a>
   25f8f:      	movq	0x8(%rsp), %rdi
   25f94:      	movq	0x1582d(%rip), %rax     # 0x3b7c8 <zlgk82z0l71lvh9+0x3b7c8>
   25f9b:      	callq	*%rax
   25f9d:      	xorq	$-0x1, %rax
   25fa1:      	movq	%rax, 0x38(%rsp)
   25fa6:      	movq	$0x1, 0x40(%rsp)
   25faf:      	addq	$0x1, %rax
   25fb3:      	movq	%rax, 0x18(%rsp)
   25fb8:      	jmp	0x25fcd <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8c094e17fe3d7635+0x6d>
   25fba:      	movq	0x8(%rsp), %rdi
   25fbf:      	movq	0x15802(%rip), %rax     # 0x3b7c8 <zlgk82z0l71lvh9+0x3b7c8>
   25fc6:      	callq	*%rax
   25fc8:      	movq	%rax, 0x18(%rsp)
   25fcd:      	movq	(%rsp), %rdx
   25fd1:      	movb	0x17(%rsp), %al
   25fd5:      	movq	0x18(%rsp), %rdi
   25fda:      	movzbl	%al, %esi
   25fdd:      	andl	$0x1, %esi
   25fe0:      	callq	0x25400 <core::fmt::num::imp::fmt_u64::he50d5a2bf7745670>
   25fe5:      	andb	$0x1, %al
   25fe7:      	movzbl	%al, %eax
   25fea:      	addq	$0x48, %rsp
   25fee:      	retq
   25fef:      	int3

0000000000025ff0 <core::hint::unreachable_unchecked::h502b3bb1fd2b564c>:
   25ff0:      	pushq	%rax
   25ff1:      	movb	$0x1, %al
   25ff3:      	testb	$0x1, %al
   25ff5:      	jne	0x25ffb <core::hint::unreachable_unchecked::h502b3bb1fd2b564c+0xb>
   25ff7:      	jmp	0x25ff9 <core::hint::unreachable_unchecked::h502b3bb1fd2b564c+0x9>
   25ff9:      	ud2
   25ffb:      	leaq	-0x13cf2(%rip), %rdi    # 0x12310 <str.4+0x40>
   26002:      	movq	0x15167(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   26009:      	movl	$0x52, %esi
   2600e:      	callq	*%rax
   26010:      	ud2
   26012:      	int3
   26013:      	int3
   26014:      	int3
   26015:      	int3
   26016:      	int3
   26017:      	int3
   26018:      	int3
   26019:      	int3
   2601a:      	int3
   2601b:      	int3
   2601c:      	int3
   2601d:      	int3
   2601e:      	int3
   2601f:      	int3

0000000000026020 <core::mem::size_of_val::h599fb12ccc4f199a>:
   26020:      	subq	$0x18, %rsp
   26024:      	movq	%rdi, (%rsp)
   26028:      	movq	%rsi, 0x8(%rsp)
   2602d:      	shlq	$0x0, %rsi
   26031:      	movq	%rsi, 0x10(%rsp)
   26036:      	movq	0x10(%rsp), %rax
   2603b:      	addq	$0x18, %rsp
   2603f:      	retq

0000000000026040 <core::mem::replace::haa78d4099796b884>:
   26040:      	subq	$0x28, %rsp
   26044:      	movl	%esi, 0x10(%rsp)
   26048:      	movq	%rdi, 0x8(%rsp)
   2604d:      	movq	%rdi, 0x18(%rsp)
   26052:      	movl	%esi, 0x20(%rsp)
   26056:      	movq	0x15893(%rip), %rax     # 0x3b8f0 <zlgk82z0l71lvh9+0x3b8f0>
   2605d:      	callq	*%rax
   2605f:      	movq	0x8(%rsp), %rdi
   26064:      	movl	0x10(%rsp), %esi
   26068:      	movl	%eax, 0x14(%rsp)
   2606c:      	movl	%eax, 0x24(%rsp)
   26070:      	movq	0x15881(%rip), %rax     # 0x3b8f8 <zlgk82z0l71lvh9+0x3b8f8>
   26077:      	callq	*%rax
   26079:      	movl	0x14(%rsp), %eax
   2607d:      	addq	$0x28, %rsp
   26081:      	retq
   26082:      	int3
   26083:      	int3
   26084:      	int3
   26085:      	int3
   26086:      	int3
   26087:      	int3
   26088:      	int3
   26089:      	int3
   2608a:      	int3
   2608b:      	int3
   2608c:      	int3
   2608d:      	int3
   2608e:      	int3
   2608f:      	int3

0000000000026090 <core::mem::replace::hb67db21758103da9>:
   26090:      	subq	$0x28, %rsp
   26094:      	movq	%rdi, 0x8(%rsp)
   26099:      	movb	%sil, %al
   2609c:      	movb	%al, 0x16(%rsp)
   260a0:      	movq	%rdi, 0x18(%rsp)
   260a5:      	movb	%al, 0x26(%rsp)
   260a9:      	movq	0x15858(%rip), %rax     # 0x3b908 <zlgk82z0l71lvh9+0x3b908>
   260b0:      	callq	*%rax
   260b2:      	movq	0x8(%rsp), %rdi
   260b7:      	movb	%al, %cl
   260b9:      	movb	0x16(%rsp), %al
   260bd:      	movb	%cl, 0x17(%rsp)
   260c1:      	movb	%cl, 0x27(%rsp)
   260c5:      	movzbl	%al, %esi
   260c8:      	movq	0x15841(%rip), %rax     # 0x3b910 <zlgk82z0l71lvh9+0x3b910>
   260cf:      	callq	*%rax
   260d1:      	movb	0x17(%rsp), %al
   260d5:      	addq	$0x28, %rsp
   260d9:      	retq
   260da:      	int3
   260db:      	int3
   260dc:      	int3
   260dd:      	int3
   260de:      	int3
   260df:      	int3

00000000000260e0 <core::ptr::const_ptr::<impl *const T>::is_null::h32d257900ec9df69>:
   260e0:      	subq	$0x18, %rsp
   260e4:      	movq	%rdi, 0x10(%rsp)
   260e9:      	movq	%rdi, 0x8(%rsp)
   260ee:      	movq	0x8(%rsp), %rdi
   260f3:      	callq	0x261a0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h8f3a6046a61c4e2d>
   260f8:      	andb	$0x1, %al
   260fa:      	movzbl	%al, %eax
   260fd:      	addq	$0x18, %rsp
   26101:      	retq
   26102:      	int3
   26103:      	int3
   26104:      	int3
   26105:      	int3
   26106:      	int3
   26107:      	int3
   26108:      	int3
   26109:      	int3
   2610a:      	int3
   2610b:      	int3
   2610c:      	int3
   2610d:      	int3
   2610e:      	int3
   2610f:      	int3

0000000000026110 <core::ptr::const_ptr::<impl *const T>::is_null::h5a3e0646831f346f>:
   26110:      	subq	$0x18, %rsp
   26114:      	movq	%rdi, 0x10(%rsp)
   26119:      	movq	%rdi, 0x8(%rsp)
   2611e:      	movq	0x8(%rsp), %rdi
   26123:      	callq	0x261a0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h8f3a6046a61c4e2d>
   26128:      	andb	$0x1, %al
   2612a:      	movzbl	%al, %eax
   2612d:      	addq	$0x18, %rsp
   26131:      	retq
   26132:      	int3
   26133:      	int3
   26134:      	int3
   26135:      	int3
   26136:      	int3
   26137:      	int3
   26138:      	int3
   26139:      	int3
   2613a:      	int3
   2613b:      	int3
   2613c:      	int3
   2613d:      	int3
   2613e:      	int3
   2613f:      	int3

0000000000026140 <core::ptr::const_ptr::<impl *const T>::is_null::hacde94e3d53db404>:
   26140:      	subq	$0x18, %rsp
   26144:      	movq	%rdi, 0x10(%rsp)
   26149:      	movq	%rdi, 0x8(%rsp)
   2614e:      	movq	0x8(%rsp), %rdi
   26153:      	callq	0x261a0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h8f3a6046a61c4e2d>
   26158:      	andb	$0x1, %al
   2615a:      	movzbl	%al, %eax
   2615d:      	addq	$0x18, %rsp
   26161:      	retq
   26162:      	int3
   26163:      	int3
   26164:      	int3
   26165:      	int3
   26166:      	int3
   26167:      	int3
   26168:      	int3
   26169:      	int3
   2616a:      	int3
   2616b:      	int3
   2616c:      	int3
   2616d:      	int3
   2616e:      	int3
   2616f:      	int3

0000000000026170 <core::ptr::const_ptr::<impl *const T>::is_null::hfd4567fc8993ab77>:
   26170:      	subq	$0x18, %rsp
   26174:      	movq	%rdi, 0x10(%rsp)
   26179:      	movq	%rdi, 0x8(%rsp)
   2617e:      	movq	0x8(%rsp), %rdi
   26183:      	callq	0x261a0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h8f3a6046a61c4e2d>
   26188:      	andb	$0x1, %al
   2618a:      	movzbl	%al, %eax
   2618d:      	addq	$0x18, %rsp
   26191:      	retq
   26192:      	int3
   26193:      	int3
   26194:      	int3
   26195:      	int3
   26196:      	int3
   26197:      	int3
   26198:      	int3
   26199:      	int3
   2619a:      	int3
   2619b:      	int3
   2619c:      	int3
   2619d:      	int3
   2619e:      	int3
   2619f:      	int3

00000000000261a0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h8f3a6046a61c4e2d>:
   261a0:      	subq	$0x18, %rsp
   261a4:      	movq	%rdi, (%rsp)
   261a8:      	movq	%rdi, 0x8(%rsp)
   261ad:      	movq	%rdi, 0x10(%rsp)
   261b2:      	cmpq	$0x0, %rdi
   261b6:      	sete	%al
   261b9:      	andb	$0x1, %al
   261bb:      	movzbl	%al, %eax
   261be:      	addq	$0x18, %rsp
   261c2:      	retq
   261c3:      	int3
   261c4:      	int3
   261c5:      	int3
   261c6:      	int3
   261c7:      	int3
   261c8:      	int3
   261c9:      	int3
   261ca:      	int3
   261cb:      	int3
   261cc:      	int3
   261cd:      	int3
   261ce:      	int3
   261cf:      	int3

00000000000261d0 <core::ptr::const_ptr::<impl *const T>::sub_ptr::h0119f73950efb2ce>:
   261d0:      	subq	$0x58, %rsp
   261d4:      	movq	%rsi, 0x8(%rsp)
   261d9:      	movq	%rdi, 0x10(%rsp)
   261de:      	movq	%rdi, 0x28(%rsp)
   261e3:      	movq	%rsi, 0x30(%rsp)
   261e8:      	movb	$0x1, %al
   261ea:      	testb	$0x1, %al
   261ec:      	jne	0x26201 <core::ptr::const_ptr::<impl *const T>::sub_ptr::h0119f73950efb2ce+0x31>
   261ee:      	movq	$0x1, 0x38(%rsp)
   261f7:      	xorl	%eax, %eax
   261f9:      	cmpq	$0x1, %rax
   261fd:      	jb	0x26265 <core::ptr::const_ptr::<impl *const T>::sub_ptr::h0119f73950efb2ce+0x95>
   261ff:      	jmp	0x26247 <core::ptr::const_ptr::<impl *const T>::sub_ptr::h0119f73950efb2ce+0x77>
   26201:      	movq	0x8(%rsp), %rax
   26206:      	movq	0x10(%rsp), %rcx
   2620b:      	movq	%rcx, 0x18(%rsp)
   26210:      	movq	%rax, 0x20(%rsp)
   26215:      	movq	0x18(%rsp), %rax
   2621a:      	movq	0x20(%rsp), %rcx
   2621f:      	movq	%rax, 0x48(%rsp)
   26224:      	movq	%rcx, 0x50(%rsp)
   26229:      	cmpq	%rcx, %rax
   2622c:      	jae	0x26245 <core::ptr::const_ptr::<impl *const T>::sub_ptr::h0119f73950efb2ce+0x75>
   2622e:      	leaq	-0x13e2d(%rip), %rdi    # 0x12408 <str.4+0x138>
   26235:      	movq	0x14f34(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2623c:      	movl	$0x47, %esi
   26241:      	callq	*%rax
   26243:      	ud2
   26245:      	jmp	0x261ee <core::ptr::const_ptr::<impl *const T>::sub_ptr::h0119f73950efb2ce+0x1e>
   26247:      	leaq	-0x142ca(%rip), %rdi    # 0x11f84 <str.5+0x2c4>
   2624e:      	leaq	0x13f73(%rip), %rdx     # 0x3a1c8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2c8>
   26255:      	movq	0x14c74(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2625c:      	movl	$0x49, %esi
   26261:      	callq	*%rax
   26263:      	ud2
   26265:      	movl	$0x1, %eax
   2626a:      	movabsq	$0x7fffffffffffffff, %rcx # imm = 0x7FFFFFFFFFFFFFFF
   26274:      	cmpq	%rcx, %rax
   26277:      	ja	0x26247 <core::ptr::const_ptr::<impl *const T>::sub_ptr::h0119f73950efb2ce+0x77>
   26279:      	movq	0x8(%rsp), %rcx
   2627e:      	movq	0x10(%rsp), %rax
   26283:      	subq	%rcx, %rax
   26286:      	shrq	$0x0, %rax
   2628a:      	movq	%rax, 0x40(%rsp)
   2628f:      	movq	0x40(%rsp), %rax
   26294:      	addq	$0x58, %rsp
   26298:      	retq
   26299:      	int3
   2629a:      	int3
   2629b:      	int3
   2629c:      	int3
   2629d:      	int3
   2629e:      	int3
   2629f:      	int3

00000000000262a0 <core::ptr::const_ptr::<impl *const T>::align_offset::he832426020c9c70a>:
   262a0:      	subq	$0x78, %rsp
   262a4:      	movq	%rsi, %rcx
   262a7:      	movq	%rcx, 0x10(%rsp)
   262ac:      	movq	%rdi, 0x18(%rsp)
   262b1:      	movq	%rdi, 0x50(%rsp)
   262b6:      	movq	%rcx, 0x58(%rsp)
   262bb:      	movq	%rcx, 0x60(%rsp)
   262c0:      	movq	%rcx, 0x68(%rsp)
   262c5:      	movq	%rcx, %rax
   262c8:      	shrq	%rax
   262cb:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   262d5:      	andq	%rdx, %rax
   262d8:      	subq	%rax, %rcx
   262db:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   262e5:      	movq	%rcx, %rax
   262e8:      	andq	%rdx, %rax
   262eb:      	shrq	$0x2, %rcx
   262ef:      	andq	%rdx, %rcx
   262f2:      	addq	%rcx, %rax
   262f5:      	movq	%rax, %rcx
   262f8:      	shrq	$0x4, %rcx
   262fc:      	addq	%rcx, %rax
   262ff:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   26309:      	andq	%rcx, %rax
   2630c:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   26316:      	imulq	%rcx, %rax
   2631a:      	shrq	$0x38, %rax
   2631e:      	movq	%rax, 0x70(%rsp)
   26323:      	movq	0x70(%rsp), %rax
   26328:      	cmpl	$0x1, %eax
   2632b:      	je	0x2635f <core::ptr::const_ptr::<impl *const T>::align_offset::he832426020c9c70a+0xbf>
   2632d:      	leaq	0x13eac(%rip), %rsi     # 0x3a1e0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2e0>
   26334:      	leaq	0x20(%rsp), %rdi
   26339:      	movq	%rdi, 0x8(%rsp)
   2633e:      	movl	$0x1, %edx
   26343:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   26348:      	movq	0x8(%rsp), %rdi
   2634d:      	leaq	0x13e9c(%rip), %rsi     # 0x3a1f0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x2f0>
   26354:      	movq	0x14b65(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2635b:      	callq	*%rax
   2635d:      	ud2
   2635f:      	movq	0x10(%rsp), %rsi
   26364:      	movq	0x18(%rsp), %rdi
   26369:      	movq	0x155d0(%rip), %rax     # 0x3b940 <zlgk82z0l71lvh9+0x3b940>
   26370:      	callq	*%rax
   26372:      	addq	$0x78, %rsp
   26376:      	retq
   26377:      	int3
   26378:      	int3
   26379:      	int3
   2637a:      	int3
   2637b:      	int3
   2637c:      	int3
   2637d:      	int3
   2637e:      	int3
   2637f:      	int3

0000000000026380 <core::ptr::const_ptr::<impl *const T>::is_aligned::h1ab4ca19acf870b1>:
   26380:      	pushq	%rax
   26381:      	movq	%rdi, (%rsp)
   26385:      	movq	0x155c4(%rip), %rax     # 0x3b950 <zlgk82z0l71lvh9+0x3b950>
   2638c:      	movl	$0x8, %esi
   26391:      	callq	*%rax
   26393:      	andb	$0x1, %al
   26395:      	movzbl	%al, %eax
   26398:      	popq	%rcx
   26399:      	retq
   2639a:      	int3
   2639b:      	int3
   2639c:      	int3
   2639d:      	int3
   2639e:      	int3
   2639f:      	int3

00000000000263a0 <core::ptr::const_ptr::<impl *const T>::is_aligned::h30a24d31d03b7331>:
   263a0:      	pushq	%rax
   263a1:      	movq	%rdi, (%rsp)
   263a5:      	movq	0x155b4(%rip), %rax     # 0x3b960 <zlgk82z0l71lvh9+0x3b960>
   263ac:      	movl	$0x1, %esi
   263b1:      	callq	*%rax
   263b3:      	andb	$0x1, %al
   263b5:      	movzbl	%al, %eax
   263b8:      	popq	%rcx
   263b9:      	retq
   263ba:      	int3
   263bb:      	int3
   263bc:      	int3
   263bd:      	int3
   263be:      	int3
   263bf:      	int3

00000000000263c0 <core::ptr::const_ptr::<impl *const T>::is_aligned::h9c4f0022f8ef8a6f>:
   263c0:      	pushq	%rax
   263c1:      	movq	%rdi, (%rsp)
   263c5:      	movq	0x155a4(%rip), %rax     # 0x3b970 <zlgk82z0l71lvh9+0x3b970>
   263cc:      	movl	$0x4, %esi
   263d1:      	callq	*%rax
   263d3:      	andb	$0x1, %al
   263d5:      	movzbl	%al, %eax
   263d8:      	popq	%rcx
   263d9:      	retq
   263da:      	int3
   263db:      	int3
   263dc:      	int3
   263dd:      	int3
   263de:      	int3
   263df:      	int3

00000000000263e0 <core::ptr::const_ptr::<impl *const T>::is_aligned::hb9954d9a2b11913c>:
   263e0:      	pushq	%rax
   263e1:      	movq	%rdi, (%rsp)
   263e5:      	movq	0x15594(%rip), %rax     # 0x3b980 <zlgk82z0l71lvh9+0x3b980>
   263ec:      	movl	$0x8, %esi
   263f1:      	callq	*%rax
   263f3:      	andb	$0x1, %al
   263f5:      	movzbl	%al, %eax
   263f8:      	popq	%rcx
   263f9:      	retq
   263fa:      	int3
   263fb:      	int3
   263fc:      	int3
   263fd:      	int3
   263fe:      	int3
   263ff:      	int3

0000000000026400 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h4e803a365a3aa88e>:
   26400:      	subq	$0x88, %rsp
   26407:      	movq	%rsi, %rcx
   2640a:      	movq	%rcx, 0x8(%rsp)
   2640f:      	movq	%rdi, 0x10(%rsp)
   26414:      	movq	%rdi, 0x58(%rsp)
   26419:      	movq	%rcx, 0x60(%rsp)
   2641e:      	movq	%rcx, 0x70(%rsp)
   26423:      	movq	%rcx, 0x78(%rsp)
   26428:      	movq	%rcx, %rax
   2642b:      	shrq	%rax
   2642e:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   26438:      	andq	%rdx, %rax
   2643b:      	subq	%rax, %rcx
   2643e:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   26448:      	movq	%rcx, %rax
   2644b:      	andq	%rdx, %rax
   2644e:      	shrq	$0x2, %rcx
   26452:      	andq	%rdx, %rcx
   26455:      	addq	%rcx, %rax
   26458:      	movq	%rax, %rcx
   2645b:      	shrq	$0x4, %rcx
   2645f:      	addq	%rcx, %rax
   26462:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   2646c:      	andq	%rcx, %rax
   2646f:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   26479:      	imulq	%rcx, %rax
   2647d:      	shrq	$0x38, %rax
   26481:      	movq	%rax, 0x80(%rsp)
   26489:      	movq	0x80(%rsp), %rax
   26491:      	cmpl	$0x1, %eax
   26494:      	je	0x264c6 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h4e803a365a3aa88e+0xc6>
   26496:      	leaq	0x13d6b(%rip), %rsi     # 0x3a208 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x308>
   2649d:      	leaq	0x18(%rsp), %rdi
   264a2:      	movq	%rdi, (%rsp)
   264a6:      	movl	$0x1, %edx
   264ab:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   264b0:      	movq	(%rsp), %rdi
   264b4:      	leaq	0x13d5d(%rip), %rsi     # 0x3a218 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x318>
   264bb:      	movq	0x149fe(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   264c2:      	callq	*%rax
   264c4:      	ud2
   264c6:      	movq	0x8(%rsp), %rax
   264cb:      	movq	0x10(%rsp), %rcx
   264d0:      	movq	%rcx, 0x68(%rsp)
   264d5:      	movq	%rcx, 0x48(%rsp)
   264da:      	movq	%rax, 0x50(%rsp)
   264df:      	movq	0x48(%rsp), %rdi
   264e4:      	movq	0x50(%rsp), %rsi
   264e9:      	callq	0x26800 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::hc3addf86e19d50d3>
   264ee:      	andb	$0x1, %al
   264f0:      	movzbl	%al, %eax
   264f3:      	addq	$0x88, %rsp
   264fa:      	retq
   264fb:      	int3
   264fc:      	int3
   264fd:      	int3
   264fe:      	int3
   264ff:      	int3

0000000000026500 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h674dbb2fe84a1b12>:
   26500:      	subq	$0x88, %rsp
   26507:      	movq	%rsi, %rcx
   2650a:      	movq	%rcx, 0x8(%rsp)
   2650f:      	movq	%rdi, 0x10(%rsp)
   26514:      	movq	%rdi, 0x58(%rsp)
   26519:      	movq	%rcx, 0x60(%rsp)
   2651e:      	movq	%rcx, 0x70(%rsp)
   26523:      	movq	%rcx, 0x78(%rsp)
   26528:      	movq	%rcx, %rax
   2652b:      	shrq	%rax
   2652e:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   26538:      	andq	%rdx, %rax
   2653b:      	subq	%rax, %rcx
   2653e:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   26548:      	movq	%rcx, %rax
   2654b:      	andq	%rdx, %rax
   2654e:      	shrq	$0x2, %rcx
   26552:      	andq	%rdx, %rcx
   26555:      	addq	%rcx, %rax
   26558:      	movq	%rax, %rcx
   2655b:      	shrq	$0x4, %rcx
   2655f:      	addq	%rcx, %rax
   26562:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   2656c:      	andq	%rcx, %rax
   2656f:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   26579:      	imulq	%rcx, %rax
   2657d:      	shrq	$0x38, %rax
   26581:      	movq	%rax, 0x80(%rsp)
   26589:      	movq	0x80(%rsp), %rax
   26591:      	cmpl	$0x1, %eax
   26594:      	je	0x265c6 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h674dbb2fe84a1b12+0xc6>
   26596:      	leaq	0x13c6b(%rip), %rsi     # 0x3a208 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x308>
   2659d:      	leaq	0x18(%rsp), %rdi
   265a2:      	movq	%rdi, (%rsp)
   265a6:      	movl	$0x1, %edx
   265ab:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   265b0:      	movq	(%rsp), %rdi
   265b4:      	leaq	0x13c5d(%rip), %rsi     # 0x3a218 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x318>
   265bb:      	movq	0x148fe(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   265c2:      	callq	*%rax
   265c4:      	ud2
   265c6:      	movq	0x8(%rsp), %rax
   265cb:      	movq	0x10(%rsp), %rcx
   265d0:      	movq	%rcx, 0x68(%rsp)
   265d5:      	movq	%rcx, 0x48(%rsp)
   265da:      	movq	%rax, 0x50(%rsp)
   265df:      	movq	0x48(%rsp), %rdi
   265e4:      	movq	0x50(%rsp), %rsi
   265e9:      	callq	0x26800 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::hc3addf86e19d50d3>
   265ee:      	andb	$0x1, %al
   265f0:      	movzbl	%al, %eax
   265f3:      	addq	$0x88, %rsp
   265fa:      	retq
   265fb:      	int3
   265fc:      	int3
   265fd:      	int3
   265fe:      	int3
   265ff:      	int3

0000000000026600 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h7e21652513599432>:
   26600:      	subq	$0x88, %rsp
   26607:      	movq	%rsi, %rcx
   2660a:      	movq	%rcx, 0x8(%rsp)
   2660f:      	movq	%rdi, 0x10(%rsp)
   26614:      	movq	%rdi, 0x58(%rsp)
   26619:      	movq	%rcx, 0x60(%rsp)
   2661e:      	movq	%rcx, 0x70(%rsp)
   26623:      	movq	%rcx, 0x78(%rsp)
   26628:      	movq	%rcx, %rax
   2662b:      	shrq	%rax
   2662e:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   26638:      	andq	%rdx, %rax
   2663b:      	subq	%rax, %rcx
   2663e:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   26648:      	movq	%rcx, %rax
   2664b:      	andq	%rdx, %rax
   2664e:      	shrq	$0x2, %rcx
   26652:      	andq	%rdx, %rcx
   26655:      	addq	%rcx, %rax
   26658:      	movq	%rax, %rcx
   2665b:      	shrq	$0x4, %rcx
   2665f:      	addq	%rcx, %rax
   26662:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   2666c:      	andq	%rcx, %rax
   2666f:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   26679:      	imulq	%rcx, %rax
   2667d:      	shrq	$0x38, %rax
   26681:      	movq	%rax, 0x80(%rsp)
   26689:      	movq	0x80(%rsp), %rax
   26691:      	cmpl	$0x1, %eax
   26694:      	je	0x266c6 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h7e21652513599432+0xc6>
   26696:      	leaq	0x13b6b(%rip), %rsi     # 0x3a208 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x308>
   2669d:      	leaq	0x18(%rsp), %rdi
   266a2:      	movq	%rdi, (%rsp)
   266a6:      	movl	$0x1, %edx
   266ab:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   266b0:      	movq	(%rsp), %rdi
   266b4:      	leaq	0x13b5d(%rip), %rsi     # 0x3a218 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x318>
   266bb:      	movq	0x147fe(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   266c2:      	callq	*%rax
   266c4:      	ud2
   266c6:      	movq	0x8(%rsp), %rax
   266cb:      	movq	0x10(%rsp), %rcx
   266d0:      	movq	%rcx, 0x68(%rsp)
   266d5:      	movq	%rcx, 0x48(%rsp)
   266da:      	movq	%rax, 0x50(%rsp)
   266df:      	movq	0x48(%rsp), %rdi
   266e4:      	movq	0x50(%rsp), %rsi
   266e9:      	callq	0x26800 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::hc3addf86e19d50d3>
   266ee:      	andb	$0x1, %al
   266f0:      	movzbl	%al, %eax
   266f3:      	addq	$0x88, %rsp
   266fa:      	retq
   266fb:      	int3
   266fc:      	int3
   266fd:      	int3
   266fe:      	int3
   266ff:      	int3

0000000000026700 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::he348868e86b7fb55>:
   26700:      	subq	$0x88, %rsp
   26707:      	movq	%rsi, %rcx
   2670a:      	movq	%rcx, 0x8(%rsp)
   2670f:      	movq	%rdi, 0x10(%rsp)
   26714:      	movq	%rdi, 0x58(%rsp)
   26719:      	movq	%rcx, 0x60(%rsp)
   2671e:      	movq	%rcx, 0x70(%rsp)
   26723:      	movq	%rcx, 0x78(%rsp)
   26728:      	movq	%rcx, %rax
   2672b:      	shrq	%rax
   2672e:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   26738:      	andq	%rdx, %rax
   2673b:      	subq	%rax, %rcx
   2673e:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   26748:      	movq	%rcx, %rax
   2674b:      	andq	%rdx, %rax
   2674e:      	shrq	$0x2, %rcx
   26752:      	andq	%rdx, %rcx
   26755:      	addq	%rcx, %rax
   26758:      	movq	%rax, %rcx
   2675b:      	shrq	$0x4, %rcx
   2675f:      	addq	%rcx, %rax
   26762:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   2676c:      	andq	%rcx, %rax
   2676f:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   26779:      	imulq	%rcx, %rax
   2677d:      	shrq	$0x38, %rax
   26781:      	movq	%rax, 0x80(%rsp)
   26789:      	movq	0x80(%rsp), %rax
   26791:      	cmpl	$0x1, %eax
   26794:      	je	0x267c6 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::he348868e86b7fb55+0xc6>
   26796:      	leaq	0x13a6b(%rip), %rsi     # 0x3a208 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x308>
   2679d:      	leaq	0x18(%rsp), %rdi
   267a2:      	movq	%rdi, (%rsp)
   267a6:      	movl	$0x1, %edx
   267ab:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   267b0:      	movq	(%rsp), %rdi
   267b4:      	leaq	0x13a5d(%rip), %rsi     # 0x3a218 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x318>
   267bb:      	movq	0x146fe(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   267c2:      	callq	*%rax
   267c4:      	ud2
   267c6:      	movq	0x8(%rsp), %rax
   267cb:      	movq	0x10(%rsp), %rcx
   267d0:      	movq	%rcx, 0x68(%rsp)
   267d5:      	movq	%rcx, 0x48(%rsp)
   267da:      	movq	%rax, 0x50(%rsp)
   267df:      	movq	0x48(%rsp), %rdi
   267e4:      	movq	0x50(%rsp), %rsi
   267e9:      	callq	0x26800 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::hc3addf86e19d50d3>
   267ee:      	andb	$0x1, %al
   267f0:      	movzbl	%al, %eax
   267f3:      	addq	$0x88, %rsp
   267fa:      	retq
   267fb:      	int3
   267fc:      	int3
   267fd:      	int3
   267fe:      	int3
   267ff:      	int3

0000000000026800 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::hc3addf86e19d50d3>:
   26800:      	subq	$0x38, %rsp
   26804:      	movq	%rdi, 0x8(%rsp)
   26809:      	movq	%rdi, 0x18(%rsp)
   2680e:      	movq	%rsi, 0x20(%rsp)
   26813:      	movq	%rdi, 0x28(%rsp)
   26818:      	movq	%rdi, 0x30(%rsp)
   2681d:      	movq	%rsi, %rax
   26820:      	subq	$0x1, %rax
   26824:      	movq	%rax, 0x10(%rsp)
   26829:      	cmpq	$0x1, %rsi
   2682d:      	setb	%al
   26830:      	testb	$0x1, %al
   26832:      	jne	0x26852 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::hc3addf86e19d50d3+0x52>
   26834:      	movq	0x10(%rsp), %rcx
   26839:      	movq	0x8(%rsp), %rax
   2683e:      	andq	%rcx, %rax
   26841:      	cmpq	$0x0, %rax
   26845:      	sete	%al
   26848:      	andb	$0x1, %al
   2684a:      	movzbl	%al, %eax
   2684d:      	addq	$0x38, %rsp
   26851:      	retq
   26852:      	leaq	-0x147b9(%rip), %rdi    # 0x120a0 <str.0>
   26859:      	leaq	0x139d0(%rip), %rdx     # 0x3a230 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x330>
   26860:      	movq	0x14669(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   26867:      	movl	$0x21, %esi
   2686c:      	callq	*%rax
   2686e:      	ud2

0000000000026870 <core::ptr::const_ptr::<impl *const [T]>::len::h778a635d4f7cabaa>:
   26870:      	subq	$0x18, %rsp
   26874:      	movq	%rdi, 0x8(%rsp)
   26879:      	movq	%rsi, 0x10(%rsp)
   2687e:      	movq	0x15103(%rip), %rax     # 0x3b988 <zlgk82z0l71lvh9+0x3b988>
   26885:      	callq	*%rax
   26887:      	addq	$0x18, %rsp
   2688b:      	retq
   2688c:      	int3
   2688d:      	int3
   2688e:      	int3
   2688f:      	int3

0000000000026890 <core::ptr::const_ptr::<impl *const [T]>::len::hccf97b2ab7bf86ac>:
   26890:      	subq	$0x18, %rsp
   26894:      	movq	%rdi, 0x8(%rsp)
   26899:      	movq	%rsi, 0x10(%rsp)
   2689e:      	movq	0x150f3(%rip), %rax     # 0x3b998 <zlgk82z0l71lvh9+0x3b998>
   268a5:      	callq	*%rax
   268a7:      	addq	$0x18, %rsp
   268ab:      	retq
   268ac:      	int3
   268ad:      	int3
   268ae:      	int3
   268af:      	int3

00000000000268b0 <core::ptr::const_ptr::<impl *const [T]>::as_ptr::h89e5687b5588d311>:
   268b0:      	subq	$0x10, %rsp
   268b4:      	movq	%rdi, %rax
   268b7:      	movq	%rax, (%rsp)
   268bb:      	movq	%rsi, 0x8(%rsp)
   268c0:      	addq	$0x10, %rsp
   268c4:      	retq
   268c5:      	int3
   268c6:      	int3
   268c7:      	int3
   268c8:      	int3
   268c9:      	int3
   268ca:      	int3
   268cb:      	int3
   268cc:      	int3
   268cd:      	int3
   268ce:      	int3
   268cf:      	int3

00000000000268d0 <core::ptr::const_ptr::<impl *const [T]>::as_ptr::hab94d11aaa5768ae>:
   268d0:      	subq	$0x10, %rsp
   268d4:      	movq	%rdi, %rax
   268d7:      	movq	%rax, (%rsp)
   268db:      	movq	%rsi, 0x8(%rsp)
   268e0:      	addq	$0x10, %rsp
   268e4:      	retq
   268e5:      	int3
   268e6:      	int3
   268e7:      	int3
   268e8:      	int3
   268e9:      	int3
   268ea:      	int3
   268eb:      	int3
   268ec:      	int3
   268ed:      	int3
   268ee:      	int3
   268ef:      	int3

00000000000268f0 <core::ptr::mut_ptr::<impl *mut T>::is_null::h51e280b5128dc19c>:
   268f0:      	subq	$0x18, %rsp
   268f4:      	movq	%rdi, 0x10(%rsp)
   268f9:      	movq	%rdi, 0x8(%rsp)
   268fe:      	movq	0x8(%rsp), %rdi
   26903:      	callq	0x26980 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::hee5b9cb8b4f55a08>
   26908:      	andb	$0x1, %al
   2690a:      	movzbl	%al, %eax
   2690d:      	addq	$0x18, %rsp
   26911:      	retq
   26912:      	int3
   26913:      	int3
   26914:      	int3
   26915:      	int3
   26916:      	int3
   26917:      	int3
   26918:      	int3
   26919:      	int3
   2691a:      	int3
   2691b:      	int3
   2691c:      	int3
   2691d:      	int3
   2691e:      	int3
   2691f:      	int3

0000000000026920 <core::ptr::mut_ptr::<impl *mut T>::is_null::h949594434d2f99d3>:
   26920:      	subq	$0x18, %rsp
   26924:      	movq	%rdi, 0x10(%rsp)
   26929:      	movq	%rdi, 0x8(%rsp)
   2692e:      	movq	0x8(%rsp), %rdi
   26933:      	callq	0x26980 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::hee5b9cb8b4f55a08>
   26938:      	andb	$0x1, %al
   2693a:      	movzbl	%al, %eax
   2693d:      	addq	$0x18, %rsp
   26941:      	retq
   26942:      	int3
   26943:      	int3
   26944:      	int3
   26945:      	int3
   26946:      	int3
   26947:      	int3
   26948:      	int3
   26949:      	int3
   2694a:      	int3
   2694b:      	int3
   2694c:      	int3
   2694d:      	int3
   2694e:      	int3
   2694f:      	int3

0000000000026950 <core::ptr::mut_ptr::<impl *mut T>::is_null::he6af5cb32e02059d>:
   26950:      	subq	$0x18, %rsp
   26954:      	movq	%rdi, 0x10(%rsp)
   26959:      	movq	%rdi, 0x8(%rsp)
   2695e:      	movq	0x8(%rsp), %rdi
   26963:      	callq	0x26980 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::hee5b9cb8b4f55a08>
   26968:      	andb	$0x1, %al
   2696a:      	movzbl	%al, %eax
   2696d:      	addq	$0x18, %rsp
   26971:      	retq
   26972:      	int3
   26973:      	int3
   26974:      	int3
   26975:      	int3
   26976:      	int3
   26977:      	int3
   26978:      	int3
   26979:      	int3
   2697a:      	int3
   2697b:      	int3
   2697c:      	int3
   2697d:      	int3
   2697e:      	int3
   2697f:      	int3

0000000000026980 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::hee5b9cb8b4f55a08>:
   26980:      	subq	$0x18, %rsp
   26984:      	movq	%rdi, (%rsp)
   26988:      	movq	%rdi, 0x8(%rsp)
   2698d:      	movq	%rdi, 0x10(%rsp)
   26992:      	cmpq	$0x0, %rdi
   26996:      	sete	%al
   26999:      	andb	$0x1, %al
   2699b:      	movzbl	%al, %eax
   2699e:      	addq	$0x18, %rsp
   269a2:      	retq
   269a3:      	int3
   269a4:      	int3
   269a5:      	int3
   269a6:      	int3
   269a7:      	int3
   269a8:      	int3
   269a9:      	int3
   269aa:      	int3
   269ab:      	int3
   269ac:      	int3
   269ad:      	int3
   269ae:      	int3
   269af:      	int3

00000000000269b0 <core::ptr::slice_from_raw_parts::h4c3ca47bfdac3e65>:
   269b0:      	subq	$0x18, %rsp
   269b4:      	movq	%rdi, (%rsp)
   269b8:      	movq	%rsi, 0x8(%rsp)
   269bd:      	movq	%rdi, 0x10(%rsp)
   269c2:      	movq	0x14ff7(%rip), %rax     # 0x3b9c0 <zlgk82z0l71lvh9+0x3b9c0>
   269c9:      	callq	*%rax
   269cb:      	addq	$0x18, %rsp
   269cf:      	retq

00000000000269d0 <core::ptr::slice_from_raw_parts::h6db589ceb0a7bf4d>:
   269d0:      	subq	$0x18, %rsp
   269d4:      	movq	%rdi, (%rsp)
   269d8:      	movq	%rsi, 0x8(%rsp)
   269dd:      	movq	%rdi, 0x10(%rsp)
   269e2:      	movq	0x14fe7(%rip), %rax     # 0x3b9d0 <zlgk82z0l71lvh9+0x3b9d0>
   269e9:      	callq	*%rax
   269eb:      	addq	$0x18, %rsp
   269ef:      	retq

00000000000269f0 <core::ptr::slice_from_raw_parts::haacb63f2b01577d8>:
   269f0:      	subq	$0x18, %rsp
   269f4:      	movq	%rdi, (%rsp)
   269f8:      	movq	%rsi, 0x8(%rsp)
   269fd:      	movq	%rdi, 0x10(%rsp)
   26a02:      	movq	0x14fd7(%rip), %rax     # 0x3b9e0 <zlgk82z0l71lvh9+0x3b9e0>
   26a09:      	callq	*%rax
   26a0b:      	addq	$0x18, %rsp
   26a0f:      	retq

0000000000026a10 <core::ptr::slice_from_raw_parts::hd41673a799338cd2>:
   26a10:      	subq	$0x18, %rsp
   26a14:      	movq	%rdi, (%rsp)
   26a18:      	movq	%rsi, 0x8(%rsp)
   26a1d:      	movq	%rdi, 0x10(%rsp)
   26a22:      	movq	0x14fc7(%rip), %rax     # 0x3b9f0 <zlgk82z0l71lvh9+0x3b9f0>
   26a29:      	callq	*%rax
   26a2b:      	addq	$0x18, %rsp
   26a2f:      	retq

0000000000026a30 <core::ptr::slice_from_raw_parts_mut::h63ce323d2dc89c35>:
   26a30:      	subq	$0x18, %rsp
   26a34:      	movq	%rdi, (%rsp)
   26a38:      	movq	%rsi, 0x8(%rsp)
   26a3d:      	movq	%rdi, 0x10(%rsp)
   26a42:      	movq	0x14faf(%rip), %rax     # 0x3b9f8 <zlgk82z0l71lvh9+0x3b9f8>
   26a49:      	callq	*%rax
   26a4b:      	addq	$0x18, %rsp
   26a4f:      	retq

0000000000026a50 <core::ptr::read::h46f25f62b676af9f>:
   26a50:      	subq	$0x28, %rsp
   26a54:      	movq	%rdi, 0x8(%rsp)
   26a59:      	movq	%rdi, 0x18(%rsp)
   26a5e:      	movb	$0x1, %al
   26a60:      	testb	$0x1, %al
   26a62:      	jne	0x26a70 <core::ptr::read::h46f25f62b676af9f+0x20>
   26a64:      	movq	0x8(%rsp), %rax
   26a69:      	movb	(%rax), %al
   26a6b:      	addq	$0x28, %rsp
   26a6f:      	retq
   26a70:      	movq	0x8(%rsp), %rax
   26a75:      	movq	%rax, 0x10(%rsp)
   26a7a:      	movq	0x10(%rsp), %rdi
   26a7f:      	movq	%rdi, 0x20(%rsp)
   26a84:      	movq	0x14f75(%rip), %rax     # 0x3ba00 <zlgk82z0l71lvh9+0x3ba00>
   26a8b:      	callq	*%rax
   26a8d:      	testb	$0x1, %al
   26a8f:      	jne	0x26aa8 <core::ptr::read::h46f25f62b676af9f+0x58>
   26a91:      	leaq	-0x14649(%rip), %rdi    # 0x1244f <str.4+0x17f>
   26a98:      	movq	0x146d1(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   26a9f:      	movl	$0x65, %esi
   26aa4:      	callq	*%rax
   26aa6:      	ud2
   26aa8:      	jmp	0x26a64 <core::ptr::read::h46f25f62b676af9f+0x14>
   26aaa:      	int3
   26aab:      	int3
   26aac:      	int3
   26aad:      	int3
   26aae:      	int3
   26aaf:      	int3

0000000000026ab0 <core::ptr::read::h78ca824476016cb4>:
   26ab0:      	subq	$0x28, %rsp
   26ab4:      	movq	%rdi, 0x8(%rsp)
   26ab9:      	movq	%rdi, 0x18(%rsp)
   26abe:      	movb	$0x1, %al
   26ac0:      	testb	$0x1, %al
   26ac2:      	jne	0x26ad0 <core::ptr::read::h78ca824476016cb4+0x20>
   26ac4:      	movq	0x8(%rsp), %rax
   26ac9:      	movl	(%rax), %eax
   26acb:      	addq	$0x28, %rsp
   26acf:      	retq
   26ad0:      	movq	0x8(%rsp), %rax
   26ad5:      	movq	%rax, 0x10(%rsp)
   26ada:      	movq	0x10(%rsp), %rdi
   26adf:      	movq	%rdi, 0x20(%rsp)
   26ae4:      	movq	0x14f1d(%rip), %rax     # 0x3ba08 <zlgk82z0l71lvh9+0x3ba08>
   26aeb:      	callq	*%rax
   26aed:      	testb	$0x1, %al
   26aef:      	jne	0x26b08 <core::ptr::read::h78ca824476016cb4+0x58>
   26af1:      	leaq	-0x146a9(%rip), %rdi    # 0x1244f <str.4+0x17f>
   26af8:      	movq	0x14671(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   26aff:      	movl	$0x65, %esi
   26b04:      	callq	*%rax
   26b06:      	ud2
   26b08:      	jmp	0x26ac4 <core::ptr::read::h78ca824476016cb4+0x14>
   26b0a:      	int3
   26b0b:      	int3
   26b0c:      	int3
   26b0d:      	int3
   26b0e:      	int3
   26b0f:      	int3

0000000000026b10 <core::ptr::write::h3362370cacccc750>:
   26b10:      	subq	$0x38, %rsp
   26b14:      	movq	%rdi, 0x8(%rsp)
   26b19:      	movb	%sil, %al
   26b1c:      	movb	%al, 0x17(%rsp)
   26b20:      	movq	%rdi, 0x20(%rsp)
   26b25:      	movb	%al, 0x2f(%rsp)
   26b29:      	movb	$0x1, %al
   26b2b:      	testb	$0x1, %al
   26b2d:      	jne	0x26b3f <core::ptr::write::h3362370cacccc750+0x2f>
   26b2f:      	movq	0x8(%rsp), %rax
   26b34:      	movb	0x17(%rsp), %cl
   26b38:      	movb	%cl, (%rax)
   26b3a:      	addq	$0x38, %rsp
   26b3e:      	retq
   26b3f:      	movq	0x8(%rsp), %rax
   26b44:      	movq	%rax, 0x18(%rsp)
   26b49:      	movq	0x18(%rsp), %rdi
   26b4e:      	movq	%rdi, 0x30(%rsp)
   26b53:      	movq	0x14ea6(%rip), %rax     # 0x3ba00 <zlgk82z0l71lvh9+0x3ba00>
   26b5a:      	callq	*%rax
   26b5c:      	testb	$0x1, %al
   26b5e:      	jne	0x26b77 <core::ptr::write::h3362370cacccc750+0x67>
   26b60:      	leaq	-0x146b3(%rip), %rdi    # 0x124b4 <str.4+0x1e4>
   26b67:      	movq	0x14602(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   26b6e:      	movl	$0x66, %esi
   26b73:      	callq	*%rax
   26b75:      	ud2
   26b77:      	jmp	0x26b2f <core::ptr::write::h3362370cacccc750+0x1f>
   26b79:      	int3
   26b7a:      	int3
   26b7b:      	int3
   26b7c:      	int3
   26b7d:      	int3
   26b7e:      	int3
   26b7f:      	int3

0000000000026b80 <core::ptr::write::h46434298275830d1>:
   26b80:      	subq	$0x38, %rsp
   26b84:      	movl	%esi, 0xc(%rsp)
   26b88:      	movq	%rdi, 0x10(%rsp)
   26b8d:      	movq	%rdi, 0x20(%rsp)
   26b92:      	movl	%esi, 0x2c(%rsp)
   26b96:      	movb	$0x1, %al
   26b98:      	testb	$0x1, %al
   26b9a:      	jne	0x26bac <core::ptr::write::h46434298275830d1+0x2c>
   26b9c:      	movq	0x10(%rsp), %rax
   26ba1:      	movl	0xc(%rsp), %ecx
   26ba5:      	movl	%ecx, (%rax)
   26ba7:      	addq	$0x38, %rsp
   26bab:      	retq
   26bac:      	movq	0x10(%rsp), %rax
   26bb1:      	movq	%rax, 0x18(%rsp)
   26bb6:      	movq	0x18(%rsp), %rdi
   26bbb:      	movq	%rdi, 0x30(%rsp)
   26bc0:      	movq	0x14e41(%rip), %rax     # 0x3ba08 <zlgk82z0l71lvh9+0x3ba08>
   26bc7:      	callq	*%rax
   26bc9:      	testb	$0x1, %al
   26bcb:      	jne	0x26be4 <core::ptr::write::h46434298275830d1+0x64>
   26bcd:      	leaq	-0x14720(%rip), %rdi    # 0x124b4 <str.4+0x1e4>
   26bd4:      	movq	0x14595(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   26bdb:      	movl	$0x66, %esi
   26be0:      	callq	*%rax
   26be2:      	ud2
   26be4:      	jmp	0x26b9c <core::ptr::write::h46434298275830d1+0x1c>
   26be6:      	int3
   26be7:      	int3
   26be8:      	int3
   26be9:      	int3
   26bea:      	int3
   26beb:      	int3
   26bec:      	int3
   26bed:      	int3
   26bee:      	int3
   26bef:      	int3

0000000000026bf0 <core::ptr::read_volatile::he758213cdcfa78cc>:
   26bf0:      	subq	$0x28, %rsp
   26bf4:      	movq	%rdi, (%rsp)
   26bf8:      	movq	%rdi, 0x10(%rsp)
   26bfd:      	movb	$0x1, %al
   26bff:      	testb	$0x1, %al
   26c01:      	jne	0x26c19 <core::ptr::read_volatile::he758213cdcfa78cc+0x29>
   26c03:      	movq	(%rsp), %rax
   26c07:      	movq	(%rax), %rax
   26c0a:      	movq	%rax, 0x18(%rsp)
   26c0f:      	movq	0x18(%rsp), %rax
   26c14:      	addq	$0x28, %rsp
   26c18:      	retq
   26c19:      	movq	(%rsp), %rax
   26c1d:      	movq	%rax, 0x8(%rsp)
   26c22:      	movq	0x8(%rsp), %rdi
   26c27:      	movq	%rdi, 0x20(%rsp)
   26c2c:      	movq	0x14de5(%rip), %rax     # 0x3ba18 <zlgk82z0l71lvh9+0x3ba18>
   26c33:      	callq	*%rax
   26c35:      	testb	$0x1, %al
   26c37:      	jne	0x26c50 <core::ptr::read_volatile::he758213cdcfa78cc+0x60>
   26c39:      	leaq	-0x14726(%rip), %rdi    # 0x1251a <str.4+0x24a>
   26c40:      	movq	0x14529(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   26c47:      	movl	$0x6e, %esi
   26c4c:      	callq	*%rax
   26c4e:      	ud2
   26c50:      	jmp	0x26c03 <core::ptr::read_volatile::he758213cdcfa78cc+0x13>
   26c52:      	int3
   26c53:      	int3
   26c54:      	int3
   26c55:      	int3
   26c56:      	int3
   26c57:      	int3
   26c58:      	int3
   26c59:      	int3
   26c5a:      	int3
   26c5b:      	int3
   26c5c:      	int3
   26c5d:      	int3
   26c5e:      	int3
   26c5f:      	int3

0000000000026c60 <core::ptr::align_offset::hd0fdf366e7cc77a9>:
   26c60:      	subq	$0xe8, %rsp
   26c67:      	movq	%rsi, 0x28(%rsp)
   26c6c:      	movq	%rdi, 0x30(%rsp)
   26c71:      	movq	%rdi, 0x50(%rsp)
   26c76:      	movq	%rsi, 0x58(%rsp)
   26c7b:      	movq	$0x1, 0x60(%rsp)
   26c84:      	movq	%rdi, 0x68(%rsp)
   26c89:      	subq	$0x1, %rsi
   26c8d:      	movq	%rsi, 0x38(%rsp)
   26c92:      	movq	%rsi, 0x70(%rsp)
   26c97:      	movl	$0x1, %eax
   26c9c:      	cmpq	$0x0, %rax
   26ca0:      	jne	0x26cbc <core::ptr::align_offset::hd0fdf366e7cc77a9+0x5c>
   26ca2:      	movq	0x38(%rsp), %rcx
   26ca7:      	movq	0x30(%rsp), %rax
   26cac:      	andq	%rcx, %rax
   26caf:      	movq	%rax, 0x78(%rsp)
   26cb4:      	cmpq	$0x0, %rax
   26cb8:      	je	0x26cd5 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x75>
   26cba:      	jmp	0x26ce0 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x80>
   26cbc:      	movq	0x28(%rsp), %rax
   26cc1:      	andq	$0x0, %rax
   26cc5:      	movq	%rax, 0x80(%rsp)
   26ccd:      	cmpq	$0x0, %rax
   26cd1:      	je	0x26cf6 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x96>
   26cd3:      	jmp	0x26d3f <core::ptr::align_offset::hd0fdf366e7cc77a9+0xdf>
   26cd5:      	movq	$0x0, 0x40(%rsp)
   26cde:      	jmp	0x26ce9 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x89>
   26ce0:      	movq	$-0x1, 0x40(%rsp)
   26ce9:      	movq	0x40(%rsp), %rax
   26cee:      	addq	$0xe8, %rsp
   26cf5:      	retq
   26cf6:      	movq	0x30(%rsp), %rax
   26cfb:      	movq	0x28(%rsp), %rsi
   26d00:      	movq	0x38(%rsp), %rdx
   26d05:      	movq	%rax, %rcx
   26d08:      	addq	%rdx, %rcx
   26d0b:      	xorl	%edx, %edx
   26d0d:      	subq	%rsi, %rdx
   26d10:      	andq	%rdx, %rcx
   26d13:      	movq	%rcx, 0x88(%rsp)
   26d1b:      	subq	%rax, %rcx
   26d1e:      	movq	%rcx, 0x20(%rsp)
   26d23:      	movq	%rcx, 0x90(%rsp)
   26d2b:      	andq	$0x0, %rax
   26d2f:      	movq	%rax, 0x98(%rsp)
   26d37:      	cmpq	$0x0, %rax
   26d3b:      	je	0x26d8c <core::ptr::align_offset::hd0fdf366e7cc77a9+0x12c>
   26d3d:      	jmp	0x26d9f <core::ptr::align_offset::hd0fdf366e7cc77a9+0x13f>
   26d3f:      	movq	0x28(%rsp), %rcx
   26d44:      	xorl	%eax, %eax
   26d46:      	movq	%rax, 0xa0(%rsp)
   26d4e:      	movq	0xa0(%rsp), %rax
   26d56:      	movq	%rax, 0x10(%rsp)
   26d5b:      	movq	%rax, 0xa8(%rsp)
   26d63:      	tzcntq	%rcx, %rcx
   26d68:      	movq	%rcx, 0xb0(%rsp)
   26d70:      	movq	0xb0(%rsp), %rcx
   26d78:      	movq	%rcx, 0x18(%rsp)
   26d7d:      	movq	%rcx, 0xb8(%rsp)
   26d85:      	cmpq	%rcx, %rax
   26d88:      	jb	0x26db9 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x159>
   26d8a:      	jmp	0x26dad <core::ptr::align_offset::hd0fdf366e7cc77a9+0x14d>
   26d8c:      	movq	0x20(%rsp), %rax
   26d91:      	shrq	$0x0, %rax
   26d95:      	movq	%rax, 0x40(%rsp)
   26d9a:      	jmp	0x26ce9 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x89>
   26d9f:      	movq	$-0x1, 0x40(%rsp)
   26da8:      	jmp	0x26ce9 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x89>
   26dad:      	movq	0x18(%rsp), %rax
   26db2:      	movq	%rax, 0x48(%rsp)
   26db7:      	jmp	0x26dc3 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x163>
   26db9:      	movq	0x10(%rsp), %rax
   26dbe:      	movq	%rax, 0x48(%rsp)
   26dc3:      	movq	0x30(%rsp), %rax
   26dc8:      	movq	0x48(%rsp), %rcx
   26dcd:      	movl	$0x1, %edx
   26dd2:      	shlq	%cl, %rdx
   26dd5:      	movq	%rdx, %rcx
   26dd8:      	movq	%rcx, 0xc0(%rsp)
   26de0:      	subq	$0x1, %rcx
   26de4:      	andq	%rcx, %rax
   26de7:      	cmpq	$0x0, %rax
   26deb:      	jne	0x26e7f <core::ptr::align_offset::hd0fdf366e7cc77a9+0x21f>
   26df1:      	movq	0x38(%rsp), %rdi
   26df6:      	movq	0x30(%rsp), %rax
   26dfb:      	movq	0x28(%rsp), %rsi
   26e00:      	movq	0x48(%rsp), %rcx
   26e05:      	shrq	%cl, %rsi
   26e08:      	movq	%rsi, 0xc8(%rsp)
   26e10:      	movq	%rsi, %rcx
   26e13:      	subq	$0x1, %rcx
   26e17:      	movq	%rcx, (%rsp)
   26e1b:      	movq	%rcx, 0xd0(%rsp)
   26e23:      	andq	$0x1, %rdi
   26e27:      	movq	0x48(%rsp), %rcx
   26e2c:      	shrq	%cl, %rdi
   26e2f:      	movq	0x38(%rsp), %rcx
   26e34:      	movq	%rdi, 0xd8(%rsp)
   26e3c:      	andq	%rcx, %rax
   26e3f:      	movq	0x48(%rsp), %rcx
   26e44:      	shrq	%cl, %rax
   26e47:      	movq	%rax, %rcx
   26e4a:      	movq	%rsi, %rax
   26e4d:      	subq	%rcx, %rax
   26e50:      	movq	%rax, 0x8(%rsp)
   26e55:      	movq	%rax, 0xe0(%rsp)
   26e5d:      	callq	0x26e90 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a>
   26e62:      	movq	(%rsp), %rcx
   26e66:      	movq	%rax, %rdx
   26e69:      	movq	0x8(%rsp), %rax
   26e6e:      	imulq	%rdx, %rax
   26e72:      	andq	%rcx, %rax
   26e75:      	movq	%rax, 0x40(%rsp)
   26e7a:      	jmp	0x26ce9 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x89>
   26e7f:      	movq	$-0x1, 0x40(%rsp)
   26e88:      	jmp	0x26ce9 <core::ptr::align_offset::hd0fdf366e7cc77a9+0x89>
   26e8d:      	int3
   26e8e:      	int3
   26e8f:      	int3

0000000000026e90 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a>:
   26e90:      	subq	$0x68, %rsp
   26e94:      	movq	%rsi, 0x8(%rsp)
   26e99:      	movq	%rdi, %rax
   26e9c:      	movq	%rax, 0x10(%rsp)
   26ea1:      	movq	%rax, 0x40(%rsp)
   26ea6:      	movq	%rsi, 0x48(%rsp)
   26eab:      	decq	%rsi
   26eae:      	movq	%rsi, 0x18(%rsp)
   26eb3:      	movq	%rsi, 0x50(%rsp)
   26eb8:      	movb	-0x18b0e(%rip), %cl     # 0xe3b0 <zlgk82z0l71lvh9+0xe3b0>
   26ebe:      	movb	-0x18b13(%rip), %dl     # 0xe3b1 <zlgk82z0l71lvh9+0xe3b1>
   26ec4:      	movb	-0x18b19(%rip), %sil    # 0xe3b2 <zlgk82z0l71lvh9+0xe3b2>
   26ecb:      	movb	-0x18b1f(%rip), %dil    # 0xe3b3 <zlgk82z0l71lvh9+0xe3b3>
   26ed2:      	movb	-0x18b25(%rip), %r8b    # 0xe3b4 <zlgk82z0l71lvh9+0xe3b4>
   26ed9:      	movb	-0x18b2b(%rip), %r9b    # 0xe3b5 <zlgk82z0l71lvh9+0xe3b5>
   26ee0:      	movb	-0x18b31(%rip), %r10b   # 0xe3b6 <zlgk82z0l71lvh9+0xe3b6>
   26ee7:      	movb	-0x18b37(%rip), %r11b   # 0xe3b7 <zlgk82z0l71lvh9+0xe3b7>
   26eee:      	movb	%r11b, 0x37(%rsp)
   26ef3:      	movb	%r10b, 0x36(%rsp)
   26ef8:      	movb	%r9b, 0x35(%rsp)
   26efd:      	movb	%r8b, 0x34(%rsp)
   26f02:      	movb	%dil, 0x33(%rsp)
   26f07:      	movb	%sil, 0x32(%rsp)
   26f0c:      	movb	%dl, 0x31(%rsp)
   26f10:      	movb	%cl, 0x30(%rsp)
   26f14:      	andq	$0xf, %rax
   26f18:      	shrq	%rax
   26f1b:      	movq	%rax, 0x20(%rsp)
   26f20:      	cmpq	$0x8, %rax
   26f24:      	setb	%al
   26f27:      	testb	$0x1, %al
   26f29:      	jne	0x26f2d <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a+0x9d>
   26f2b:      	jmp	0x26f47 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a+0xb7>
   26f2d:      	movq	0x20(%rsp), %rax
   26f32:      	movzbl	0x30(%rsp,%rax), %eax
   26f37:      	movq	%rax, 0x28(%rsp)
   26f3c:      	movq	$0x10, 0x38(%rsp)
   26f45:      	jmp	0x26f63 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a+0xd3>
   26f47:      	movq	0x20(%rsp), %rdi
   26f4c:      	leaq	0x132f5(%rip), %rdx     # 0x3a248 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x348>
   26f53:      	movq	0x140be(%rip), %rax     # 0x3b018 <zlgk82z0l71lvh9+0x3b018>
   26f5a:      	movl	$0x8, %esi
   26f5f:      	callq	*%rax
   26f61:      	ud2
   26f63:      	movq	0x8(%rsp), %rax
   26f68:      	cmpq	%rax, 0x38(%rsp)
   26f6d:      	jae	0x26fb8 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a+0x128>
   26f6f:      	movq	0x10(%rsp), %rdx
   26f74:      	movq	0x28(%rsp), %rax
   26f79:      	imulq	0x28(%rsp), %rdx
   26f7f:      	movl	$0x2, %ecx
   26f84:      	subq	%rdx, %rcx
   26f87:      	imulq	%rcx, %rax
   26f8b:      	movq	%rax, 0x28(%rsp)
   26f90:      	movq	0x38(%rsp), %rax
   26f95:      	mulq	0x38(%rsp)
   26f9a:      	movq	%rax, %rcx
   26f9d:      	movq	%rcx, (%rsp)
   26fa1:      	seto	%al
   26fa4:      	movq	%rcx, 0x58(%rsp)
   26fa9:      	movb	%al, %cl
   26fab:      	andb	$0x1, %cl
   26fae:      	movb	%cl, 0x67(%rsp)
   26fb2:      	testb	$0x1, %al
   26fb4:      	jne	0x26fb8 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a+0x128>
   26fb6:      	jmp	0x26fc7 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a+0x137>
   26fb8:      	movq	0x18(%rsp), %rax
   26fbd:      	andq	0x28(%rsp), %rax
   26fc2:      	addq	$0x68, %rsp
   26fc6:      	retq
   26fc7:      	movq	(%rsp), %rax
   26fcb:      	movq	%rax, 0x38(%rsp)
   26fd0:      	jmp	0x26f63 <core::ptr::align_offset::mod_inv::h8f8cdfeee1497c7a+0xd3>
   26fd2:      	int3
   26fd3:      	int3
   26fd4:      	int3
   26fd5:      	int3
   26fd6:      	int3
   26fd7:      	int3
   26fd8:      	int3
   26fd9:      	int3
   26fda:      	int3
   26fdb:      	int3
   26fdc:      	int3
   26fdd:      	int3
   26fde:      	int3
   26fdf:      	int3

0000000000026fe0 <core::slice::index::<impl core::ops::index::Index<I> for [T]>::index::h44cfbee13974e965>:
   26fe0:      	subq	$0x38, %rsp
   26fe4:      	movq	%rcx, 0x8(%rsp)
   26fe9:      	movq	%rdx, 0x10(%rsp)
   26fee:      	movq	%rsi, %rcx
   26ff1:      	movq	0x8(%rsp), %rsi
   26ff6:      	movq	%rdi, %rdx
   26ff9:      	movq	0x10(%rsp), %rdi
   26ffe:      	movq	%rdx, 0x18(%rsp)
   27003:      	movq	%rcx, 0x20(%rsp)
   27008:      	movq	%rdi, 0x28(%rsp)
   2700d:      	movq	%rsi, 0x30(%rsp)
   27012:      	movq	0x14a07(%rip), %rax     # 0x3ba20 <zlgk82z0l71lvh9+0x3ba20>
   27019:      	callq	*%rax
   2701b:      	addq	$0x38, %rsp
   2701f:      	retq

0000000000027020 <core::slice::index::<impl core::ops::index::Index<I> for [T]>::index::h64e4a4d65937aa99>:
   27020:      	subq	$0x28, %rsp
   27024:      	movq	%rdx, 0x8(%rsp)
   27029:      	movq	%rsi, %rdx
   2702c:      	movq	%rdi, %rsi
   2702f:      	movq	0x8(%rsp), %rdi
   27034:      	movq	%rsi, 0x10(%rsp)
   27039:      	movq	%rdx, 0x18(%rsp)
   2703e:      	movq	%rdi, 0x20(%rsp)
   27043:      	movq	0x149de(%rip), %rax     # 0x3ba28 <zlgk82z0l71lvh9+0x3ba28>
   2704a:      	callq	*%rax
   2704c:      	addq	$0x28, %rsp
   27050:      	retq
   27051:      	int3
   27052:      	int3
   27053:      	int3
   27054:      	int3
   27055:      	int3
   27056:      	int3
   27057:      	int3
   27058:      	int3
   27059:      	int3
   2705a:      	int3
   2705b:      	int3
   2705c:      	int3
   2705d:      	int3
   2705e:      	int3
   2705f:      	int3

0000000000027060 <core::slice::index::<impl core::ops::index::Index<I> for [T]>::index::h78b75f99dff279ab>:
   27060:      	subq	$0x28, %rsp
   27064:      	movq	%rdx, 0x8(%rsp)
   27069:      	movq	%rsi, %rdx
   2706c:      	movq	%rdi, %rsi
   2706f:      	movq	0x8(%rsp), %rdi
   27074:      	movq	%rsi, 0x10(%rsp)
   27079:      	movq	%rdx, 0x18(%rsp)
   2707e:      	movq	%rdi, 0x20(%rsp)
   27083:      	movq	0x149a6(%rip), %rax     # 0x3ba30 <zlgk82z0l71lvh9+0x3ba30>
   2708a:      	callq	*%rax
   2708c:      	addq	$0x28, %rsp
   27090:      	retq
   27091:      	int3
   27092:      	int3
   27093:      	int3
   27094:      	int3
   27095:      	int3
   27096:      	int3
   27097:      	int3
   27098:      	int3
   27099:      	int3
   2709a:      	int3
   2709b:      	int3
   2709c:      	int3
   2709d:      	int3
   2709e:      	int3
   2709f:      	int3

00000000000270a0 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h23c263bb1e23e41c>:
   270a0:      	subq	$0x18, %rsp
   270a4:      	movq	%rdi, (%rsp)
   270a8:      	movq	%rsi, 0x8(%rsp)
   270ad:      	movq	0x14984(%rip), %rax     # 0x3ba38 <zlgk82z0l71lvh9+0x3ba38>
   270b4:      	callq	*%rax
   270b6:      	addq	$0x18, %rsp
   270ba:      	retq
   270bb:      	int3
   270bc:      	int3
   270bd:      	int3
   270be:      	int3
   270bf:      	int3

00000000000270c0 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::hd32d609b68817baa>:
   270c0:      	subq	$0x28, %rsp
   270c4:      	movq	%rdx, 0x8(%rsp)
   270c9:      	movq	%rsi, %rdx
   270cc:      	movq	%rdi, %rsi
   270cf:      	movq	0x8(%rsp), %rdi
   270d4:      	movq	%rsi, 0x10(%rsp)
   270d9:      	movq	%rdx, 0x18(%rsp)
   270de:      	movq	%rdi, 0x20(%rsp)
   270e3:      	movq	0x14956(%rip), %rax     # 0x3ba40 <zlgk82z0l71lvh9+0x3ba40>
   270ea:      	callq	*%rax
   270ec:      	addq	$0x28, %rsp
   270f0:      	retq
   270f1:      	int3
   270f2:      	int3
   270f3:      	int3
   270f4:      	int3
   270f5:      	int3
   270f6:      	int3
   270f7:      	int3
   270f8:      	int3
   270f9:      	int3
   270fa:      	int3
   270fb:      	int3
   270fc:      	int3
   270fd:      	int3
   270fe:      	int3
   270ff:      	int3

0000000000027100 <core::slice::index::slice_start_index_len_fail::h0d6296d14baae32e>:
   27100:      	subq	$0x28, %rsp
   27104:      	movq	%rdi, 0x18(%rsp)
   27109:      	movq	%rsi, 0x20(%rsp)
   2710e:      	movq	%rdi, 0x8(%rsp)
   27113:      	movq	%rsi, 0x10(%rsp)
   27118:      	movq	0x8(%rsp), %rdi
   2711d:      	movq	0x10(%rsp), %rsi
   27122:      	callq	0x27130 <core::slice::index::slice_start_index_len_fail_rt::ha3aa828156bb6a11>
   27127:      	ud2
   27129:      	int3
   2712a:      	int3
   2712b:      	int3
   2712c:      	int3
   2712d:      	int3
   2712e:      	int3
   2712f:      	int3

0000000000027130 <core::slice::index::slice_start_index_len_fail_rt::ha3aa828156bb6a11>:
   27130:      	subq	$0xc8, %rsp
   27137:      	movq	%rdx, 0x10(%rsp)
   2713c:      	movq	%rdi, 0x18(%rsp)
   27141:      	movq	%rsi, 0x20(%rsp)
   27146:      	leaq	0x18(%rsp), %rcx
   2714b:      	movq	%rcx, 0xa0(%rsp)
   27153:      	movq	%rcx, 0xb8(%rsp)
   2715b:      	movq	0x14156(%rip), %rax     # 0x3b2b8 <zlgk82z0l71lvh9+0x3b2b8>
   27162:      	movq	%rax, 0xc0(%rsp)
   2716a:      	movq	%rcx, 0xa8(%rsp)
   27172:      	movq	%rax, 0xb0(%rsp)
   2717a:      	movq	0xa8(%rsp), %rsi
   27182:      	movq	0xb0(%rsp), %rdx
   2718a:      	leaq	0x20(%rsp), %rcx
   2718f:      	movq	%rcx, 0x78(%rsp)
   27194:      	movq	%rcx, 0x90(%rsp)
   2719c:      	movq	%rax, 0x98(%rsp)
   271a4:      	movq	%rcx, 0x80(%rsp)
   271ac:      	movq	%rax, 0x88(%rsp)
   271b4:      	movq	0x80(%rsp), %rcx
   271bc:      	movq	0x88(%rsp), %rax
   271c4:      	movq	%rsi, 0x58(%rsp)
   271c9:      	movq	%rdx, 0x60(%rsp)
   271ce:      	movq	%rcx, 0x68(%rsp)
   271d3:      	movq	%rax, 0x70(%rsp)
   271d8:      	leaq	0x13081(%rip), %rsi     # 0x3a260 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x360>
   271df:      	leaq	0x28(%rsp), %rdi
   271e4:      	movq	%rdi, 0x8(%rsp)
   271e9:      	leaq	0x58(%rsp), %rcx
   271ee:      	movl	$0x2, %r8d
   271f4:      	movq	%r8, %rdx
   271f7:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   271fc:      	movq	0x8(%rsp), %rdi
   27201:      	movq	0x10(%rsp), %rsi
   27206:      	movq	0x13cb3(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2720d:      	callq	*%rax
   2720f:      	ud2
   27211:      	int3
   27212:      	int3
   27213:      	int3
   27214:      	int3
   27215:      	int3
   27216:      	int3
   27217:      	int3
   27218:      	int3
   27219:      	int3
   2721a:      	int3
   2721b:      	int3
   2721c:      	int3
   2721d:      	int3
   2721e:      	int3
   2721f:      	int3

0000000000027220 <core::slice::index::slice_end_index_len_fail::hc35eaa136c8c49e2>:
   27220:      	subq	$0x28, %rsp
   27224:      	movq	%rdi, 0x18(%rsp)
   27229:      	movq	%rsi, 0x20(%rsp)
   2722e:      	movq	%rdi, 0x8(%rsp)
   27233:      	movq	%rsi, 0x10(%rsp)
   27238:      	movq	0x8(%rsp), %rdi
   2723d:      	movq	0x10(%rsp), %rsi
   27242:      	callq	0x27250 <core::slice::index::slice_end_index_len_fail_rt::h56b49beb89a508f8>
   27247:      	ud2
   27249:      	int3
   2724a:      	int3
   2724b:      	int3
   2724c:      	int3
   2724d:      	int3
   2724e:      	int3
   2724f:      	int3

0000000000027250 <core::slice::index::slice_end_index_len_fail_rt::h56b49beb89a508f8>:
   27250:      	subq	$0xc8, %rsp
   27257:      	movq	%rdx, 0x10(%rsp)
   2725c:      	movq	%rdi, 0x18(%rsp)
   27261:      	movq	%rsi, 0x20(%rsp)
   27266:      	leaq	0x18(%rsp), %rcx
   2726b:      	movq	%rcx, 0xa0(%rsp)
   27273:      	movq	%rcx, 0xb8(%rsp)
   2727b:      	movq	0x14036(%rip), %rax     # 0x3b2b8 <zlgk82z0l71lvh9+0x3b2b8>
   27282:      	movq	%rax, 0xc0(%rsp)
   2728a:      	movq	%rcx, 0xa8(%rsp)
   27292:      	movq	%rax, 0xb0(%rsp)
   2729a:      	movq	0xa8(%rsp), %rsi
   272a2:      	movq	0xb0(%rsp), %rdx
   272aa:      	leaq	0x20(%rsp), %rcx
   272af:      	movq	%rcx, 0x78(%rsp)
   272b4:      	movq	%rcx, 0x90(%rsp)
   272bc:      	movq	%rax, 0x98(%rsp)
   272c4:      	movq	%rcx, 0x80(%rsp)
   272cc:      	movq	%rax, 0x88(%rsp)
   272d4:      	movq	0x80(%rsp), %rcx
   272dc:      	movq	0x88(%rsp), %rax
   272e4:      	movq	%rsi, 0x58(%rsp)
   272e9:      	movq	%rdx, 0x60(%rsp)
   272ee:      	movq	%rcx, 0x68(%rsp)
   272f3:      	movq	%rax, 0x70(%rsp)
   272f8:      	leaq	0x12f81(%rip), %rsi     # 0x3a280 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x380>
   272ff:      	leaq	0x28(%rsp), %rdi
   27304:      	movq	%rdi, 0x8(%rsp)
   27309:      	leaq	0x58(%rsp), %rcx
   2730e:      	movl	$0x2, %r8d
   27314:      	movq	%r8, %rdx
   27317:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   2731c:      	movq	0x8(%rsp), %rdi
   27321:      	movq	0x10(%rsp), %rsi
   27326:      	movq	0x13b93(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2732d:      	callq	*%rax
   2732f:      	ud2
   27331:      	int3
   27332:      	int3
   27333:      	int3
   27334:      	int3
   27335:      	int3
   27336:      	int3
   27337:      	int3
   27338:      	int3
   27339:      	int3
   2733a:      	int3
   2733b:      	int3
   2733c:      	int3
   2733d:      	int3
   2733e:      	int3
   2733f:      	int3

0000000000027340 <core::slice::index::slice_index_order_fail::h07b5574f4ebb8cc8>:
   27340:      	subq	$0x28, %rsp
   27344:      	movq	%rdi, 0x18(%rsp)
   27349:      	movq	%rsi, 0x20(%rsp)
   2734e:      	movq	%rdi, 0x8(%rsp)
   27353:      	movq	%rsi, 0x10(%rsp)
   27358:      	movq	0x8(%rsp), %rdi
   2735d:      	movq	0x10(%rsp), %rsi
   27362:      	callq	0x27370 <core::slice::index::slice_index_order_fail_rt::h602774f1e6818dd1>
   27367:      	ud2
   27369:      	int3
   2736a:      	int3
   2736b:      	int3
   2736c:      	int3
   2736d:      	int3
   2736e:      	int3
   2736f:      	int3

0000000000027370 <core::slice::index::slice_index_order_fail_rt::h602774f1e6818dd1>:
   27370:      	subq	$0xc8, %rsp
   27377:      	movq	%rdx, 0x10(%rsp)
   2737c:      	movq	%rdi, 0x18(%rsp)
   27381:      	movq	%rsi, 0x20(%rsp)
   27386:      	leaq	0x18(%rsp), %rcx
   2738b:      	movq	%rcx, 0xa0(%rsp)
   27393:      	movq	%rcx, 0xb8(%rsp)
   2739b:      	movq	0x13f16(%rip), %rax     # 0x3b2b8 <zlgk82z0l71lvh9+0x3b2b8>
   273a2:      	movq	%rax, 0xc0(%rsp)
   273aa:      	movq	%rcx, 0xa8(%rsp)
   273b2:      	movq	%rax, 0xb0(%rsp)
   273ba:      	movq	0xa8(%rsp), %rsi
   273c2:      	movq	0xb0(%rsp), %rdx
   273ca:      	leaq	0x20(%rsp), %rcx
   273cf:      	movq	%rcx, 0x78(%rsp)
   273d4:      	movq	%rcx, 0x90(%rsp)
   273dc:      	movq	%rax, 0x98(%rsp)
   273e4:      	movq	%rcx, 0x80(%rsp)
   273ec:      	movq	%rax, 0x88(%rsp)
   273f4:      	movq	0x80(%rsp), %rcx
   273fc:      	movq	0x88(%rsp), %rax
   27404:      	movq	%rsi, 0x58(%rsp)
   27409:      	movq	%rdx, 0x60(%rsp)
   2740e:      	movq	%rcx, 0x68(%rsp)
   27413:      	movq	%rax, 0x70(%rsp)
   27418:      	leaq	0x12e81(%rip), %rsi     # 0x3a2a0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x3a0>
   2741f:      	leaq	0x28(%rsp), %rdi
   27424:      	movq	%rdi, 0x8(%rsp)
   27429:      	leaq	0x58(%rsp), %rcx
   2742e:      	movl	$0x2, %r8d
   27434:      	movq	%r8, %rdx
   27437:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   2743c:      	movq	0x8(%rsp), %rdi
   27441:      	movq	0x10(%rsp), %rsi
   27446:      	movq	0x13a73(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2744d:      	callq	*%rax
   2744f:      	ud2
   27451:      	int3
   27452:      	int3
   27453:      	int3
   27454:      	int3
   27455:      	int3
   27456:      	int3
   27457:      	int3
   27458:      	int3
   27459:      	int3
   2745a:      	int3
   2745b:      	int3
   2745c:      	int3
   2745d:      	int3
   2745e:      	int3
   2745f:      	int3

0000000000027460 <<usize as core::slice::index::SliceIndex<[T]>>::get::h1e510cab72bc3671>:
   27460:      	subq	$0x38, %rsp
   27464:      	movq	%rdx, (%rsp)
   27468:      	movq	%rsi, 0x8(%rsp)
   2746d:      	movq	%rdi, 0x10(%rsp)
   27472:      	movq	%rdi, 0x20(%rsp)
   27477:      	movq	%rsi, 0x28(%rsp)
   2747c:      	movq	%rdx, 0x30(%rsp)
   27481:      	cmpq	%rdx, %rdi
   27484:      	jb	0x27491 <<usize as core::slice::index::SliceIndex<[T]>>::get::h1e510cab72bc3671+0x31>
   27486:      	movq	$0x0, 0x18(%rsp)
   2748f:      	jmp	0x274ad <<usize as core::slice::index::SliceIndex<[T]>>::get::h1e510cab72bc3671+0x4d>
   27491:      	movq	(%rsp), %rdx
   27495:      	movq	0x8(%rsp), %rsi
   2749a:      	movq	0x10(%rsp), %rdi
   2749f:      	movq	0x145aa(%rip), %rax     # 0x3ba50 <zlgk82z0l71lvh9+0x3ba50>
   274a6:      	callq	*%rax
   274a8:      	movq	%rax, 0x18(%rsp)
   274ad:      	movq	0x18(%rsp), %rax
   274b2:      	addq	$0x38, %rsp
   274b6:      	retq
   274b7:      	int3
   274b8:      	int3
   274b9:      	int3
   274ba:      	int3
   274bb:      	int3
   274bc:      	int3
   274bd:      	int3
   274be:      	int3
   274bf:      	int3

00000000000274c0 <<usize as core::slice::index::SliceIndex<[T]>>::get::hcc3fe6bb3e1810fb>:
   274c0:      	subq	$0x38, %rsp
   274c4:      	movq	%rdx, (%rsp)
   274c8:      	movq	%rsi, 0x8(%rsp)
   274cd:      	movq	%rdi, 0x10(%rsp)
   274d2:      	movq	%rdi, 0x20(%rsp)
   274d7:      	movq	%rsi, 0x28(%rsp)
   274dc:      	movq	%rdx, 0x30(%rsp)
   274e1:      	cmpq	%rdx, %rdi
   274e4:      	jb	0x274f1 <<usize as core::slice::index::SliceIndex<[T]>>::get::hcc3fe6bb3e1810fb+0x31>
   274e6:      	movq	$0x0, 0x18(%rsp)
   274ef:      	jmp	0x2750d <<usize as core::slice::index::SliceIndex<[T]>>::get::hcc3fe6bb3e1810fb+0x4d>
   274f1:      	movq	(%rsp), %rdx
   274f5:      	movq	0x8(%rsp), %rsi
   274fa:      	movq	0x10(%rsp), %rdi
   274ff:      	movq	0x1455a(%rip), %rax     # 0x3ba60 <zlgk82z0l71lvh9+0x3ba60>
   27506:      	callq	*%rax
   27508:      	movq	%rax, 0x18(%rsp)
   2750d:      	movq	0x18(%rsp), %rax
   27512:      	addq	$0x38, %rsp
   27516:      	retq
   27517:      	int3
   27518:      	int3
   27519:      	int3
   2751a:      	int3
   2751b:      	int3
   2751c:      	int3
   2751d:      	int3
   2751e:      	int3
   2751f:      	int3

0000000000027520 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h0aae74ed6a1c7b04>:
   27520:      	subq	$0x78, %rsp
   27524:      	movq	%rdx, 0x8(%rsp)
   27529:      	movq	%rsi, 0x10(%rsp)
   2752e:      	movq	%rdi, 0x18(%rsp)
   27533:      	movq	%rdi, 0x38(%rsp)
   27538:      	movq	%rsi, 0x40(%rsp)
   2753d:      	movq	%rdx, 0x48(%rsp)
   27542:      	movb	$0x1, %al
   27544:      	testb	$0x1, %al
   27546:      	jne	0x27576 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h0aae74ed6a1c7b04+0x56>
   27548:      	movq	0x8(%rsp), %rsi
   2754d:      	movq	0x10(%rsp), %rdi
   27552:      	movq	0x14447(%rip), %rax     # 0x3b9a0 <zlgk82z0l71lvh9+0x3b9a0>
   27559:      	callq	*%rax
   2755b:      	movq	0x18(%rsp), %rcx
   27560:      	movq	%rax, 0x50(%rsp)
   27565:      	movq	%rcx, 0x58(%rsp)
   2756a:      	shlq	$0x4, %rcx
   2756e:      	addq	%rcx, %rax
   27571:      	addq	$0x78, %rsp
   27575:      	retq
   27576:      	movq	0x8(%rsp), %rax
   2757b:      	movq	0x10(%rsp), %rcx
   27580:      	movq	0x18(%rsp), %rdx
   27585:      	movq	%rdx, 0x20(%rsp)
   2758a:      	movq	%rcx, 0x28(%rsp)
   2758f:      	movq	%rax, 0x30(%rsp)
   27594:      	movq	0x20(%rsp), %rax
   27599:      	movq	%rax, (%rsp)
   2759d:      	movq	0x28(%rsp), %rdi
   275a2:      	movq	0x30(%rsp), %rsi
   275a7:      	movq	%rax, 0x60(%rsp)
   275ac:      	movq	%rdi, 0x68(%rsp)
   275b1:      	movq	%rsi, 0x70(%rsp)
   275b6:      	movq	0x143d3(%rip), %rax     # 0x3b990 <zlgk82z0l71lvh9+0x3b990>
   275bd:      	callq	*%rax
   275bf:      	movq	%rax, %rcx
   275c2:      	movq	(%rsp), %rax
   275c6:      	cmpq	%rcx, %rax
   275c9:      	jb	0x275e2 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h0aae74ed6a1c7b04+0xc2>
   275cb:      	leaq	-0x1504a(%rip), %rdi    # 0x12588 <str.4+0x2b8>
   275d2:      	movq	0x13b97(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   275d9:      	movl	$0x61, %esi
   275de:      	callq	*%rax
   275e0:      	ud2
   275e2:      	jmp	0x27548 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h0aae74ed6a1c7b04+0x28>
   275e7:      	int3
   275e8:      	int3
   275e9:      	int3
   275ea:      	int3
   275eb:      	int3
   275ec:      	int3
   275ed:      	int3
   275ee:      	int3
   275ef:      	int3

00000000000275f0 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h28d32f557e68ec65>:
   275f0:      	subq	$0x78, %rsp
   275f4:      	movq	%rdx, 0x8(%rsp)
   275f9:      	movq	%rsi, 0x10(%rsp)
   275fe:      	movq	%rdi, 0x18(%rsp)
   27603:      	movq	%rdi, 0x38(%rsp)
   27608:      	movq	%rsi, 0x40(%rsp)
   2760d:      	movq	%rdx, 0x48(%rsp)
   27612:      	movb	$0x1, %al
   27614:      	testb	$0x1, %al
   27616:      	jne	0x27646 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h28d32f557e68ec65+0x56>
   27618:      	movq	0x8(%rsp), %rsi
   2761d:      	movq	0x10(%rsp), %rdi
   27622:      	movq	0x14447(%rip), %rax     # 0x3ba70 <zlgk82z0l71lvh9+0x3ba70>
   27629:      	callq	*%rax
   2762b:      	movq	0x18(%rsp), %rcx
   27630:      	movq	%rax, 0x50(%rsp)
   27635:      	movq	%rcx, 0x58(%rsp)
   2763a:      	shlq	$0x4, %rcx
   2763e:      	addq	%rcx, %rax
   27641:      	addq	$0x78, %rsp
   27645:      	retq
   27646:      	movq	0x8(%rsp), %rax
   2764b:      	movq	0x10(%rsp), %rcx
   27650:      	movq	0x18(%rsp), %rdx
   27655:      	movq	%rdx, 0x20(%rsp)
   2765a:      	movq	%rcx, 0x28(%rsp)
   2765f:      	movq	%rax, 0x30(%rsp)
   27664:      	movq	0x20(%rsp), %rax
   27669:      	movq	%rax, (%rsp)
   2766d:      	movq	0x28(%rsp), %rdi
   27672:      	movq	0x30(%rsp), %rsi
   27677:      	movq	%rax, 0x60(%rsp)
   2767c:      	movq	%rdi, 0x68(%rsp)
   27681:      	movq	%rsi, 0x70(%rsp)
   27686:      	movq	0x143eb(%rip), %rax     # 0x3ba78 <zlgk82z0l71lvh9+0x3ba78>
   2768d:      	callq	*%rax
   2768f:      	movq	%rax, %rcx
   27692:      	movq	(%rsp), %rax
   27696:      	cmpq	%rcx, %rax
   27699:      	jb	0x276b2 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h28d32f557e68ec65+0xc2>
   2769b:      	leaq	-0x1511a(%rip), %rdi    # 0x12588 <str.4+0x2b8>
   276a2:      	movq	0x13ac7(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   276a9:      	movl	$0x61, %esi
   276ae:      	callq	*%rax
   276b0:      	ud2
   276b2:      	jmp	0x27618 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::h28d32f557e68ec65+0x28>
   276b7:      	int3
   276b8:      	int3
   276b9:      	int3
   276ba:      	int3
   276bb:      	int3
   276bc:      	int3
   276bd:      	int3
   276be:      	int3
   276bf:      	int3

00000000000276c0 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::he178469b9de192f7>:
   276c0:      	subq	$0x78, %rsp
   276c4:      	movq	%rdx, 0x8(%rsp)
   276c9:      	movq	%rsi, 0x10(%rsp)
   276ce:      	movq	%rdi, 0x18(%rsp)
   276d3:      	movq	%rdi, 0x38(%rsp)
   276d8:      	movq	%rsi, 0x40(%rsp)
   276dd:      	movq	%rdx, 0x48(%rsp)
   276e2:      	movb	$0x1, %al
   276e4:      	testb	$0x1, %al
   276e6:      	jne	0x27712 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::he178469b9de192f7+0x52>
   276e8:      	movq	0x8(%rsp), %rsi
   276ed:      	movq	0x10(%rsp), %rdi
   276f2:      	movq	0x13f9f(%rip), %rax     # 0x3b698 <zlgk82z0l71lvh9+0x3b698>
   276f9:      	callq	*%rax
   276fb:      	movq	0x18(%rsp), %rcx
   27700:      	movq	%rax, 0x50(%rsp)
   27705:      	movq	%rcx, 0x58(%rsp)
   2770a:      	addq	%rcx, %rax
   2770d:      	addq	$0x78, %rsp
   27711:      	retq
   27712:      	movq	0x8(%rsp), %rax
   27717:      	movq	0x10(%rsp), %rcx
   2771c:      	movq	0x18(%rsp), %rdx
   27721:      	movq	%rdx, 0x20(%rsp)
   27726:      	movq	%rcx, 0x28(%rsp)
   2772b:      	movq	%rax, 0x30(%rsp)
   27730:      	movq	0x20(%rsp), %rax
   27735:      	movq	%rax, (%rsp)
   27739:      	movq	0x28(%rsp), %rdi
   2773e:      	movq	0x30(%rsp), %rsi
   27743:      	movq	%rax, 0x60(%rsp)
   27748:      	movq	%rdi, 0x68(%rsp)
   2774d:      	movq	%rsi, 0x70(%rsp)
   27752:      	movq	0x13f47(%rip), %rax     # 0x3b6a0 <zlgk82z0l71lvh9+0x3b6a0>
   27759:      	callq	*%rax
   2775b:      	movq	%rax, %rcx
   2775e:      	movq	(%rsp), %rax
   27762:      	cmpq	%rcx, %rax
   27765:      	jb	0x2777e <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::he178469b9de192f7+0xbe>
   27767:      	leaq	-0x151e6(%rip), %rdi    # 0x12588 <str.4+0x2b8>
   2776e:      	movq	0x139fb(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   27775:      	movl	$0x61, %esi
   2777a:      	callq	*%rax
   2777c:      	ud2
   2777e:      	jmp	0x276e8 <<usize as core::slice::index::SliceIndex<[T]>>::get_unchecked::he178469b9de192f7+0x28>
   27783:      	int3
   27784:      	int3
   27785:      	int3
   27786:      	int3
   27787:      	int3
   27788:      	int3
   27789:      	int3
   2778a:      	int3
   2778b:      	int3
   2778c:      	int3
   2778d:      	int3
   2778e:      	int3
   2778f:      	int3

0000000000027790 <core::slice::<impl [T]>::is_empty::ha486ecee8ffaa7b4>:
   27790:      	subq	$0x10, %rsp
   27794:      	movq	%rdi, (%rsp)
   27798:      	movq	%rsi, 0x8(%rsp)
   2779d:      	cmpq	$0x0, %rsi
   277a1:      	sete	%al
   277a4:      	andb	$0x1, %al
   277a6:      	movzbl	%al, %eax
   277a9:      	addq	$0x10, %rsp
   277ad:      	retq
   277ae:      	int3
   277af:      	int3

00000000000277b0 <core::slice::<impl [T]>::get::h76412ebc727f7e8d>:
   277b0:      	subq	$0x38, %rsp
   277b4:      	movq	%rcx, 0x8(%rsp)
   277b9:      	movq	%rdx, 0x10(%rsp)
   277be:      	movq	%rsi, %rcx
   277c1:      	movq	0x8(%rsp), %rsi
   277c6:      	movq	%rdi, %rdx
   277c9:      	movq	0x10(%rsp), %rdi
   277ce:      	movq	%rdx, 0x18(%rsp)
   277d3:      	movq	%rcx, 0x20(%rsp)
   277d8:      	movq	%rdi, 0x28(%rsp)
   277dd:      	movq	%rsi, 0x30(%rsp)
   277e2:      	movq	0x1429f(%rip), %rax     # 0x3ba88 <zlgk82z0l71lvh9+0x3ba88>
   277e9:      	callq	*%rax
   277eb:      	addq	$0x38, %rsp
   277ef:      	retq

00000000000277f0 <core::slice::<impl [T]>::get::h99882f83ad5e9f0c>:
   277f0:      	subq	$0x28, %rsp
   277f4:      	movq	%rdx, 0x8(%rsp)
   277f9:      	movq	%rsi, %rdx
   277fc:      	movq	%rdi, %rsi
   277ff:      	movq	0x8(%rsp), %rdi
   27804:      	movq	%rsi, 0x10(%rsp)
   27809:      	movq	%rdx, 0x18(%rsp)
   2780e:      	movq	%rdi, 0x20(%rsp)
   27813:      	movq	0x1423e(%rip), %rax     # 0x3ba58 <zlgk82z0l71lvh9+0x3ba58>
   2781a:      	callq	*%rax
   2781c:      	addq	$0x28, %rsp
   27820:      	retq
   27821:      	int3
   27822:      	int3
   27823:      	int3
   27824:      	int3
   27825:      	int3
   27826:      	int3
   27827:      	int3
   27828:      	int3
   27829:      	int3
   2782a:      	int3
   2782b:      	int3
   2782c:      	int3
   2782d:      	int3
   2782e:      	int3
   2782f:      	int3

0000000000027830 <core::slice::<impl [T]>::get::hd94cf9cdf9f62afe>:
   27830:      	subq	$0x28, %rsp
   27834:      	movq	%rdx, 0x8(%rsp)
   27839:      	movq	%rsi, %rdx
   2783c:      	movq	%rdi, %rsi
   2783f:      	movq	0x8(%rsp), %rdi
   27844:      	movq	%rsi, 0x10(%rsp)
   27849:      	movq	%rdx, 0x18(%rsp)
   2784e:      	movq	%rdi, 0x20(%rsp)
   27853:      	movq	0x141ee(%rip), %rax     # 0x3ba48 <zlgk82z0l71lvh9+0x3ba48>
   2785a:      	callq	*%rax
   2785c:      	addq	$0x28, %rsp
   27860:      	retq
   27861:      	int3
   27862:      	int3
   27863:      	int3
   27864:      	int3
   27865:      	int3
   27866:      	int3
   27867:      	int3
   27868:      	int3
   27869:      	int3
   2786a:      	int3
   2786b:      	int3
   2786c:      	int3
   2786d:      	int3
   2786e:      	int3
   2786f:      	int3

0000000000027870 <core::slice::<impl [T]>::get_unchecked::h26bacc7bcdf77203>:
   27870:      	subq	$0x28, %rsp
   27874:      	movq	%rdx, 0x8(%rsp)
   27879:      	movq	%rsi, %rdx
   2787c:      	movq	%rdi, %rsi
   2787f:      	movq	0x8(%rsp), %rdi
   27884:      	movq	%rsi, 0x10(%rsp)
   27889:      	movq	%rdx, 0x18(%rsp)
   2788e:      	movq	%rdi, 0x20(%rsp)
   27893:      	movq	0x141b6(%rip), %rax     # 0x3ba50 <zlgk82z0l71lvh9+0x3ba50>
   2789a:      	callq	*%rax
   2789c:      	addq	$0x28, %rsp
   278a0:      	retq
   278a1:      	int3
   278a2:      	int3
   278a3:      	int3
   278a4:      	int3
   278a5:      	int3
   278a6:      	int3
   278a7:      	int3
   278a8:      	int3
   278a9:      	int3
   278aa:      	int3
   278ab:      	int3
   278ac:      	int3
   278ad:      	int3
   278ae:      	int3
   278af:      	int3

00000000000278b0 <core::slice::<impl [T]>::get_unchecked::h75c6bb7e518711aa>:
   278b0:      	subq	$0x28, %rsp
   278b4:      	movq	%rdx, 0x8(%rsp)
   278b9:      	movq	%rsi, %rdx
   278bc:      	movq	%rdi, %rsi
   278bf:      	movq	0x8(%rsp), %rdi
   278c4:      	movq	%rsi, 0x10(%rsp)
   278c9:      	movq	%rdx, 0x18(%rsp)
   278ce:      	movq	%rdi, 0x20(%rsp)
   278d3:      	movq	0x14186(%rip), %rax     # 0x3ba60 <zlgk82z0l71lvh9+0x3ba60>
   278da:      	callq	*%rax
   278dc:      	addq	$0x28, %rsp
   278e0:      	retq
   278e1:      	int3
   278e2:      	int3
   278e3:      	int3
   278e4:      	int3
   278e5:      	int3
   278e6:      	int3
   278e7:      	int3
   278e8:      	int3
   278e9:      	int3
   278ea:      	int3
   278eb:      	int3
   278ec:      	int3
   278ed:      	int3
   278ee:      	int3
   278ef:      	int3

00000000000278f0 <core::slice::<impl [T]>::iter::h7bd7ce186b92ea82>:
   278f0:      	subq	$0x18, %rsp
   278f4:      	movq	%rdi, 0x8(%rsp)
   278f9:      	movq	%rsi, 0x10(%rsp)
   278fe:      	movq	0x141a3(%rip), %rax     # 0x3baa8 <zlgk82z0l71lvh9+0x3baa8>
   27905:      	callq	*%rax
   27907:      	addq	$0x18, %rsp
   2790b:      	retq
   2790c:      	int3
   2790d:      	int3
   2790e:      	int3
   2790f:      	int3

0000000000027910 <core::slice::<impl [T]>::iter::h87a44d2d9c9e3d07>:
   27910:      	subq	$0x18, %rsp
   27914:      	movq	%rdi, 0x8(%rsp)
   27919:      	movq	%rsi, 0x10(%rsp)
   2791e:      	movq	0x14193(%rip), %rax     # 0x3bab8 <zlgk82z0l71lvh9+0x3bab8>
   27925:      	callq	*%rax
   27927:      	addq	$0x18, %rsp
   2792b:      	retq
   2792c:      	int3
   2792d:      	int3
   2792e:      	int3
   2792f:      	int3

0000000000027930 <core::slice::<impl [T]>::iter::hc4add34f52983370>:
   27930:      	subq	$0x18, %rsp
   27934:      	movq	%rdi, 0x8(%rsp)
   27939:      	movq	%rsi, 0x10(%rsp)
   2793e:      	movq	0x14183(%rip), %rax     # 0x3bac8 <zlgk82z0l71lvh9+0x3bac8>
   27945:      	callq	*%rax
   27947:      	addq	$0x18, %rsp
   2794b:      	retq
   2794c:      	int3
   2794d:      	int3
   2794e:      	int3
   2794f:      	int3

0000000000027950 <core::slice::<impl [T]>::iter_mut::hf107445371bf3d00>:
   27950:      	subq	$0x18, %rsp
   27954:      	movq	%rdi, 0x8(%rsp)
   27959:      	movq	%rsi, 0x10(%rsp)
   2795e:      	movq	0x1416b(%rip), %rax     # 0x3bad0 <zlgk82z0l71lvh9+0x3bad0>
   27965:      	callq	*%rax
   27967:      	addq	$0x18, %rsp
   2796b:      	retq
   2796c:      	int3
   2796d:      	int3
   2796e:      	int3
   2796f:      	int3

0000000000027970 <core::slice::<impl [T]>::chunks::ha602b1ea3b32d1c2>:
   27970:      	subq	$0x88, %rsp
   27977:      	movq	%r8, 0x10(%rsp)
   2797c:      	movq	%rcx, 0x18(%rsp)
   27981:      	movq	%rdx, 0x20(%rsp)
   27986:      	movq	%rsi, 0x28(%rsp)
   2798b:      	movq	%rdi, 0x30(%rsp)
   27990:      	movq	%rdi, 0x38(%rsp)
   27995:      	movq	%rsi, 0x70(%rsp)
   2799a:      	movq	%rdx, 0x78(%rsp)
   2799f:      	movq	%rcx, 0x80(%rsp)
   279a7:      	cmpq	$0x0, %rcx
   279ab:      	jne	0x279dd <core::slice::<impl [T]>::chunks::ha602b1ea3b32d1c2+0x6d>
   279ad:      	leaq	0x1290c(%rip), %rsi     # 0x3a2c0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x3c0>
   279b4:      	leaq	0x40(%rsp), %rdi
   279b9:      	movq	%rdi, 0x8(%rsp)
   279be:      	movl	$0x1, %edx
   279c3:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   279c8:      	movq	0x8(%rsp), %rdi
   279cd:      	movq	0x10(%rsp), %rsi
   279d2:      	movq	0x134e7(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   279d9:      	callq	*%rax
   279db:      	ud2
   279dd:      	movq	0x18(%rsp), %rcx
   279e2:      	movq	0x20(%rsp), %rdx
   279e7:      	movq	0x28(%rsp), %rsi
   279ec:      	movq	0x30(%rsp), %rdi
   279f1:      	movq	0x140e8(%rip), %rax     # 0x3bae0 <zlgk82z0l71lvh9+0x3bae0>
   279f8:      	callq	*%rax
   279fa:      	movq	0x38(%rsp), %rax
   279ff:      	addq	$0x88, %rsp
   27a06:      	retq
   27a07:      	int3
   27a08:      	int3
   27a09:      	int3
   27a0a:      	int3
   27a0b:      	int3
   27a0c:      	int3
   27a0d:      	int3
   27a0e:      	int3
   27a0f:      	int3

0000000000027a10 <core::slice::<impl [T]>::as_chunks_unchecked::h340c0bc6e6011848>:
   27a10:      	subq	$0x88, %rsp
   27a17:      	movq	%rsi, 0x10(%rsp)
   27a1c:      	movq	%rdi, 0x18(%rsp)
   27a21:      	movq	%rdi, 0x38(%rsp)
   27a26:      	movq	%rsi, 0x40(%rsp)
   27a2b:      	movb	$0x1, %al
   27a2d:      	testb	$0x1, %al
   27a2f:      	jne	0x27a71 <core::slice::<impl [T]>::as_chunks_unchecked::h340c0bc6e6011848+0x61>
   27a31:      	movq	0x18(%rsp), %rdi
   27a36:      	movq	0x10(%rsp), %rax
   27a3b:      	movq	%rax, %rcx
   27a3e:      	shrq	$0x2, %rcx
   27a42:      	movq	%rcx, 0x48(%rsp)
   27a47:      	movq	0x48(%rsp), %rsi
   27a4c:      	movq	%rsi, 0x50(%rsp)
   27a51:      	movq	%rdi, 0x60(%rsp)
   27a56:      	movq	%rax, 0x68(%rsp)
   27a5b:      	movq	%rdi, 0x58(%rsp)
   27a60:      	movq	0x14089(%rip), %rax     # 0x3baf0 <zlgk82z0l71lvh9+0x3baf0>
   27a67:      	callq	*%rax
   27a69:      	addq	$0x88, %rsp
   27a70:      	retq
   27a71:      	movq	0x10(%rsp), %rax
   27a76:      	movq	0x18(%rsp), %rcx
   27a7b:      	movq	%rcx, 0x20(%rsp)
   27a80:      	movq	%rax, 0x28(%rsp)
   27a85:      	movq	$0x4, 0x30(%rsp)
   27a8e:      	movq	0x20(%rsp), %rdx
   27a93:      	movq	0x28(%rsp), %rcx
   27a98:      	movq	%rcx, (%rsp)
   27a9c:      	movq	0x30(%rsp), %rax
   27aa1:      	movq	%rax, 0x8(%rsp)
   27aa6:      	movq	%rdx, 0x70(%rsp)
   27aab:      	movq	%rcx, 0x78(%rsp)
   27ab0:      	movq	%rax, 0x80(%rsp)
   27ab8:      	cmpq	$0x0, %rax
   27abc:      	jne	0x27ad5 <core::slice::<impl [T]>::as_chunks_unchecked::h340c0bc6e6011848+0xc5>
   27abe:      	leaq	-0x154dc(%rip), %rdi    # 0x125e9 <str.4+0x319>
   27ac5:      	movq	0x136a4(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   27acc:      	movl	$0x84, %esi
   27ad1:      	callq	*%rax
   27ad3:      	ud2
   27ad5:      	movq	0x8(%rsp), %rax
   27ada:      	cmpq	$0x0, %rax
   27ade:      	sete	%al
   27ae1:      	testb	$0x1, %al
   27ae3:      	jne	0x27afb <core::slice::<impl [T]>::as_chunks_unchecked::h340c0bc6e6011848+0xeb>
   27ae5:      	movq	0x8(%rsp), %rcx
   27aea:      	movq	(%rsp), %rax
   27aee:      	xorl	%edx, %edx
   27af0:      	divq	%rcx
   27af3:      	cmpq	$0x0, %rdx
   27af7:      	je	0x27b19 <core::slice::<impl [T]>::as_chunks_unchecked::h340c0bc6e6011848+0x109>
   27af9:      	jmp	0x27abe <core::slice::<impl [T]>::as_chunks_unchecked::h340c0bc6e6011848+0xae>
   27afb:      	leaq	-0x15832(%rip), %rdi    # 0x122d0 <str.4>
   27b02:      	leaq	0x1289f(%rip), %rdx     # 0x3a3a8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x4a8>
   27b09:      	movq	0x133c0(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   27b10:      	movl	$0x39, %esi
   27b15:      	callq	*%rax
   27b17:      	ud2
   27b19:      	jmp	0x27a31 <core::slice::<impl [T]>::as_chunks_unchecked::h340c0bc6e6011848+0x21>
   27b1e:      	int3
   27b1f:      	int3

0000000000027b20 <core::slice::<impl [T]>::as_chunks::hdd27b2f223794308>:
   27b20:      	subq	$0xe8, %rsp
   27b27:      	movq	%rcx, 0x28(%rsp)
   27b2c:      	movq	%rdx, 0x30(%rsp)
   27b31:      	movq	%rsi, 0x38(%rsp)
   27b36:      	movq	%rdi, 0x40(%rsp)
   27b3b:      	movq	%rdi, 0x48(%rsp)
   27b40:      	movq	%rsi, 0xa0(%rsp)
   27b48:      	movq	%rdx, 0xa8(%rsp)
   27b50:      	movb	$0x1, %al
   27b52:      	testb	$0x1, %al
   27b54:      	jne	0x27b86 <core::slice::<impl [T]>::as_chunks::hdd27b2f223794308+0x66>
   27b56:      	leaq	0x12763(%rip), %rsi     # 0x3a2c0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x3c0>
   27b5d:      	leaq	0x50(%rsp), %rdi
   27b62:      	movq	%rdi, 0x20(%rsp)
   27b67:      	movl	$0x1, %edx
   27b6c:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   27b71:      	movq	0x20(%rsp), %rdi
   27b76:      	movq	0x28(%rsp), %rsi
   27b7b:      	movq	0x1333e(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   27b82:      	callq	*%rax
   27b84:      	ud2
   27b86:      	movq	0x30(%rsp), %rax
   27b8b:      	shrq	$0x2, %rax
   27b8f:      	movq	%rax, 0xb0(%rsp)
   27b97:      	movl	$0x4, %ecx
   27b9c:      	mulq	%rcx
   27b9f:      	movq	%rax, 0x18(%rsp)
   27ba4:      	seto	%al
   27ba7:      	testb	$0x1, %al
   27ba9:      	jne	0x27c68 <core::slice::<impl [T]>::as_chunks::hdd27b2f223794308+0x148>
   27baf:      	movq	0x28(%rsp), %r8
   27bb4:      	movq	0x18(%rsp), %rcx
   27bb9:      	movq	0x30(%rsp), %rdx
   27bbe:      	movq	0x38(%rsp), %rsi
   27bc3:      	movq	0x13f36(%rip), %rax     # 0x3bb00 <zlgk82z0l71lvh9+0x3bb00>
   27bca:      	leaq	0x80(%rsp), %rdi
   27bd2:      	callq	*%rax
   27bd4:      	movq	0x80(%rsp), %rdi
   27bdc:      	movq	0x88(%rsp), %rsi
   27be4:      	movq	%rdi, 0xb8(%rsp)
   27bec:      	movq	%rsi, 0xc0(%rsp)
   27bf4:      	movq	0x90(%rsp), %rcx
   27bfc:      	movq	%rcx, 0x8(%rsp)
   27c01:      	movq	0x98(%rsp), %rax
   27c09:      	movq	%rax, 0x10(%rsp)
   27c0e:      	movq	%rcx, 0xc8(%rsp)
   27c16:      	movq	%rax, 0xd0(%rsp)
   27c1e:      	movq	0x13ec3(%rip), %rax     # 0x3bae8 <zlgk82z0l71lvh9+0x3bae8>
   27c25:      	callq	*%rax
   27c27:      	movq	0x8(%rsp), %rsi
   27c2c:      	movq	0x40(%rsp), %rcx
   27c31:      	movq	%rax, %r8
   27c34:      	movq	0x48(%rsp), %rax
   27c39:      	movq	%rdx, %rdi
   27c3c:      	movq	0x10(%rsp), %rdx
   27c41:      	movq	%r8, 0xd8(%rsp)
   27c49:      	movq	%rdi, 0xe0(%rsp)
   27c51:      	movq	%r8, (%rcx)
   27c54:      	movq	%rdi, 0x8(%rcx)
   27c58:      	movq	%rsi, 0x10(%rcx)
   27c5c:      	movq	%rdx, 0x18(%rcx)
   27c60:      	addq	$0xe8, %rsp
   27c67:      	retq
   27c68:      	movq	0x28(%rsp), %rdx
   27c6d:      	leaq	-0x15ac4(%rip), %rdi    # 0x121b0 <str.2>
   27c74:      	movq	0x13255(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   27c7b:      	movl	$0x21, %esi
   27c80:      	callq	*%rax
   27c82:      	ud2
   27c84:      	int3
   27c85:      	int3
   27c86:      	int3
   27c87:      	int3
   27c88:      	int3
   27c89:      	int3
   27c8a:      	int3
   27c8b:      	int3
   27c8c:      	int3
   27c8d:      	int3
   27c8e:      	int3
   27c8f:      	int3

0000000000027c90 <core::slice::<impl [T]>::split_at::h3f4d6e5dfd15646b>:
   27c90:      	subq	$0x48, %rsp
   27c94:      	movq	%r8, (%rsp)
   27c98:      	movq	%rcx, 0x8(%rsp)
   27c9d:      	movq	%rdx, 0x10(%rsp)
   27ca2:      	movq	%rsi, 0x18(%rsp)
   27ca7:      	movq	%rdi, 0x20(%rsp)
   27cac:      	movq	%rdi, 0x28(%rsp)
   27cb1:      	movq	%rsi, 0x30(%rsp)
   27cb6:      	movq	%rdx, 0x38(%rsp)
   27cbb:      	movq	%rcx, 0x40(%rsp)
   27cc0:      	cmpq	%rdx, %rcx
   27cc3:      	jbe	0x27ce0 <core::slice::<impl [T]>::split_at::h3f4d6e5dfd15646b+0x50>
   27cc5:      	movq	(%rsp), %rdx
   27cc9:      	leaq	-0x15aff(%rip), %rdi    # 0x121d1 <str.2+0x21>
   27cd0:      	movq	0x131f9(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   27cd7:      	movl	$0x23, %esi
   27cdc:      	callq	*%rax
   27cde:      	ud2
   27ce0:      	movq	0x8(%rsp), %rcx
   27ce5:      	movq	0x10(%rsp), %rdx
   27cea:      	movq	0x18(%rsp), %rsi
   27cef:      	movq	0x20(%rsp), %rdi
   27cf4:      	movq	0x13e0d(%rip), %rax     # 0x3bb08 <zlgk82z0l71lvh9+0x3bb08>
   27cfb:      	callq	*%rax
   27cfd:      	movq	0x28(%rsp), %rax
   27d02:      	addq	$0x48, %rsp
   27d06:      	retq
   27d07:      	int3
   27d08:      	int3
   27d09:      	int3
   27d0a:      	int3
   27d0b:      	int3
   27d0c:      	int3
   27d0d:      	int3
   27d0e:      	int3
   27d0f:      	int3

0000000000027d10 <core::slice::<impl [T]>::split_at::hae5a1d56501db539>:
   27d10:      	subq	$0x48, %rsp
   27d14:      	movq	%r8, (%rsp)
   27d18:      	movq	%rcx, 0x8(%rsp)
   27d1d:      	movq	%rdx, 0x10(%rsp)
   27d22:      	movq	%rsi, 0x18(%rsp)
   27d27:      	movq	%rdi, 0x20(%rsp)
   27d2c:      	movq	%rdi, 0x28(%rsp)
   27d31:      	movq	%rsi, 0x30(%rsp)
   27d36:      	movq	%rdx, 0x38(%rsp)
   27d3b:      	movq	%rcx, 0x40(%rsp)
   27d40:      	cmpq	%rdx, %rcx
   27d43:      	jbe	0x27d60 <core::slice::<impl [T]>::split_at::hae5a1d56501db539+0x50>
   27d45:      	movq	(%rsp), %rdx
   27d49:      	leaq	-0x15b7f(%rip), %rdi    # 0x121d1 <str.2+0x21>
   27d50:      	movq	0x13179(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   27d57:      	movl	$0x23, %esi
   27d5c:      	callq	*%rax
   27d5e:      	ud2
   27d60:      	movq	0x8(%rsp), %rcx
   27d65:      	movq	0x10(%rsp), %rdx
   27d6a:      	movq	0x18(%rsp), %rsi
   27d6f:      	movq	0x20(%rsp), %rdi
   27d74:      	movq	0x138c5(%rip), %rax     # 0x3b640 <zlgk82z0l71lvh9+0x3b640>
   27d7b:      	callq	*%rax
   27d7d:      	movq	0x28(%rsp), %rax
   27d82:      	addq	$0x48, %rsp
   27d86:      	retq
   27d87:      	int3
   27d88:      	int3
   27d89:      	int3
   27d8a:      	int3
   27d8b:      	int3
   27d8c:      	int3
   27d8d:      	int3
   27d8e:      	int3
   27d8f:      	int3

0000000000027d90 <core::slice::<impl [T]>::split_at_unchecked::h86768a94017e8edc>:
   27d90:      	subq	$0xb8, %rsp
   27d97:      	movq	%rcx, 0x28(%rsp)
   27d9c:      	movq	%rdx, 0x30(%rsp)
   27da1:      	movq	%rsi, 0x38(%rsp)
   27da6:      	movq	%rdi, 0x40(%rsp)
   27dab:      	movq	%rdi, 0x48(%rsp)
   27db0:      	movq	%rsi, 0x60(%rsp)
   27db5:      	movq	%rdx, 0x68(%rsp)
   27dba:      	movq	%rcx, 0x70(%rsp)
   27dbf:      	movq	%rdx, 0x78(%rsp)
   27dc4:      	movq	%rsi, 0x98(%rsp)
   27dcc:      	movq	%rdx, 0xa0(%rsp)
   27dd4:      	movq	%rsi, 0x80(%rsp)
   27ddc:      	movb	$0x1, %al
   27dde:      	testb	$0x1, %al
   27de0:      	jne	0x27e4e <core::slice::<impl [T]>::split_at_unchecked::h86768a94017e8edc+0xbe>
   27de2:      	movq	0x28(%rsp), %rsi
   27de7:      	movq	0x38(%rsp), %rdi
   27dec:      	movq	0x13d1d(%rip), %rax     # 0x3bb10 <zlgk82z0l71lvh9+0x3bb10>
   27df3:      	callq	*%rax
   27df5:      	movq	0x28(%rsp), %rcx
   27dfa:      	movq	%rax, %rsi
   27dfd:      	movq	0x30(%rsp), %rax
   27e02:      	movq	%rdx, %rdi
   27e05:      	movq	0x38(%rsp), %rdx
   27e0a:      	movq	%rdi, 0x8(%rsp)
   27e0f:      	movq	%rsi, 0x10(%rsp)
   27e14:      	movq	%rdx, 0x88(%rsp)
   27e1c:      	movq	%rcx, 0x90(%rsp)
   27e24:      	movq	%rcx, %rsi
   27e27:      	shlq	$0x3, %rsi
   27e2b:      	addq	%rsi, %rdx
   27e2e:      	movq	%rdx, 0x18(%rsp)
   27e33:      	movq	%rax, %rdx
   27e36:      	subq	%rcx, %rdx
   27e39:      	movq	%rdx, 0x20(%rsp)
   27e3e:      	cmpq	%rcx, %rax
   27e41:      	setb	%al
   27e44:      	testb	$0x1, %al
   27e46:      	jne	0x27ede <core::slice::<impl [T]>::split_at_unchecked::h86768a94017e8edc+0x14e>
   27e4c:      	jmp	0x27e9d <core::slice::<impl [T]>::split_at_unchecked::h86768a94017e8edc+0x10d>
   27e4e:      	movq	0x30(%rsp), %rax
   27e53:      	movq	0x28(%rsp), %rcx
   27e58:      	movq	%rcx, 0x50(%rsp)
   27e5d:      	movq	%rax, 0x58(%rsp)
   27e62:      	movq	0x50(%rsp), %rax
   27e67:      	movq	0x58(%rsp), %rcx
   27e6c:      	movq	%rax, 0xa8(%rsp)
   27e74:      	movq	%rcx, 0xb0(%rsp)
   27e7c:      	cmpq	%rcx, %rax
   27e7f:      	jbe	0x27e98 <core::slice::<impl [T]>::split_at_unchecked::h86768a94017e8edc+0x108>
   27e81:      	leaq	-0x1581b(%rip), %rdi    # 0x1266d <str.4+0x39d>
   27e88:      	movq	0x132e1(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   27e8f:      	movl	$0x64, %esi
   27e94:      	callq	*%rax
   27e96:      	ud2
   27e98:      	jmp	0x27de2 <core::slice::<impl [T]>::split_at_unchecked::h86768a94017e8edc+0x52>
   27e9d:      	movq	0x20(%rsp), %rsi
   27ea2:      	movq	0x18(%rsp), %rdi
   27ea7:      	movq	0x13c62(%rip), %rax     # 0x3bb10 <zlgk82z0l71lvh9+0x3bb10>
   27eae:      	callq	*%rax
   27eb0:      	movq	0x10(%rsp), %r8
   27eb5:      	movq	0x8(%rsp), %rdi
   27eba:      	movq	0x40(%rsp), %rcx
   27ebf:      	movq	%rax, %rsi
   27ec2:      	movq	0x48(%rsp), %rax
   27ec7:      	movq	%r8, (%rcx)
   27eca:      	movq	%rdi, 0x8(%rcx)
   27ece:      	movq	%rsi, 0x10(%rcx)
   27ed2:      	movq	%rdx, 0x18(%rcx)
   27ed6:      	addq	$0xb8, %rsp
   27edd:      	retq
   27ede:      	leaq	-0x15e45(%rip), %rdi    # 0x120a0 <str.0>
   27ee5:      	leaq	0x123e4(%rip), %rdx     # 0x3a2d0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x3d0>
   27eec:      	movq	0x12fdd(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   27ef3:      	movl	$0x21, %esi
   27ef8:      	callq	*%rax
   27efa:      	ud2
   27efc:      	int3
   27efd:      	int3
   27efe:      	int3
   27eff:      	int3

0000000000027f00 <core::slice::<impl [T]>::split_at_unchecked::hcbd23df448861424>:
   27f00:      	subq	$0xb8, %rsp
   27f07:      	movq	%rcx, 0x28(%rsp)
   27f0c:      	movq	%rdx, 0x30(%rsp)
   27f11:      	movq	%rsi, 0x38(%rsp)
   27f16:      	movq	%rdi, 0x40(%rsp)
   27f1b:      	movq	%rdi, 0x48(%rsp)
   27f20:      	movq	%rsi, 0x60(%rsp)
   27f25:      	movq	%rdx, 0x68(%rsp)
   27f2a:      	movq	%rcx, 0x70(%rsp)
   27f2f:      	movq	%rdx, 0x78(%rsp)
   27f34:      	movq	%rsi, 0x98(%rsp)
   27f3c:      	movq	%rdx, 0xa0(%rsp)
   27f44:      	movq	%rsi, 0x80(%rsp)
   27f4c:      	movb	$0x1, %al
   27f4e:      	testb	$0x1, %al
   27f50:      	jne	0x27fb7 <core::slice::<impl [T]>::split_at_unchecked::hcbd23df448861424+0xb7>
   27f52:      	movq	0x28(%rsp), %rsi
   27f57:      	movq	0x38(%rsp), %rdi
   27f5c:      	movq	0x13685(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   27f63:      	callq	*%rax
   27f65:      	movq	0x28(%rsp), %rcx
   27f6a:      	movq	%rax, %rsi
   27f6d:      	movq	0x30(%rsp), %rax
   27f72:      	movq	%rdx, %rdi
   27f75:      	movq	0x38(%rsp), %rdx
   27f7a:      	movq	%rdi, 0x8(%rsp)
   27f7f:      	movq	%rsi, 0x10(%rsp)
   27f84:      	movq	%rdx, 0x88(%rsp)
   27f8c:      	movq	%rcx, 0x90(%rsp)
   27f94:      	addq	%rcx, %rdx
   27f97:      	movq	%rdx, 0x18(%rsp)
   27f9c:      	movq	%rax, %rdx
   27f9f:      	subq	%rcx, %rdx
   27fa2:      	movq	%rdx, 0x20(%rsp)
   27fa7:      	cmpq	%rcx, %rax
   27faa:      	setb	%al
   27fad:      	testb	$0x1, %al
   27faf:      	jne	0x28047 <core::slice::<impl [T]>::split_at_unchecked::hcbd23df448861424+0x147>
   27fb5:      	jmp	0x28006 <core::slice::<impl [T]>::split_at_unchecked::hcbd23df448861424+0x106>
   27fb7:      	movq	0x30(%rsp), %rax
   27fbc:      	movq	0x28(%rsp), %rcx
   27fc1:      	movq	%rcx, 0x50(%rsp)
   27fc6:      	movq	%rax, 0x58(%rsp)
   27fcb:      	movq	0x50(%rsp), %rax
   27fd0:      	movq	0x58(%rsp), %rcx
   27fd5:      	movq	%rax, 0xa8(%rsp)
   27fdd:      	movq	%rcx, 0xb0(%rsp)
   27fe5:      	cmpq	%rcx, %rax
   27fe8:      	jbe	0x28001 <core::slice::<impl [T]>::split_at_unchecked::hcbd23df448861424+0x101>
   27fea:      	leaq	-0x15984(%rip), %rdi    # 0x1266d <str.4+0x39d>
   27ff1:      	movq	0x13178(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   27ff8:      	movl	$0x64, %esi
   27ffd:      	callq	*%rax
   27fff:      	ud2
   28001:      	jmp	0x27f52 <core::slice::<impl [T]>::split_at_unchecked::hcbd23df448861424+0x52>
   28006:      	movq	0x20(%rsp), %rsi
   2800b:      	movq	0x18(%rsp), %rdi
   28010:      	movq	0x135d1(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   28017:      	callq	*%rax
   28019:      	movq	0x10(%rsp), %r8
   2801e:      	movq	0x8(%rsp), %rdi
   28023:      	movq	0x40(%rsp), %rcx
   28028:      	movq	%rax, %rsi
   2802b:      	movq	0x48(%rsp), %rax
   28030:      	movq	%r8, (%rcx)
   28033:      	movq	%rdi, 0x8(%rcx)
   28037:      	movq	%rsi, 0x10(%rcx)
   2803b:      	movq	%rdx, 0x18(%rcx)
   2803f:      	addq	$0xb8, %rsp
   28046:      	retq
   28047:      	leaq	-0x15fae(%rip), %rdi    # 0x120a0 <str.0>
   2804e:      	leaq	0x1227b(%rip), %rdx     # 0x3a2d0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x3d0>
   28055:      	movq	0x12e74(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2805c:      	movl	$0x21, %esi
   28061:      	callq	*%rax
   28063:      	ud2
   28065:      	int3
   28066:      	int3
   28067:      	int3
   28068:      	int3
   28069:      	int3
   2806a:      	int3
   2806b:      	int3
   2806c:      	int3
   2806d:      	int3
   2806e:      	int3
   2806f:      	int3

0000000000028070 <core::slice::<impl [T]>::ends_with::ha26bd2256d2922c9>:
   28070:      	subq	$0x88, %rsp
   28077:      	movq	%rsi, 0x8(%rsp)
   2807c:      	movq	%rdi, 0x10(%rsp)
   28081:      	movq	%rdx, 0x28(%rsp)
   28086:      	movq	%rcx, 0x30(%rsp)
   2808b:      	movq	%rdi, 0x68(%rsp)
   28090:      	movq	%rsi, 0x70(%rsp)
   28095:      	movq	0x30(%rsp), %rax
   2809a:      	movq	%rsi, 0x40(%rsp)
   2809f:      	movq	%rax, 0x48(%rsp)
   280a4:      	movq	0x40(%rsp), %rax
   280a9:      	movq	%rax, 0x18(%rsp)
   280ae:      	movq	%rax, 0x78(%rsp)
   280b3:      	movq	0x48(%rsp), %rcx
   280b8:      	movq	%rcx, 0x20(%rsp)
   280bd:      	movq	%rcx, 0x80(%rsp)
   280c5:      	cmpq	%rcx, %rax
   280c8:      	jae	0x280d1 <core::slice::<impl [T]>::ends_with::ha26bd2256d2922c9+0x61>
   280ca:      	movb	$0x0, 0x3f(%rsp)
   280cf:      	jmp	0x280f1 <core::slice::<impl [T]>::ends_with::ha26bd2256d2922c9+0x81>
   280d1:      	movq	0x18(%rsp), %rax
   280d6:      	movq	0x20(%rsp), %rcx
   280db:      	movq	%rax, %rdx
   280de:      	subq	%rcx, %rdx
   280e1:      	movq	%rdx, (%rsp)
   280e5:      	cmpq	%rcx, %rax
   280e8:      	setb	%al
   280eb:      	testb	$0x1, %al
   280ed:      	jne	0x2814f <core::slice::<impl [T]>::ends_with::ha26bd2256d2922c9+0xdf>
   280ef:      	jmp	0x28102 <core::slice::<impl [T]>::ends_with::ha26bd2256d2922c9+0x92>
   280f1:      	movb	0x3f(%rsp), %al
   280f5:      	andb	$0x1, %al
   280f7:      	movzbl	%al, %eax
   280fa:      	addq	$0x88, %rsp
   28101:      	retq
   28102:      	movq	0x8(%rsp), %rsi
   28107:      	movq	0x10(%rsp), %rdi
   2810c:      	movq	(%rsp), %rax
   28110:      	movq	%rax, 0x60(%rsp)
   28115:      	movq	0x60(%rsp), %rdx
   2811a:      	leaq	0x121df(%rip), %rcx     # 0x3a300 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x400>
   28121:      	movq	0x13500(%rip), %rax     # 0x3b628 <zlgk82z0l71lvh9+0x3b628>
   28128:      	callq	*%rax
   2812a:      	movq	%rax, 0x50(%rsp)
   2812f:      	movq	%rdx, 0x58(%rsp)
   28134:      	movq	0x134dd(%rip), %rax     # 0x3b618 <zlgk82z0l71lvh9+0x3b618>
   2813b:      	leaq	0x28(%rsp), %rdi
   28140:      	leaq	0x50(%rsp), %rsi
   28145:      	callq	*%rax
   28147:      	andb	$0x1, %al
   28149:      	movb	%al, 0x3f(%rsp)
   2814d:      	jmp	0x280f1 <core::slice::<impl [T]>::ends_with::ha26bd2256d2922c9+0x81>
   2814f:      	leaq	-0x160b6(%rip), %rdi    # 0x120a0 <str.0>
   28156:      	leaq	0x1218b(%rip), %rdx     # 0x3a2e8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x3e8>
   2815d:      	movq	0x12d6c(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   28164:      	movl	$0x21, %esi
   28169:      	callq	*%rax
   2816b:      	ud2
   2816d:      	int3
   2816e:      	int3
   2816f:      	int3

0000000000028170 <core::slice::<impl [T]>::copy_from_slice::h9a10a63bf2f10901>:
   28170:      	subq	$0xc8, %rsp
   28177:      	movq	%r8, 0x18(%rsp)
   2817c:      	movq	%rcx, 0x20(%rsp)
   28181:      	movq	%rdx, 0x28(%rsp)
   28186:      	movq	%rsi, 0x30(%rsp)
   2818b:      	movq	%rdi, 0x38(%rsp)
   28190:      	movq	%rdi, 0x40(%rsp)
   28195:      	movq	%rsi, 0x48(%rsp)
   2819a:      	movq	%rdx, 0x50(%rsp)
   2819f:      	movq	%rcx, 0x58(%rsp)
   281a4:      	cmpq	%rcx, %rsi
   281a7:      	jne	0x282af <core::slice::<impl [T]>::copy_from_slice::h9a10a63bf2f10901+0x13f>
   281ad:      	movq	0x30(%rsp), %rax
   281b2:      	movq	0x38(%rsp), %rcx
   281b7:      	movq	0x28(%rsp), %rdx
   281bc:      	movq	0x20(%rsp), %rsi
   281c1:      	movq	%rdx, 0x90(%rsp)
   281c9:      	movq	%rsi, 0x98(%rsp)
   281d1:      	movq	%rcx, 0xa0(%rsp)
   281d9:      	movq	%rax, 0xa8(%rsp)
   281e1:      	movq	%rdx, 0x78(%rsp)
   281e6:      	movq	%rcx, 0x80(%rsp)
   281ee:      	movq	%rax, 0x88(%rsp)
   281f6:      	movq	%rdx, 0x60(%rsp)
   281fb:      	movq	%rcx, 0x68(%rsp)
   28200:      	movq	%rax, 0x70(%rsp)
   28205:      	movq	0x60(%rsp), %rdi
   2820a:      	movq	%rdi, (%rsp)
   2820e:      	movq	0x68(%rsp), %rcx
   28213:      	movq	%rcx, 0x8(%rsp)
   28218:      	movq	0x70(%rsp), %rax
   2821d:      	movq	%rax, 0x10(%rsp)
   28222:      	movq	%rdi, 0xb0(%rsp)
   2822a:      	movq	%rcx, 0xb8(%rsp)
   28232:      	movq	%rax, 0xc0(%rsp)
   2823a:      	movq	0x1302f(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   28241:      	callq	*%rax
   28243:      	testb	$0x1, %al
   28245:      	jne	0x2825e <core::slice::<impl [T]>::copy_from_slice::h9a10a63bf2f10901+0xee>
   28247:      	leaq	-0x15eec(%rip), %rdi    # 0x12362 <str.4+0x92>
   2824e:      	movq	0x12f1b(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   28255:      	movl	$0xa6, %esi
   2825a:      	callq	*%rax
   2825c:      	ud2
   2825e:      	movq	0x8(%rsp), %rdi
   28263:      	movq	0x13006(%rip), %rax     # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   2826a:      	callq	*%rax
   2826c:      	testb	$0x1, %al
   2826e:      	jne	0x28272 <core::slice::<impl [T]>::copy_from_slice::h9a10a63bf2f10901+0x102>
   28270:      	jmp	0x28247 <core::slice::<impl [T]>::copy_from_slice::h9a10a63bf2f10901+0xd7>
   28272:      	movq	0x10(%rsp), %rdx
   28277:      	movq	0x8(%rsp), %rsi
   2827c:      	movq	(%rsp), %rdi
   28280:      	movq	0x13529(%rip), %rax     # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   28287:      	callq	*%rax
   28289:      	testb	$0x1, %al
   2828b:      	jne	0x2828f <core::slice::<impl [T]>::copy_from_slice::h9a10a63bf2f10901+0x11f>
   2828d:      	jmp	0x28247 <core::slice::<impl [T]>::copy_from_slice::h9a10a63bf2f10901+0xd7>
   2828f:      	movq	0x30(%rsp), %rdx
   28294:      	movq	0x28(%rsp), %rsi
   28299:      	movq	0x38(%rsp), %rdi
   2829e:      	movq	0x12d4b(%rip), %rax     # 0x3aff0 <zlgk82z0l71lvh9+0x3aff0>
   282a5:      	callq	*%rax
   282a7:      	addq	$0xc8, %rsp
   282ae:      	retq
   282af:      	movq	0x18(%rsp), %rdx
   282b4:      	movq	0x20(%rsp), %rsi
   282b9:      	movq	0x30(%rsp), %rdi
   282be:      	movq	0x13373(%rip), %rax     # 0x3b638 <zlgk82z0l71lvh9+0x3b638>
   282c5:      	callq	*%rax
   282c7:      	ud2
   282c9:      	int3
   282ca:      	int3
   282cb:      	int3
   282cc:      	int3
   282cd:      	int3
   282ce:      	int3
   282cf:      	int3

00000000000282d0 <core::slice::<impl [T]>::copy_from_slice::len_mismatch_fail::h6e2e3757ecc9a72b>:
   282d0:      	subq	$0xc8, %rsp
   282d7:      	movq	%rdx, 0x10(%rsp)
   282dc:      	movq	%rdi, 0x18(%rsp)
   282e1:      	movq	%rsi, 0x20(%rsp)
   282e6:      	leaq	0x20(%rsp), %rcx
   282eb:      	movq	%rcx, 0xa0(%rsp)
   282f3:      	movq	%rcx, 0xb8(%rsp)
   282fb:      	movq	0x12fb6(%rip), %rax     # 0x3b2b8 <zlgk82z0l71lvh9+0x3b2b8>
   28302:      	movq	%rax, 0xc0(%rsp)
   2830a:      	movq	%rcx, 0xa8(%rsp)
   28312:      	movq	%rax, 0xb0(%rsp)
   2831a:      	movq	0xa8(%rsp), %rsi
   28322:      	movq	0xb0(%rsp), %rdx
   2832a:      	leaq	0x18(%rsp), %rcx
   2832f:      	movq	%rcx, 0x78(%rsp)
   28334:      	movq	%rcx, 0x90(%rsp)
   2833c:      	movq	%rax, 0x98(%rsp)
   28344:      	movq	%rcx, 0x80(%rsp)
   2834c:      	movq	%rax, 0x88(%rsp)
   28354:      	movq	0x80(%rsp), %rcx
   2835c:      	movq	0x88(%rsp), %rax
   28364:      	movq	%rsi, 0x58(%rsp)
   28369:      	movq	%rdx, 0x60(%rsp)
   2836e:      	movq	%rcx, 0x68(%rsp)
   28373:      	movq	%rax, 0x70(%rsp)
   28378:      	leaq	0x11f99(%rip), %rsi     # 0x3a318 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x418>
   2837f:      	leaq	0x28(%rsp), %rdi
   28384:      	movq	%rdi, 0x8(%rsp)
   28389:      	movl	$0x3, %edx
   2838e:      	leaq	0x58(%rsp), %rcx
   28393:      	movl	$0x2, %r8d
   28399:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   2839e:      	movq	0x8(%rsp), %rdi
   283a3:      	movq	0x10(%rsp), %rsi
   283a8:      	movq	0x12b11(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   283af:      	callq	*%rax
   283b1:      	ud2
   283b3:      	int3
   283b4:      	int3
   283b5:      	int3
   283b6:      	int3
   283b7:      	int3
   283b8:      	int3
   283b9:      	int3
   283ba:      	int3
   283bb:      	int3
   283bc:      	int3
   283bd:      	int3
   283be:      	int3
   283bf:      	int3

00000000000283c0 <core::slice::<impl [T]>::align_to_offsets::h05fd0d11e0cca9fc>:
   283c0:      	subq	$0x68, %rsp
   283c4:      	movq	%rsi, 0x8(%rsp)
   283c9:      	movq	$0x1, 0x20(%rsp)
   283d2:      	movq	%rdi, 0x38(%rsp)
   283d7:      	movq	%rsi, 0x40(%rsp)
   283dc:      	movl	$0x8, %eax
   283e1:      	shrq	$0x0, %rax
   283e5:      	movq	%rax, 0x10(%rsp)
   283ea:      	movq	%rax, 0x48(%rsp)
   283ef:      	movl	$0x1, %ecx
   283f4:      	shrq	$0x0, %rcx
   283f8:      	movq	%rcx, 0x18(%rsp)
   283fd:      	movq	%rcx, 0x50(%rsp)
   28402:      	cmpq	$0x0, %rax
   28406:      	sete	%al
   28409:      	testb	$0x1, %al
   2840b:      	jne	0x28431 <core::slice::<impl [T]>::align_to_offsets::h05fd0d11e0cca9fc+0x71>
   2840d:      	movq	0x18(%rsp), %rcx
   28412:      	movq	0x10(%rsp), %rsi
   28417:      	movq	0x8(%rsp), %rax
   2841c:      	xorl	%edx, %edx
   2841e:      	divq	%rsi
   28421:      	mulq	%rcx
   28424:      	movq	%rax, (%rsp)
   28428:      	seto	%al
   2842b:      	testb	$0x1, %al
   2842d:      	jne	0x2846a <core::slice::<impl [T]>::align_to_offsets::h05fd0d11e0cca9fc+0xaa>
   2842f:      	jmp	0x2844f <core::slice::<impl [T]>::align_to_offsets::h05fd0d11e0cca9fc+0x8f>
   28431:      	leaq	-0x16188(%rip), %rdi    # 0x122b0 <str.3>
   28438:      	leaq	0x11f09(%rip), %rdx     # 0x3a348 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x448>
   2843f:      	movq	0x12a8a(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   28446:      	movl	$0x19, %esi
   2844b:      	callq	*%rax
   2844d:      	ud2
   2844f:      	movq	0x10(%rsp), %rax
   28454:      	movq	(%rsp), %rcx
   28458:      	movq	%rcx, 0x58(%rsp)
   2845d:      	cmpq	$0x0, %rax
   28461:      	sete	%al
   28464:      	testb	$0x1, %al
   28466:      	jne	0x284b9 <core::slice::<impl [T]>::align_to_offsets::h05fd0d11e0cca9fc+0xf9>
   28468:      	jmp	0x28488 <core::slice::<impl [T]>::align_to_offsets::h05fd0d11e0cca9fc+0xc8>
   2846a:      	leaq	-0x162c1(%rip), %rdi    # 0x121b0 <str.2>
   28471:      	leaq	0x11ed0(%rip), %rdx     # 0x3a348 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x448>
   28478:      	movq	0x12a51(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2847f:      	movl	$0x21, %esi
   28484:      	callq	*%rax
   28486:      	ud2
   28488:      	movq	0x10(%rsp), %rcx
   2848d:      	movq	0x8(%rsp), %rax
   28492:      	xorl	%edx, %edx
   28494:      	divq	%rcx
   28497:      	movq	(%rsp), %rax
   2849b:      	movq	%rdx, 0x60(%rsp)
   284a0:      	movq	%rax, 0x28(%rsp)
   284a5:      	movq	%rdx, 0x30(%rsp)
   284aa:      	movq	0x28(%rsp), %rax
   284af:      	movq	0x30(%rsp), %rdx
   284b4:      	addq	$0x68, %rsp
   284b8:      	retq
   284b9:      	leaq	-0x161f0(%rip), %rdi    # 0x122d0 <str.4>
   284c0:      	leaq	0x11e99(%rip), %rdx     # 0x3a360 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x460>
   284c7:      	movq	0x12a02(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   284ce:      	movl	$0x39, %esi
   284d3:      	callq	*%rax
   284d5:      	ud2
   284d7:      	int3
   284d8:      	int3
   284d9:      	int3
   284da:      	int3
   284db:      	int3
   284dc:      	int3
   284dd:      	int3
   284de:      	int3
   284df:      	int3

00000000000284e0 <core::slice::<impl [T]>::align_to::h9603a380c419d8ae>:
   284e0:      	subq	$0x118, %rsp            # imm = 0x118
   284e7:      	movq	%rdx, 0x48(%rsp)
   284ec:      	movq	%rsi, 0x50(%rsp)
   284f1:      	movq	%rdi, 0x58(%rsp)
   284f6:      	movq	%rdi, 0x60(%rsp)
   284fb:      	movq	%rsi, 0x88(%rsp)
   28503:      	movq	%rdx, 0x90(%rsp)
   2850b:      	xorl	%eax, %eax
   2850d:      	testb	$0x1, %al
   2850f:      	jne	0x28519 <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x39>
   28511:      	xorl	%eax, %eax
   28513:      	testb	$0x1, %al
   28515:      	jne	0x28519 <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x39>
   28517:      	jmp	0x28553 <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x73>
   28519:      	movq	0x58(%rsp), %rax
   2851e:      	movq	0x48(%rsp), %rcx
   28523:      	movq	0x50(%rsp), %rdx
   28528:      	movq	%rdx, (%rax)
   2852b:      	movq	%rcx, 0x8(%rax)
   2852f:      	leaq	-0x16226(%rip), %rcx    # 0x12310 <str.4+0x40>
   28536:      	movq	%rcx, 0x10(%rax)
   2853a:      	movq	$0x0, 0x18(%rax)
   28542:      	movq	%rcx, 0x20(%rax)
   28546:      	movq	$0x0, 0x28(%rax)
   2854e:      	jmp	0x2874e <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x26e>
   28553:      	movq	0x48(%rsp), %rax
   28558:      	movq	0x50(%rsp), %rdi
   2855d:      	movq	%rdi, 0x108(%rsp)
   28565:      	movq	%rax, 0x110(%rsp)
   2856d:      	movq	%rdi, 0x98(%rsp)
   28575:      	movq	0x133c4(%rip), %rax     # 0x3b940 <zlgk82z0l71lvh9+0x3b940>
   2857c:      	movl	$0x8, %esi
   28581:      	callq	*%rax
   28583:      	movq	0x48(%rsp), %rcx
   28588:      	movq	%rax, 0x40(%rsp)
   2858d:      	movq	%rax, 0xa0(%rsp)
   28595:      	cmpq	%rcx, %rax
   28598:      	ja	0x2869a <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x1ba>
   2859e:      	movq	0x40(%rsp), %rcx
   285a3:      	movq	0x48(%rsp), %rdx
   285a8:      	movq	0x50(%rsp), %rsi
   285ad:      	leaq	0x11dc4(%rip), %r8      # 0x3a378 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x478>
   285b4:      	movq	0x1311d(%rip), %rax     # 0x3b6d8 <zlgk82z0l71lvh9+0x3b6d8>
   285bb:      	leaq	0x68(%rsp), %rdi
   285c0:      	callq	*%rax
   285c2:      	movq	0x68(%rsp), %rcx
   285c7:      	movq	%rcx, (%rsp)
   285cb:      	movq	0x70(%rsp), %rax
   285d0:      	movq	%rax, 0x8(%rsp)
   285d5:      	movq	%rcx, 0xa8(%rsp)
   285dd:      	movq	%rax, 0xb0(%rsp)
   285e5:      	movq	0x78(%rsp), %rdi
   285ea:      	movq	%rdi, 0x10(%rsp)
   285ef:      	movq	0x80(%rsp), %rsi
   285f7:      	movq	%rsi, 0x18(%rsp)
   285fc:      	movq	%rdi, 0xb8(%rsp)
   28604:      	movq	%rsi, 0xc0(%rsp)
   2860c:      	movq	0x1350d(%rip), %rax     # 0x3bb20 <zlgk82z0l71lvh9+0x3bb20>
   28613:      	callq	*%rax
   28615:      	movq	0x10(%rsp), %rdi
   2861a:      	movq	%rax, %rsi
   2861d:      	movq	0x18(%rsp), %rax
   28622:      	movq	%rdx, 0x20(%rsp)
   28627:      	movq	%rsi, 0xc8(%rsp)
   2862f:      	movq	%rdx, 0xd0(%rsp)
   28637:      	movq	%rdi, 0xf8(%rsp)
   2863f:      	movq	%rax, 0x100(%rsp)
   28647:      	movq	0x134c2(%rip), %rax     # 0x3bb10 <zlgk82z0l71lvh9+0x3bb10>
   2864e:      	callq	*%rax
   28650:      	movq	0x10(%rsp), %rcx
   28655:      	movq	%rax, %rsi
   28658:      	movq	0x18(%rsp), %rax
   2865d:      	movq	%rdx, %rdi
   28660:      	movq	0x20(%rsp), %rdx
   28665:      	movq	%rdi, 0x28(%rsp)
   2866a:      	movq	%rsi, 0x30(%rsp)
   2866f:      	movq	%rcx, 0xe8(%rsp)
   28677:      	movq	%rax, 0xf0(%rsp)
   2867f:      	movq	%rax, %rcx
   28682:      	subq	%rdx, %rcx
   28685:      	movq	%rcx, 0x38(%rsp)
   2868a:      	cmpq	%rdx, %rax
   2868d:      	setb	%al
   28690:      	testb	$0x1, %al
   28692:      	jne	0x28730 <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x250>
   28698:      	jmp	0x286d1 <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x1f1>
   2869a:      	movq	0x58(%rsp), %rax
   2869f:      	movq	0x48(%rsp), %rcx
   286a4:      	movq	0x50(%rsp), %rdx
   286a9:      	movq	%rdx, (%rax)
   286ac:      	movq	%rcx, 0x8(%rax)
   286b0:      	leaq	-0x163a7(%rip), %rcx    # 0x12310 <str.4+0x40>
   286b7:      	movq	%rcx, 0x10(%rax)
   286bb:      	movq	$0x0, 0x18(%rax)
   286c3:      	movq	%rcx, 0x20(%rax)
   286c7:      	movq	$0x0, 0x28(%rax)
   286cf:      	jmp	0x2874e <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x26e>
   286d1:      	movq	0x20(%rsp), %rsi
   286d6:      	movq	0x38(%rsp), %rax
   286db:      	movq	0x10(%rsp), %rdi
   286e0:      	movq	%rdi, 0xd8(%rsp)
   286e8:      	movq	%rax, 0xe0(%rsp)
   286f0:      	addq	%rax, %rdi
   286f3:      	movq	0x12eee(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   286fa:      	callq	*%rax
   286fc:      	movq	(%rsp), %r9
   28700:      	movq	0x8(%rsp), %r8
   28705:      	movq	0x30(%rsp), %rdi
   2870a:      	movq	0x28(%rsp), %rsi
   2870f:      	movq	%rax, %rcx
   28712:      	movq	0x58(%rsp), %rax
   28717:      	movq	%r9, (%rax)
   2871a:      	movq	%r8, 0x8(%rax)
   2871e:      	movq	%rdi, 0x10(%rax)
   28722:      	movq	%rsi, 0x18(%rax)
   28726:      	movq	%rcx, 0x20(%rax)
   2872a:      	movq	%rdx, 0x28(%rax)
   2872e:      	jmp	0x2874e <core::slice::<impl [T]>::align_to::h9603a380c419d8ae+0x26e>
   28730:      	leaq	-0x16697(%rip), %rdi    # 0x120a0 <str.0>
   28737:      	leaq	0x11c52(%rip), %rdx     # 0x3a390 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x490>
   2873e:      	movq	0x1278b(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   28745:      	movl	$0x21, %esi
   2874a:      	callq	*%rax
   2874c:      	ud2
   2874e:      	movq	0x60(%rsp), %rax
   28753:      	addq	$0x118, %rsp            # imm = 0x118
   2875a:      	retq
   2875b:      	int3
   2875c:      	int3
   2875d:      	int3
   2875e:      	int3
   2875f:      	int3

0000000000028760 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::haystack::haee06d69ceda4135>:
   28760:      	pushq	%rax
   28761:      	movq	%rdi, (%rsp)
   28765:      	movq	(%rdi), %rax
   28768:      	movq	0x8(%rdi), %rdx
   2876c:      	popq	%rcx
   2876d:      	retq
   2876e:      	int3
   2876f:      	int3

0000000000028770 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473>:
   28770:      	subq	$0x138, %rsp            # imm = 0x138
   28777:      	movq	%rsi, 0x38(%rsp)
   2877c:      	movq	%rdi, 0x40(%rsp)
   28781:      	movq	%rdi, 0x48(%rsp)
   28786:      	movq	%rsi, 0xe8(%rsp)
   2878e:      	movq	0x38(%rsp), %rax
   28793:      	movq	(%rax), %rdi
   28796:      	movq	0x8(%rax), %rsi
   2879a:      	movq	%rdi, 0x128(%rsp)
   287a2:      	movq	%rsi, 0x130(%rsp)
   287aa:      	movq	0x10(%rax), %rcx
   287ae:      	movq	0x18(%rax), %rax
   287b2:      	movq	%rcx, 0x68(%rsp)
   287b7:      	movq	%rax, 0x70(%rsp)
   287bc:      	movq	0x68(%rsp), %rdx
   287c1:      	movq	0x70(%rsp), %rcx
   287c6:      	movq	0x12e8b(%rip), %rax     # 0x3b658 <zlgk82z0l71lvh9+0x3b658>
   287cd:      	callq	*%rax
   287cf:      	movq	%rax, %rdi
   287d2:      	movq	%rdx, %rsi
   287d5:      	movq	0x12e84(%rip), %rax     # 0x3b660 <zlgk82z0l71lvh9+0x3b660>
   287dc:      	callq	*%rax
   287de:      	movq	%rdx, 0x60(%rsp)
   287e3:      	movq	%rax, 0x58(%rsp)
   287e8:      	movq	0x58(%rsp), %rdx
   287ed:      	xorl	%eax, %eax
   287ef:      	movl	$0x1, %ecx
   287f4:      	cmpq	$0x0, %rdx
   287f8:      	cmoveq	%rcx, %rax
   287fc:      	cmpq	$0x0, %rax
   28800:      	jne	0x28854 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0xe4>
   28802:      	movq	0x38(%rsp), %rax
   28807:      	movq	0x58(%rsp), %rdx
   2880c:      	movq	%rdx, 0x18(%rsp)
   28811:      	movq	0x60(%rsp), %rcx
   28816:      	movq	%rcx, 0x20(%rsp)
   2881b:      	movq	%rdx, 0xf0(%rsp)
   28823:      	movq	%rcx, 0xf8(%rsp)
   2882b:      	movq	%rax, %rcx
   2882e:      	addq	$0x28, %rcx
   28832:      	movq	%rcx, 0x28(%rsp)
   28837:      	movq	0x20(%rax), %rax
   2883b:      	movq	%rax, %rcx
   2883e:      	subq	$0x1, %rcx
   28842:      	movq	%rcx, 0x30(%rsp)
   28847:      	cmpq	$0x1, %rax
   2884b:      	setb	%al
   2884e:      	testb	$0x1, %al
   28850:      	jne	0x288b2 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x142>
   28852:      	jmp	0x28867 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0xf7>
   28854:      	movq	0x40(%rsp), %rdi
   28859:      	movq	0x12e08(%rip), %rax     # 0x3b668 <zlgk82z0l71lvh9+0x3b668>
   28860:      	callq	*%rax
   28862:      	jmp	0x28b26 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x3b6>
   28867:      	movq	0x30(%rsp), %rdx
   2886c:      	movq	0x28(%rsp), %rdi
   28871:      	movq	0x12df8(%rip), %rax     # 0x3b670 <zlgk82z0l71lvh9+0x3b670>
   28878:      	movl	$0x4, %esi
   2887d:      	callq	*%rax
   2887f:      	movq	0x18(%rsp), %rsi
   28884:      	movq	0x20(%rsp), %rdx
   28889:      	movzbl	(%rax), %edi
   2888c:      	movb	%dil, %al
   2888f:      	movb	%al, 0x107(%rsp)
   28896:      	callq	0x24c60 <core::slice::memchr::memchr::h2a6b17698e102805>
   2889b:      	movq	%rdx, 0x80(%rsp)
   288a3:      	movq	%rax, 0x78(%rsp)
   288a8:      	cmpq	$0x1, 0x78(%rsp)
   288ae:      	je	0x288d0 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x160>
   288b0:      	jmp	0x288f2 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x182>
   288b2:      	leaq	-0x16139(%rip), %rdi    # 0x12780 <str.1>
   288b9:      	leaq	0x11b00(%rip), %rdx     # 0x3a3c0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x4c0>
   288c0:      	movq	0x12609(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   288c7:      	movl	$0x21, %esi
   288cc:      	callq	*%rax
   288ce:      	ud2
   288d0:      	movq	0x80(%rsp), %rax
   288d8:      	movq	%rax, 0x108(%rsp)
   288e0:      	addq	$0x1, %rax
   288e4:      	movq	%rax, 0x10(%rsp)
   288e9:      	setb	%al
   288ec:      	testb	$0x1, %al
   288ee:      	jne	0x2892c <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x1bc>
   288f0:      	jmp	0x28910 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x1a0>
   288f2:      	movq	0x40(%rsp), %rax
   288f7:      	movq	0x38(%rsp), %rcx
   288fc:      	movq	0x18(%rcx), %rdx
   28900:      	movq	%rdx, 0x10(%rcx)
   28904:      	movq	$0x0, (%rax)
   2890b:      	jmp	0x28b26 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x3b6>
   28910:      	movq	0x38(%rsp), %rcx
   28915:      	movq	0x10(%rsp), %rax
   2891a:      	addq	0x10(%rcx), %rax
   2891e:      	movq	%rax, 0x8(%rsp)
   28923:      	setb	%al
   28926:      	testb	$0x1, %al
   28928:      	jne	0x28967 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x1f7>
   2892a:      	jmp	0x2894a <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x1da>
   2892c:      	leaq	-0x16253(%rip), %rdi    # 0x126e0 <str.0>
   28933:      	leaq	0x11a9e(%rip), %rdx     # 0x3a3d8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x4d8>
   2893a:      	movq	0x1258f(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   28941:      	movl	$0x1c, %esi
   28946:      	callq	*%rax
   28948:      	ud2
   2894a:      	movq	0x38(%rsp), %rcx
   2894f:      	movq	0x8(%rsp), %rax
   28954:      	movq	%rax, 0x10(%rcx)
   28958:      	movq	0x10(%rcx), %rax
   2895c:      	cmpq	0x20(%rcx), %rax
   28960:      	jae	0x28985 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x215>
   28962:      	jmp	0x2878e <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x1e>
   28967:      	leaq	-0x1628e(%rip), %rdi    # 0x126e0 <str.0>
   2896e:      	leaq	0x11a7b(%rip), %rdx     # 0x3a3f0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x4f0>
   28975:      	movq	0x12554(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2897c:      	movl	$0x1c, %esi
   28981:      	callq	*%rax
   28983:      	ud2
   28985:      	movq	0x38(%rsp), %rcx
   2898a:      	movq	0x10(%rcx), %rax
   2898e:      	movq	0x20(%rcx), %rcx
   28992:      	movq	%rax, %rdx
   28995:      	subq	%rcx, %rdx
   28998:      	movq	%rdx, (%rsp)
   2899c:      	cmpq	%rcx, %rax
   2899f:      	setb	%al
   289a2:      	testb	$0x1, %al
   289a4:      	jne	0x28a31 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x2c1>
   289aa:      	movq	(%rsp), %rcx
   289ae:      	movq	0x38(%rsp), %rax
   289b3:      	movq	%rcx, 0x110(%rsp)
   289bb:      	movq	(%rax), %rdi
   289be:      	movq	0x8(%rax), %rsi
   289c2:      	movq	%rdi, 0x118(%rsp)
   289ca:      	movq	%rsi, 0x120(%rsp)
   289d2:      	movq	0x10(%rax), %rax
   289d6:      	movq	%rcx, 0x98(%rsp)
   289de:      	movq	%rax, 0xa0(%rsp)
   289e6:      	movq	0x98(%rsp), %rdx
   289ee:      	movq	0xa0(%rsp), %rcx
   289f6:      	movq	0x12c5b(%rip), %rax     # 0x3b658 <zlgk82z0l71lvh9+0x3b658>
   289fd:      	callq	*%rax
   289ff:      	movq	%rdx, 0x90(%rsp)
   28a07:      	movq	%rax, 0x88(%rsp)
   28a0f:      	movq	0x88(%rsp), %rdx
   28a17:      	movl	$0x1, %eax
   28a1c:      	xorl	%ecx, %ecx
   28a1e:      	cmpq	$0x0, %rdx
   28a22:      	cmoveq	%rcx, %rax
   28a26:      	cmpq	$0x1, %rax
   28a2a:      	je	0x28a4f <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x2df>
   28a2c:      	jmp	0x2878e <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x1e>
   28a31:      	leaq	-0x162b8(%rip), %rdi    # 0x12780 <str.1>
   28a38:      	leaq	0x119c9(%rip), %rdx     # 0x3a408 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x508>
   28a3f:      	movq	0x1248a(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   28a46:      	movl	$0x21, %esi
   28a4b:      	callq	*%rax
   28a4d:      	ud2
   28a4f:      	movq	0x38(%rsp), %rax
   28a54:      	movq	0x88(%rsp), %rdx
   28a5c:      	movq	0x90(%rsp), %rcx
   28a64:      	movq	%rdx, 0xa8(%rsp)
   28a6c:      	movq	%rcx, 0xb0(%rsp)
   28a74:      	movq	%rax, %rdi
   28a77:      	addq	$0x28, %rdi
   28a7b:      	movq	0x20(%rax), %rax
   28a7f:      	movq	$0x0, 0xc8(%rsp)
   28a8b:      	movq	%rax, 0xd0(%rsp)
   28a93:      	movq	0xc8(%rsp), %rsi
   28a9b:      	movq	0xd0(%rsp), %rdx
   28aa3:      	leaq	0x11976(%rip), %rcx     # 0x3a420 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x520>
   28aaa:      	movq	0x12bc7(%rip), %rax     # 0x3b678 <zlgk82z0l71lvh9+0x3b678>
   28ab1:      	callq	*%rax
   28ab3:      	movq	%rax, 0xb8(%rsp)
   28abb:      	movq	%rdx, 0xc0(%rsp)
   28ac3:      	movq	0x12b4e(%rip), %rax     # 0x3b618 <zlgk82z0l71lvh9+0x3b618>
   28aca:      	leaq	0xa8(%rsp), %rdi
   28ad2:      	leaq	0xb8(%rsp), %rsi
   28ada:      	callq	*%rax
   28adc:      	testb	$0x1, %al
   28ade:      	jne	0x28ae5 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x375>
   28ae0:      	jmp	0x2878e <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473+0x1e>
   28ae5:      	movq	0x40(%rsp), %rax
   28aea:      	movq	(%rsp), %rdx
   28aee:      	movq	0x38(%rsp), %rcx
   28af3:      	movq	0x10(%rcx), %rcx
   28af7:      	movq	%rdx, 0xd8(%rsp)
   28aff:      	movq	%rcx, 0xe0(%rsp)
   28b07:      	movq	0xd8(%rsp), %rdx
   28b0f:      	movq	0xe0(%rsp), %rcx
   28b17:      	movq	%rdx, 0x8(%rax)
   28b1b:      	movq	%rcx, 0x10(%rax)
   28b1f:      	movq	$0x1, (%rax)
   28b26:      	movq	0x48(%rsp), %rax
   28b2b:      	addq	$0x138, %rsp            # imm = 0x138
   28b32:      	retq
   28b33:      	int3
   28b34:      	int3
   28b35:      	int3
   28b36:      	int3
   28b37:      	int3
   28b38:      	int3
   28b39:      	int3
   28b3a:      	int3
   28b3b:      	int3
   28b3c:      	int3
   28b3d:      	int3
   28b3e:      	int3
   28b3f:      	int3

0000000000028b40 <<char as core::str::pattern::Pattern>::into_searcher::ha4d9ce77b1891659>:
   28b40:      	pushq	%rbp
   28b41:      	pushq	%rbx
   28b42:      	subq	$0x58, %rsp
   28b46:      	movq	%rcx, 0x8(%rsp)
   28b4b:      	movq	%rdx, (%rsp)
   28b4f:      	movl	%esi, 0x14(%rsp)
   28b53:      	movq	%rdi, %rax
   28b56:      	movl	0x14(%rsp), %edi
   28b5a:      	movq	%rax, 0x20(%rsp)
   28b5f:      	movq	%rax, 0x28(%rsp)
   28b64:      	movl	%edi, 0x3c(%rsp)
   28b68:      	movq	%rdx, 0x40(%rsp)
   28b6d:      	movq	%rcx, 0x48(%rsp)
   28b72:      	movl	$0x0, 0x34(%rsp)
   28b7a:      	leaq	0x34(%rsp), %rsi
   28b7f:      	movl	$0x4, %edx
   28b84:      	callq	0x28e10 <core::char::methods::<impl char>::encode_utf8::hdb88e8bbc89b8b13>
   28b89:      	movq	%rax, %rdi
   28b8c:      	movq	%rdx, %rsi
   28b8f:      	callq	0x2ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>
   28b94:      	movq	(%rsp), %rdi
   28b98:      	movq	0x8(%rsp), %rsi
   28b9d:      	movq	%rax, 0x18(%rsp)
   28ba2:      	movq	%rax, 0x50(%rsp)
   28ba7:      	callq	0x2ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>
   28bac:      	movq	(%rsp), %r9
   28bb0:      	movq	0x8(%rsp), %r8
   28bb5:      	movl	0x14(%rsp), %esi
   28bb9:      	movq	0x18(%rsp), %rcx
   28bbe:      	movq	0x20(%rsp), %rdi
   28bc3:      	movq	%rax, %rdx
   28bc6:      	movq	0x28(%rsp), %rax
   28bcb:      	movb	0x34(%rsp), %r10b
   28bd0:      	movb	0x35(%rsp), %r11b
   28bd5:      	movb	0x36(%rsp), %bl
   28bd9:      	movb	0x37(%rsp), %bpl
   28bde:      	movb	%bpl, 0x3b(%rsp)
   28be3:      	movb	%bl, 0x3a(%rsp)
   28be7:      	movb	%r11b, 0x39(%rsp)
   28bec:      	movb	%r10b, 0x38(%rsp)
   28bf1:      	movq	%r9, (%rdi)
   28bf4:      	movq	%r8, 0x8(%rdi)
   28bf8:      	movq	$0x0, 0x10(%rdi)
   28c00:      	movq	%rdx, 0x18(%rdi)
   28c04:      	movl	%esi, 0x2c(%rdi)
   28c07:      	movq	%rcx, 0x20(%rdi)
   28c0b:      	movb	0x38(%rsp), %cl
   28c0f:      	movb	0x39(%rsp), %dl
   28c13:      	movb	0x3a(%rsp), %sil
   28c18:      	movb	0x3b(%rsp), %r8b
   28c1d:      	movb	%r8b, 0x2b(%rdi)
   28c21:      	movb	%sil, 0x2a(%rdi)
   28c25:      	movb	%dl, 0x29(%rdi)
   28c28:      	movb	%cl, 0x28(%rdi)
   28c2b:      	addq	$0x58, %rsp
   28c2f:      	popq	%rbx
   28c30:      	popq	%rbp
   28c31:      	retq
   28c32:      	int3
   28c33:      	int3
   28c34:      	int3
   28c35:      	int3
   28c36:      	int3
   28c37:      	int3
   28c38:      	int3
   28c39:      	int3
   28c3a:      	int3
   28c3b:      	int3
   28c3c:      	int3
   28c3d:      	int3
   28c3e:      	int3
   28c3f:      	int3

0000000000028c40 <<char as core::str::pattern::Pattern>::is_suffix_of::h099b0a80f17621a2>:
   28c40:      	subq	$0x28, %rsp
   28c44:      	movq	%rdx, (%rsp)
   28c48:      	movq	%rsi, 0x8(%rsp)
   28c4d:      	movl	%edi, 0x14(%rsp)
   28c51:      	movq	%rsi, 0x18(%rsp)
   28c56:      	movq	%rdx, 0x20(%rsp)
   28c5b:      	leaq	0x10(%rsp), %rax
   28c60:      	xorl	%ecx, %ecx
   28c62:      	movl	$0x0, (%rax)
   28c68:      	leaq	0x10(%rsp), %rsi
   28c6d:      	movl	$0x4, %edx
   28c72:      	callq	0x28e10 <core::char::methods::<impl char>::encode_utf8::hdb88e8bbc89b8b13>
   28c77:      	movq	(%rsp), %rcx
   28c7b:      	movq	%rax, %rdi
   28c7e:      	movq	%rdx, %rsi
   28c81:      	movq	0x8(%rsp), %rdx
   28c86:      	callq	0x28ca0 <<&str as core::str::pattern::Pattern>::is_suffix_of::h417cc838ae7b3ab7>
   28c8b:      	andb	$0x1, %al
   28c8d:      	movzbl	%al, %eax
   28c90:      	addq	$0x28, %rsp
   28c94:      	retq
   28c95:      	int3
   28c96:      	int3
   28c97:      	int3
   28c98:      	int3
   28c99:      	int3
   28c9a:      	int3
   28c9b:      	int3
   28c9c:      	int3
   28c9d:      	int3
   28c9e:      	int3
   28c9f:      	int3

0000000000028ca0 <<&str as core::str::pattern::Pattern>::is_suffix_of::h417cc838ae7b3ab7>:
   28ca0:      	subq	$0x58, %rsp
   28ca4:      	movq	%rcx, 0x8(%rsp)
   28ca9:      	movq	%rdx, 0x10(%rsp)
   28cae:      	movq	%rsi, %rcx
   28cb1:      	movq	0x8(%rsp), %rsi
   28cb6:      	movq	%rdi, %rdx
   28cb9:      	movq	0x10(%rsp), %rdi
   28cbe:      	movq	%rdx, 0x18(%rsp)
   28cc3:      	movq	%rcx, 0x20(%rsp)
   28cc8:      	movq	%rdi, 0x28(%rsp)
   28ccd:      	movq	%rsi, 0x30(%rsp)
   28cd2:      	movq	%rdi, 0x48(%rsp)
   28cd7:      	movq	%rsi, 0x50(%rsp)
   28cdc:      	movq	%rdx, 0x38(%rsp)
   28ce1:      	movq	%rcx, 0x40(%rsp)
   28ce6:      	movq	0x12e2b(%rip), %rax     # 0x3bb18 <zlgk82z0l71lvh9+0x3bb18>
   28ced:      	callq	*%rax
   28cef:      	andb	$0x1, %al
   28cf1:      	movzbl	%al, %eax
   28cf4:      	addq	$0x58, %rsp
   28cf8:      	retq
   28cf9:      	int3
   28cfa:      	int3
   28cfb:      	int3
   28cfc:      	int3
   28cfd:      	int3
   28cfe:      	int3
   28cff:      	int3

0000000000028d00 <core::char::convert::from_u32::hef7157105ba2ff3d>:
   28d00:      	subq	$0x18, %rsp
   28d04:      	movl	%edi, 0x10(%rsp)
   28d08:      	callq	0x28da0 <core::char::convert::char_try_from_u32::hd3491fd16ae2b103>
   28d0d:      	movl	%eax, 0xc(%rsp)
   28d11:      	xorl	%eax, %eax
   28d13:      	movl	$0x1, %ecx
   28d18:      	cmpl	$0x110000, 0xc(%rsp)    # imm = 0x110000
   28d20:      	cmoveq	%rcx, %rax
   28d24:      	cmpq	$0x0, %rax
   28d28:      	jne	0x28d38 <core::char::convert::from_u32::hef7157105ba2ff3d+0x38>
   28d2a:      	movl	0xc(%rsp), %eax
   28d2e:      	movl	%eax, 0x14(%rsp)
   28d32:      	movl	%eax, 0x8(%rsp)
   28d36:      	jmp	0x28d40 <core::char::convert::from_u32::hef7157105ba2ff3d+0x40>
   28d38:      	movl	$0x110000, 0x8(%rsp)    # imm = 0x110000
   28d40:      	movl	0x8(%rsp), %eax
   28d44:      	addq	$0x18, %rsp
   28d48:      	retq
   28d49:      	int3
   28d4a:      	int3
   28d4b:      	int3
   28d4c:      	int3
   28d4d:      	int3
   28d4e:      	int3
   28d4f:      	int3

0000000000028d50 <core::char::convert::from_u32_unchecked::h4ea954bd7b2d3736>:
   28d50:      	subq	$0x18, %rsp
   28d54:      	movl	%edi, 0xc(%rsp)
   28d58:      	movl	%edi, 0x14(%rsp)
   28d5c:      	movb	$0x1, %al
   28d5e:      	testb	$0x1, %al
   28d60:      	jne	0x28d6c <core::char::convert::from_u32_unchecked::h4ea954bd7b2d3736+0x1c>
   28d62:      	movl	0xc(%rsp), %eax
   28d66:      	movl	%eax, 0x10(%rsp)
   28d6a:      	jmp	0x28d8b <core::char::convert::from_u32_unchecked::h4ea954bd7b2d3736+0x3b>
   28d6c:      	movl	0xc(%rsp), %edi
   28d70:      	callq	0x28df0 <core::char::methods::<impl char>::from_u32::h392a3e4887993c5a>
   28d75:      	movl	%eax, %edi
   28d77:      	leaq	0x116ba(%rip), %rsi     # 0x3a438 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x538>
   28d7e:      	movq	0x1289b(%rip), %rax     # 0x3b620 <zlgk82z0l71lvh9+0x3b620>
   28d85:      	callq	*%rax
   28d87:      	movl	%eax, 0x10(%rsp)
   28d8b:      	movl	0x10(%rsp), %eax
   28d8f:      	addq	$0x18, %rsp
   28d93:      	retq
   28d94:      	int3
   28d95:      	int3
   28d96:      	int3
   28d97:      	int3
   28d98:      	int3
   28d99:      	int3
   28d9a:      	int3
   28d9b:      	int3
   28d9c:      	int3
   28d9d:      	int3
   28d9e:      	int3
   28d9f:      	int3

0000000000028da0 <core::char::convert::char_try_from_u32::hd3491fd16ae2b103>:
   28da0:      	subq	$0x14, %rsp
   28da4:      	movl	%edi, %eax
   28da6:      	movl	%eax, (%rsp)
   28da9:      	movl	%eax, 0x8(%rsp)
   28dad:      	xorl	$0xd800, %eax           # imm = 0xD800
   28db2:      	movl	%eax, 0xc(%rsp)
   28db6:      	movl	$0x800, 0x10(%rsp)      # imm = 0x800
   28dbe:      	subl	$0x800, %eax            # imm = 0x800
   28dc3:      	cmpl	$0x10f800, %eax         # imm = 0x10F800
   28dc8:      	jae	0x28dd3 <core::char::convert::char_try_from_u32::hd3491fd16ae2b103+0x33>
   28dca:      	movl	(%rsp), %eax
   28dcd:      	movl	%eax, 0x4(%rsp)
   28dd1:      	jmp	0x28ddb <core::char::convert::char_try_from_u32::hd3491fd16ae2b103+0x3b>
   28dd3:      	movl	$0x110000, 0x4(%rsp)    # imm = 0x110000
   28ddb:      	movl	0x4(%rsp), %eax
   28ddf:      	addq	$0x14, %rsp
   28de3:      	retq
   28de4:      	int3
   28de5:      	int3
   28de6:      	int3
   28de7:      	int3
   28de8:      	int3
   28de9:      	int3
   28dea:      	int3
   28deb:      	int3
   28dec:      	int3
   28ded:      	int3
   28dee:      	int3
   28def:      	int3

0000000000028df0 <core::char::methods::<impl char>::from_u32::h392a3e4887993c5a>:
   28df0:      	pushq	%rax
   28df1:      	movl	%edi, 0x4(%rsp)
   28df5:      	callq	0x28d00 <core::char::convert::from_u32::hef7157105ba2ff3d>
   28dfa:      	popq	%rcx
   28dfb:      	retq
   28dfc:      	int3
   28dfd:      	int3
   28dfe:      	int3
   28dff:      	int3

0000000000028e00 <core::char::methods::<impl char>::from_u32_unchecked::hef982f5d78cc9f1f>:
   28e00:      	pushq	%rax
   28e01:      	movl	%edi, 0x4(%rsp)
   28e05:      	callq	0x28d50 <core::char::convert::from_u32_unchecked::h4ea954bd7b2d3736>
   28e0a:      	popq	%rcx
   28e0b:      	retq
   28e0c:      	int3
   28e0d:      	int3
   28e0e:      	int3
   28e0f:      	int3

0000000000028e10 <core::char::methods::<impl char>::encode_utf8::hdb88e8bbc89b8b13>:
   28e10:      	subq	$0x18, %rsp
   28e14:      	movl	%edi, 0x4(%rsp)
   28e18:      	movq	%rsi, 0x8(%rsp)
   28e1d:      	movq	%rdx, 0x10(%rsp)
   28e22:      	callq	0x28eb0 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908>
   28e27:      	movq	%rax, %rdi
   28e2a:      	movq	%rdx, %rsi
   28e2d:      	callq	0x253e0 <core::str::converts::from_utf8_unchecked_mut::h17570e59e35676c5>
   28e32:      	addq	$0x18, %rsp
   28e36:      	retq
   28e37:      	int3
   28e38:      	int3
   28e39:      	int3
   28e3a:      	int3
   28e3b:      	int3
   28e3c:      	int3
   28e3d:      	int3
   28e3e:      	int3
   28e3f:      	int3

0000000000028e40 <core::char::methods::len_utf8::h2e3b0ea644f53a05>:
   28e40:      	subq	$0x18, %rsp
   28e44:      	movl	%edi, 0x4(%rsp)
   28e48:      	movl	%edi, 0x14(%rsp)
   28e4c:      	cmpl	$0x80, %edi
   28e52:      	jb	0x28e61 <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x21>
   28e54:      	movl	0x4(%rsp), %eax
   28e58:      	cmpl	$0x800, %eax            # imm = 0x800
   28e5d:      	jb	0x28e79 <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x39>
   28e5f:      	jmp	0x28e6c <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x2c>
   28e61:      	movq	$0x1, 0x8(%rsp)
   28e6a:      	jmp	0x28e98 <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x58>
   28e6c:      	movl	0x4(%rsp), %eax
   28e70:      	cmpl	$0x10000, %eax          # imm = 0x10000
   28e75:      	jb	0x28e8f <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x4f>
   28e77:      	jmp	0x28e84 <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x44>
   28e79:      	movq	$0x2, 0x8(%rsp)
   28e82:      	jmp	0x28e98 <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x58>
   28e84:      	movq	$0x4, 0x8(%rsp)
   28e8d:      	jmp	0x28e98 <core::char::methods::len_utf8::h2e3b0ea644f53a05+0x58>
   28e8f:      	movq	$0x3, 0x8(%rsp)
   28e98:      	movq	0x8(%rsp), %rax
   28e9d:      	addq	$0x18, %rsp
   28ea1:      	retq
   28ea2:      	int3
   28ea3:      	int3
   28ea4:      	int3
   28ea5:      	int3
   28ea6:      	int3
   28ea7:      	int3
   28ea8:      	int3
   28ea9:      	int3
   28eaa:      	int3
   28eab:      	int3
   28eac:      	int3
   28ead:      	int3
   28eae:      	int3
   28eaf:      	int3

0000000000028eb0 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908>:
   28eb0:      	subq	$0x198, %rsp            # imm = 0x198
   28eb7:      	movq	%rdx, 0x10(%rsp)
   28ebc:      	movq	%rsi, 0x8(%rsp)
   28ec1:      	movl	%edi, 0x2c(%rsp)
   28ec5:      	movq	%rsi, 0xc0(%rsp)
   28ecd:      	movq	%rdx, 0xc8(%rsp)
   28ed5:      	movl	0x2c(%rsp), %edi
   28ed9:      	callq	0x28e40 <core::char::methods::len_utf8::h2e3b0ea644f53a05>
   28ede:      	movq	0x8(%rsp), %rdi
   28ee3:      	movq	0x10(%rsp), %rsi
   28ee8:      	movq	%rax, 0x30(%rsp)
   28eed:      	movq	0x30(%rsp), %rax
   28ef2:      	movq	%rax, 0x18(%rsp)
   28ef7:      	leaq	0x11552(%rip), %rdx     # 0x3a450 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x550>
   28efe:      	movq	0x123ab(%rip), %rax     # 0x3b2b0 <zlgk82z0l71lvh9+0x3b2b0>
   28f05:      	callq	*%rax
   28f07:      	movq	0x18(%rsp), %rcx
   28f0c:      	movq	%rcx, 0x38(%rsp)
   28f11:      	movq	%rax, 0x40(%rsp)
   28f16:      	movq	%rdx, 0x48(%rsp)
   28f1b:      	movq	0x38(%rsp), %rax
   28f20:      	decq	%rax
   28f23:      	movq	%rax, 0x20(%rsp)
   28f28:      	subq	$0x3, %rax
   28f2c:      	ja	0x28f43 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x93>
   28f2e:      	movq	0x20(%rsp), %rax
   28f33:      	leaq	-0x16796(%rip), %rcx    # 0x127a4 <str.1+0x24>
   28f3a:      	movslq	(%rcx,%rax,4), %rax
   28f3e:      	addq	%rcx, %rax
   28f41:      	jmpq	*%rax
   28f43:      	movq	0x10(%rsp), %rcx
   28f48:      	leaq	0x30(%rsp), %rdx
   28f4d:      	movq	%rdx, 0x148(%rsp)
   28f55:      	movq	%rdx, 0x160(%rsp)
   28f5d:      	movq	0x12354(%rip), %rax     # 0x3b2b8 <zlgk82z0l71lvh9+0x3b2b8>
   28f64:      	movq	%rax, 0x168(%rsp)
   28f6c:      	movq	%rdx, 0x150(%rsp)
   28f74:      	movq	%rax, 0x158(%rsp)
   28f7c:      	movq	0x150(%rsp), %r8
   28f84:      	movq	0x158(%rsp), %rdi
   28f8c:      	leaq	0x2c(%rsp), %rsi
   28f91:      	movq	%rsi, 0x170(%rsp)
   28f99:      	movq	%rsi, 0x188(%rsp)
   28fa1:      	movq	0x121a0(%rip), %rdx     # 0x3b148 <zlgk82z0l71lvh9+0x3b148>
   28fa8:      	movq	%rdx, 0x190(%rsp)
   28fb0:      	movq	%rsi, 0x178(%rsp)
   28fb8:      	movq	%rdx, 0x180(%rsp)
   28fc0:      	movq	0x178(%rsp), %rsi
   28fc8:      	movq	0x180(%rsp), %rdx
   28fd0:      	movq	%rcx, 0xb0(%rsp)
   28fd8:      	leaq	0xb0(%rsp), %rcx
   28fe0:      	movq	%rcx, 0x120(%rsp)
   28fe8:      	movq	%rcx, 0x138(%rsp)
   28ff0:      	movq	%rax, 0x140(%rsp)
   28ff8:      	movq	%rcx, 0x128(%rsp)
   29000:      	movq	%rax, 0x130(%rsp)
   29008:      	movq	0x128(%rsp), %rcx
   29010:      	movq	0x130(%rsp), %rax
   29018:      	movq	%r8, 0x80(%rsp)
   29020:      	movq	%rdi, 0x88(%rsp)
   29028:      	movq	%rsi, 0x90(%rsp)
   29030:      	movq	%rdx, 0x98(%rsp)
   29038:      	movq	%rcx, 0xa0(%rsp)
   29040:      	movq	%rax, 0xa8(%rsp)
   29048:      	leaq	0x11431(%rip), %rsi     # 0x3a480 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x580>
   2904f:      	leaq	0x50(%rsp), %rdi
   29054:      	movq	%rdi, (%rsp)
   29058:      	leaq	0x80(%rsp), %rcx
   29060:      	movl	$0x3, %r8d
   29066:      	movq	%r8, %rdx
   29069:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   2906e:      	movq	(%rsp), %rdi
   29072:      	leaq	0x11437(%rip), %rsi     # 0x3a4b0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x5b0>
   29079:      	movq	0x11e40(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   29080:      	callq	*%rax
   29082:      	ud2
   29084:      	cmpq	$0x1, 0x48(%rsp)
   2908a:      	jae	0x290c0 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x210>
   2908c:      	jmp	0x28f43 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x93>
   29091:      	cmpq	$0x2, 0x48(%rsp)
   29097:      	jae	0x2910a <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x25a>
   29099:      	jmp	0x28f43 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x93>
   2909e:      	cmpq	$0x3, 0x48(%rsp)
   290a4:      	jae	0x29149 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x299>
   290aa:      	jmp	0x28f43 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x93>
   290af:      	cmpq	$0x4, 0x48(%rsp)
   290b5:      	jae	0x291b1 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x301>
   290bb:      	jmp	0x28f43 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x93>
   290c0:      	movq	0x40(%rsp), %rax
   290c5:      	movq	%rax, 0xd0(%rsp)
   290cd:      	movl	0x2c(%rsp), %ecx
   290d1:      	movb	%cl, (%rax)
   290d3:      	movq	0x10(%rsp), %rsi
   290d8:      	movq	0x8(%rsp), %rdi
   290dd:      	movq	0x30(%rsp), %rax
   290e2:      	movq	%rax, 0xb8(%rsp)
   290ea:      	movq	0xb8(%rsp), %rdx
   290f2:      	leaq	0x1136f(%rip), %rcx     # 0x3a468 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x568>
   290f9:      	movq	0x121c0(%rip), %rax     # 0x3b2c0 <zlgk82z0l71lvh9+0x3b2c0>
   29100:      	callq	*%rax
   29102:      	addq	$0x198, %rsp            # imm = 0x198
   29109:      	retq
   2910a:      	movq	0x40(%rsp), %rcx
   2910f:      	movq	%rcx, 0xd8(%rsp)
   29117:      	movq	0x40(%rsp), %rax
   2911c:      	movq	%rax, %rdx
   2911f:      	addq	$0x1, %rdx
   29123:      	movq	%rdx, 0xe0(%rsp)
   2912b:      	movl	0x2c(%rsp), %edx
   2912f:      	shrl	$0x6, %edx
   29132:      	andl	$0x1f, %edx
   29135:      	orb	$-0x40, %dl
   29138:      	movb	%dl, (%rcx)
   2913a:      	movl	0x2c(%rsp), %ecx
   2913e:      	andl	$0x3f, %ecx
   29141:      	orb	$-0x80, %cl
   29144:      	movb	%cl, 0x1(%rax)
   29147:      	jmp	0x290d3 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x223>
   29149:      	movq	0x40(%rsp), %rdx
   2914e:      	movq	%rdx, 0xe8(%rsp)
   29156:      	movq	0x40(%rsp), %rcx
   2915b:      	movq	%rcx, %rax
   2915e:      	addq	$0x1, %rax
   29162:      	movq	%rax, 0xf0(%rsp)
   2916a:      	movq	0x40(%rsp), %rax
   2916f:      	movq	%rax, %rsi
   29172:      	addq	$0x2, %rsi
   29176:      	movq	%rsi, 0xf8(%rsp)
   2917e:      	movl	0x2c(%rsp), %esi
   29182:      	shrl	$0xc, %esi
   29185:      	andl	$0xf, %esi
   29188:      	orb	$-0x20, %sil
   2918c:      	movb	%sil, (%rdx)
   2918f:      	movl	0x2c(%rsp), %edx
   29193:      	shrl	$0x6, %edx
   29196:      	andl	$0x3f, %edx
   29199:      	orb	$-0x80, %dl
   2919c:      	movb	%dl, 0x1(%rcx)
   2919f:      	movl	0x2c(%rsp), %ecx
   291a3:      	andl	$0x3f, %ecx
   291a6:      	orb	$-0x80, %cl
   291a9:      	movb	%cl, 0x2(%rax)
   291ac:      	jmp	0x290d3 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x223>
   291b1:      	movq	0x40(%rsp), %rsi
   291b6:      	movq	%rsi, 0x100(%rsp)
   291be:      	movq	0x40(%rsp), %rdx
   291c3:      	movq	%rdx, %rax
   291c6:      	addq	$0x1, %rax
   291ca:      	movq	%rax, 0x108(%rsp)
   291d2:      	movq	0x40(%rsp), %rcx
   291d7:      	movq	%rcx, %rax
   291da:      	addq	$0x2, %rax
   291de:      	movq	%rax, 0x110(%rsp)
   291e6:      	movq	0x40(%rsp), %rax
   291eb:      	movq	%rax, %rdi
   291ee:      	addq	$0x3, %rdi
   291f2:      	movq	%rdi, 0x118(%rsp)
   291fa:      	movl	0x2c(%rsp), %edi
   291fe:      	shrl	$0x12, %edi
   29201:      	andl	$0x7, %edi
   29204:      	orb	$-0x10, %dil
   29208:      	movb	%dil, (%rsi)
   2920b:      	movl	0x2c(%rsp), %esi
   2920f:      	shrl	$0xc, %esi
   29212:      	andl	$0x3f, %esi
   29215:      	orb	$-0x80, %sil
   29219:      	movb	%sil, 0x1(%rdx)
   2921d:      	movl	0x2c(%rsp), %edx
   29221:      	shrl	$0x6, %edx
   29224:      	andl	$0x3f, %edx
   29227:      	orb	$-0x80, %dl
   2922a:      	movb	%dl, 0x2(%rcx)
   2922d:      	movl	0x2c(%rsp), %ecx
   29231:      	andl	$0x3f, %ecx
   29234:      	orb	$-0x80, %cl
   29237:      	movb	%cl, 0x3(%rax)
   2923a:      	jmp	0x290d3 <core::char::methods::encode_utf8_raw::h78e90c92d93e5908+0x223>
   2923f:      	int3

0000000000029240 <core::panic::location::Location::caller::h76673794ba3bdf99>:
   29240:      	pushq	%rax
   29241:      	movq	%rdi, (%rsp)
   29245:      	movq	(%rsp), %rax
   29249:      	popq	%rcx
   2924a:      	retq
   2924b:      	int3
   2924c:      	int3
   2924d:      	int3
   2924e:      	int3
   2924f:      	int3

0000000000029250 <core::panicking::panic_fmt::h5e2ae77538c2b6ef>:
   29250:      	subq	$0x48, %rsp
   29254:      	movq	%rsi, 0x8(%rsp)
   29259:      	movq	%rdi, 0x10(%rsp)
   2925e:      	xorl	%eax, %eax
   29260:      	testb	$0x1, %al
   29262:      	jne	0x292a5 <core::panicking::panic_fmt::h5e2ae77538c2b6ef+0x55>
   29264:      	movq	0x8(%rsp), %rdi
   29269:      	movq	0x10(%rsp), %rax
   2926e:      	movq	%rax, 0x40(%rsp)
   29273:      	callq	0x29240 <core::panic::location::Location::caller::h76673794ba3bdf99>
   29278:      	movq	%rax, %rdx
   2927b:      	movq	0x40(%rsp), %rsi
   29280:      	leaq	0x18(%rsp), %rdi
   29285:      	movq	%rdi, (%rsp)
   29289:      	movl	$0x1, %ecx
   2928e:      	xorl	%r8d, %r8d
   29291:      	callq	0x2c320 <core::panic::panic_info::PanicInfo::internal_constructor::h8caf99dc679bd2c1>
   29296:      	movq	(%rsp), %rdi
   2929a:      	movq	0x11b47(%rip), %rax     # 0x3ade8 <zlgk82z0l71lvh9+0x3ade8>
   292a1:      	callq	*%rax
   292a3:      	ud2
   292a5:      	ud2
   292a7:      	ud2
   292a9:      	int3
   292aa:      	int3
   292ab:      	int3
   292ac:      	int3
   292ad:      	int3
   292ae:      	int3
   292af:      	int3

00000000000292b0 <core::panicking::panic_nounwind_fmt::hf23572ed81fb761c>:
   292b0:      	subq	$0x58, %rsp
   292b4:      	movq	%rdx, 0x8(%rsp)
   292b9:      	movq	%rdi, 0x10(%rsp)
   292be:      	movb	%sil, %al
   292c1:      	movb	%al, 0x1f(%rsp)
   292c5:      	andb	$0x1, %al
   292c7:      	movb	%al, 0x57(%rsp)
   292cb:      	xorl	%eax, %eax
   292cd:      	testb	$0x1, %al
   292cf:      	jne	0x29318 <core::panicking::panic_nounwind_fmt::hf23572ed81fb761c+0x68>
   292d1:      	movq	0x8(%rsp), %rdi
   292d6:      	movq	0x10(%rsp), %rax
   292db:      	movq	%rax, 0x48(%rsp)
   292e0:      	callq	0x29240 <core::panic::location::Location::caller::h76673794ba3bdf99>
   292e5:      	movq	%rax, %rdx
   292e8:      	movb	0x1f(%rsp), %al
   292ec:      	movq	0x48(%rsp), %rsi
   292f1:      	movzbl	%al, %r8d
   292f5:      	andl	$0x1, %r8d
   292f9:      	leaq	0x20(%rsp), %rdi
   292fe:      	movq	%rdi, (%rsp)
   29302:      	xorl	%ecx, %ecx
   29304:      	callq	0x2c320 <core::panic::panic_info::PanicInfo::internal_constructor::h8caf99dc679bd2c1>
   29309:      	movq	(%rsp), %rdi
   2930d:      	movq	0x11ad4(%rip), %rax     # 0x3ade8 <zlgk82z0l71lvh9+0x3ade8>
   29314:      	callq	*%rax
   29316:      	ud2
   29318:      	ud2
   2931a:      	ud2
   2931c:      	int3
   2931d:      	int3
   2931e:      	int3
   2931f:      	int3

0000000000029320 <core::panicking::panic::h5659e2b928ad56bc>:
   29320:      	subq	$0x68, %rsp
   29324:      	movq	%rdx, 0x10(%rsp)
   29329:      	movq	%rdi, 0x58(%rsp)
   2932e:      	movq	%rsi, 0x60(%rsp)
   29333:      	movq	%rdi, 0x48(%rsp)
   29338:      	movq	%rsi, 0x50(%rsp)
   2933d:      	leaq	0x18(%rsp), %rdi
   29342:      	movq	%rdi, 0x8(%rsp)
   29347:      	leaq	0x48(%rsp), %rsi
   2934c:      	movl	$0x1, %edx
   29351:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   29356:      	movq	0x8(%rsp), %rdi
   2935b:      	movq	0x10(%rsp), %rsi
   29360:      	movq	0x11b59(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   29367:      	callq	*%rax
   29369:      	ud2
   2936b:      	int3
   2936c:      	int3
   2936d:      	int3
   2936e:      	int3
   2936f:      	int3

0000000000029370 <core::panicking::panic_nounwind::habe4f8bedd5bc041>:
   29370:      	subq	$0x58, %rsp
   29374:      	movq	%rdi, 0x48(%rsp)
   29379:      	movq	%rsi, 0x50(%rsp)
   2937e:      	movq	%rdi, 0x38(%rsp)
   29383:      	movq	%rsi, 0x40(%rsp)
   29388:      	leaq	0x8(%rsp), %rdi
   2938d:      	movq	%rdi, (%rsp)
   29391:      	leaq	0x38(%rsp), %rsi
   29396:      	movl	$0x1, %edx
   2939b:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   293a0:      	movq	(%rsp), %rdi
   293a4:      	leaq	0x1111d(%rip), %rdx     # 0x3a4c8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x5c8>
   293ab:      	movq	0x1277e(%rip), %rax     # 0x3bb30 <zlgk82z0l71lvh9+0x3bb30>
   293b2:      	xorl	%esi, %esi
   293b4:      	callq	*%rax
   293b6:      	ud2
   293b8:      	int3
   293b9:      	int3
   293ba:      	int3
   293bb:      	int3
   293bc:      	int3
   293bd:      	int3
   293be:      	int3
   293bf:      	int3

00000000000293c0 <core::panicking::panic_str::h1d6e7140eac69a5b>:
   293c0:      	subq	$0x18, %rsp
   293c4:      	movq	%rdx, (%rsp)
   293c8:      	movq	%rsi, %rax
   293cb:      	movq	(%rsp), %rsi
   293cf:      	movq	%rdi, 0x8(%rsp)
   293d4:      	movq	%rax, 0x10(%rsp)
   293d9:      	movq	0x11cf0(%rip), %rax     # 0x3b0d0 <zlgk82z0l71lvh9+0x3b0d0>
   293e0:      	leaq	0x8(%rsp), %rdi
   293e5:      	callq	*%rax
   293e7:      	ud2
   293e9:      	int3
   293ea:      	int3
   293eb:      	int3
   293ec:      	int3
   293ed:      	int3
   293ee:      	int3
   293ef:      	int3

00000000000293f0 <core::panicking::panic_display::h3fc4c9772b6ac9ba>:
   293f0:      	subq	$0x88, %rsp
   293f7:      	movq	%rsi, 0x10(%rsp)
   293fc:      	movq	%rdi, 0x58(%rsp)
   29401:      	movq	%rdi, 0x60(%rsp)
   29406:      	movq	%rdi, 0x78(%rsp)
   2940b:      	movq	0x1208e(%rip), %rax     # 0x3b4a0 <zlgk82z0l71lvh9+0x3b4a0>
   29412:      	movq	%rax, 0x80(%rsp)
   2941a:      	movq	%rdi, 0x68(%rsp)
   2941f:      	movq	%rax, 0x70(%rsp)
   29424:      	movq	0x68(%rsp), %rcx
   29429:      	movq	0x70(%rsp), %rax
   2942e:      	movq	%rcx, 0x48(%rsp)
   29433:      	movq	%rax, 0x50(%rsp)
   29438:      	leaq	0x110a1(%rip), %rsi     # 0x3a4e0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x5e0>
   2943f:      	leaq	0x18(%rsp), %rdi
   29444:      	movq	%rdi, 0x8(%rsp)
   29449:      	leaq	0x48(%rsp), %rcx
   2944e:      	movl	$0x1, %r8d
   29454:      	movq	%r8, %rdx
   29457:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   2945c:      	movq	0x8(%rsp), %rdi
   29461:      	movq	0x10(%rsp), %rsi
   29466:      	movq	0x11a53(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2946d:      	callq	*%rax
   2946f:      	ud2
   29471:      	int3
   29472:      	int3
   29473:      	int3
   29474:      	int3
   29475:      	int3
   29476:      	int3
   29477:      	int3
   29478:      	int3
   29479:      	int3
   2947a:      	int3
   2947b:      	int3
   2947c:      	int3
   2947d:      	int3
   2947e:      	int3
   2947f:      	int3

0000000000029480 <core::panicking::panic_bounds_check::hdd9a08b1c67c64fb>:
   29480:      	subq	$0xc8, %rsp
   29487:      	movq	%rdx, 0x10(%rsp)
   2948c:      	movq	%rdi, 0x18(%rsp)
   29491:      	movq	%rsi, 0x20(%rsp)
   29496:      	xorl	%eax, %eax
   29498:      	testb	$0x1, %al
   2949a:      	jne	0x2956b <core::panicking::panic_bounds_check::hdd9a08b1c67c64fb+0xeb>
   294a0:      	leaq	0x20(%rsp), %rcx
   294a5:      	movq	%rcx, 0xa0(%rsp)
   294ad:      	movq	%rcx, 0xb8(%rsp)
   294b5:      	movq	0x11dfc(%rip), %rax     # 0x3b2b8 <zlgk82z0l71lvh9+0x3b2b8>
   294bc:      	movq	%rax, 0xc0(%rsp)
   294c4:      	movq	%rcx, 0xa8(%rsp)
   294cc:      	movq	%rax, 0xb0(%rsp)
   294d4:      	movq	0xa8(%rsp), %rsi
   294dc:      	movq	0xb0(%rsp), %rdx
   294e4:      	leaq	0x18(%rsp), %rcx
   294e9:      	movq	%rcx, 0x78(%rsp)
   294ee:      	movq	%rcx, 0x90(%rsp)
   294f6:      	movq	%rax, 0x98(%rsp)
   294fe:      	movq	%rcx, 0x80(%rsp)
   29506:      	movq	%rax, 0x88(%rsp)
   2950e:      	movq	0x80(%rsp), %rcx
   29516:      	movq	0x88(%rsp), %rax
   2951e:      	movq	%rsi, 0x58(%rsp)
   29523:      	movq	%rdx, 0x60(%rsp)
   29528:      	movq	%rcx, 0x68(%rsp)
   2952d:      	movq	%rax, 0x70(%rsp)
   29532:      	leaq	0x10fb7(%rip), %rsi     # 0x3a4f0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x5f0>
   29539:      	leaq	0x28(%rsp), %rdi
   2953e:      	movq	%rdi, 0x8(%rsp)
   29543:      	leaq	0x58(%rsp), %rcx
   29548:      	movl	$0x2, %r8d
   2954e:      	movq	%r8, %rdx
   29551:      	callq	0x2c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>
   29556:      	movq	0x8(%rsp), %rdi
   2955b:      	movq	0x10(%rsp), %rsi
   29560:      	movq	0x11959(%rip), %rax     # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   29567:      	callq	*%rax
   29569:      	ud2
   2956b:      	ud2
   2956d:      	ud2
   2956f:      	int3

0000000000029570 <core::iter::adapters::rev::Rev<T>::new::h13b6e03901389e3a>:
   29570:      	subq	$0x20, %rsp
   29574:      	movq	%rdi, 0x10(%rsp)
   29579:      	movq	%rsi, 0x18(%rsp)
   2957e:      	movq	%rdi, (%rsp)
   29582:      	movq	%rsi, 0x8(%rsp)
   29587:      	movq	(%rsp), %rax
   2958b:      	movq	0x8(%rsp), %rdx
   29590:      	addq	$0x20, %rsp
   29594:      	retq
   29595:      	int3
   29596:      	int3
   29597:      	int3
   29598:      	int3
   29599:      	int3
   2959a:      	int3
   2959b:      	int3
   2959c:      	int3
   2959d:      	int3
   2959e:      	int3
   2959f:      	int3

00000000000295a0 <<core::iter::adapters::rev::Rev<I> as core::iter::traits::iterator::Iterator>::next::h2506957e884d07c3>:
   295a0:      	pushq	%rax
   295a1:      	movq	%rdi, (%rsp)
   295a5:      	movq	0x1259c(%rip), %rax     # 0x3bb48 <zlgk82z0l71lvh9+0x3bb48>
   295ac:      	callq	*%rax
   295ae:      	popq	%rcx
   295af:      	retq

00000000000295b0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h50428367b7f19680>:
   295b0:      	subq	$0x10, %rsp
   295b4:      	movq	%rsi, %rdx
   295b7:      	movq	%rdi, %rax
   295ba:      	movq	%rax, (%rsp)
   295be:      	movq	%rdx, 0x8(%rsp)
   295c3:      	addq	$0x10, %rsp
   295c7:      	retq
   295c8:      	int3
   295c9:      	int3
   295ca:      	int3
   295cb:      	int3
   295cc:      	int3
   295cd:      	int3
   295ce:      	int3
   295cf:      	int3

00000000000295d0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h8ca1c7f4582c9dfb>:
   295d0:      	movq	%rdi, %rax
   295d3:      	movq	(%rsi), %rcx
   295d6:      	movq	%rcx, (%rdi)
   295d9:      	movq	0x8(%rsi), %rcx
   295dd:      	movq	%rcx, 0x8(%rdi)
   295e1:      	movq	0x10(%rsi), %rcx
   295e5:      	movq	%rcx, 0x10(%rdi)
   295e9:      	retq
   295ea:      	int3
   295eb:      	int3
   295ec:      	int3
   295ed:      	int3
   295ee:      	int3
   295ef:      	int3

00000000000295f0 <core::iter::traits::iterator::Iterator::map::hcb5919d5c620e497>:
   295f0:      	subq	$0x18, %rsp
   295f4:      	movq	%rdi, (%rsp)
   295f8:      	movq	%rsi, 0x8(%rsp)
   295fd:      	movq	0x1255c(%rip), %rax     # 0x3bb60 <zlgk82z0l71lvh9+0x3bb60>
   29604:      	callq	*%rax
   29606:      	addq	$0x18, %rsp
   2960a:      	retq
   2960b:      	int3
   2960c:      	int3
   2960d:      	int3
   2960e:      	int3
   2960f:      	int3

0000000000029610 <core::iter::traits::iterator::Iterator::filter::h0495380744afa40a>:
   29610:      	subq	$0x18, %rsp
   29614:      	movq	%rdi, (%rsp)
   29618:      	movq	%rsi, 0x8(%rsp)
   2961d:      	movq	0x1254c(%rip), %rax     # 0x3bb70 <zlgk82z0l71lvh9+0x3bb70>
   29624:      	callq	*%rax
   29626:      	addq	$0x18, %rsp
   2962a:      	retq
   2962b:      	int3
   2962c:      	int3
   2962d:      	int3
   2962e:      	int3
   2962f:      	int3

0000000000029630 <core::iter::traits::iterator::Iterator::enumerate::h41b616ffa59dad36>:
   29630:      	subq	$0x18, %rsp
   29634:      	movq	%rdi, %rax
   29637:      	movq	%rax, (%rsp)
   2963b:      	movq	%rsi, 0x8(%rsp)
   29640:      	movq	%rdx, 0x10(%rsp)
   29645:      	movq	0x12534(%rip), %rax     # 0x3bb80 <zlgk82z0l71lvh9+0x3bb80>
   2964c:      	callq	*%rax
   2964e:      	movq	(%rsp), %rax
   29652:      	addq	$0x18, %rsp
   29656:      	retq
   29657:      	int3
   29658:      	int3
   29659:      	int3
   2965a:      	int3
   2965b:      	int3
   2965c:      	int3
   2965d:      	int3
   2965e:      	int3
   2965f:      	int3

0000000000029660 <core::iter::traits::iterator::Iterator::enumerate::h823f60641d9330b4>:
   29660:      	subq	$0x18, %rsp
   29664:      	movq	%rdi, %rax
   29667:      	movq	%rax, (%rsp)
   2966b:      	movq	%rsi, 0x8(%rsp)
   29670:      	movq	%rdx, 0x10(%rsp)
   29675:      	movq	0x1250c(%rip), %rax     # 0x3bb88 <zlgk82z0l71lvh9+0x3bb88>
   2967c:      	callq	*%rax
   2967e:      	movq	(%rsp), %rax
   29682:      	addq	$0x18, %rsp
   29686:      	retq
   29687:      	int3
   29688:      	int3
   29689:      	int3
   2968a:      	int3
   2968b:      	int3
   2968c:      	int3
   2968d:      	int3
   2968e:      	int3
   2968f:      	int3

0000000000029690 <core::iter::traits::iterator::Iterator::enumerate::hbe0d8b743c44c15f>:
   29690:      	subq	$0x18, %rsp
   29694:      	movq	%rdi, %rax
   29697:      	movq	%rax, (%rsp)
   2969b:      	movq	%rsi, 0x8(%rsp)
   296a0:      	movq	%rdx, 0x10(%rsp)
   296a5:      	movq	0x124ec(%rip), %rax     # 0x3bb98 <zlgk82z0l71lvh9+0x3bb98>
   296ac:      	callq	*%rax
   296ae:      	movq	(%rsp), %rax
   296b2:      	addq	$0x18, %rsp
   296b6:      	retq
   296b7:      	int3
   296b8:      	int3
   296b9:      	int3
   296ba:      	int3
   296bb:      	int3
   296bc:      	int3
   296bd:      	int3
   296be:      	int3
   296bf:      	int3

00000000000296c0 <core::iter::traits::iterator::Iterator::rev::h179cc3a05b9e7f42>:
   296c0:      	subq	$0x18, %rsp
   296c4:      	movq	%rdi, 0x8(%rsp)
   296c9:      	movq	%rsi, 0x10(%rsp)
   296ce:      	movq	0x1246b(%rip), %rax     # 0x3bb40 <zlgk82z0l71lvh9+0x3bb40>
   296d5:      	callq	*%rax
   296d7:      	addq	$0x18, %rsp
   296db:      	retq
   296dc:      	int3
   296dd:      	int3
   296de:      	int3
   296df:      	int3

00000000000296e0 <core::slice::iter::<impl core::iter::traits::collect::IntoIterator for &[T]>::into_iter::hbf4ffb6631c2eba8>:
   296e0:      	subq	$0x18, %rsp
   296e4:      	movq	%rdi, 0x8(%rsp)
   296e9:      	movq	%rsi, 0x10(%rsp)
   296ee:      	movq	0x123bb(%rip), %rax     # 0x3bab0 <zlgk82z0l71lvh9+0x3bab0>
   296f5:      	callq	*%rax
   296f7:      	addq	$0x18, %rsp
   296fb:      	retq
   296fc:      	int3
   296fd:      	int3
   296fe:      	int3
   296ff:      	int3

0000000000029700 <core::slice::iter::<impl core::iter::traits::collect::IntoIterator for &[T]>::into_iter::hcfd4bbacb6c4f45b>:
   29700:      	subq	$0x18, %rsp
   29704:      	movq	%rdi, 0x8(%rsp)
   29709:      	movq	%rsi, 0x10(%rsp)
   2970e:      	movq	0x123ab(%rip), %rax     # 0x3bac0 <zlgk82z0l71lvh9+0x3bac0>
   29715:      	callq	*%rax
   29717:      	addq	$0x18, %rsp
   2971b:      	retq
   2971c:      	int3
   2971d:      	int3
   2971e:      	int3
   2971f:      	int3

0000000000029720 <core::slice::iter::Iter<T>::new::h5ec27048c3683131>:
   29720:      	subq	$0x68, %rsp
   29724:      	movq	%rsi, (%rsp)
   29728:      	movq	%rdi, 0x8(%rsp)
   2972d:      	movq	%rdi, 0x28(%rsp)
   29732:      	movq	%rsi, 0x30(%rsp)
   29737:      	movq	%rdi, 0x58(%rsp)
   2973c:      	movq	%rsi, 0x60(%rsp)
   29741:      	movq	%rdi, 0x38(%rsp)
   29746:      	xorl	%eax, %eax
   29748:      	testb	$0x1, %al
   2974a:      	jne	0x2976d <core::slice::iter::Iter<T>::new::h5ec27048c3683131+0x4d>
   2974c:      	movq	0x8(%rsp), %rax
   29751:      	movq	(%rsp), %rcx
   29755:      	movq	%rax, 0x40(%rsp)
   2975a:      	movq	%rcx, 0x48(%rsp)
   2975f:      	shlq	$0x5, %rcx
   29763:      	addq	%rcx, %rax
   29766:      	movq	%rax, 0x20(%rsp)
   2976b:      	jmp	0x2977b <core::slice::iter::Iter<T>::new::h5ec27048c3683131+0x5b>
   2976d:      	movq	(%rsp), %rax
   29771:      	movq	%rax, 0x50(%rsp)
   29776:      	movq	%rax, 0x20(%rsp)
   2977b:      	movq	0x8(%rsp), %rdi
   29780:      	movq	0x12431(%rip), %rax     # 0x3bbb8 <zlgk82z0l71lvh9+0x3bbb8>
   29787:      	callq	*%rax
   29789:      	movq	%rax, %rcx
   2978c:      	movq	0x20(%rsp), %rax
   29791:      	movq	%rcx, 0x10(%rsp)
   29796:      	movq	%rax, 0x18(%rsp)
   2979b:      	movq	0x10(%rsp), %rax
   297a0:      	movq	0x18(%rsp), %rdx
   297a5:      	addq	$0x68, %rsp
   297a9:      	retq
   297aa:      	int3
   297ab:      	int3
   297ac:      	int3
   297ad:      	int3
   297ae:      	int3
   297af:      	int3

00000000000297b0 <core::slice::iter::Iter<T>::new::h8bbb23004409a86f>:
   297b0:      	subq	$0x68, %rsp
   297b4:      	movq	%rsi, (%rsp)
   297b8:      	movq	%rdi, 0x8(%rsp)
   297bd:      	movq	%rdi, 0x28(%rsp)
   297c2:      	movq	%rsi, 0x30(%rsp)
   297c7:      	movq	%rdi, 0x58(%rsp)
   297cc:      	movq	%rsi, 0x60(%rsp)
   297d1:      	movq	%rdi, 0x38(%rsp)
   297d6:      	xorl	%eax, %eax
   297d8:      	testb	$0x1, %al
   297da:      	jne	0x297fd <core::slice::iter::Iter<T>::new::h8bbb23004409a86f+0x4d>
   297dc:      	movq	0x8(%rsp), %rax
   297e1:      	movq	(%rsp), %rcx
   297e5:      	movq	%rax, 0x40(%rsp)
   297ea:      	movq	%rcx, 0x48(%rsp)
   297ef:      	imulq	$0x38, %rcx, %rcx
   297f3:      	addq	%rcx, %rax
   297f6:      	movq	%rax, 0x20(%rsp)
   297fb:      	jmp	0x2980b <core::slice::iter::Iter<T>::new::h8bbb23004409a86f+0x5b>
   297fd:      	movq	(%rsp), %rax
   29801:      	movq	%rax, 0x50(%rsp)
   29806:      	movq	%rax, 0x20(%rsp)
   2980b:      	movq	0x8(%rsp), %rdi
   29810:      	movq	0x123b1(%rip), %rax     # 0x3bbc8 <zlgk82z0l71lvh9+0x3bbc8>
   29817:      	callq	*%rax
   29819:      	movq	%rax, %rcx
   2981c:      	movq	0x20(%rsp), %rax
   29821:      	movq	%rcx, 0x10(%rsp)
   29826:      	movq	%rax, 0x18(%rsp)
   2982b:      	movq	0x10(%rsp), %rax
   29830:      	movq	0x18(%rsp), %rdx
   29835:      	addq	$0x68, %rsp
   29839:      	retq
   2983a:      	int3
   2983b:      	int3
   2983c:      	int3
   2983d:      	int3
   2983e:      	int3
   2983f:      	int3

0000000000029840 <core::slice::iter::Iter<T>::new::hd5c24a56c078caf2>:
   29840:      	subq	$0x68, %rsp
   29844:      	movq	%rsi, (%rsp)
   29848:      	movq	%rdi, 0x8(%rsp)
   2984d:      	movq	%rdi, 0x28(%rsp)
   29852:      	movq	%rsi, 0x30(%rsp)
   29857:      	movq	%rdi, 0x58(%rsp)
   2985c:      	movq	%rsi, 0x60(%rsp)
   29861:      	movq	%rdi, 0x38(%rsp)
   29866:      	xorl	%eax, %eax
   29868:      	testb	$0x1, %al
   2986a:      	jne	0x2988d <core::slice::iter::Iter<T>::new::hd5c24a56c078caf2+0x4d>
   2986c:      	movq	0x8(%rsp), %rax
   29871:      	movq	(%rsp), %rcx
   29875:      	movq	%rax, 0x40(%rsp)
   2987a:      	movq	%rcx, 0x48(%rsp)
   2987f:      	shlq	$0x3, %rcx
   29883:      	addq	%rcx, %rax
   29886:      	movq	%rax, 0x20(%rsp)
   2988b:      	jmp	0x2989b <core::slice::iter::Iter<T>::new::hd5c24a56c078caf2+0x5b>
   2988d:      	movq	(%rsp), %rax
   29891:      	movq	%rax, 0x50(%rsp)
   29896:      	movq	%rax, 0x20(%rsp)
   2989b:      	movq	0x8(%rsp), %rdi
   298a0:      	movq	0x12329(%rip), %rax     # 0x3bbd0 <zlgk82z0l71lvh9+0x3bbd0>
   298a7:      	callq	*%rax
   298a9:      	movq	%rax, %rcx
   298ac:      	movq	0x20(%rsp), %rax
   298b1:      	movq	%rcx, 0x10(%rsp)
   298b6:      	movq	%rax, 0x18(%rsp)
   298bb:      	movq	0x10(%rsp), %rax
   298c0:      	movq	0x18(%rsp), %rdx
   298c5:      	addq	$0x68, %rsp
   298c9:      	retq
   298ca:      	int3
   298cb:      	int3
   298cc:      	int3
   298cd:      	int3
   298ce:      	int3
   298cf:      	int3

00000000000298d0 <core::slice::iter::Iter<T>::new::he360cfdeb2996dcb>:
   298d0:      	subq	$0x68, %rsp
   298d4:      	movq	%rsi, (%rsp)
   298d8:      	movq	%rdi, 0x8(%rsp)
   298dd:      	movq	%rdi, 0x28(%rsp)
   298e2:      	movq	%rsi, 0x30(%rsp)
   298e7:      	movq	%rdi, 0x58(%rsp)
   298ec:      	movq	%rsi, 0x60(%rsp)
   298f1:      	movq	%rdi, 0x38(%rsp)
   298f6:      	xorl	%eax, %eax
   298f8:      	testb	$0x1, %al
   298fa:      	jne	0x29919 <core::slice::iter::Iter<T>::new::he360cfdeb2996dcb+0x49>
   298fc:      	movq	(%rsp), %rcx
   29900:      	movq	0x8(%rsp), %rax
   29905:      	movq	%rax, 0x40(%rsp)
   2990a:      	movq	%rcx, 0x48(%rsp)
   2990f:      	addq	%rcx, %rax
   29912:      	movq	%rax, 0x20(%rsp)
   29917:      	jmp	0x29927 <core::slice::iter::Iter<T>::new::he360cfdeb2996dcb+0x57>
   29919:      	movq	(%rsp), %rax
   2991d:      	movq	%rax, 0x50(%rsp)
   29922:      	movq	%rax, 0x20(%rsp)
   29927:      	movq	0x8(%rsp), %rdi
   2992c:      	movq	0x122a5(%rip), %rax     # 0x3bbd8 <zlgk82z0l71lvh9+0x3bbd8>
   29933:      	callq	*%rax
   29935:      	movq	%rax, %rcx
   29938:      	movq	0x20(%rsp), %rax
   2993d:      	movq	%rcx, 0x10(%rsp)
   29942:      	movq	%rax, 0x18(%rsp)
   29947:      	movq	0x10(%rsp), %rax
   2994c:      	movq	0x18(%rsp), %rdx
   29951:      	addq	$0x68, %rsp
   29955:      	retq
   29956:      	int3
   29957:      	int3
   29958:      	int3
   29959:      	int3
   2995a:      	int3
   2995b:      	int3
   2995c:      	int3
   2995d:      	int3
   2995e:      	int3
   2995f:      	int3

0000000000029960 <core::slice::iter::Iter<T>::new::he39aec8c175884bd>:
   29960:      	subq	$0x68, %rsp
   29964:      	movq	%rsi, (%rsp)
   29968:      	movq	%rdi, 0x8(%rsp)
   2996d:      	movq	%rdi, 0x28(%rsp)
   29972:      	movq	%rsi, 0x30(%rsp)
   29977:      	movq	%rdi, 0x58(%rsp)
   2997c:      	movq	%rsi, 0x60(%rsp)
   29981:      	movq	%rdi, 0x38(%rsp)
   29986:      	xorl	%eax, %eax
   29988:      	testb	$0x1, %al
   2998a:      	jne	0x299ad <core::slice::iter::Iter<T>::new::he39aec8c175884bd+0x4d>
   2998c:      	movq	0x8(%rsp), %rax
   29991:      	movq	(%rsp), %rcx
   29995:      	movq	%rax, 0x40(%rsp)
   2999a:      	movq	%rcx, 0x48(%rsp)
   2999f:      	shlq	$0x4, %rcx
   299a3:      	addq	%rcx, %rax
   299a6:      	movq	%rax, 0x20(%rsp)
   299ab:      	jmp	0x299bb <core::slice::iter::Iter<T>::new::he39aec8c175884bd+0x5b>
   299ad:      	movq	(%rsp), %rax
   299b1:      	movq	%rax, 0x50(%rsp)
   299b6:      	movq	%rax, 0x20(%rsp)
   299bb:      	movq	0x8(%rsp), %rdi
   299c0:      	movq	0x12221(%rip), %rax     # 0x3bbe8 <zlgk82z0l71lvh9+0x3bbe8>
   299c7:      	callq	*%rax
   299c9:      	movq	%rax, %rcx
   299cc:      	movq	0x20(%rsp), %rax
   299d1:      	movq	%rcx, 0x10(%rsp)
   299d6:      	movq	%rax, 0x18(%rsp)
   299db:      	movq	0x10(%rsp), %rax
   299e0:      	movq	0x18(%rsp), %rdx
   299e5:      	addq	$0x68, %rsp
   299e9:      	retq
   299ea:      	int3
   299eb:      	int3
   299ec:      	int3
   299ed:      	int3
   299ee:      	int3
   299ef:      	int3

00000000000299f0 <core::slice::iter::Iter<T>::as_slice::hd7d911f3ed0c673b>:
   299f0:      	subq	$0x38, %rsp
   299f4:      	movq	%rdi, %rax
   299f7:      	movq	%rax, 0x8(%rsp)
   299fc:      	movq	%rax, 0x18(%rsp)
   29a01:      	movq	(%rax), %rcx
   29a04:      	movq	%rcx, (%rsp)
   29a08:      	movq	%rcx, 0x28(%rsp)
   29a0d:      	movq	%rax, %rdi
   29a10:      	addq	$0x8, %rdi
   29a14:      	movq	%rdi, 0x30(%rsp)
   29a19:      	movq	0x8(%rax), %rdi
   29a1d:      	movq	%rdi, 0x20(%rsp)
   29a22:      	movq	(%rax), %rsi
   29a25:      	movq	0x11bc4(%rip), %rax     # 0x3b5f0 <zlgk82z0l71lvh9+0x3b5f0>
   29a2c:      	callq	*%rax
   29a2e:      	movq	(%rsp), %rdi
   29a32:      	movq	%rax, 0x10(%rsp)
   29a37:      	movq	0x10(%rsp), %rsi
   29a3c:      	movq	0x11ba5(%rip), %rax     # 0x3b5e8 <zlgk82z0l71lvh9+0x3b5e8>
   29a43:      	callq	*%rax
   29a45:      	addq	$0x38, %rsp
   29a49:      	retq
   29a4a:      	int3
   29a4b:      	int3
   29a4c:      	int3
   29a4d:      	int3
   29a4e:      	int3
   29a4f:      	int3

0000000000029a50 <core::slice::iter::IterMut<T>::new::ha025c0cf49b1d567>:
   29a50:      	subq	$0x68, %rsp
   29a54:      	movq	%rsi, (%rsp)
   29a58:      	movq	%rdi, 0x8(%rsp)
   29a5d:      	movq	%rdi, 0x28(%rsp)
   29a62:      	movq	%rsi, 0x30(%rsp)
   29a67:      	movq	%rdi, 0x58(%rsp)
   29a6c:      	movq	%rsi, 0x60(%rsp)
   29a71:      	movq	%rdi, 0x38(%rsp)
   29a76:      	xorl	%eax, %eax
   29a78:      	testb	$0x1, %al
   29a7a:      	jne	0x29a99 <core::slice::iter::IterMut<T>::new::ha025c0cf49b1d567+0x49>
   29a7c:      	movq	(%rsp), %rcx
   29a80:      	movq	0x8(%rsp), %rax
   29a85:      	movq	%rax, 0x40(%rsp)
   29a8a:      	movq	%rcx, 0x48(%rsp)
   29a8f:      	addq	%rcx, %rax
   29a92:      	movq	%rax, 0x20(%rsp)
   29a97:      	jmp	0x29aa7 <core::slice::iter::IterMut<T>::new::ha025c0cf49b1d567+0x57>
   29a99:      	movq	(%rsp), %rax
   29a9d:      	movq	%rax, 0x50(%rsp)
   29aa2:      	movq	%rax, 0x20(%rsp)
   29aa7:      	movq	0x8(%rsp), %rdi
   29aac:      	movq	0x12145(%rip), %rax     # 0x3bbf8 <zlgk82z0l71lvh9+0x3bbf8>
   29ab3:      	callq	*%rax
   29ab5:      	movq	%rax, %rcx
   29ab8:      	movq	0x20(%rsp), %rax
   29abd:      	movq	%rcx, 0x10(%rsp)
   29ac2:      	movq	%rax, 0x18(%rsp)
   29ac7:      	movq	0x10(%rsp), %rax
   29acc:      	movq	0x18(%rsp), %rdx
   29ad1:      	addq	$0x68, %rsp
   29ad5:      	retq
   29ad6:      	int3
   29ad7:      	int3
   29ad8:      	int3
   29ad9:      	int3
   29ada:      	int3
   29adb:      	int3
   29adc:      	int3
   29add:      	int3
   29ade:      	int3
   29adf:      	int3

0000000000029ae0 <core::slice::iter::IterMut<T>::new::hc4d56f02554bedfc>:
   29ae0:      	subq	$0x68, %rsp
   29ae4:      	movq	%rsi, (%rsp)
   29ae8:      	movq	%rdi, 0x8(%rsp)
   29aed:      	movq	%rdi, 0x28(%rsp)
   29af2:      	movq	%rsi, 0x30(%rsp)
   29af7:      	movq	%rdi, 0x58(%rsp)
   29afc:      	movq	%rsi, 0x60(%rsp)
   29b01:      	movq	%rdi, 0x38(%rsp)
   29b06:      	xorl	%eax, %eax
   29b08:      	testb	$0x1, %al
   29b0a:      	jne	0x29b29 <core::slice::iter::IterMut<T>::new::hc4d56f02554bedfc+0x49>
   29b0c:      	movq	(%rsp), %rcx
   29b10:      	movq	0x8(%rsp), %rax
   29b15:      	movq	%rax, 0x40(%rsp)
   29b1a:      	movq	%rcx, 0x48(%rsp)
   29b1f:      	addq	%rcx, %rax
   29b22:      	movq	%rax, 0x20(%rsp)
   29b27:      	jmp	0x29b37 <core::slice::iter::IterMut<T>::new::hc4d56f02554bedfc+0x57>
   29b29:      	movq	(%rsp), %rax
   29b2d:      	movq	%rax, 0x50(%rsp)
   29b32:      	movq	%rax, 0x20(%rsp)
   29b37:      	movq	0x8(%rsp), %rdi
   29b3c:      	movq	0x12095(%rip), %rax     # 0x3bbd8 <zlgk82z0l71lvh9+0x3bbd8>
   29b43:      	callq	*%rax
   29b45:      	movq	%rax, %rcx
   29b48:      	movq	0x20(%rsp), %rax
   29b4d:      	movq	%rcx, 0x10(%rsp)
   29b52:      	movq	%rax, 0x18(%rsp)
   29b57:      	movq	0x10(%rsp), %rax
   29b5c:      	movq	0x18(%rsp), %rdx
   29b61:      	addq	$0x68, %rsp
   29b65:      	retq
   29b66:      	int3
   29b67:      	int3
   29b68:      	int3
   29b69:      	int3
   29b6a:      	int3
   29b6b:      	int3
   29b6c:      	int3
   29b6d:      	int3
   29b6e:      	int3
   29b6f:      	int3

0000000000029b70 <core::slice::iter::Chunks<T>::new::h2816e1d4df216537>:
   29b70:      	subq	$0x18, %rsp
   29b74:      	movq	%rdi, %rax
   29b77:      	movq	%rsi, (%rsp)
   29b7b:      	movq	%rdx, 0x8(%rsp)
   29b80:      	movq	%rcx, 0x10(%rsp)
   29b85:      	movq	%rsi, (%rdi)
   29b88:      	movq	%rdx, 0x8(%rdi)
   29b8c:      	movq	%rcx, 0x10(%rdi)
   29b90:      	addq	$0x18, %rsp
   29b94:      	retq
   29b95:      	int3
   29b96:      	int3
   29b97:      	int3
   29b98:      	int3
   29b99:      	int3
   29b9a:      	int3
   29b9b:      	int3
   29b9c:      	int3
   29b9d:      	int3
   29b9e:      	int3
   29b9f:      	int3

0000000000029ba0 <<core::slice::iter::Chunks<T> as core::iter::traits::iterator::Iterator>::next::hed485c723165b6f2>:
   29ba0:      	subq	$0x68, %rsp
   29ba4:      	movq	%rdi, %rax
   29ba7:      	movq	%rax, (%rsp)
   29bab:      	movq	%rax, 0x38(%rsp)
   29bb0:      	movq	(%rax), %rdi
   29bb3:      	movq	0x8(%rax), %rsi
   29bb7:      	movq	0x11ec2(%rip), %rax     # 0x3ba80 <zlgk82z0l71lvh9+0x3ba80>
   29bbe:      	callq	*%rax
   29bc0:      	testb	$0x1, %al
   29bc2:      	jne	0x29c40 <<core::slice::iter::Chunks<T> as core::iter::traits::iterator::Iterator>::next::hed485c723165b6f2+0xa0>
   29bc4:      	movq	(%rsp), %rax
   29bc8:      	movq	0x8(%rax), %rdi
   29bcc:      	movq	0x10(%rax), %rsi
   29bd0:      	movq	0x11941(%rip), %rax     # 0x3b518 <zlgk82z0l71lvh9+0x3b518>
   29bd7:      	callq	*%rax
   29bd9:      	movq	%rax, %rcx
   29bdc:      	movq	(%rsp), %rax
   29be0:      	movq	%rcx, 0x40(%rsp)
   29be5:      	movq	(%rax), %rsi
   29be8:      	movq	0x8(%rax), %rdx
   29bec:      	leaq	0x1091d(%rip), %r8      # 0x3a510 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x610>
   29bf3:      	movq	0x11f06(%rip), %rax     # 0x3bb00 <zlgk82z0l71lvh9+0x3bb00>
   29bfa:      	leaq	0x18(%rsp), %rdi
   29bff:      	callq	*%rax
   29c01:      	movq	(%rsp), %rdx
   29c05:      	movq	0x18(%rsp), %rcx
   29c0a:      	movq	0x20(%rsp), %rax
   29c0f:      	movq	%rcx, 0x48(%rsp)
   29c14:      	movq	%rax, 0x50(%rsp)
   29c19:      	movq	0x28(%rsp), %rdi
   29c1e:      	movq	0x30(%rsp), %rsi
   29c23:      	movq	%rdi, 0x58(%rsp)
   29c28:      	movq	%rsi, 0x60(%rsp)
   29c2d:      	movq	%rdi, (%rdx)
   29c30:      	movq	%rsi, 0x8(%rdx)
   29c34:      	movq	%rcx, 0x8(%rsp)
   29c39:      	movq	%rax, 0x10(%rsp)
   29c3e:      	jmp	0x29c49 <<core::slice::iter::Chunks<T> as core::iter::traits::iterator::Iterator>::next::hed485c723165b6f2+0xa9>
   29c40:      	movq	$0x0, 0x8(%rsp)
   29c49:      	movq	0x8(%rsp), %rax
   29c4e:      	movq	0x10(%rsp), %rdx
   29c53:      	addq	$0x68, %rsp
   29c57:      	retq
   29c58:      	int3
   29c59:      	int3
   29c5a:      	int3
   29c5b:      	int3
   29c5c:      	int3
   29c5d:      	int3
   29c5e:      	int3
   29c5f:      	int3

0000000000029c60 <<usize as core::iter::range::Step>::forward_unchecked::h100654c5c075c13f>:
   29c60:      	subq	$0x20, %rsp
   29c64:      	movq	%rdi, %rax
   29c67:      	movq	%rax, (%rsp)
   29c6b:      	movq	%rsi, 0x8(%rsp)
   29c70:      	movq	%rax, 0x10(%rsp)
   29c75:      	movq	%rsi, 0x18(%rsp)
   29c7a:      	addq	%rsi, %rax
   29c7d:      	addq	$0x20, %rsp
   29c81:      	retq
   29c82:      	int3
   29c83:      	int3
   29c84:      	int3
   29c85:      	int3
   29c86:      	int3
   29c87:      	int3
   29c88:      	int3
   29c89:      	int3
   29c8a:      	int3
   29c8b:      	int3
   29c8c:      	int3
   29c8d:      	int3
   29c8e:      	int3
   29c8f:      	int3

0000000000029c90 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h023deefe356c6258>:
   29c90:      	subq	$0x98, %rsp
   29c97:      	movq	%rdi, 0x8(%rsp)
   29c9c:      	movq	%rdi, 0x30(%rsp)
   29ca1:      	xorl	%eax, %eax
   29ca3:      	testb	$0x1, %al
   29ca5:      	jne	0x29cd7 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h023deefe356c6258+0x47>
   29ca7:      	movq	0x8(%rsp), %rdi
   29cac:      	movq	%rdi, %rax
   29caf:      	addq	$0x8, %rax
   29cb3:      	movq	%rax, 0x50(%rsp)
   29cb8:      	movq	0x8(%rdi), %rax
   29cbc:      	movq	%rax, 0x20(%rsp)
   29cc1:      	movq	0x11f40(%rip), %rax     # 0x3bc08 <zlgk82z0l71lvh9+0x3bc08>
   29cc8:      	leaq	0x20(%rsp), %rsi
   29ccd:      	callq	*%rax
   29ccf:      	andb	$0x1, %al
   29cd1:      	movb	%al, 0x1f(%rsp)
   29cd5:      	jmp	0x29cfc <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h023deefe356c6258+0x6c>
   29cd7:      	movq	0x8(%rsp), %rax
   29cdc:      	movq	0x8(%rax), %rax
   29ce0:      	movq	%rax, 0x58(%rsp)
   29ce5:      	movq	%rax, 0x60(%rsp)
   29cea:      	movq	%rax, 0x38(%rsp)
   29cef:      	cmpq	$0x0, %rax
   29cf3:      	sete	%al
   29cf6:      	andb	$0x1, %al
   29cf8:      	movb	%al, 0x1f(%rsp)
   29cfc:      	testb	$0x1, 0x1f(%rsp)
   29d01:      	jne	0x29d81 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h023deefe356c6258+0xf1>
   29d03:      	movq	0x8(%rsp), %rax
   29d08:      	movq	%rax, 0x70(%rsp)
   29d0d:      	movq	$0x1, 0x78(%rsp)
   29d16:      	movq	(%rax), %rcx
   29d19:      	movq	%rcx, (%rsp)
   29d1d:      	movq	%rcx, 0x80(%rsp)
   29d25:      	movq	%rax, %rcx
   29d28:      	addq	$0x8, %rcx
   29d2c:      	movq	%rcx, 0x90(%rsp)
   29d34:      	movq	%rcx, 0x88(%rsp)
   29d3c:      	movq	(%rax), %rdi
   29d3f:      	movq	0x11eca(%rip), %rax     # 0x3bc10 <zlgk82z0l71lvh9+0x3bc10>
   29d46:      	movl	$0x1, %esi
   29d4b:      	callq	*%rax
   29d4d:      	movq	0x8(%rsp), %rcx
   29d52:      	movq	%rax, %rdx
   29d55:      	movq	(%rsp), %rax
   29d59:      	movq	%rdx, (%rcx)
   29d5c:      	movq	%rax, 0x28(%rsp)
   29d61:      	leaq	0x28(%rsp), %rax
   29d66:      	movq	%rax, 0x40(%rsp)
   29d6b:      	movq	0x28(%rsp), %rax
   29d70:      	movq	%rax, 0x48(%rsp)
   29d75:      	movq	%rax, 0x68(%rsp)
   29d7a:      	movq	%rax, 0x10(%rsp)
   29d7f:      	jmp	0x29d8a <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h023deefe356c6258+0xfa>
   29d81:      	movq	$0x0, 0x10(%rsp)
   29d8a:      	movq	0x10(%rsp), %rax
   29d8f:      	addq	$0x98, %rsp
   29d96:      	retq
   29d97:      	int3
   29d98:      	int3
   29d99:      	int3
   29d9a:      	int3
   29d9b:      	int3
   29d9c:      	int3
   29d9d:      	int3
   29d9e:      	int3
   29d9f:      	int3

0000000000029da0 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h84e817de2e3e9d2f>:
   29da0:      	subq	$0x98, %rsp
   29da7:      	movq	%rdi, 0x8(%rsp)
   29dac:      	movq	%rdi, 0x30(%rsp)
   29db1:      	xorl	%eax, %eax
   29db3:      	testb	$0x1, %al
   29db5:      	jne	0x29de7 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h84e817de2e3e9d2f+0x47>
   29db7:      	movq	0x8(%rsp), %rdi
   29dbc:      	movq	%rdi, %rax
   29dbf:      	addq	$0x8, %rax
   29dc3:      	movq	%rax, 0x50(%rsp)
   29dc8:      	movq	0x8(%rdi), %rax
   29dcc:      	movq	%rax, 0x20(%rsp)
   29dd1:      	movq	0x11e48(%rip), %rax     # 0x3bc20 <zlgk82z0l71lvh9+0x3bc20>
   29dd8:      	leaq	0x20(%rsp), %rsi
   29ddd:      	callq	*%rax
   29ddf:      	andb	$0x1, %al
   29de1:      	movb	%al, 0x1f(%rsp)
   29de5:      	jmp	0x29e0c <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h84e817de2e3e9d2f+0x6c>
   29de7:      	movq	0x8(%rsp), %rax
   29dec:      	movq	0x8(%rax), %rax
   29df0:      	movq	%rax, 0x58(%rsp)
   29df5:      	movq	%rax, 0x60(%rsp)
   29dfa:      	movq	%rax, 0x38(%rsp)
   29dff:      	cmpq	$0x0, %rax
   29e03:      	sete	%al
   29e06:      	andb	$0x1, %al
   29e08:      	movb	%al, 0x1f(%rsp)
   29e0c:      	testb	$0x1, 0x1f(%rsp)
   29e11:      	jne	0x29e91 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h84e817de2e3e9d2f+0xf1>
   29e13:      	movq	0x8(%rsp), %rax
   29e18:      	movq	%rax, 0x70(%rsp)
   29e1d:      	movq	$0x1, 0x78(%rsp)
   29e26:      	movq	(%rax), %rcx
   29e29:      	movq	%rcx, (%rsp)
   29e2d:      	movq	%rcx, 0x80(%rsp)
   29e35:      	movq	%rax, %rcx
   29e38:      	addq	$0x8, %rcx
   29e3c:      	movq	%rcx, 0x90(%rsp)
   29e44:      	movq	%rcx, 0x88(%rsp)
   29e4c:      	movq	(%rax), %rdi
   29e4f:      	movq	0x11dd2(%rip), %rax     # 0x3bc28 <zlgk82z0l71lvh9+0x3bc28>
   29e56:      	movl	$0x1, %esi
   29e5b:      	callq	*%rax
   29e5d:      	movq	0x8(%rsp), %rcx
   29e62:      	movq	%rax, %rdx
   29e65:      	movq	(%rsp), %rax
   29e69:      	movq	%rdx, (%rcx)
   29e6c:      	movq	%rax, 0x28(%rsp)
   29e71:      	leaq	0x28(%rsp), %rax
   29e76:      	movq	%rax, 0x40(%rsp)
   29e7b:      	movq	0x28(%rsp), %rax
   29e80:      	movq	%rax, 0x48(%rsp)
   29e85:      	movq	%rax, 0x68(%rsp)
   29e8a:      	movq	%rax, 0x10(%rsp)
   29e8f:      	jmp	0x29e9a <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::h84e817de2e3e9d2f+0xfa>
   29e91:      	movq	$0x0, 0x10(%rsp)
   29e9a:      	movq	0x10(%rsp), %rax
   29e9f:      	addq	$0x98, %rsp
   29ea6:      	retq
   29ea7:      	int3
   29ea8:      	int3
   29ea9:      	int3
   29eaa:      	int3
   29eab:      	int3
   29eac:      	int3
   29ead:      	int3
   29eae:      	int3
   29eaf:      	int3

0000000000029eb0 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha480bbc44e87fa46>:
   29eb0:      	subq	$0x98, %rsp
   29eb7:      	movq	%rdi, 0x8(%rsp)
   29ebc:      	movq	%rdi, 0x30(%rsp)
   29ec1:      	xorl	%eax, %eax
   29ec3:      	testb	$0x1, %al
   29ec5:      	jne	0x29ef7 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha480bbc44e87fa46+0x47>
   29ec7:      	movq	0x8(%rsp), %rdi
   29ecc:      	movq	%rdi, %rax
   29ecf:      	addq	$0x8, %rax
   29ed3:      	movq	%rax, 0x50(%rsp)
   29ed8:      	movq	0x8(%rdi), %rax
   29edc:      	movq	%rax, 0x20(%rsp)
   29ee1:      	movq	0x11d50(%rip), %rax     # 0x3bc38 <zlgk82z0l71lvh9+0x3bc38>
   29ee8:      	leaq	0x20(%rsp), %rsi
   29eed:      	callq	*%rax
   29eef:      	andb	$0x1, %al
   29ef1:      	movb	%al, 0x1f(%rsp)
   29ef5:      	jmp	0x29f1c <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha480bbc44e87fa46+0x6c>
   29ef7:      	movq	0x8(%rsp), %rax
   29efc:      	movq	0x8(%rax), %rax
   29f00:      	movq	%rax, 0x58(%rsp)
   29f05:      	movq	%rax, 0x60(%rsp)
   29f0a:      	movq	%rax, 0x38(%rsp)
   29f0f:      	cmpq	$0x0, %rax
   29f13:      	sete	%al
   29f16:      	andb	$0x1, %al
   29f18:      	movb	%al, 0x1f(%rsp)
   29f1c:      	testb	$0x1, 0x1f(%rsp)
   29f21:      	jne	0x29fa1 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha480bbc44e87fa46+0xf1>
   29f23:      	movq	0x8(%rsp), %rax
   29f28:      	movq	%rax, 0x70(%rsp)
   29f2d:      	movq	$0x1, 0x78(%rsp)
   29f36:      	movq	(%rax), %rcx
   29f39:      	movq	%rcx, (%rsp)
   29f3d:      	movq	%rcx, 0x80(%rsp)
   29f45:      	movq	%rax, %rcx
   29f48:      	addq	$0x8, %rcx
   29f4c:      	movq	%rcx, 0x90(%rsp)
   29f54:      	movq	%rcx, 0x88(%rsp)
   29f5c:      	movq	(%rax), %rdi
   29f5f:      	movq	0x11cda(%rip), %rax     # 0x3bc40 <zlgk82z0l71lvh9+0x3bc40>
   29f66:      	movl	$0x1, %esi
   29f6b:      	callq	*%rax
   29f6d:      	movq	0x8(%rsp), %rcx
   29f72:      	movq	%rax, %rdx
   29f75:      	movq	(%rsp), %rax
   29f79:      	movq	%rdx, (%rcx)
   29f7c:      	movq	%rax, 0x28(%rsp)
   29f81:      	leaq	0x28(%rsp), %rax
   29f86:      	movq	%rax, 0x40(%rsp)
   29f8b:      	movq	0x28(%rsp), %rax
   29f90:      	movq	%rax, 0x48(%rsp)
   29f95:      	movq	%rax, 0x68(%rsp)
   29f9a:      	movq	%rax, 0x10(%rsp)
   29f9f:      	jmp	0x29faa <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha480bbc44e87fa46+0xfa>
   29fa1:      	movq	$0x0, 0x10(%rsp)
   29faa:      	movq	0x10(%rsp), %rax
   29faf:      	addq	$0x98, %rsp
   29fb6:      	retq
   29fb7:      	int3
   29fb8:      	int3
   29fb9:      	int3
   29fba:      	int3
   29fbb:      	int3
   29fbc:      	int3
   29fbd:      	int3
   29fbe:      	int3
   29fbf:      	int3

0000000000029fc0 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha7ad7b1629ccf3f4>:
   29fc0:      	subq	$0x98, %rsp
   29fc7:      	movq	%rdi, 0x8(%rsp)
   29fcc:      	movq	%rdi, 0x30(%rsp)
   29fd1:      	xorl	%eax, %eax
   29fd3:      	testb	$0x1, %al
   29fd5:      	jne	0x2a007 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha7ad7b1629ccf3f4+0x47>
   29fd7:      	movq	0x8(%rsp), %rdi
   29fdc:      	movq	%rdi, %rax
   29fdf:      	addq	$0x8, %rax
   29fe3:      	movq	%rax, 0x50(%rsp)
   29fe8:      	movq	0x8(%rdi), %rax
   29fec:      	movq	%rax, 0x20(%rsp)
   29ff1:      	movq	0x11c58(%rip), %rax     # 0x3bc50 <zlgk82z0l71lvh9+0x3bc50>
   29ff8:      	leaq	0x20(%rsp), %rsi
   29ffd:      	callq	*%rax
   29fff:      	andb	$0x1, %al
   2a001:      	movb	%al, 0x1f(%rsp)
   2a005:      	jmp	0x2a02c <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha7ad7b1629ccf3f4+0x6c>
   2a007:      	movq	0x8(%rsp), %rax
   2a00c:      	movq	0x8(%rax), %rax
   2a010:      	movq	%rax, 0x58(%rsp)
   2a015:      	movq	%rax, 0x60(%rsp)
   2a01a:      	movq	%rax, 0x38(%rsp)
   2a01f:      	cmpq	$0x0, %rax
   2a023:      	sete	%al
   2a026:      	andb	$0x1, %al
   2a028:      	movb	%al, 0x1f(%rsp)
   2a02c:      	testb	$0x1, 0x1f(%rsp)
   2a031:      	jne	0x2a0b1 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha7ad7b1629ccf3f4+0xf1>
   2a033:      	movq	0x8(%rsp), %rax
   2a038:      	movq	%rax, 0x70(%rsp)
   2a03d:      	movq	$0x1, 0x78(%rsp)
   2a046:      	movq	(%rax), %rcx
   2a049:      	movq	%rcx, (%rsp)
   2a04d:      	movq	%rcx, 0x80(%rsp)
   2a055:      	movq	%rax, %rcx
   2a058:      	addq	$0x8, %rcx
   2a05c:      	movq	%rcx, 0x90(%rsp)
   2a064:      	movq	%rcx, 0x88(%rsp)
   2a06c:      	movq	(%rax), %rdi
   2a06f:      	movq	0x11be2(%rip), %rax     # 0x3bc58 <zlgk82z0l71lvh9+0x3bc58>
   2a076:      	movl	$0x1, %esi
   2a07b:      	callq	*%rax
   2a07d:      	movq	0x8(%rsp), %rcx
   2a082:      	movq	%rax, %rdx
   2a085:      	movq	(%rsp), %rax
   2a089:      	movq	%rdx, (%rcx)
   2a08c:      	movq	%rax, 0x28(%rsp)
   2a091:      	leaq	0x28(%rsp), %rax
   2a096:      	movq	%rax, 0x40(%rsp)
   2a09b:      	movq	0x28(%rsp), %rax
   2a0a0:      	movq	%rax, 0x48(%rsp)
   2a0a5:      	movq	%rax, 0x68(%rsp)
   2a0aa:      	movq	%rax, 0x10(%rsp)
   2a0af:      	jmp	0x2a0ba <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::ha7ad7b1629ccf3f4+0xfa>
   2a0b1:      	movq	$0x0, 0x10(%rsp)
   2a0ba:      	movq	0x10(%rsp), %rax
   2a0bf:      	addq	$0x98, %rsp
   2a0c6:      	retq
   2a0c7:      	int3
   2a0c8:      	int3
   2a0c9:      	int3
   2a0ca:      	int3
   2a0cb:      	int3
   2a0cc:      	int3
   2a0cd:      	int3
   2a0ce:      	int3
   2a0cf:      	int3

000000000002a0d0 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::hf056648871251c26>:
   2a0d0:      	subq	$0x98, %rsp
   2a0d7:      	movq	%rdi, 0x8(%rsp)
   2a0dc:      	movq	%rdi, 0x30(%rsp)
   2a0e1:      	xorl	%eax, %eax
   2a0e3:      	testb	$0x1, %al
   2a0e5:      	jne	0x2a117 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::hf056648871251c26+0x47>
   2a0e7:      	movq	0x8(%rsp), %rdi
   2a0ec:      	movq	%rdi, %rax
   2a0ef:      	addq	$0x8, %rax
   2a0f3:      	movq	%rax, 0x50(%rsp)
   2a0f8:      	movq	0x8(%rdi), %rax
   2a0fc:      	movq	%rax, 0x20(%rsp)
   2a101:      	movq	0x11b60(%rip), %rax     # 0x3bc68 <zlgk82z0l71lvh9+0x3bc68>
   2a108:      	leaq	0x20(%rsp), %rsi
   2a10d:      	callq	*%rax
   2a10f:      	andb	$0x1, %al
   2a111:      	movb	%al, 0x1f(%rsp)
   2a115:      	jmp	0x2a13c <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::hf056648871251c26+0x6c>
   2a117:      	movq	0x8(%rsp), %rax
   2a11c:      	movq	0x8(%rax), %rax
   2a120:      	movq	%rax, 0x58(%rsp)
   2a125:      	movq	%rax, 0x60(%rsp)
   2a12a:      	movq	%rax, 0x38(%rsp)
   2a12f:      	cmpq	$0x0, %rax
   2a133:      	sete	%al
   2a136:      	andb	$0x1, %al
   2a138:      	movb	%al, 0x1f(%rsp)
   2a13c:      	testb	$0x1, 0x1f(%rsp)
   2a141:      	jne	0x2a1c1 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::hf056648871251c26+0xf1>
   2a143:      	movq	0x8(%rsp), %rax
   2a148:      	movq	%rax, 0x70(%rsp)
   2a14d:      	movq	$0x1, 0x78(%rsp)
   2a156:      	movq	(%rax), %rcx
   2a159:      	movq	%rcx, (%rsp)
   2a15d:      	movq	%rcx, 0x80(%rsp)
   2a165:      	movq	%rax, %rcx
   2a168:      	addq	$0x8, %rcx
   2a16c:      	movq	%rcx, 0x90(%rsp)
   2a174:      	movq	%rcx, 0x88(%rsp)
   2a17c:      	movq	(%rax), %rdi
   2a17f:      	movq	0x11aea(%rip), %rax     # 0x3bc70 <zlgk82z0l71lvh9+0x3bc70>
   2a186:      	movl	$0x1, %esi
   2a18b:      	callq	*%rax
   2a18d:      	movq	0x8(%rsp), %rcx
   2a192:      	movq	%rax, %rdx
   2a195:      	movq	(%rsp), %rax
   2a199:      	movq	%rdx, (%rcx)
   2a19c:      	movq	%rax, 0x28(%rsp)
   2a1a1:      	leaq	0x28(%rsp), %rax
   2a1a6:      	movq	%rax, 0x40(%rsp)
   2a1ab:      	movq	0x28(%rsp), %rax
   2a1b0:      	movq	%rax, 0x48(%rsp)
   2a1b5:      	movq	%rax, 0x68(%rsp)
   2a1ba:      	movq	%rax, 0x10(%rsp)
   2a1bf:      	jmp	0x2a1ca <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next::hf056648871251c26+0xfa>
   2a1c1:      	movq	$0x0, 0x10(%rsp)
   2a1ca:      	movq	0x10(%rsp), %rax
   2a1cf:      	addq	$0x98, %rsp
   2a1d6:      	retq
   2a1d7:      	int3
   2a1d8:      	int3
   2a1d9:      	int3
   2a1da:      	int3
   2a1db:      	int3
   2a1dc:      	int3
   2a1dd:      	int3
   2a1de:      	int3
   2a1df:      	int3

000000000002a1e0 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145>:
   2a1e0:      	subq	$0xd8, %rsp
   2a1e7:      	movq	%rdx, 0x10(%rsp)
   2a1ec:      	movq	%rdi, 0x18(%rsp)
   2a1f1:      	movq	%rsi, 0x20(%rsp)
   2a1f6:      	movq	%rdx, 0x70(%rsp)
   2a1fb:      	xorl	%eax, %eax
   2a1fd:      	testb	$0x1, %al
   2a1ff:      	jne	0x2a237 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0x57>
   2a201:      	leaq	0x18(%rsp), %rax
   2a206:      	addq	$0x8, %rax
   2a20a:      	movq	%rax, 0xa0(%rsp)
   2a212:      	movq	0x20(%rsp), %rax
   2a217:      	movq	%rax, 0x40(%rsp)
   2a21c:      	movq	0x119e5(%rip), %rax     # 0x3bc08 <zlgk82z0l71lvh9+0x3bc08>
   2a223:      	leaq	0x18(%rsp), %rdi
   2a228:      	leaq	0x40(%rsp), %rsi
   2a22d:      	callq	*%rax
   2a22f:      	andb	$0x1, %al
   2a231:      	movb	%al, 0x3f(%rsp)
   2a235:      	jmp	0x2a25e <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0x7e>
   2a237:      	movq	0x20(%rsp), %rax
   2a23c:      	movq	%rax, 0xb8(%rsp)
   2a244:      	movq	%rax, 0xc0(%rsp)
   2a24c:      	movq	%rax, 0x78(%rsp)
   2a251:      	cmpq	$0x0, %rax
   2a255:      	sete	%al
   2a258:      	andb	$0x1, %al
   2a25a:      	movb	%al, 0x3f(%rsp)
   2a25e:      	testb	$0x1, 0x3f(%rsp)
   2a263:      	jne	0x2a280 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0xa0>
   2a265:      	movq	0x10(%rsp), %rax
   2a26a:      	movq	%rax, 0x48(%rsp)
   2a26f:      	movq	$0x0, 0x50(%rsp)
   2a278:      	xorl	%eax, %eax
   2a27a:      	testb	$0x1, %al
   2a27c:      	jne	0x2a2c2 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0xe2>
   2a27e:      	jmp	0x2a28f <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0xaf>
   2a280:      	movq	0x10(%rsp), %rax
   2a285:      	movq	%rax, 0x30(%rsp)
   2a28a:      	jmp	0x2a36d <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0x18d>
   2a28f:      	leaq	0x18(%rsp), %rax
   2a294:      	addq	$0x8, %rax
   2a298:      	movq	%rax, 0x98(%rsp)
   2a2a0:      	movq	0x20(%rsp), %rdi
   2a2a5:      	movq	%rdi, 0x80(%rsp)
   2a2ad:      	movq	0x18(%rsp), %rsi
   2a2b2:      	movq	0x11337(%rip), %rax     # 0x3b5f0 <zlgk82z0l71lvh9+0x3b5f0>
   2a2b9:      	callq	*%rax
   2a2bb:      	movq	%rax, 0x58(%rsp)
   2a2c0:      	jmp	0x2a2e4 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0x104>
   2a2c2:      	movq	0x20(%rsp), %rax
   2a2c7:      	movq	%rax, 0xa8(%rsp)
   2a2cf:      	movq	%rax, 0xb0(%rsp)
   2a2d7:      	movq	%rax, 0x88(%rsp)
   2a2df:      	movq	%rax, 0x58(%rsp)
   2a2e4:      	movq	0x48(%rsp), %rax
   2a2e9:      	movq	%rax, 0x8(%rsp)
   2a2ee:      	movq	0x18(%rsp), %rdi
   2a2f3:      	movq	0x50(%rsp), %rsi
   2a2f8:      	movq	0x11911(%rip), %rax     # 0x3bc10 <zlgk82z0l71lvh9+0x3bc10>
   2a2ff:      	callq	*%rax
   2a301:      	movq	0x8(%rsp), %rcx
   2a306:      	movq	%rax, 0x90(%rsp)
   2a30e:      	movq	%rcx, 0x60(%rsp)
   2a313:      	movq	%rax, 0x68(%rsp)
   2a318:      	movq	0x60(%rsp), %rsi
   2a31d:      	movq	0x68(%rsp), %rdx
   2a322:      	movq	0x11957(%rip), %rax     # 0x3bc80 <zlgk82z0l71lvh9+0x3bc80>
   2a329:      	leaq	0x2f(%rsp), %rdi
   2a32e:      	callq	*%rax
   2a330:      	movq	%rax, 0x48(%rsp)
   2a335:      	movq	0x50(%rsp), %rax
   2a33a:      	movq	%rax, 0xc8(%rsp)
   2a342:      	movq	$0x1, 0xd0(%rsp)
   2a34e:      	addq	$0x1, %rax
   2a352:      	movq	%rax, 0x50(%rsp)
   2a357:      	movq	0x50(%rsp), %rax
   2a35c:      	cmpq	0x58(%rsp), %rax
   2a361:      	jne	0x2a2e4 <<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::fold::h620f735c50145145+0x104>
   2a363:      	movq	0x48(%rsp), %rax
   2a368:      	movq	%rax, 0x30(%rsp)
   2a36d:      	movq	0x30(%rsp), %rax
   2a372:      	addq	$0xd8, %rsp
   2a379:      	retq
   2a37a:      	int3
   2a37b:      	int3
   2a37c:      	int3
   2a37d:      	int3
   2a37e:      	int3
   2a37f:      	int3

000000000002a380 <<core::slice::iter::IterMut<T> as core::iter::traits::iterator::Iterator>::next::h911974e086a33cb6>:
   2a380:      	subq	$0x98, %rsp
   2a387:      	movq	%rdi, 0x10(%rsp)
   2a38c:      	movq	%rdi, 0x38(%rsp)
   2a391:      	xorl	%eax, %eax
   2a393:      	testb	$0x1, %al
   2a395:      	jne	0x2a3c7 <<core::slice::iter::IterMut<T> as core::iter::traits::iterator::Iterator>::next::h911974e086a33cb6+0x47>
   2a397:      	movq	0x10(%rsp), %rdi
   2a39c:      	movq	%rdi, %rax
   2a39f:      	addq	$0x8, %rax
   2a3a3:      	movq	%rax, 0x58(%rsp)
   2a3a8:      	movq	0x8(%rdi), %rax
   2a3ac:      	movq	%rax, 0x28(%rsp)
   2a3b1:      	movq	0x11850(%rip), %rax     # 0x3bc08 <zlgk82z0l71lvh9+0x3bc08>
   2a3b8:      	leaq	0x28(%rsp), %rsi
   2a3bd:      	callq	*%rax
   2a3bf:      	andb	$0x1, %al
   2a3c1:      	movb	%al, 0x27(%rsp)
   2a3c5:      	jmp	0x2a3ec <<core::slice::iter::IterMut<T> as core::iter::traits::iterator::Iterator>::next::h911974e086a33cb6+0x6c>
   2a3c7:      	movq	0x10(%rsp), %rax
   2a3cc:      	movq	0x8(%rax), %rax
   2a3d0:      	movq	%rax, 0x60(%rsp)
   2a3d5:      	movq	%rax, 0x68(%rsp)
   2a3da:      	movq	%rax, 0x40(%rsp)
   2a3df:      	cmpq	$0x0, %rax
   2a3e3:      	sete	%al
   2a3e6:      	andb	$0x1, %al
   2a3e8:      	movb	%al, 0x27(%rsp)
   2a3ec:      	testb	$0x1, 0x27(%rsp)
   2a3f1:      	jne	0x2a46e <<core::slice::iter::IterMut<T> as core::iter::traits::iterator::Iterator>::next::h911974e086a33cb6+0xee>
   2a3f3:      	movq	0x10(%rsp), %rax
   2a3f8:      	movq	%rax, 0x70(%rsp)
   2a3fd:      	movq	$0x1, 0x78(%rsp)
   2a406:      	movq	(%rax), %rcx
   2a409:      	movq	%rcx, 0x8(%rsp)
   2a40e:      	movq	%rcx, 0x80(%rsp)
   2a416:      	movq	%rax, %rcx
   2a419:      	addq	$0x8, %rcx
   2a41d:      	movq	%rcx, 0x90(%rsp)
   2a425:      	movq	%rcx, 0x88(%rsp)
   2a42d:      	movq	(%rax), %rdi
   2a430:      	movq	0x117d9(%rip), %rax     # 0x3bc10 <zlgk82z0l71lvh9+0x3bc10>
   2a437:      	movl	$0x1, %esi
   2a43c:      	callq	*%rax
   2a43e:      	movq	0x10(%rsp), %rcx
   2a443:      	movq	%rax, %rdx
   2a446:      	movq	0x8(%rsp), %rax
   2a44b:      	movq	%rdx, (%rcx)
   2a44e:      	movq	%rax, 0x30(%rsp)
   2a453:      	leaq	0x30(%rsp), %rax
   2a458:      	movq	%rax, 0x48(%rsp)
   2a45d:      	movq	0x30(%rsp), %rax
   2a462:      	movq	%rax, 0x50(%rsp)
   2a467:      	movq	%rax, 0x18(%rsp)
   2a46c:      	jmp	0x2a477 <<core::slice::iter::IterMut<T> as core::iter::traits::iterator::Iterator>::next::h911974e086a33cb6+0xf7>
   2a46e:      	movq	$0x0, 0x18(%rsp)
   2a477:      	movq	0x18(%rsp), %rax
   2a47c:      	addq	$0x98, %rsp
   2a483:      	retq
   2a484:      	int3
   2a485:      	int3
   2a486:      	int3
   2a487:      	int3
   2a488:      	int3
   2a489:      	int3
   2a48a:      	int3
   2a48b:      	int3
   2a48c:      	int3
   2a48d:      	int3
   2a48e:      	int3
   2a48f:      	int3

000000000002a490 <<core::slice::iter::IterMut<T> as core::iter::traits::double_ended::DoubleEndedIterator>::next_back::h5f5ac8fa1e069101>:
   2a490:      	subq	$0x88, %rsp
   2a497:      	movq	%rdi, (%rsp)
   2a49b:      	movq	%rdi, 0x28(%rsp)
   2a4a0:      	xorl	%eax, %eax
   2a4a2:      	testb	$0x1, %al
   2a4a4:      	jne	0x2a4d5 <<core::slice::iter::IterMut<T> as core::iter::traits::double_ended::DoubleEndedIterator>::next_back::h5f5ac8fa1e069101+0x45>
   2a4a6:      	movq	(%rsp), %rdi
   2a4aa:      	movq	%rdi, %rax
   2a4ad:      	addq	$0x8, %rax
   2a4b1:      	movq	%rax, 0x48(%rsp)
   2a4b6:      	movq	0x8(%rdi), %rax
   2a4ba:      	movq	%rax, 0x18(%rsp)
   2a4bf:      	movq	0x117c2(%rip), %rax     # 0x3bc88 <zlgk82z0l71lvh9+0x3bc88>
   2a4c6:      	leaq	0x18(%rsp), %rsi
   2a4cb:      	callq	*%rax
   2a4cd:      	andb	$0x1, %al
   2a4cf:      	movb	%al, 0x17(%rsp)
   2a4d3:      	jmp	0x2a4f9 <<core::slice::iter::IterMut<T> as core::iter::traits::double_ended::DoubleEndedIterator>::next_back::h5f5ac8fa1e069101+0x69>
   2a4d5:      	movq	(%rsp), %rax
   2a4d9:      	movq	0x8(%rax), %rax
   2a4dd:      	movq	%rax, 0x50(%rsp)
   2a4e2:      	movq	%rax, 0x58(%rsp)
   2a4e7:      	movq	%rax, 0x30(%rsp)
   2a4ec:      	cmpq	$0x0, %rax
   2a4f0:      	sete	%al
   2a4f3:      	andb	$0x1, %al
   2a4f5:      	movb	%al, 0x17(%rsp)
   2a4f9:      	testb	$0x1, 0x17(%rsp)
   2a4fe:      	jne	0x2a571 <<core::slice::iter::IterMut<T> as core::iter::traits::double_ended::DoubleEndedIterator>::next_back::h5f5ac8fa1e069101+0xe1>
   2a500:      	movq	(%rsp), %rax
   2a504:      	movq	%rax, 0x68(%rsp)
   2a509:      	movq	$0x1, 0x70(%rsp)
   2a512:      	movq	%rax, %rcx
   2a515:      	addq	$0x8, %rcx
   2a519:      	movq	%rcx, 0x80(%rsp)
   2a521:      	movq	%rcx, 0x78(%rsp)
   2a526:      	movq	0x8(%rax), %rdi
   2a52a:      	movq	0x1175f(%rip), %rax     # 0x3bc90 <zlgk82z0l71lvh9+0x3bc90>
   2a531:      	movl	$0x1, %esi
   2a536:      	callq	*%rax
   2a538:      	movq	%rax, %rcx
   2a53b:      	movq	(%rsp), %rax
   2a53f:      	movq	%rcx, 0x8(%rax)
   2a543:      	movq	0x8(%rax), %rax
   2a547:      	movq	%rax, 0x60(%rsp)
   2a54c:      	movq	0x60(%rsp), %rax
   2a551:      	movq	%rax, 0x20(%rsp)
   2a556:      	leaq	0x20(%rsp), %rax
   2a55b:      	movq	%rax, 0x38(%rsp)
   2a560:      	movq	0x20(%rsp), %rax
   2a565:      	movq	%rax, 0x40(%rsp)
   2a56a:      	movq	%rax, 0x8(%rsp)
   2a56f:      	jmp	0x2a57a <<core::slice::iter::IterMut<T> as core::iter::traits::double_ended::DoubleEndedIterator>::next_back::h5f5ac8fa1e069101+0xea>
   2a571:      	movq	$0x0, 0x8(%rsp)
   2a57a:      	movq	0x8(%rsp), %rax
   2a57f:      	addq	$0x88, %rsp
   2a586:      	retq
   2a587:      	int3
   2a588:      	int3
   2a589:      	int3
   2a58a:      	int3
   2a58b:      	int3
   2a58c:      	int3
   2a58d:      	int3
   2a58e:      	int3
   2a58f:      	int3

000000000002a590 <core::ptr::non_null::NonNull<T>::new_unchecked::h19641a7d5601b494>:
   2a590:      	subq	$0x28, %rsp
   2a594:      	movq	%rdi, (%rsp)
   2a598:      	movq	%rdi, 0x18(%rsp)
   2a59d:      	movb	$0x1, %al
   2a59f:      	testb	$0x1, %al
   2a5a1:      	jne	0x2a5b6 <core::ptr::non_null::NonNull<T>::new_unchecked::h19641a7d5601b494+0x26>
   2a5a3:      	movq	(%rsp), %rax
   2a5a7:      	movq	%rax, 0x8(%rsp)
   2a5ac:      	movq	0x8(%rsp), %rax
   2a5b1:      	addq	$0x28, %rsp
   2a5b5:      	retq
   2a5b6:      	movq	(%rsp), %rax
   2a5ba:      	movq	%rax, 0x10(%rsp)
   2a5bf:      	movq	0x10(%rsp), %rdi
   2a5c4:      	movq	%rdi, 0x20(%rsp)
   2a5c9:      	movq	0x116c8(%rip), %rax     # 0x3bc98 <zlgk82z0l71lvh9+0x3bc98>
   2a5d0:      	callq	*%rax
   2a5d2:      	testb	$0x1, %al
   2a5d4:      	jne	0x2a5d8 <core::ptr::non_null::NonNull<T>::new_unchecked::h19641a7d5601b494+0x48>
   2a5d6:      	jmp	0x2a5ef <core::ptr::non_null::NonNull<T>::new_unchecked::h19641a7d5601b494+0x5f>
   2a5d8:      	leaq	-0x179dc(%rip), %rdi    # 0x12c03 <str.1+0x1f3>
   2a5df:      	movq	0x10b8a(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2a5e6:      	movl	$0x5d, %esi
   2a5eb:      	callq	*%rax
   2a5ed:      	ud2
   2a5ef:      	jmp	0x2a5a3 <core::ptr::non_null::NonNull<T>::new_unchecked::h19641a7d5601b494+0x13>
   2a5f1:      	int3
   2a5f2:      	int3
   2a5f3:      	int3
   2a5f4:      	int3
   2a5f5:      	int3
   2a5f6:      	int3
   2a5f7:      	int3
   2a5f8:      	int3
   2a5f9:      	int3
   2a5fa:      	int3
   2a5fb:      	int3
   2a5fc:      	int3
   2a5fd:      	int3
   2a5fe:      	int3
   2a5ff:      	int3

000000000002a600 <core::ptr::non_null::NonNull<T>::new_unchecked::h2e6dd6746c79eb48>:
   2a600:      	subq	$0x28, %rsp
   2a604:      	movq	%rdi, (%rsp)
   2a608:      	movq	%rdi, 0x18(%rsp)
   2a60d:      	movb	$0x1, %al
   2a60f:      	testb	$0x1, %al
   2a611:      	jne	0x2a626 <core::ptr::non_null::NonNull<T>::new_unchecked::h2e6dd6746c79eb48+0x26>
   2a613:      	movq	(%rsp), %rax
   2a617:      	movq	%rax, 0x8(%rsp)
   2a61c:      	movq	0x8(%rsp), %rax
   2a621:      	addq	$0x28, %rsp
   2a625:      	retq
   2a626:      	movq	(%rsp), %rax
   2a62a:      	movq	%rax, 0x10(%rsp)
   2a62f:      	movq	0x10(%rsp), %rdi
   2a634:      	movq	%rdi, 0x20(%rsp)
   2a639:      	movq	0x11660(%rip), %rax     # 0x3bca0 <zlgk82z0l71lvh9+0x3bca0>
   2a640:      	callq	*%rax
   2a642:      	testb	$0x1, %al
   2a644:      	jne	0x2a648 <core::ptr::non_null::NonNull<T>::new_unchecked::h2e6dd6746c79eb48+0x48>
   2a646:      	jmp	0x2a65f <core::ptr::non_null::NonNull<T>::new_unchecked::h2e6dd6746c79eb48+0x5f>
   2a648:      	leaq	-0x17a4c(%rip), %rdi    # 0x12c03 <str.1+0x1f3>
   2a64f:      	movq	0x10b1a(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2a656:      	movl	$0x5d, %esi
   2a65b:      	callq	*%rax
   2a65d:      	ud2
   2a65f:      	jmp	0x2a613 <core::ptr::non_null::NonNull<T>::new_unchecked::h2e6dd6746c79eb48+0x13>
   2a661:      	int3
   2a662:      	int3
   2a663:      	int3
   2a664:      	int3
   2a665:      	int3
   2a666:      	int3
   2a667:      	int3
   2a668:      	int3
   2a669:      	int3
   2a66a:      	int3
   2a66b:      	int3
   2a66c:      	int3
   2a66d:      	int3
   2a66e:      	int3
   2a66f:      	int3

000000000002a670 <core::ptr::non_null::NonNull<T>::new_unchecked::h810ef3e1fdc43221>:
   2a670:      	subq	$0x28, %rsp
   2a674:      	movq	%rdi, (%rsp)
   2a678:      	movq	%rdi, 0x18(%rsp)
   2a67d:      	movb	$0x1, %al
   2a67f:      	testb	$0x1, %al
   2a681:      	jne	0x2a696 <core::ptr::non_null::NonNull<T>::new_unchecked::h810ef3e1fdc43221+0x26>
   2a683:      	movq	(%rsp), %rax
   2a687:      	movq	%rax, 0x8(%rsp)
   2a68c:      	movq	0x8(%rsp), %rax
   2a691:      	addq	$0x28, %rsp
   2a695:      	retq
   2a696:      	movq	(%rsp), %rax
   2a69a:      	movq	%rax, 0x10(%rsp)
   2a69f:      	movq	0x10(%rsp), %rdi
   2a6a4:      	movq	%rdi, 0x20(%rsp)
   2a6a9:      	movq	0x11308(%rip), %rax     # 0x3b9b8 <zlgk82z0l71lvh9+0x3b9b8>
   2a6b0:      	callq	*%rax
   2a6b2:      	testb	$0x1, %al
   2a6b4:      	jne	0x2a6b8 <core::ptr::non_null::NonNull<T>::new_unchecked::h810ef3e1fdc43221+0x48>
   2a6b6:      	jmp	0x2a6cf <core::ptr::non_null::NonNull<T>::new_unchecked::h810ef3e1fdc43221+0x5f>
   2a6b8:      	leaq	-0x17abc(%rip), %rdi    # 0x12c03 <str.1+0x1f3>
   2a6bf:      	movq	0x10aaa(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2a6c6:      	movl	$0x5d, %esi
   2a6cb:      	callq	*%rax
   2a6cd:      	ud2
   2a6cf:      	jmp	0x2a683 <core::ptr::non_null::NonNull<T>::new_unchecked::h810ef3e1fdc43221+0x13>
   2a6d1:      	int3
   2a6d2:      	int3
   2a6d3:      	int3
   2a6d4:      	int3
   2a6d5:      	int3
   2a6d6:      	int3
   2a6d7:      	int3
   2a6d8:      	int3
   2a6d9:      	int3
   2a6da:      	int3
   2a6db:      	int3
   2a6dc:      	int3
   2a6dd:      	int3
   2a6de:      	int3
   2a6df:      	int3

000000000002a6e0 <core::ptr::non_null::NonNull<T>::new_unchecked::hb91c259a5f43b4bb>:
   2a6e0:      	subq	$0x28, %rsp
   2a6e4:      	movq	%rdi, (%rsp)
   2a6e8:      	movq	%rdi, 0x18(%rsp)
   2a6ed:      	movb	$0x1, %al
   2a6ef:      	testb	$0x1, %al
   2a6f1:      	jne	0x2a706 <core::ptr::non_null::NonNull<T>::new_unchecked::hb91c259a5f43b4bb+0x26>
   2a6f3:      	movq	(%rsp), %rax
   2a6f7:      	movq	%rax, 0x8(%rsp)
   2a6fc:      	movq	0x8(%rsp), %rax
   2a701:      	addq	$0x28, %rsp
   2a705:      	retq
   2a706:      	movq	(%rsp), %rax
   2a70a:      	movq	%rax, 0x10(%rsp)
   2a70f:      	movq	0x10(%rsp), %rdi
   2a714:      	movq	%rdi, 0x20(%rsp)
   2a719:      	movq	0x11588(%rip), %rax     # 0x3bca8 <zlgk82z0l71lvh9+0x3bca8>
   2a720:      	callq	*%rax
   2a722:      	testb	$0x1, %al
   2a724:      	jne	0x2a728 <core::ptr::non_null::NonNull<T>::new_unchecked::hb91c259a5f43b4bb+0x48>
   2a726:      	jmp	0x2a73f <core::ptr::non_null::NonNull<T>::new_unchecked::hb91c259a5f43b4bb+0x5f>
   2a728:      	leaq	-0x17b2c(%rip), %rdi    # 0x12c03 <str.1+0x1f3>
   2a72f:      	movq	0x10a3a(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2a736:      	movl	$0x5d, %esi
   2a73b:      	callq	*%rax
   2a73d:      	ud2
   2a73f:      	jmp	0x2a6f3 <core::ptr::non_null::NonNull<T>::new_unchecked::hb91c259a5f43b4bb+0x13>
   2a741:      	int3
   2a742:      	int3
   2a743:      	int3
   2a744:      	int3
   2a745:      	int3
   2a746:      	int3
   2a747:      	int3
   2a748:      	int3
   2a749:      	int3
   2a74a:      	int3
   2a74b:      	int3
   2a74c:      	int3
   2a74d:      	int3
   2a74e:      	int3
   2a74f:      	int3

000000000002a750 <core::ptr::non_null::NonNull<T>::new_unchecked::hc841ae9d56c42879>:
   2a750:      	subq	$0x28, %rsp
   2a754:      	movq	%rdi, (%rsp)
   2a758:      	movq	%rdi, 0x18(%rsp)
   2a75d:      	movb	$0x1, %al
   2a75f:      	testb	$0x1, %al
   2a761:      	jne	0x2a776 <core::ptr::non_null::NonNull<T>::new_unchecked::hc841ae9d56c42879+0x26>
   2a763:      	movq	(%rsp), %rax
   2a767:      	movq	%rax, 0x8(%rsp)
   2a76c:      	movq	0x8(%rsp), %rax
   2a771:      	addq	$0x28, %rsp
   2a775:      	retq
   2a776:      	movq	(%rsp), %rax
   2a77a:      	movq	%rax, 0x10(%rsp)
   2a77f:      	movq	0x10(%rsp), %rdi
   2a784:      	movq	%rdi, 0x20(%rsp)
   2a789:      	movq	0x11220(%rip), %rax     # 0x3b9b0 <zlgk82z0l71lvh9+0x3b9b0>
   2a790:      	callq	*%rax
   2a792:      	testb	$0x1, %al
   2a794:      	jne	0x2a798 <core::ptr::non_null::NonNull<T>::new_unchecked::hc841ae9d56c42879+0x48>
   2a796:      	jmp	0x2a7af <core::ptr::non_null::NonNull<T>::new_unchecked::hc841ae9d56c42879+0x5f>
   2a798:      	leaq	-0x17b9c(%rip), %rdi    # 0x12c03 <str.1+0x1f3>
   2a79f:      	movq	0x109ca(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2a7a6:      	movl	$0x5d, %esi
   2a7ab:      	callq	*%rax
   2a7ad:      	ud2
   2a7af:      	jmp	0x2a763 <core::ptr::non_null::NonNull<T>::new_unchecked::hc841ae9d56c42879+0x13>
   2a7b1:      	int3
   2a7b2:      	int3
   2a7b3:      	int3
   2a7b4:      	int3
   2a7b5:      	int3
   2a7b6:      	int3
   2a7b7:      	int3
   2a7b8:      	int3
   2a7b9:      	int3
   2a7ba:      	int3
   2a7bb:      	int3
   2a7bc:      	int3
   2a7bd:      	int3
   2a7be:      	int3
   2a7bf:      	int3

000000000002a7c0 <core::ptr::non_null::NonNull<T>::new_unchecked::hcd630135d8170870>:
   2a7c0:      	subq	$0x28, %rsp
   2a7c4:      	movq	%rdi, (%rsp)
   2a7c8:      	movq	%rdi, 0x18(%rsp)
   2a7cd:      	movb	$0x1, %al
   2a7cf:      	testb	$0x1, %al
   2a7d1:      	jne	0x2a7e6 <core::ptr::non_null::NonNull<T>::new_unchecked::hcd630135d8170870+0x26>
   2a7d3:      	movq	(%rsp), %rax
   2a7d7:      	movq	%rax, 0x8(%rsp)
   2a7dc:      	movq	0x8(%rsp), %rax
   2a7e1:      	addq	$0x28, %rsp
   2a7e5:      	retq
   2a7e6:      	movq	(%rsp), %rax
   2a7ea:      	movq	%rax, 0x10(%rsp)
   2a7ef:      	movq	0x10(%rsp), %rdi
   2a7f4:      	movq	%rdi, 0x20(%rsp)
   2a7f9:      	movq	0x111a8(%rip), %rax     # 0x3b9a8 <zlgk82z0l71lvh9+0x3b9a8>
   2a800:      	callq	*%rax
   2a802:      	testb	$0x1, %al
   2a804:      	jne	0x2a808 <core::ptr::non_null::NonNull<T>::new_unchecked::hcd630135d8170870+0x48>
   2a806:      	jmp	0x2a81f <core::ptr::non_null::NonNull<T>::new_unchecked::hcd630135d8170870+0x5f>
   2a808:      	leaq	-0x17c0c(%rip), %rdi    # 0x12c03 <str.1+0x1f3>
   2a80f:      	movq	0x1095a(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2a816:      	movl	$0x5d, %esi
   2a81b:      	callq	*%rax
   2a81d:      	ud2
   2a81f:      	jmp	0x2a7d3 <core::ptr::non_null::NonNull<T>::new_unchecked::hcd630135d8170870+0x13>
   2a821:      	int3
   2a822:      	int3
   2a823:      	int3
   2a824:      	int3
   2a825:      	int3
   2a826:      	int3
   2a827:      	int3
   2a828:      	int3
   2a829:      	int3
   2a82a:      	int3
   2a82b:      	int3
   2a82c:      	int3
   2a82d:      	int3
   2a82e:      	int3
   2a82f:      	int3

000000000002a830 <core::ptr::non_null::NonNull<T>::add::h1399a3c41d8d4299>:
   2a830:      	subq	$0x28, %rsp
   2a834:      	movq	%rdi, 0x8(%rsp)
   2a839:      	movq	%rsi, 0x10(%rsp)
   2a83e:      	movq	%rdi, 0x18(%rsp)
   2a843:      	movq	%rsi, 0x20(%rsp)
   2a848:      	shlq	$0x5, %rsi
   2a84c:      	addq	%rsi, %rdi
   2a84f:      	movq	%rdi, (%rsp)
   2a853:      	movq	(%rsp), %rax
   2a857:      	addq	$0x28, %rsp
   2a85b:      	retq
   2a85c:      	int3
   2a85d:      	int3
   2a85e:      	int3
   2a85f:      	int3

000000000002a860 <core::ptr::non_null::NonNull<T>::add::h1fc86cb6b6b42e6a>:
   2a860:      	subq	$0x28, %rsp
   2a864:      	movq	%rdi, 0x8(%rsp)
   2a869:      	movq	%rsi, 0x10(%rsp)
   2a86e:      	movq	%rdi, 0x18(%rsp)
   2a873:      	movq	%rsi, 0x20(%rsp)
   2a878:      	addq	%rsi, %rdi
   2a87b:      	movq	%rdi, (%rsp)
   2a87f:      	movq	(%rsp), %rax
   2a883:      	addq	$0x28, %rsp
   2a887:      	retq
   2a888:      	int3
   2a889:      	int3
   2a88a:      	int3
   2a88b:      	int3
   2a88c:      	int3
   2a88d:      	int3
   2a88e:      	int3
   2a88f:      	int3

000000000002a890 <core::ptr::non_null::NonNull<T>::add::h2446664988dbeafb>:
   2a890:      	subq	$0x28, %rsp
   2a894:      	movq	%rdi, 0x8(%rsp)
   2a899:      	movq	%rsi, 0x10(%rsp)
   2a89e:      	movq	%rdi, 0x18(%rsp)
   2a8a3:      	movq	%rsi, 0x20(%rsp)
   2a8a8:      	imulq	$0x38, %rsi, %rax
   2a8ac:      	addq	%rax, %rdi
   2a8af:      	movq	%rdi, (%rsp)
   2a8b3:      	movq	(%rsp), %rax
   2a8b7:      	addq	$0x28, %rsp
   2a8bb:      	retq
   2a8bc:      	int3
   2a8bd:      	int3
   2a8be:      	int3
   2a8bf:      	int3

000000000002a8c0 <core::ptr::non_null::NonNull<T>::add::h374ff24ec6c136d6>:
   2a8c0:      	subq	$0x28, %rsp
   2a8c4:      	movq	%rdi, 0x8(%rsp)
   2a8c9:      	movq	%rsi, 0x10(%rsp)
   2a8ce:      	movq	%rdi, 0x18(%rsp)
   2a8d3:      	movq	%rsi, 0x20(%rsp)
   2a8d8:      	shlq	$0x3, %rsi
   2a8dc:      	addq	%rsi, %rdi
   2a8df:      	movq	%rdi, (%rsp)
   2a8e3:      	movq	(%rsp), %rax
   2a8e7:      	addq	$0x28, %rsp
   2a8eb:      	retq
   2a8ec:      	int3
   2a8ed:      	int3
   2a8ee:      	int3
   2a8ef:      	int3

000000000002a8f0 <core::ptr::non_null::NonNull<T>::add::h8ed0cf9166d9950f>:
   2a8f0:      	subq	$0x28, %rsp
   2a8f4:      	movq	%rdi, 0x8(%rsp)
   2a8f9:      	movq	%rsi, 0x10(%rsp)
   2a8fe:      	movq	%rdi, 0x18(%rsp)
   2a903:      	movq	%rsi, 0x20(%rsp)
   2a908:      	shlq	$0x4, %rsi
   2a90c:      	addq	%rsi, %rdi
   2a90f:      	movq	%rdi, (%rsp)
   2a913:      	movq	(%rsp), %rax
   2a917:      	addq	$0x28, %rsp
   2a91b:      	retq
   2a91c:      	int3
   2a91d:      	int3
   2a91e:      	int3
   2a91f:      	int3

000000000002a920 <core::ptr::non_null::NonNull<T>::sub::h0ce447100d4986bd>:
   2a920:      	subq	$0x40, %rsp
   2a924:      	movq	%rdi, 0x8(%rsp)
   2a929:      	movq	%rsi, 0x10(%rsp)
   2a92e:      	movq	%rdi, 0x20(%rsp)
   2a933:      	movq	%rsi, 0x28(%rsp)
   2a938:      	xorl	%eax, %eax
   2a93a:      	subq	%rsi, %rax
   2a93d:      	movq	%rdi, 0x30(%rsp)
   2a942:      	movq	%rax, 0x38(%rsp)
   2a947:      	addq	%rax, %rdi
   2a94a:      	movq	%rdi, 0x18(%rsp)
   2a94f:      	movq	0x18(%rsp), %rax
   2a954:      	movq	%rax, (%rsp)
   2a958:      	movq	(%rsp), %rax
   2a95c:      	addq	$0x40, %rsp
   2a960:      	retq
   2a961:      	int3
   2a962:      	int3
   2a963:      	int3
   2a964:      	int3
   2a965:      	int3
   2a966:      	int3
   2a967:      	int3
   2a968:      	int3
   2a969:      	int3
   2a96a:      	int3
   2a96b:      	int3
   2a96c:      	int3
   2a96d:      	int3
   2a96e:      	int3
   2a96f:      	int3

000000000002a970 <core::ptr::non_null::NonNull<T>::sub_ptr::h06e146118c67f5f9>:
   2a970:      	subq	$0x18, %rsp
   2a974:      	movq	%rdi, 0x8(%rsp)
   2a979:      	movq	%rsi, 0x10(%rsp)
   2a97e:      	movq	0x10fb3(%rip), %rax     # 0x3b938 <zlgk82z0l71lvh9+0x3b938>
   2a985:      	callq	*%rax
   2a987:      	addq	$0x18, %rsp
   2a98b:      	retq
   2a98c:      	int3
   2a98d:      	int3
   2a98e:      	int3
   2a98f:      	int3

000000000002a990 <<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq::h2ae7fe77de0590e0>:
   2a990:      	subq	$0x20, %rsp
   2a994:      	movq	%rdi, (%rsp)
   2a998:      	movq	%rsi, 0x8(%rsp)
   2a99d:      	movq	(%rdi), %rax
   2a9a0:      	movq	%rax, 0x18(%rsp)
   2a9a5:      	movq	(%rsi), %rcx
   2a9a8:      	movq	%rcx, 0x10(%rsp)
   2a9ad:      	cmpq	%rcx, %rax
   2a9b0:      	sete	%al
   2a9b3:      	andb	$0x1, %al
   2a9b5:      	movzbl	%al, %eax
   2a9b8:      	addq	$0x20, %rsp
   2a9bc:      	retq
   2a9bd:      	int3
   2a9be:      	int3
   2a9bf:      	int3

000000000002a9c0 <<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq::h3854bdf4e6316749>:
   2a9c0:      	subq	$0x20, %rsp
   2a9c4:      	movq	%rdi, (%rsp)
   2a9c8:      	movq	%rsi, 0x8(%rsp)
   2a9cd:      	movq	(%rdi), %rax
   2a9d0:      	movq	%rax, 0x18(%rsp)
   2a9d5:      	movq	(%rsi), %rcx
   2a9d8:      	movq	%rcx, 0x10(%rsp)
   2a9dd:      	cmpq	%rcx, %rax
   2a9e0:      	sete	%al
   2a9e3:      	andb	$0x1, %al
   2a9e5:      	movzbl	%al, %eax
   2a9e8:      	addq	$0x20, %rsp
   2a9ec:      	retq
   2a9ed:      	int3
   2a9ee:      	int3
   2a9ef:      	int3

000000000002a9f0 <<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq::h567078d2b2a60795>:
   2a9f0:      	subq	$0x20, %rsp
   2a9f4:      	movq	%rdi, (%rsp)
   2a9f8:      	movq	%rsi, 0x8(%rsp)
   2a9fd:      	movq	(%rdi), %rax
   2aa00:      	movq	%rax, 0x18(%rsp)
   2aa05:      	movq	(%rsi), %rcx
   2aa08:      	movq	%rcx, 0x10(%rsp)
   2aa0d:      	cmpq	%rcx, %rax
   2aa10:      	sete	%al
   2aa13:      	andb	$0x1, %al
   2aa15:      	movzbl	%al, %eax
   2aa18:      	addq	$0x20, %rsp
   2aa1c:      	retq
   2aa1d:      	int3
   2aa1e:      	int3
   2aa1f:      	int3

000000000002aa20 <<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq::h92689338e2d1848f>:
   2aa20:      	subq	$0x20, %rsp
   2aa24:      	movq	%rdi, (%rsp)
   2aa28:      	movq	%rsi, 0x8(%rsp)
   2aa2d:      	movq	(%rdi), %rax
   2aa30:      	movq	%rax, 0x18(%rsp)
   2aa35:      	movq	(%rsi), %rcx
   2aa38:      	movq	%rcx, 0x10(%rsp)
   2aa3d:      	cmpq	%rcx, %rax
   2aa40:      	sete	%al
   2aa43:      	andb	$0x1, %al
   2aa45:      	movzbl	%al, %eax
   2aa48:      	addq	$0x20, %rsp
   2aa4c:      	retq
   2aa4d:      	int3
   2aa4e:      	int3
   2aa4f:      	int3

000000000002aa50 <<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq::h99e3e431fcad86d6>:
   2aa50:      	subq	$0x20, %rsp
   2aa54:      	movq	%rdi, (%rsp)
   2aa58:      	movq	%rsi, 0x8(%rsp)
   2aa5d:      	movq	(%rdi), %rax
   2aa60:      	movq	%rax, 0x18(%rsp)
   2aa65:      	movq	(%rsi), %rcx
   2aa68:      	movq	%rcx, 0x10(%rsp)
   2aa6d:      	cmpq	%rcx, %rax
   2aa70:      	sete	%al
   2aa73:      	andb	$0x1, %al
   2aa75:      	movzbl	%al, %eax
   2aa78:      	addq	$0x20, %rsp
   2aa7c:      	retq
   2aa7d:      	int3
   2aa7e:      	int3
   2aa7f:      	int3

000000000002aa80 <<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq::hed99eaa47107c16d>:
   2aa80:      	subq	$0x20, %rsp
   2aa84:      	movq	%rdi, (%rsp)
   2aa88:      	movq	%rsi, 0x8(%rsp)
   2aa8d:      	movq	(%rdi), %rax
   2aa90:      	movq	%rax, 0x18(%rsp)
   2aa95:      	movq	(%rsi), %rcx
   2aa98:      	movq	%rcx, 0x10(%rsp)
   2aa9d:      	cmpq	%rcx, %rax
   2aaa0:      	sete	%al
   2aaa3:      	andb	$0x1, %al
   2aaa5:      	movzbl	%al, %eax
   2aaa8:      	addq	$0x20, %rsp
   2aaac:      	retq
   2aaad:      	int3
   2aaae:      	int3
   2aaaf:      	int3

000000000002aab0 <core::cmp::Ord::min::hcbfe3ef20653bc24>:
   2aab0:      	subq	$0x18, %rsp
   2aab4:      	movq	%rdi, 0x8(%rsp)
   2aab9:      	movq	%rsi, 0x10(%rsp)
   2aabe:      	movq	0x111f3(%rip), %rax     # 0x3bcb8 <zlgk82z0l71lvh9+0x3bcb8>
   2aac5:      	callq	*%rax
   2aac7:      	addq	$0x18, %rsp
   2aacb:      	retq
   2aacc:      	int3
   2aacd:      	int3
   2aace:      	int3
   2aacf:      	int3

000000000002aad0 <core::cmp::min::hac679629131721c6>:
   2aad0:      	subq	$0x18, %rsp
   2aad4:      	movq	%rdi, 0x8(%rsp)
   2aad9:      	movq	%rsi, 0x10(%rsp)
   2aade:      	movq	0x111cb(%rip), %rax     # 0x3bcb0 <zlgk82z0l71lvh9+0x3bcb0>
   2aae5:      	callq	*%rax
   2aae7:      	addq	$0x18, %rsp
   2aaeb:      	retq
   2aaec:      	int3
   2aaed:      	int3
   2aaee:      	int3
   2aaef:      	int3

000000000002aaf0 <core::cmp::min_by::h04812ce0a382cc2c>:
   2aaf0:      	subq	$0x38, %rsp
   2aaf4:      	movq	%rdi, (%rsp)
   2aaf8:      	movq	%rsi, 0x8(%rsp)
   2aafd:      	movb	$0x0, 0x36(%rsp)
   2ab02:      	movb	$0x0, 0x35(%rsp)
   2ab07:      	movb	$0x1, 0x36(%rsp)
   2ab0c:      	movb	$0x1, 0x35(%rsp)
   2ab11:      	movq	%rsp, %rax
   2ab14:      	movq	%rax, 0x20(%rsp)
   2ab19:      	leaq	0x8(%rsp), %rax
   2ab1e:      	movq	%rax, 0x28(%rsp)
   2ab23:      	movq	0x20(%rsp), %rdi
   2ab28:      	movq	0x28(%rsp), %rsi
   2ab2d:      	movq	0x10d24(%rip), %rax     # 0x3b858 <zlgk82z0l71lvh9+0x3b858>
   2ab34:      	callq	*%rax
   2ab36:      	movb	%al, 0x1f(%rsp)
   2ab3a:      	movb	0x1f(%rsp), %al
   2ab3e:      	incb	%al
   2ab40:      	subb	$0x2, %al
   2ab42:      	jb	0x2ab4a <core::cmp::min_by::h04812ce0a382cc2c+0x5a>
   2ab44:      	jmp	0x2ab46 <core::cmp::min_by::h04812ce0a382cc2c+0x56>
   2ab46:      	jmp	0x2ab5a <core::cmp::min_by::h04812ce0a382cc2c+0x6a>
   2ab48:      	ud2
   2ab4a:      	movb	$0x0, 0x36(%rsp)
   2ab4f:      	movq	(%rsp), %rax
   2ab53:      	movq	%rax, 0x10(%rsp)
   2ab58:      	jmp	0x2ab69 <core::cmp::min_by::h04812ce0a382cc2c+0x79>
   2ab5a:      	movb	$0x0, 0x35(%rsp)
   2ab5f:      	movq	0x8(%rsp), %rax
   2ab64:      	movq	%rax, 0x10(%rsp)
   2ab69:      	testb	$0x1, 0x35(%rsp)
   2ab6e:      	jne	0x2ab79 <core::cmp::min_by::h04812ce0a382cc2c+0x89>
   2ab70:      	testb	$0x1, 0x36(%rsp)
   2ab75:      	jne	0x2ab85 <core::cmp::min_by::h04812ce0a382cc2c+0x95>
   2ab77:      	jmp	0x2ab7b <core::cmp::min_by::h04812ce0a382cc2c+0x8b>
   2ab79:      	jmp	0x2ab70 <core::cmp::min_by::h04812ce0a382cc2c+0x80>
   2ab7b:      	movq	0x10(%rsp), %rax
   2ab80:      	addq	$0x38, %rsp
   2ab84:      	retq
   2ab85:      	jmp	0x2ab7b <core::cmp::min_by::h04812ce0a382cc2c+0x8b>
   2ab87:      	int3
   2ab88:      	int3
   2ab89:      	int3
   2ab8a:      	int3
   2ab8b:      	int3
   2ab8c:      	int3
   2ab8d:      	int3
   2ab8e:      	int3
   2ab8f:      	int3

000000000002ab90 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he572921aff649cb9>:
   2ab90:      	subq	$0x48, %rsp
   2ab94:      	movq	%rdi, 0x10(%rsp)
   2ab99:      	movq	%rdi, 0x28(%rsp)
   2ab9e:      	movq	%rdi, %rax
   2aba1:      	addq	$0x8, %rax
   2aba5:      	movq	%rdi, 0x38(%rsp)
   2abaa:      	movq	%rax, 0x40(%rsp)
   2abaf:      	movq	(%rdi), %rax
   2abb2:      	cmpq	0x8(%rdi), %rax
   2abb6:      	jb	0x2abc3 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he572921aff649cb9+0x33>
   2abb8:      	movq	$0x0, 0x18(%rsp)
   2abc1:      	jmp	0x2abfd <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::he572921aff649cb9+0x6d>
   2abc3:      	movq	0x10(%rsp), %rax
   2abc8:      	movq	(%rax), %rdi
   2abcb:      	movq	%rdi, 0x8(%rsp)
   2abd0:      	movq	%rdi, 0x30(%rsp)
   2abd5:      	movl	$0x1, %esi
   2abda:      	callq	0x29c60 <<usize as core::iter::range::Step>::forward_unchecked::h100654c5c075c13f>
   2abdf:      	movq	0x10(%rsp), %rcx
   2abe4:      	movq	%rax, %rdx
   2abe7:      	movq	0x8(%rsp), %rax
   2abec:      	movq	%rdx, (%rcx)
   2abef:      	movq	%rax, 0x20(%rsp)
   2abf4:      	movq	$0x1, 0x18(%rsp)
   2abfd:      	movq	0x18(%rsp), %rax
   2ac02:      	movq	0x20(%rsp), %rdx
   2ac07:      	addq	$0x48, %rsp
   2ac0b:      	retq
   2ac0c:      	int3
   2ac0d:      	int3
   2ac0e:      	int3
   2ac0f:      	int3

000000000002ac10 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::habe2c77851c37801>:
   2ac10:      	pushq	%rax
   2ac11:      	movq	%rdi, (%rsp)
   2ac15:      	movq	0x110a4(%rip), %rax     # 0x3bcc0 <zlgk82z0l71lvh9+0x3bcc0>
   2ac1c:      	callq	*%rax
   2ac1e:      	popq	%rcx
   2ac1f:      	retq

000000000002ac20 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h376e407d6c1aed2c>:
   2ac20:      	movq	%rdi, %rax
   2ac23:      	movl	$0x9, %ecx
   2ac28:      	rep		movsq	(%rsi), %es:(%rdi)
   2ac2b:      	retq
   2ac2c:      	int3
   2ac2d:      	int3
   2ac2e:      	int3
   2ac2f:      	int3

000000000002ac30 <<I as core::iter::traits::collect::IntoIterator>::into_iter::hce773272a3a2be72>:
   2ac30:      	subq	$0x10, %rsp
   2ac34:      	movq	%rsi, %rdx
   2ac37:      	movq	%rdi, %rax
   2ac3a:      	movq	%rax, (%rsp)
   2ac3e:      	movq	%rdx, 0x8(%rsp)
   2ac43:      	addq	$0x10, %rsp
   2ac47:      	retq
   2ac48:      	int3
   2ac49:      	int3
   2ac4a:      	int3
   2ac4b:      	int3
   2ac4c:      	int3
   2ac4d:      	int3
   2ac4e:      	int3
   2ac4f:      	int3

000000000002ac50 <<I as core::iter::traits::collect::IntoIterator>::into_iter::hd70b0184e9a955ea>:
   2ac50:      	subq	$0x10, %rsp
   2ac54:      	movq	%rsi, %rdx
   2ac57:      	movq	%rdi, %rax
   2ac5a:      	movq	%rax, (%rsp)
   2ac5e:      	movq	%rdx, 0x8(%rsp)
   2ac63:      	addq	$0x10, %rsp
   2ac67:      	retq
   2ac68:      	int3
   2ac69:      	int3
   2ac6a:      	int3
   2ac6b:      	int3
   2ac6c:      	int3
   2ac6d:      	int3
   2ac6e:      	int3
   2ac6f:      	int3

000000000002ac70 <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf>:
   2ac70:      	subq	$0x88, %rsp
   2ac77:      	movq	%rsi, 0x18(%rsp)
   2ac7c:      	movq	%rdi, 0x20(%rsp)
   2ac81:      	movq	%rdi, 0x70(%rsp)
   2ac86:      	movq	%rsi, 0x78(%rsp)
   2ac8b:      	movq	$0x0, 0x30(%rsp)
   2ac94:      	movq	%rsi, 0x38(%rsp)
   2ac99:      	movq	0x30(%rsp), %rdi
   2ac9e:      	movq	0x38(%rsp), %rsi
   2aca3:      	movq	0x106c6(%rip), %rax     # 0x3b370 <zlgk82z0l71lvh9+0x3b370>
   2acaa:      	callq	*%rax
   2acac:      	movq	%rax, 0x40(%rsp)
   2acb1:      	movq	%rdx, 0x48(%rsp)
   2acb6:      	movq	0x106bb(%rip), %rax     # 0x3b378 <zlgk82z0l71lvh9+0x3b378>
   2acbd:      	leaq	0x40(%rsp), %rdi
   2acc2:      	callq	*%rax
   2acc4:      	movq	%rdx, 0x58(%rsp)
   2acc9:      	movq	%rax, 0x50(%rsp)
   2acce:      	cmpq	$0x0, 0x50(%rsp)
   2acd4:      	jne	0x2ace1 <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf+0x71>
   2acd6:      	movq	$0x0, 0x28(%rsp)
   2acdf:      	jmp	0x2ad1a <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf+0xaa>
   2ace1:      	movq	0x20(%rsp), %rdi
   2ace6:      	movq	0x58(%rsp), %rax
   2aceb:      	movq	%rax, 0x10(%rsp)
   2acf0:      	movq	%rax, 0x80(%rsp)
   2acf8:      	callq	0x2b6b0 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a>
   2acfd:      	movl	%edx, 0x68(%rsp)
   2ad01:      	movq	%rax, 0x60(%rsp)
   2ad06:      	movq	0x10aeb(%rip), %rax     # 0x3b7f8 <zlgk82z0l71lvh9+0x3b7f8>
   2ad0d:      	leaq	0x60(%rsp), %rdi
   2ad12:      	callq	*%rax
   2ad14:      	testb	$0x1, %al
   2ad16:      	jne	0x2ad29 <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf+0xb9>
   2ad18:      	jmp	0x2ad27 <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf+0xb7>
   2ad1a:      	movq	0x28(%rsp), %rax
   2ad1f:      	addq	$0x88, %rsp
   2ad26:      	retq
   2ad27:      	jmp	0x2acb6 <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf+0x46>
   2ad29:      	movq	0x18(%rsp), %rax
   2ad2e:      	movq	0x10(%rsp), %rcx
   2ad33:      	movq	%rax, %rdx
   2ad36:      	subq	%rcx, %rdx
   2ad39:      	movq	%rdx, 0x8(%rsp)
   2ad3e:      	cmpq	%rcx, %rax
   2ad41:      	setb	%al
   2ad44:      	testb	$0x1, %al
   2ad46:      	jne	0x2ad59 <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf+0xe9>
   2ad48:      	movq	0x8(%rsp), %rdi
   2ad4d:      	callq	0x2bcd0 <core::num::nonzero::NonZeroUsize::new_unchecked::ha01fff54c4bd1682>
   2ad52:      	movq	%rax, 0x28(%rsp)
   2ad57:      	jmp	0x2ad1a <core::iter::traits::iterator::Iterator::advance_by::h2a1249d6531480cf+0xaa>
   2ad59:      	leaq	-0x18350(%rip), %rdi    # 0x12a10 <str.1>
   2ad60:      	leaq	0xf7c1(%rip), %rdx      # 0x3a528 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x628>
   2ad67:      	movq	0x10162(%rip), %rax     # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2ad6e:      	movl	$0x21, %esi
   2ad73:      	callq	*%rax
   2ad75:      	ud2
   2ad77:      	int3
   2ad78:      	int3
   2ad79:      	int3
   2ad7a:      	int3
   2ad7b:      	int3
   2ad7c:      	int3
   2ad7d:      	int3
   2ad7e:      	int3
   2ad7f:      	int3

000000000002ad80 <core::iter::traits::iterator::Iterator::nth::hc4e64afcfca27e13>:
   2ad80:      	subq	$0x38, %rsp
   2ad84:      	movq	%rdi, (%rsp)
   2ad88:      	movq	%rdi, 0x28(%rsp)
   2ad8d:      	movq	%rsi, 0x30(%rsp)
   2ad92:      	movq	0x10f37(%rip), %rax     # 0x3bcd0 <zlgk82z0l71lvh9+0x3bcd0>
   2ad99:      	callq	*%rax
   2ad9b:      	movq	%rax, %rdi
   2ad9e:      	movq	0x1067b(%rip), %rax     # 0x3b420 <zlgk82z0l71lvh9+0x3b420>
   2ada5:      	callq	*%rax
   2ada7:      	movzbl	%al, %edi
   2adaa:      	andl	$0x1, %edi
   2adad:      	movq	0x10674(%rip), %rax     # 0x3b428 <zlgk82z0l71lvh9+0x3b428>
   2adb4:      	callq	*%rax
   2adb6:      	andb	$0x1, %al
   2adb8:      	movb	%al, 0x27(%rsp)
   2adbc:      	movb	0x27(%rsp), %al
   2adc0:      	andb	$0x1, %al
   2adc2:      	movzbl	%al, %eax
   2adc5:      	cmpq	$0x0, %rax
   2adc9:      	jne	0x2addf <core::iter::traits::iterator::Iterator::nth::hc4e64afcfca27e13+0x5f>
   2adcb:      	movq	(%rsp), %rdi
   2adcf:      	callq	0x2b6b0 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a>
   2add4:      	movl	%edx, 0x18(%rsp)
   2add8:      	movq	%rax, 0x10(%rsp)
   2addd:      	jmp	0x2adf1 <core::iter::traits::iterator::Iterator::nth::hc4e64afcfca27e13+0x71>
   2addf:      	movq	0x10a52(%rip), %rax     # 0x3b838 <zlgk82z0l71lvh9+0x3b838>
   2ade6:      	callq	*%rax
   2ade8:      	movl	%edx, 0x18(%rsp)
   2adec:      	movq	%rax, 0x10(%rsp)
   2adf1:      	movq	0x10(%rsp), %rax
   2adf6:      	movl	0x18(%rsp), %edx
   2adfa:      	addq	$0x38, %rsp
   2adfe:      	retq
   2adff:      	int3

000000000002ae00 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get::h477b35513eafa837>:
   2ae00:      	subq	$0x58, %rsp
   2ae04:      	movq	%rcx, 0x8(%rsp)
   2ae09:      	movq	%rdx, 0x10(%rsp)
   2ae0e:      	movq	%rsi, 0x18(%rsp)
   2ae13:      	movq	%rdi, 0x20(%rsp)
   2ae18:      	movq	%rdi, 0x38(%rsp)
   2ae1d:      	movq	%rsi, 0x40(%rsp)
   2ae22:      	movq	%rdx, 0x48(%rsp)
   2ae27:      	movq	%rcx, 0x50(%rsp)
   2ae2c:      	cmpq	%rsi, %rdi
   2ae2f:      	ja	0x2ae40 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get::h477b35513eafa837+0x40>
   2ae31:      	movq	0x18(%rsp), %rax
   2ae36:      	movq	0x8(%rsp), %rcx
   2ae3b:      	cmpq	%rcx, %rax
   2ae3e:      	jbe	0x2ae4b <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get::h477b35513eafa837+0x4b>
   2ae40:      	movq	$0x0, 0x28(%rsp)
   2ae49:      	jmp	0x2ae72 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get::h477b35513eafa837+0x72>
   2ae4b:      	movq	0x8(%rsp), %rcx
   2ae50:      	movq	0x10(%rsp), %rdx
   2ae55:      	movq	0x18(%rsp), %rsi
   2ae5a:      	movq	0x20(%rsp), %rdi
   2ae5f:      	movq	0x10e7a(%rip), %rax     # 0x3bce0 <zlgk82z0l71lvh9+0x3bce0>
   2ae66:      	callq	*%rax
   2ae68:      	movq	%rax, 0x28(%rsp)
   2ae6d:      	movq	%rdx, 0x30(%rsp)
   2ae72:      	movq	0x28(%rsp), %rax
   2ae77:      	movq	0x30(%rsp), %rdx
   2ae7c:      	addq	$0x58, %rsp
   2ae80:      	retq
   2ae81:      	int3
   2ae82:      	int3
   2ae83:      	int3
   2ae84:      	int3
   2ae85:      	int3
   2ae86:      	int3
   2ae87:      	int3
   2ae88:      	int3
   2ae89:      	int3
   2ae8a:      	int3
   2ae8b:      	int3
   2ae8c:      	int3
   2ae8d:      	int3
   2ae8e:      	int3
   2ae8f:      	int3

000000000002ae90 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::ha3e675124b761535>:
   2ae90:      	subq	$0xc8, %rsp
   2ae97:      	movq	%rcx, 0x20(%rsp)
   2ae9c:      	movq	%rdx, 0x28(%rsp)
   2aea1:      	movq	%rsi, 0x30(%rsp)
   2aea6:      	movq	%rdi, 0x38(%rsp)
   2aeab:      	movq	%rdi, 0x70(%rsp)
   2aeb0:      	movq	%rsi, 0x78(%rsp)
   2aeb5:      	movq	%rdx, 0x80(%rsp)
   2aebd:      	movq	%rcx, 0x88(%rsp)
   2aec5:      	movq	%rdi, 0x40(%rsp)
   2aeca:      	movq	%rsi, 0x48(%rsp)
   2aecf:      	movb	$0x1, %al
   2aed1:      	testb	$0x1, %al
   2aed3:      	jne	0x2af33 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::ha3e675124b761535+0xa3>
   2aed5:      	movq	0x38(%rsp), %rcx
   2aeda:      	movq	0x20(%rsp), %rsi
   2aedf:      	movq	0x28(%rsp), %rdi
   2aee4:      	movq	0x30(%rsp), %rax
   2aee9:      	subq	%rcx, %rax
   2aeec:      	movq	%rax, 0x18(%rsp)
   2aef1:      	movq	%rax, 0x90(%rsp)
   2aef9:      	movq	0x10540(%rip), %rax     # 0x3b440 <zlgk82z0l71lvh9+0x3b440>
   2af00:      	callq	*%rax
   2af02:      	movq	0x18(%rsp), %rsi
   2af07:      	movq	%rax, %rdi
   2af0a:      	movq	0x38(%rsp), %rax
   2af0f:      	movq	%rdi, 0x98(%rsp)
   2af17:      	movq	%rax, 0xa0(%rsp)
   2af1f:      	addq	%rax, %rdi
   2af22:      	movq	0x10aaf(%rip), %rax     # 0x3b9d8 <zlgk82z0l71lvh9+0x3b9d8>
   2af29:      	callq	*%rax
   2af2b:      	addq	$0xc8, %rsp
   2af32:      	retq
   2af33:      	movq	0x20(%rsp), %rax
   2af38:      	movq	0x28(%rsp), %rcx
   2af3d:      	movq	0x40(%rsp), %rsi
   2af42:      	movq	0x48(%rsp), %rdx
   2af47:      	movq	%rsi, 0x50(%rsp)
   2af4c:      	movq	%rdx, 0x58(%rsp)
   2af51:      	movq	%rcx, 0x60(%rsp)
   2af56:      	movq	%rax, 0x68(%rsp)
   2af5b:      	movq	0x50(%rsp), %rcx
   2af60:      	movq	0x58(%rsp), %rax
   2af65:      	movq	%rax, (%rsp)
   2af69:      	movq	0x60(%rsp), %rsi
   2af6e:      	movq	%rsi, 0x8(%rsp)
   2af73:      	movq	0x68(%rsp), %rdx
   2af78:      	movq	%rdx, 0x10(%rsp)
   2af7d:      	movq	%rcx, 0xa8(%rsp)
   2af85:      	movq	%rax, 0xb0(%rsp)
   2af8d:      	movq	%rsi, 0xb8(%rsp)
   2af95:      	movq	%rdx, 0xc0(%rsp)
   2af9d:      	cmpq	%rcx, %rax
   2afa0:      	jae	0x2afb9 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::ha3e675124b761535+0x129>
   2afa2:      	leaq	-0x18349(%rip), %rdi    # 0x12c60 <str.1+0x250>
   2afa9:      	movq	0x101c0(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2afb0:      	movl	$0x61, %esi
   2afb5:      	callq	*%rax
   2afb7:      	ud2
   2afb9:      	movq	0x10(%rsp), %rsi
   2afbe:      	movq	0x8(%rsp), %rdi
   2afc3:      	movq	0x1047e(%rip), %rax     # 0x3b448 <zlgk82z0l71lvh9+0x3b448>
   2afca:      	callq	*%rax
   2afcc:      	movq	%rax, %rcx
   2afcf:      	movq	(%rsp), %rax
   2afd3:      	cmpq	%rcx, %rax
   2afd6:      	ja	0x2afa2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::ha3e675124b761535+0x112>
   2afd8:      	jmp	0x2aed5 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::ha3e675124b761535+0x45>
   2afdd:      	int3
   2afde:      	int3
   2afdf:      	int3

000000000002afe0 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::hb66be16f4bf98560>:
   2afe0:      	subq	$0xc8, %rsp
   2afe7:      	movq	%rcx, 0x20(%rsp)
   2afec:      	movq	%rdx, 0x28(%rsp)
   2aff1:      	movq	%rsi, 0x30(%rsp)
   2aff6:      	movq	%rdi, 0x38(%rsp)
   2affb:      	movq	%rdi, 0x70(%rsp)
   2b000:      	movq	%rsi, 0x78(%rsp)
   2b005:      	movq	%rdx, 0x80(%rsp)
   2b00d:      	movq	%rcx, 0x88(%rsp)
   2b015:      	movq	%rdi, 0x40(%rsp)
   2b01a:      	movq	%rsi, 0x48(%rsp)
   2b01f:      	movb	$0x1, %al
   2b021:      	testb	$0x1, %al
   2b023:      	jne	0x2b083 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::hb66be16f4bf98560+0xa3>
   2b025:      	movq	0x38(%rsp), %rcx
   2b02a:      	movq	0x20(%rsp), %rsi
   2b02f:      	movq	0x28(%rsp), %rdi
   2b034:      	movq	0x30(%rsp), %rax
   2b039:      	subq	%rcx, %rax
   2b03c:      	movq	%rax, 0x18(%rsp)
   2b041:      	movq	%rax, 0x90(%rsp)
   2b049:      	movq	0x10648(%rip), %rax     # 0x3b698 <zlgk82z0l71lvh9+0x3b698>
   2b050:      	callq	*%rax
   2b052:      	movq	0x18(%rsp), %rsi
   2b057:      	movq	%rax, %rdi
   2b05a:      	movq	0x38(%rsp), %rax
   2b05f:      	movq	%rdi, 0x98(%rsp)
   2b067:      	movq	%rax, 0xa0(%rsp)
   2b06f:      	addq	%rax, %rdi
   2b072:      	movq	0x1062f(%rip), %rax     # 0x3b6a8 <zlgk82z0l71lvh9+0x3b6a8>
   2b079:      	callq	*%rax
   2b07b:      	addq	$0xc8, %rsp
   2b082:      	retq
   2b083:      	movq	0x20(%rsp), %rax
   2b088:      	movq	0x28(%rsp), %rcx
   2b08d:      	movq	0x40(%rsp), %rsi
   2b092:      	movq	0x48(%rsp), %rdx
   2b097:      	movq	%rsi, 0x50(%rsp)
   2b09c:      	movq	%rdx, 0x58(%rsp)
   2b0a1:      	movq	%rcx, 0x60(%rsp)
   2b0a6:      	movq	%rax, 0x68(%rsp)
   2b0ab:      	movq	0x50(%rsp), %rcx
   2b0b0:      	movq	0x58(%rsp), %rax
   2b0b5:      	movq	%rax, (%rsp)
   2b0b9:      	movq	0x60(%rsp), %rsi
   2b0be:      	movq	%rsi, 0x8(%rsp)
   2b0c3:      	movq	0x68(%rsp), %rdx
   2b0c8:      	movq	%rdx, 0x10(%rsp)
   2b0cd:      	movq	%rcx, 0xa8(%rsp)
   2b0d5:      	movq	%rax, 0xb0(%rsp)
   2b0dd:      	movq	%rsi, 0xb8(%rsp)
   2b0e5:      	movq	%rdx, 0xc0(%rsp)
   2b0ed:      	cmpq	%rcx, %rax
   2b0f0:      	jae	0x2b109 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::hb66be16f4bf98560+0x129>
   2b0f2:      	leaq	-0x18499(%rip), %rdi    # 0x12c60 <str.1+0x250>
   2b0f9:      	movq	0x10070(%rip), %rax     # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2b100:      	movl	$0x61, %esi
   2b105:      	callq	*%rax
   2b107:      	ud2
   2b109:      	movq	0x10(%rsp), %rsi
   2b10e:      	movq	0x8(%rsp), %rdi
   2b113:      	movq	0x10586(%rip), %rax     # 0x3b6a0 <zlgk82z0l71lvh9+0x3b6a0>
   2b11a:      	callq	*%rax
   2b11c:      	movq	%rax, %rcx
   2b11f:      	movq	(%rsp), %rax
   2b123:      	cmpq	%rcx, %rax
   2b126:      	ja	0x2b0f2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::hb66be16f4bf98560+0x112>
   2b128:      	jmp	0x2b025 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::hb66be16f4bf98560+0x45>
   2b12d:      	int3
   2b12e:      	int3
   2b12f:      	int3

000000000002b130 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h8f41ffbec181a7df>:
   2b130:      	subq	$0xe8, %rsp
   2b137:      	movq	%rcx, 0x20(%rsp)
   2b13c:      	movq	%rdx, 0x28(%rsp)
   2b141:      	movq	%rsi, 0x30(%rsp)
   2b146:      	movq	%rdi, 0x38(%rsp)
   2b14b:      	movq	%rdi, 0x70(%rsp)
   2b150:      	movq	%rsi, 0x78(%rsp)
   2b155:      	movq	%rdx, 0x80(%rsp)
   2b15d:      	movq	%rcx, 0x88(%rsp)
   2b165:      	movq	%rdi, 0x40(%rsp)
   2b16a:      	movq	%rsi, 0x48(%rsp)
   2b16f:      	movb	$0x1, %al
   2b171:      	testb	$0x1, %al
   2b173:      	jne	0x2b1c8 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h8f41ffbec181a7df+0x98>
   2b175:      	movq	0x38(%rsp), %rax
   2b17a:      	movq	0x28(%rsp), %rdi
   2b17f:      	movq	0x20(%rsp), %rcx
   2b184:      	movq	0x30(%rsp), %rsi
   2b189:      	subq	%rax, %rsi
   2b18c:      	movq	%rsi, 0x90(%rsp)
   2b194:      	movq	%rdi, 0xa8(%rsp)
   2b19c:      	movq	%rcx, 0xb0(%rsp)
   2b1a4:      	movq	%rdi, 0x98(%rsp)
   2b1ac:      	movq	%rax, 0xa0(%rsp)
   2b1b4:      	addq	%rax, %rdi
   2b1b7:      	movq	0x1050a(%rip), %rax     # 0x3b6c8 <zlgk82z0l71lvh9+0x3b6c8>
   2b1be:      	callq	*%rax
   2b1c0:      	addq	$0xe8, %rsp
   2b1c7:      	retq
   2b1c8:      	movq	0x20(%rsp), %rax
   2b1cd:      	movq	0x28(%rsp), %rcx
   2b1d2:      	movq	0x40(%rsp), %rsi
   2b1d7:      	movq	0x48(%rsp), %rdx
   2b1dc:      	movq	%rsi, 0x50(%rsp)
   2b1e1:      	movq	%rdx, 0x58(%rsp)
   2b1e6:      	movq	%rcx, 0x60(%rsp)
   2b1eb:      	movq	%rax, 0x68(%rsp)
   2b1f0:      	movq	0x50(%rsp), %rcx
   2b1f5:      	movq	0x58(%rsp), %rax
   2b1fa:      	movq	%rax, 0x8(%rsp)
   2b1ff:      	movq	0x60(%rsp), %rsi
   2b204:      	movq	%rsi, 0x10(%rsp)
   2b209:      	movq	0x68(%rsp), %rdx
   2b20e:      	movq	%rdx, 0x18(%rsp)
   2b213:      	movq	%rcx, 0xb8(%rsp)
   2b21b:      	movq	%rax, 0xc0(%rsp)
   2b223:      	movq	%rsi, 0xc8(%rsp)
   2b22b:      	movq	%rdx, 0xd0(%rsp)
   2b233:      	cmpq	%rcx, %rax
   2b236:      	jae	0x2b24f <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h8f41ffbec181a7df+0x11f>
   2b238:      	leaq	-0x1857e(%rip), %rdi    # 0x12cc1 <str.1+0x2b1>
   2b23f:      	movq	0xff2a(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2b246:      	movl	$0x65, %esi
   2b24b:      	callq	*%rax
   2b24d:      	ud2
   2b24f:      	movq	0x18(%rsp), %rsi
   2b254:      	movq	0x10(%rsp), %rdi
   2b259:      	movq	%rdi, 0xd8(%rsp)
   2b261:      	movq	%rsi, 0xe0(%rsp)
   2b269:      	movq	0x10718(%rip), %rax     # 0x3b988 <zlgk82z0l71lvh9+0x3b988>
   2b270:      	callq	*%rax
   2b272:      	movq	%rax, %rcx
   2b275:      	movq	0x8(%rsp), %rax
   2b27a:      	cmpq	%rcx, %rax
   2b27d:      	ja	0x2b238 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h8f41ffbec181a7df+0x108>
   2b27f:      	jmp	0x2b175 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h8f41ffbec181a7df+0x45>
   2b284:      	int3
   2b285:      	int3
   2b286:      	int3
   2b287:      	int3
   2b288:      	int3
   2b289:      	int3
   2b28a:      	int3
   2b28b:      	int3
   2b28c:      	int3
   2b28d:      	int3
   2b28e:      	int3
   2b28f:      	int3

000000000002b290 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index::h5be87311218ea96c>:
   2b290:      	subq	$0x48, %rsp
   2b294:      	movq	%r8, (%rsp)
   2b298:      	movq	%rcx, 0x8(%rsp)
   2b29d:      	movq	%rdx, 0x10(%rsp)
   2b2a2:      	movq	%rsi, 0x18(%rsp)
   2b2a7:      	movq	%rdi, 0x20(%rsp)
   2b2ac:      	movq	%rdi, 0x28(%rsp)
   2b2b1:      	movq	%rsi, 0x30(%rsp)
   2b2b6:      	movq	%rdx, 0x38(%rsp)
   2b2bb:      	movq	%rcx, 0x40(%rsp)
   2b2c0:      	cmpq	%rsi, %rdi
   2b2c3:      	ja	0x2b2d6 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index::h5be87311218ea96c+0x46>
   2b2c5:      	movq	0x18(%rsp), %rax
   2b2ca:      	movq	0x8(%rsp), %rcx
   2b2cf:      	cmpq	%rcx, %rax
   2b2d2:      	ja	0x2b311 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index::h5be87311218ea96c+0x81>
   2b2d4:      	jmp	0x2b2ef <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index::h5be87311218ea96c+0x5f>
   2b2d6:      	movq	(%rsp), %rdx
   2b2da:      	movq	0x18(%rsp), %rsi
   2b2df:      	movq	0x20(%rsp), %rdi
   2b2e4:      	movq	0x100ed(%rip), %rax     # 0x3b3d8 <zlgk82z0l71lvh9+0x3b3d8>
   2b2eb:      	callq	*%rax
   2b2ed:      	ud2
   2b2ef:      	movq	0x8(%rsp), %rcx
   2b2f4:      	movq	0x10(%rsp), %rdx
   2b2f9:      	movq	0x18(%rsp), %rsi
   2b2fe:      	movq	0x20(%rsp), %rdi
   2b303:      	movq	0x109d6(%rip), %rax     # 0x3bce0 <zlgk82z0l71lvh9+0x3bce0>
   2b30a:      	callq	*%rax
   2b30c:      	addq	$0x48, %rsp
   2b310:      	retq
   2b311:      	movq	(%rsp), %rdx
   2b315:      	movq	0x8(%rsp), %rsi
   2b31a:      	movq	0x18(%rsp), %rdi
   2b31f:      	movq	0x100ba(%rip), %rax     # 0x3b3e0 <zlgk82z0l71lvh9+0x3b3e0>
   2b326:      	callq	*%rax
   2b328:      	ud2
   2b32a:      	int3
   2b32b:      	int3
   2b32c:      	int3
   2b32d:      	int3
   2b32e:      	int3
   2b32f:      	int3

000000000002b330 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::ha2fd018c7ae62a15>:
   2b330:      	subq	$0x48, %rsp
   2b334:      	movq	%r8, (%rsp)
   2b338:      	movq	%rcx, 0x8(%rsp)
   2b33d:      	movq	%rdx, 0x10(%rsp)
   2b342:      	movq	%rsi, 0x18(%rsp)
   2b347:      	movq	%rdi, 0x20(%rsp)
   2b34c:      	movq	%rdi, 0x28(%rsp)
   2b351:      	movq	%rsi, 0x30(%rsp)
   2b356:      	movq	%rdx, 0x38(%rsp)
   2b35b:      	movq	%rcx, 0x40(%rsp)
   2b360:      	cmpq	%rsi, %rdi
   2b363:      	ja	0x2b376 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::ha2fd018c7ae62a15+0x46>
   2b365:      	movq	0x18(%rsp), %rax
   2b36a:      	movq	0x8(%rsp), %rcx
   2b36f:      	cmpq	%rcx, %rax
   2b372:      	ja	0x2b3b1 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::ha2fd018c7ae62a15+0x81>
   2b374:      	jmp	0x2b38f <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::ha2fd018c7ae62a15+0x5f>
   2b376:      	movq	(%rsp), %rdx
   2b37a:      	movq	0x18(%rsp), %rsi
   2b37f:      	movq	0x20(%rsp), %rdi
   2b384:      	movq	0x1004d(%rip), %rax     # 0x3b3d8 <zlgk82z0l71lvh9+0x3b3d8>
   2b38b:      	callq	*%rax
   2b38d:      	ud2
   2b38f:      	movq	0x8(%rsp), %rcx
   2b394:      	movq	0x10(%rsp), %rdx
   2b399:      	movq	0x18(%rsp), %rsi
   2b39e:      	movq	0x20(%rsp), %rdi
   2b3a3:      	movq	0x10946(%rip), %rax     # 0x3bcf0 <zlgk82z0l71lvh9+0x3bcf0>
   2b3aa:      	callq	*%rax
   2b3ac:      	addq	$0x48, %rsp
   2b3b0:      	retq
   2b3b1:      	movq	(%rsp), %rdx
   2b3b5:      	movq	0x8(%rsp), %rsi
   2b3ba:      	movq	0x18(%rsp), %rdi
   2b3bf:      	movq	0x1001a(%rip), %rax     # 0x3b3e0 <zlgk82z0l71lvh9+0x3b3e0>
   2b3c6:      	callq	*%rax
   2b3c8:      	ud2
   2b3ca:      	int3
   2b3cb:      	int3
   2b3cc:      	int3
   2b3cd:      	int3
   2b3ce:      	int3
   2b3cf:      	int3

000000000002b3d0 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index::hd9d15c228d44b14f>:
   2b3d0:      	subq	$0x28, %rsp
   2b3d4:      	movq	%rcx, %r8
   2b3d7:      	movq	%rdx, %rcx
   2b3da:      	movq	%rsi, %rdx
   2b3dd:      	movq	%rdi, 0x10(%rsp)
   2b3e2:      	movq	%rdx, 0x18(%rsp)
   2b3e7:      	movq	%rcx, 0x20(%rsp)
   2b3ec:      	movq	$0x0, (%rsp)
   2b3f4:      	movq	%rdi, 0x8(%rsp)
   2b3f9:      	movq	(%rsp), %rdi
   2b3fd:      	movq	0x8(%rsp), %rsi
   2b402:      	movq	0x10617(%rip), %rax     # 0x3ba20 <zlgk82z0l71lvh9+0x3ba20>
   2b409:      	callq	*%rax
   2b40b:      	addq	$0x28, %rsp
   2b40f:      	retq

000000000002b410 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h742f60ff21611d33>:
   2b410:      	subq	$0x28, %rsp
   2b414:      	movq	%rcx, %r8
   2b417:      	movq	%rdx, %rcx
   2b41a:      	movq	%rsi, %rdx
   2b41d:      	movq	%rdi, 0x10(%rsp)
   2b422:      	movq	%rdx, 0x18(%rsp)
   2b427:      	movq	%rcx, 0x20(%rsp)
   2b42c:      	movq	$0x0, (%rsp)
   2b434:      	movq	%rdi, 0x8(%rsp)
   2b439:      	movq	(%rsp), %rdi
   2b43d:      	movq	0x8(%rsp), %rsi
   2b442:      	movq	0x10267(%rip), %rax     # 0x3b6b0 <zlgk82z0l71lvh9+0x3b6b0>
   2b449:      	callq	*%rax
   2b44b:      	addq	$0x28, %rsp
   2b44f:      	retq

000000000002b450 <<core::ops::range::RangeFrom<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::hbf1d8223b9e5b325>:
   2b450:      	subq	$0x48, %rsp
   2b454:      	movq	%rdx, 0x18(%rsp)
   2b459:      	movq	%rsi, %rax
   2b45c:      	movq	0x18(%rsp), %rsi
   2b461:      	movq	%rax, 0x10(%rsp)
   2b466:      	movq	%rdi, %rax
   2b469:      	movq	0x10(%rsp), %rdi
   2b46e:      	movq	%rax, 0x8(%rsp)
   2b473:      	movq	%rax, 0x30(%rsp)
   2b478:      	movq	%rdi, 0x38(%rsp)
   2b47d:      	movq	%rsi, 0x40(%rsp)
   2b482:      	movq	0xffbf(%rip), %rax      # 0x3b448 <zlgk82z0l71lvh9+0x3b448>
   2b489:      	callq	*%rax
   2b48b:      	movq	0x8(%rsp), %rdi
   2b490:      	movq	0x10(%rsp), %rdx
   2b495:      	movq	0x18(%rsp), %rcx
   2b49a:      	movq	%rdi, 0x20(%rsp)
   2b49f:      	movq	%rax, 0x28(%rsp)
   2b4a4:      	movq	0x20(%rsp), %rdi
   2b4a9:      	movq	0x28(%rsp), %rsi
   2b4ae:      	movq	0x10833(%rip), %rax     # 0x3bce8 <zlgk82z0l71lvh9+0x3bce8>
   2b4b5:      	callq	*%rax
   2b4b7:      	addq	$0x48, %rsp
   2b4bb:      	retq
   2b4bc:      	int3
   2b4bd:      	int3
   2b4be:      	int3
   2b4bf:      	int3

000000000002b4c0 <<core::ops::range::RangeFrom<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked::hf547b187d422e56e>:
   2b4c0:      	subq	$0x48, %rsp
   2b4c4:      	movq	%rdx, 0x18(%rsp)
   2b4c9:      	movq	%rsi, %rax
   2b4cc:      	movq	0x18(%rsp), %rsi
   2b4d1:      	movq	%rax, 0x10(%rsp)
   2b4d6:      	movq	%rdi, %rax
   2b4d9:      	movq	0x10(%rsp), %rdi
   2b4de:      	movq	%rax, 0x8(%rsp)
   2b4e3:      	movq	%rax, 0x30(%rsp)
   2b4e8:      	movq	%rdi, 0x38(%rsp)
   2b4ed:      	movq	%rsi, 0x40(%rsp)
   2b4f2:      	movq	0x101a7(%rip), %rax     # 0x3b6a0 <zlgk82z0l71lvh9+0x3b6a0>
   2b4f9:      	callq	*%rax
   2b4fb:      	movq	0x8(%rsp), %rdi
   2b500:      	movq	0x10(%rsp), %rdx
   2b505:      	movq	0x18(%rsp), %rcx
   2b50a:      	movq	%rdi, 0x20(%rsp)
   2b50f:      	movq	%rax, 0x28(%rsp)
   2b514:      	movq	0x20(%rsp), %rdi
   2b519:      	movq	0x28(%rsp), %rsi
   2b51e:      	movq	0x107bb(%rip), %rax     # 0x3bce0 <zlgk82z0l71lvh9+0x3bce0>
   2b525:      	callq	*%rax
   2b527:      	addq	$0x48, %rsp
   2b52b:      	retq
   2b52c:      	int3
   2b52d:      	int3
   2b52e:      	int3
   2b52f:      	int3

000000000002b530 <<core::ops::range::RangeFrom<usize> as core::slice::index::SliceIndex<[T]>>::index::h236e1cda9ad9cb97>:
   2b530:      	subq	$0x38, %rsp
   2b534:      	movq	%rcx, (%rsp)
   2b538:      	movq	%rdx, 0x8(%rsp)
   2b53d:      	movq	%rsi, 0x10(%rsp)
   2b542:      	movq	%rdi, 0x18(%rsp)
   2b547:      	movq	%rdi, 0x20(%rsp)
   2b54c:      	movq	%rsi, 0x28(%rsp)
   2b551:      	movq	%rdx, 0x30(%rsp)
   2b556:      	cmpq	%rdx, %rdi
   2b559:      	ja	0x2b578 <<core::ops::range::RangeFrom<usize> as core::slice::index::SliceIndex<[T]>>::index::h236e1cda9ad9cb97+0x48>
   2b55b:      	movq	0x8(%rsp), %rdx
   2b560:      	movq	0x10(%rsp), %rsi
   2b565:      	movq	0x18(%rsp), %rdi
   2b56a:      	movq	0x1078f(%rip), %rax     # 0x3bd00 <zlgk82z0l71lvh9+0x3bd00>
   2b571:      	callq	*%rax
   2b573:      	addq	$0x38, %rsp
   2b577:      	retq
   2b578:      	movq	(%rsp), %rdx
   2b57c:      	movq	0x8(%rsp), %rsi
   2b581:      	movq	0x18(%rsp), %rdi
   2b586:      	movq	0xfe5b(%rip), %rax      # 0x3b3e8 <zlgk82z0l71lvh9+0x3b3e8>
   2b58d:      	callq	*%rax
   2b58f:      	ud2
   2b591:      	int3
   2b592:      	int3
   2b593:      	int3
   2b594:      	int3
   2b595:      	int3
   2b596:      	int3
   2b597:      	int3
   2b598:      	int3
   2b599:      	int3
   2b59a:      	int3
   2b59b:      	int3
   2b59c:      	int3
   2b59d:      	int3
   2b59e:      	int3
   2b59f:      	int3

000000000002b5a0 <<core::ops::range::RangeFrom<usize> as core::slice::index::SliceIndex<[T]>>::index::h77d2ce14e576a387>:
   2b5a0:      	subq	$0x38, %rsp
   2b5a4:      	movq	%rcx, (%rsp)
   2b5a8:      	movq	%rdx, 0x8(%rsp)
   2b5ad:      	movq	%rsi, 0x10(%rsp)
   2b5b2:      	movq	%rdi, 0x18(%rsp)
   2b5b7:      	movq	%rdi, 0x20(%rsp)
   2b5bc:      	movq	%rsi, 0x28(%rsp)
   2b5c1:      	movq	%rdx, 0x30(%rsp)
   2b5c6:      	cmpq	%rdx, %rdi
   2b5c9:      	ja	0x2b5e8 <<core::ops::range::RangeFrom<usize> as core::slice::index::SliceIndex<[T]>>::index::h77d2ce14e576a387+0x48>
   2b5cb:      	movq	0x8(%rsp), %rdx
   2b5d0:      	movq	0x10(%rsp), %rsi
   2b5d5:      	movq	0x18(%rsp), %rdi
   2b5da:      	movq	0x10717(%rip), %rax     # 0x3bcf8 <zlgk82z0l71lvh9+0x3bcf8>
   2b5e1:      	callq	*%rax
   2b5e3:      	addq	$0x38, %rsp
   2b5e7:      	retq
   2b5e8:      	movq	(%rsp), %rdx
   2b5ec:      	movq	0x8(%rsp), %rsi
   2b5f1:      	movq	0x18(%rsp), %rdi
   2b5f6:      	movq	0xfdeb(%rip), %rax      # 0x3b3e8 <zlgk82z0l71lvh9+0x3b3e8>
   2b5fd:      	callq	*%rax
   2b5ff:      	ud2
   2b601:      	int3
   2b602:      	int3
   2b603:      	int3
   2b604:      	int3
   2b605:      	int3
   2b606:      	int3
   2b607:      	int3
   2b608:      	int3
   2b609:      	int3
   2b60a:      	int3
   2b60b:      	int3
   2b60c:      	int3
   2b60d:      	int3
   2b60e:      	int3
   2b60f:      	int3

000000000002b610 <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::hc4f210bd795697a9>:
   2b610:      	subq	$0x18, %rsp
   2b614:      	movq	%rsi, %rdx
   2b617:      	movq	%rdi, %rax
   2b61a:      	movq	%rax, 0x8(%rsp)
   2b61f:      	movq	%rdx, 0x10(%rsp)
   2b624:      	addq	$0x18, %rsp
   2b628:      	retq
   2b629:      	int3
   2b62a:      	int3
   2b62b:      	int3
   2b62c:      	int3
   2b62d:      	int3
   2b62e:      	int3
   2b62f:      	int3

000000000002b630 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::next::h6a03a136863dbfa0>:
   2b630:      	pushq	%rax
   2b631:      	movq	%rdi, (%rsp)
   2b635:      	movq	0xfe14(%rip), %rax      # 0x3b450 <zlgk82z0l71lvh9+0x3b450>
   2b63c:      	callq	*%rax
   2b63e:      	movl	%eax, %edi
   2b640:      	movl	%edx, %esi
   2b642:      	movq	0xfe0f(%rip), %rax      # 0x3b458 <zlgk82z0l71lvh9+0x3b458>
   2b649:      	callq	*%rax
   2b64b:      	popq	%rcx
   2b64c:      	retq
   2b64d:      	int3
   2b64e:      	int3
   2b64f:      	int3

000000000002b650 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::next::{{closure}}::hf960e8ed62a52f3a>:
   2b650:      	pushq	%rax
   2b651:      	movl	%edi, 0x4(%rsp)
   2b655:      	callq	0x28e00 <core::char::methods::<impl char>::from_u32_unchecked::hef982f5d78cc9f1f>
   2b65a:      	popq	%rcx
   2b65b:      	retq
   2b65c:      	int3
   2b65d:      	int3
   2b65e:      	int3
   2b65f:      	int3

000000000002b660 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::count::h90b6e8d639e5c332>:
   2b660:      	subq	$0x18, %rsp
   2b664:      	movq	%rdi, 0x8(%rsp)
   2b669:      	movq	%rsi, 0x10(%rsp)
   2b66e:      	leaq	0x8(%rsp), %rdi
   2b673:      	callq	0x2b690 <core::str::iter::Chars::as_str::hf8c7cc95d7caa4e0>
   2b678:      	movq	%rax, %rdi
   2b67b:      	movq	%rdx, %rsi
   2b67e:      	callq	0x2e4b0 <core::str::count::count_chars::hef3e3a51fbb574f7>
   2b683:      	addq	$0x18, %rsp
   2b687:      	retq
   2b688:      	int3
   2b689:      	int3
   2b68a:      	int3
   2b68b:      	int3
   2b68c:      	int3
   2b68d:      	int3
   2b68e:      	int3
   2b68f:      	int3

000000000002b690 <core::str::iter::Chars::as_str::hf8c7cc95d7caa4e0>:
   2b690:      	pushq	%rax
   2b691:      	movq	%rdi, (%rsp)
   2b695:      	movq	0x10514(%rip), %rax     # 0x3bbb0 <zlgk82z0l71lvh9+0x3bbb0>
   2b69c:      	callq	*%rax
   2b69e:      	movq	%rax, %rdi
   2b6a1:      	movq	%rdx, %rsi
   2b6a4:      	callq	0x253c0 <core::str::converts::from_utf8_unchecked::h9908febf4935f0f4>
   2b6a9:      	popq	%rcx
   2b6aa:      	retq
   2b6ab:      	int3
   2b6ac:      	int3
   2b6ad:      	int3
   2b6ae:      	int3
   2b6af:      	int3

000000000002b6b0 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a>:
   2b6b0:      	subq	$0xc8, %rsp
   2b6b7:      	movq	%rdi, %rax
   2b6ba:      	movq	%rax, 0x28(%rsp)
   2b6bf:      	movq	%rax, 0x60(%rsp)
   2b6c4:      	movq	%rax, 0xb0(%rsp)
   2b6cc:      	movq	%rax, %rdi
   2b6cf:      	addq	$0x8, %rdi
   2b6d3:      	movq	%rdi, 0xc0(%rsp)
   2b6db:      	movq	0x8(%rax), %rdi
   2b6df:      	movq	%rdi, 0xb8(%rsp)
   2b6e7:      	movq	(%rax), %rsi
   2b6ea:      	movq	0xfeff(%rip), %rax      # 0x3b5f0 <zlgk82z0l71lvh9+0x3b5f0>
   2b6f1:      	callq	*%rax
   2b6f3:      	movq	0x28(%rsp), %rdi
   2b6f8:      	movq	%rax, 0xa8(%rsp)
   2b700:      	movq	0xa8(%rsp), %rax
   2b708:      	movq	%rax, 0x30(%rsp)
   2b70d:      	movq	%rax, 0x68(%rsp)
   2b712:      	callq	0x2b630 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::next::h6a03a136863dbfa0>
   2b717:      	movl	%eax, 0x4c(%rsp)
   2b71b:      	movl	$0x1, %eax
   2b720:      	xorl	%ecx, %ecx
   2b722:      	cmpl	$0x110000, 0x4c(%rsp)   # imm = 0x110000
   2b72a:      	cmoveq	%rcx, %rax
   2b72e:      	cmpq	$0x0, %rax
   2b732:      	jne	0x2b741 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a+0x91>
   2b734:      	movl	$0x110000, 0x40(%rsp)   # imm = 0x110000
   2b73c:      	jmp	0x2b7c6 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a+0x116>
   2b741:      	movq	0x28(%rsp), %rax
   2b746:      	movl	0x4c(%rsp), %ecx
   2b74a:      	movl	%ecx, 0x14(%rsp)
   2b74e:      	movl	%ecx, 0x74(%rsp)
   2b752:      	movq	0x10(%rax), %rcx
   2b756:      	movq	%rcx, 0x18(%rsp)
   2b75b:      	movq	%rcx, 0x78(%rsp)
   2b760:      	movq	%rax, 0x90(%rsp)
   2b768:      	movq	%rax, %rcx
   2b76b:      	addq	$0x8, %rcx
   2b76f:      	movq	%rcx, 0xa0(%rsp)
   2b777:      	movq	0x8(%rax), %rdi
   2b77b:      	movq	%rdi, 0x98(%rsp)
   2b783:      	movq	(%rax), %rsi
   2b786:      	movq	0xfe63(%rip), %rax      # 0x3b5f0 <zlgk82z0l71lvh9+0x3b5f0>
   2b78d:      	callq	*%rax
   2b78f:      	movq	%rax, %rcx
   2b792:      	movq	0x30(%rsp), %rax
   2b797:      	movq	%rcx, 0x88(%rsp)
   2b79f:      	movq	0x88(%rsp), %rcx
   2b7a7:      	movq	%rcx, 0x80(%rsp)
   2b7af:      	movq	%rax, %rdx
   2b7b2:      	subq	%rcx, %rdx
   2b7b5:      	movq	%rdx, 0x20(%rsp)
   2b7ba:      	cmpq	%rcx, %rax
   2b7bd:      	setb	%al
   2b7c0:      	testb	$0x1, %al
   2b7c2:      	jne	0x2b7f3 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a+0x143>
   2b7c4:      	jmp	0x2b7d7 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a+0x127>
   2b7c6:      	movq	0x38(%rsp), %rax
   2b7cb:      	movl	0x40(%rsp), %edx
   2b7cf:      	addq	$0xc8, %rsp
   2b7d6:      	retq
   2b7d7:      	movq	0x28(%rsp), %rcx
   2b7dc:      	movq	0x20(%rsp), %rax
   2b7e1:      	addq	0x10(%rcx), %rax
   2b7e5:      	movq	%rax, 0x8(%rsp)
   2b7ea:      	setb	%al
   2b7ed:      	testb	$0x1, %al
   2b7ef:      	jne	0x2b845 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a+0x195>
   2b7f1:      	jmp	0x2b811 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a+0x161>
   2b7f3:      	leaq	-0x18dea(%rip), %rdi    # 0x12a10 <str.1>
   2b7fa:      	leaq	0xed3f(%rip), %rdx      # 0x3a540 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x640>
   2b801:      	movq	0xf6c8(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2b808:      	movl	$0x21, %esi
   2b80d:      	callq	*%rax
   2b80f:      	ud2
   2b811:      	movl	0x14(%rsp), %eax
   2b815:      	movq	0x18(%rsp), %rcx
   2b81a:      	movq	0x28(%rsp), %rdx
   2b81f:      	movq	0x8(%rsp), %rsi
   2b824:      	movq	%rsi, 0x10(%rdx)
   2b828:      	movq	%rcx, 0x50(%rsp)
   2b82d:      	movl	%eax, 0x58(%rsp)
   2b831:      	movq	0x50(%rsp), %rcx
   2b836:      	movl	0x58(%rsp), %eax
   2b83a:      	movq	%rcx, 0x38(%rsp)
   2b83f:      	movl	%eax, 0x40(%rsp)
   2b843:      	jmp	0x2b7c6 <<core::str::iter::CharIndices as core::iter::traits::iterator::Iterator>::next::h1a4c2a64f4494d5a+0x116>
   2b845:      	leaq	-0x18e5c(%rip), %rdi    # 0x129f0 <str.0>
   2b84c:      	leaq	0xed05(%rip), %rdx      # 0x3a558 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x658>
   2b853:      	movq	0xf676(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2b85a:      	movl	$0x1c, %esi
   2b85f:      	callq	*%rax
   2b861:      	ud2
   2b863:      	int3
   2b864:      	int3
   2b865:      	int3
   2b866:      	int3
   2b867:      	int3
   2b868:      	int3
   2b869:      	int3
   2b86a:      	int3
   2b86b:      	int3
   2b86c:      	int3
   2b86d:      	int3
   2b86e:      	int3
   2b86f:      	int3

000000000002b870 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc>:
   2b870:      	subq	$0x48, %rsp
   2b874:      	movq	%rdi, 0x8(%rsp)
   2b879:      	movq	%rdi, 0x30(%rsp)
   2b87e:      	testb	$0x1, 0x41(%rdi)
   2b882:      	jne	0x2b895 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0x25>
   2b884:      	movq	0x8(%rsp), %rax
   2b889:      	movb	$0x1, 0x41(%rax)
   2b88d:      	testb	$0x1, 0x40(%rax)
   2b891:      	jne	0x2b8c5 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0x55>
   2b893:      	jmp	0x2b8a3 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0x33>
   2b895:      	movq	$0x0, 0x10(%rsp)
   2b89e:      	jmp	0x2b945 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0xd5>
   2b8a3:      	movq	0x8(%rsp), %rcx
   2b8a8:      	movq	0x8(%rcx), %rax
   2b8ac:      	movq	(%rcx), %rcx
   2b8af:      	movq	%rax, %rdx
   2b8b2:      	subq	%rcx, %rdx
   2b8b5:      	movq	%rdx, (%rsp)
   2b8b9:      	cmpq	%rcx, %rax
   2b8bc:      	setb	%al
   2b8bf:      	testb	$0x1, %al
   2b8c1:      	jne	0x2b927 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0xb7>
   2b8c3:      	jmp	0x2b918 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0xa8>
   2b8c5:      	movq	0x8(%rsp), %rdi
   2b8ca:      	addq	$0x10, %rdi
   2b8ce:      	callq	0x28760 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::haystack::haee06d69ceda4135>
   2b8d3:      	movq	%rax, %rdi
   2b8d6:      	movq	0x8(%rsp), %rax
   2b8db:      	movq	%rdx, %rsi
   2b8de:      	movq	(%rax), %rcx
   2b8e1:      	movq	0x8(%rax), %rax
   2b8e5:      	movq	%rcx, 0x20(%rsp)
   2b8ea:      	movq	%rax, 0x28(%rsp)
   2b8ef:      	movq	0x20(%rsp), %rdx
   2b8f4:      	movq	0x28(%rsp), %rcx
   2b8f9:      	movq	0xfd10(%rip), %rax      # 0x3b610 <zlgk82z0l71lvh9+0x3b610>
   2b900:      	callq	*%rax
   2b902:      	movq	%rax, 0x38(%rsp)
   2b907:      	movq	%rdx, 0x40(%rsp)
   2b90c:      	movq	%rax, 0x10(%rsp)
   2b911:      	movq	%rdx, 0x18(%rsp)
   2b916:      	jmp	0x2b945 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0xd5>
   2b918:      	movq	(%rsp), %rax
   2b91c:      	cmpq	$0x0, %rax
   2b920:      	ja	0x2b8c5 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0x55>
   2b922:      	jmp	0x2b895 <core::str::iter::SplitInternal<P>::get_end::h3844226f8aa510dc+0x25>
   2b927:      	leaq	-0x18f1e(%rip), %rdi    # 0x12a10 <str.1>
   2b92e:      	leaq	0xec3b(%rip), %rdx      # 0x3a570 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x670>
   2b935:      	movq	0xf594(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2b93c:      	movl	$0x21, %esi
   2b941:      	callq	*%rax
   2b943:      	ud2
   2b945:      	movq	0x10(%rsp), %rax
   2b94a:      	movq	0x18(%rsp), %rdx
   2b94f:      	addq	$0x48, %rsp
   2b953:      	retq
   2b954:      	int3
   2b955:      	int3
   2b956:      	int3
   2b957:      	int3
   2b958:      	int3
   2b959:      	int3
   2b95a:      	int3
   2b95b:      	int3
   2b95c:      	int3
   2b95d:      	int3
   2b95e:      	int3
   2b95f:      	int3

000000000002b960 <core::str::iter::SplitInternal<P>::next_inclusive::h569e55ef9d6435db>:
   2b960:      	subq	$0x88, %rsp
   2b967:      	movq	%rdi, 0x18(%rsp)
   2b96c:      	movq	%rdi, 0x58(%rsp)
   2b971:      	testb	$0x1, 0x41(%rdi)
   2b975:      	jne	0x2b9b6 <core::str::iter::SplitInternal<P>::next_inclusive::h569e55ef9d6435db+0x56>
   2b977:      	movq	0x18(%rsp), %rdi
   2b97c:      	addq	$0x10, %rdi
   2b980:      	callq	0x28760 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::haystack::haee06d69ceda4135>
   2b985:      	movq	0x18(%rsp), %rsi
   2b98a:      	movq	%rdx, 0x8(%rsp)
   2b98f:      	movq	%rax, 0x10(%rsp)
   2b994:      	movq	%rax, 0x60(%rsp)
   2b999:      	movq	%rdx, 0x68(%rsp)
   2b99e:      	addq	$0x10, %rsi
   2b9a2:      	leaq	0x30(%rsp), %rdi
   2b9a7:      	callq	0x28770 <<core::str::pattern::CharSearcher as core::str::pattern::Searcher>::next_match::h082caebdbc42a473>
   2b9ac:      	cmpq	$0x0, 0x30(%rsp)
   2b9b2:      	je	0x2b9c1 <core::str::iter::SplitInternal<P>::next_inclusive::h569e55ef9d6435db+0x61>
   2b9b4:      	jmp	0x2b9db <core::str::iter::SplitInternal<P>::next_inclusive::h569e55ef9d6435db+0x7b>
   2b9b6:      	movq	$0x0, 0x20(%rsp)
   2b9bf:      	jmp	0x2ba3b <core::str::iter::SplitInternal<P>::next_inclusive::h569e55ef9d6435db+0xdb>
   2b9c1:      	movq	0x18(%rsp), %rdi
   2b9c6:      	movq	0xfc83(%rip), %rax      # 0x3b650 <zlgk82z0l71lvh9+0x3b650>
   2b9cd:      	callq	*%rax
   2b9cf:      	movq	%rdx, 0x28(%rsp)
   2b9d4:      	movq	%rax, 0x20(%rsp)
   2b9d9:      	jmp	0x2ba3b <core::str::iter::SplitInternal<P>::next_inclusive::h569e55ef9d6435db+0xdb>
   2b9db:      	movq	0x18(%rsp), %rcx
   2b9e0:      	movq	0x8(%rsp), %rsi
   2b9e5:      	movq	0x10(%rsp), %rdi
   2b9ea:      	movq	0x40(%rsp), %rax
   2b9ef:      	movq	%rax, (%rsp)
   2b9f3:      	movq	%rax, 0x70(%rsp)
   2b9f8:      	movq	(%rcx), %rcx
   2b9fb:      	movq	%rcx, 0x48(%rsp)
   2ba00:      	movq	%rax, 0x50(%rsp)
   2ba05:      	movq	0x48(%rsp), %rdx
   2ba0a:      	movq	0x50(%rsp), %rcx
   2ba0f:      	movq	0xfbfa(%rip), %rax      # 0x3b610 <zlgk82z0l71lvh9+0x3b610>
   2ba16:      	callq	*%rax
   2ba18:      	movq	(%rsp), %rsi
   2ba1c:      	movq	0x18(%rsp), %rcx
   2ba21:      	movq	%rax, 0x78(%rsp)
   2ba26:      	movq	%rdx, 0x80(%rsp)
   2ba2e:      	movq	%rsi, (%rcx)
   2ba31:      	movq	%rax, 0x20(%rsp)
   2ba36:      	movq	%rdx, 0x28(%rsp)
   2ba3b:      	movq	0x20(%rsp), %rax
   2ba40:      	movq	0x28(%rsp), %rdx
   2ba45:      	addq	$0x88, %rsp
   2ba4c:      	retq
   2ba4d:      	int3
   2ba4e:      	int3
   2ba4f:      	int3

000000000002ba50 <<core::str::iter::SplitInclusive<P> as core::iter::traits::iterator::Iterator>::next::he585353d51cd89d0>:
   2ba50:      	pushq	%rax
   2ba51:      	movq	%rdi, (%rsp)
   2ba55:      	movq	0x102b4(%rip), %rax     # 0x3bd10 <zlgk82z0l71lvh9+0x3bd10>
   2ba5c:      	callq	*%rax
   2ba5e:      	popq	%rcx
   2ba5f:      	retq

000000000002ba60 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5>:
   2ba60:      	subq	$0xe8, %rsp
   2ba67:      	movq	%rcx, 0x28(%rsp)
   2ba6c:      	movq	%rdx, 0x30(%rsp)
   2ba71:      	movq	%rsi, 0x38(%rsp)
   2ba76:      	movq	%rdi, 0x40(%rsp)
   2ba7b:      	movq	%rdi, 0x78(%rsp)
   2ba80:      	movq	%rsi, 0x80(%rsp)
   2ba88:      	movq	%rdx, 0x88(%rsp)
   2ba90:      	movq	%rcx, 0x90(%rsp)
   2ba98:      	movq	%rdx, 0x98(%rsp)
   2baa0:      	movq	%rcx, 0xa0(%rsp)
   2baa8:      	movq	%rdi, 0x48(%rsp)
   2baad:      	movq	%rsi, 0x50(%rsp)
   2bab2:      	movb	$0x1, %al
   2bab4:      	testb	$0x1, %al
   2bab6:      	jne	0x2bb16 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5+0xb6>
   2bab8:      	movq	0x28(%rsp), %rsi
   2babd:      	movq	0x30(%rsp), %rdi
   2bac2:      	movq	0xfbcf(%rip), %rax      # 0x3b698 <zlgk82z0l71lvh9+0x3b698>
   2bac9:      	callq	*%rax
   2bacb:      	movq	0x40(%rsp), %rcx
   2bad0:      	movq	%rax, %rdx
   2bad3:      	movq	0x38(%rsp), %rax
   2bad8:      	movq	%rdx, 0xb8(%rsp)
   2bae0:      	movq	%rcx, 0xc0(%rsp)
   2bae8:      	addq	%rcx, %rdx
   2baeb:      	movq	%rdx, 0x18(%rsp)
   2baf0:      	movq	%rdx, 0xa8(%rsp)
   2baf8:      	movq	%rax, %rdx
   2bafb:      	subq	%rcx, %rdx
   2bafe:      	movq	%rdx, 0x20(%rsp)
   2bb03:      	cmpq	%rcx, %rax
   2bb06:      	setb	%al
   2bb09:      	testb	$0x1, %al
   2bb0b:      	jne	0x2bbe3 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5+0x183>
   2bb11:      	jmp	0x2bbc0 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5+0x160>
   2bb16:      	movq	0x28(%rsp), %rax
   2bb1b:      	movq	0x30(%rsp), %rcx
   2bb20:      	movq	0x48(%rsp), %rsi
   2bb25:      	movq	0x50(%rsp), %rdx
   2bb2a:      	movq	%rsi, 0x58(%rsp)
   2bb2f:      	movq	%rdx, 0x60(%rsp)
   2bb34:      	movq	%rcx, 0x68(%rsp)
   2bb39:      	movq	%rax, 0x70(%rsp)
   2bb3e:      	movq	0x58(%rsp), %rcx
   2bb43:      	movq	0x60(%rsp), %rax
   2bb48:      	movq	%rax, (%rsp)
   2bb4c:      	movq	0x68(%rsp), %rsi
   2bb51:      	movq	%rsi, 0x8(%rsp)
   2bb56:      	movq	0x70(%rsp), %rdx
   2bb5b:      	movq	%rdx, 0x10(%rsp)
   2bb60:      	movq	%rcx, 0xc8(%rsp)
   2bb68:      	movq	%rax, 0xd0(%rsp)
   2bb70:      	movq	%rsi, 0xd8(%rsp)
   2bb78:      	movq	%rdx, 0xe0(%rsp)
   2bb80:      	cmpq	%rcx, %rax
   2bb83:      	jae	0x2bb9c <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5+0x13c>
   2bb85:      	leaq	-0x18e66(%rip), %rdi    # 0x12d26 <str.1+0x316>
   2bb8c:      	movq	0xf5dd(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2bb93:      	movl	$0x66, %esi
   2bb98:      	callq	*%rax
   2bb9a:      	ud2
   2bb9c:      	movq	0x10(%rsp), %rsi
   2bba1:      	movq	0x8(%rsp), %rdi
   2bba6:      	movq	0xfaf3(%rip), %rax      # 0x3b6a0 <zlgk82z0l71lvh9+0x3b6a0>
   2bbad:      	callq	*%rax
   2bbaf:      	movq	%rax, %rcx
   2bbb2:      	movq	(%rsp), %rax
   2bbb6:      	cmpq	%rcx, %rax
   2bbb9:      	ja	0x2bb85 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5+0x125>
   2bbbb:      	jmp	0x2bab8 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5+0x58>
   2bbc0:      	movq	0x20(%rsp), %rsi
   2bbc5:      	movq	0x18(%rsp), %rdi
   2bbca:      	movq	%rsi, 0xb0(%rsp)
   2bbd2:      	movq	0xfacf(%rip), %rax      # 0x3b6a8 <zlgk82z0l71lvh9+0x3b6a8>
   2bbd9:      	callq	*%rax
   2bbdb:      	addq	$0xe8, %rsp
   2bbe2:      	retq
   2bbe3:      	leaq	-0x191da(%rip), %rdi    # 0x12a10 <str.1>
   2bbea:      	leaq	0xe997(%rip), %rdx      # 0x3a588 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x688>
   2bbf1:      	movq	0xf2d8(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2bbf8:      	movl	$0x21, %esi
   2bbfd:      	callq	*%rax
   2bbff:      	ud2
   2bc01:      	int3
   2bc02:      	int3
   2bc03:      	int3
   2bc04:      	int3
   2bc05:      	int3
   2bc06:      	int3
   2bc07:      	int3
   2bc08:      	int3
   2bc09:      	int3
   2bc0a:      	int3
   2bc0b:      	int3
   2bc0c:      	int3
   2bc0d:      	int3
   2bc0e:      	int3
   2bc0f:      	int3

000000000002bc10 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::RangeTo<usize>>::get::hd412c7721f1f9ecb>:
   2bc10:      	subq	$0x48, %rsp
   2bc14:      	movq	%rdx, 0x8(%rsp)
   2bc19:      	movq	%rsi, %rax
   2bc1c:      	movq	0x8(%rsp), %rsi
   2bc21:      	movq	%rax, 0x10(%rsp)
   2bc26:      	movq	%rdi, %rdx
   2bc29:      	movq	0x10(%rsp), %rdi
   2bc2e:      	movq	%rdx, 0x18(%rsp)
   2bc33:      	movq	%rdx, 0x30(%rsp)
   2bc38:      	movq	%rdi, 0x38(%rsp)
   2bc3d:      	movq	%rsi, 0x40(%rsp)
   2bc42:      	callq	0x2ed10 <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc>
   2bc47:      	testb	$0x1, %al
   2bc49:      	jne	0x2bc56 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::RangeTo<usize>>::get::hd412c7721f1f9ecb+0x46>
   2bc4b:      	movq	$0x0, 0x20(%rsp)
   2bc54:      	jmp	0x2bc74 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::RangeTo<usize>>::get::hd412c7721f1f9ecb+0x64>
   2bc56:      	movq	0x8(%rsp), %rdx
   2bc5b:      	movq	0x10(%rsp), %rsi
   2bc60:      	movq	0x18(%rsp), %rdi
   2bc65:      	callq	0x2bc90 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::RangeTo<usize>>::get_unchecked::h7d52d21b2916e4bf>
   2bc6a:      	movq	%rax, 0x20(%rsp)
   2bc6f:      	movq	%rdx, 0x28(%rsp)
   2bc74:      	movq	0x20(%rsp), %rax
   2bc79:      	movq	0x28(%rsp), %rdx
   2bc7e:      	addq	$0x48, %rsp
   2bc82:      	retq
   2bc83:      	int3
   2bc84:      	int3
   2bc85:      	int3
   2bc86:      	int3
   2bc87:      	int3
   2bc88:      	int3
   2bc89:      	int3
   2bc8a:      	int3
   2bc8b:      	int3
   2bc8c:      	int3
   2bc8d:      	int3
   2bc8e:      	int3
   2bc8f:      	int3

000000000002bc90 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::RangeTo<usize>>::get_unchecked::h7d52d21b2916e4bf>:
   2bc90:      	subq	$0x28, %rsp
   2bc94:      	movq	%rdx, %rcx
   2bc97:      	movq	%rsi, %rdx
   2bc9a:      	movq	%rdi, 0x10(%rsp)
   2bc9f:      	movq	%rdx, 0x18(%rsp)
   2bca4:      	movq	%rcx, 0x20(%rsp)
   2bca9:      	movq	$0x0, (%rsp)
   2bcb1:      	movq	%rdi, 0x8(%rsp)
   2bcb6:      	movq	(%rsp), %rdi
   2bcba:      	movq	0x8(%rsp), %rsi
   2bcbf:      	callq	0x2ba60 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5>
   2bcc4:      	addq	$0x28, %rsp
   2bcc8:      	retq
   2bcc9:      	int3
   2bcca:      	int3
   2bccb:      	int3
   2bccc:      	int3
   2bccd:      	int3
   2bcce:      	int3
   2bccf:      	int3

000000000002bcd0 <core::num::nonzero::NonZeroUsize::new_unchecked::ha01fff54c4bd1682>:
   2bcd0:      	subq	$0x28, %rsp
   2bcd4:      	movq	%rdi, (%rsp)
   2bcd8:      	movq	%rdi, 0x18(%rsp)
   2bcdd:      	movb	$0x1, %al
   2bcdf:      	testb	$0x1, %al
   2bce1:      	jne	0x2bcf6 <core::num::nonzero::NonZeroUsize::new_unchecked::ha01fff54c4bd1682+0x26>
   2bce3:      	movq	(%rsp), %rax
   2bce7:      	movq	%rax, 0x8(%rsp)
   2bcec:      	movq	0x8(%rsp), %rax
   2bcf1:      	addq	$0x28, %rsp
   2bcf5:      	retq
   2bcf6:      	movq	(%rsp), %rax
   2bcfa:      	movq	%rax, 0x10(%rsp)
   2bcff:      	movq	0x10(%rsp), %rax
   2bd04:      	movq	%rax, 0x20(%rsp)
   2bd09:      	cmpq	$0x0, %rax
   2bd0d:      	jne	0x2bd26 <core::num::nonzero::NonZeroUsize::new_unchecked::ha01fff54c4bd1682+0x56>
   2bd0f:      	leaq	-0x1916c(%rip), %rdi    # 0x12baa <str.1+0x19a>
   2bd16:      	movq	0xf453(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   2bd1d:      	movl	$0x59, %esi
   2bd22:      	callq	*%rax
   2bd24:      	ud2
   2bd26:      	jmp	0x2bce3 <core::num::nonzero::NonZeroUsize::new_unchecked::ha01fff54c4bd1682+0x13>
   2bd28:      	int3
   2bd29:      	int3
   2bd2a:      	int3
   2bd2b:      	int3
   2bd2c:      	int3
   2bd2d:      	int3
   2bd2e:      	int3
   2bd2f:      	int3

000000000002bd30 <core::intrinsics::is_aligned_and_not_null::h145c8b6a6865a642>:
   2bd30:      	subq	$0x18, %rsp
   2bd34:      	movq	%rdi, (%rsp)
   2bd38:      	movq	%rdi, 0x10(%rsp)
   2bd3d:      	movq	0xfbe4(%rip), %rax      # 0x3b928 <zlgk82z0l71lvh9+0x3b928>
   2bd44:      	callq	*%rax
   2bd46:      	testb	$0x1, %al
   2bd48:      	jne	0x2bd5f <core::intrinsics::is_aligned_and_not_null::h145c8b6a6865a642+0x2f>
   2bd4a:      	movq	(%rsp), %rdi
   2bd4e:      	movq	0xfbf3(%rip), %rax      # 0x3b948 <zlgk82z0l71lvh9+0x3b948>
   2bd55:      	callq	*%rax
   2bd57:      	andb	$0x1, %al
   2bd59:      	movb	%al, 0xf(%rsp)
   2bd5d:      	jmp	0x2bd64 <core::intrinsics::is_aligned_and_not_null::h145c8b6a6865a642+0x34>
   2bd5f:      	movb	$0x0, 0xf(%rsp)
   2bd64:      	movb	0xf(%rsp), %al
   2bd68:      	andb	$0x1, %al
   2bd6a:      	movzbl	%al, %eax
   2bd6d:      	addq	$0x18, %rsp
   2bd71:      	retq
   2bd72:      	int3
   2bd73:      	int3
   2bd74:      	int3
   2bd75:      	int3
   2bd76:      	int3
   2bd77:      	int3
   2bd78:      	int3
   2bd79:      	int3
   2bd7a:      	int3
   2bd7b:      	int3
   2bd7c:      	int3
   2bd7d:      	int3
   2bd7e:      	int3
   2bd7f:      	int3

000000000002bd80 <core::intrinsics::is_aligned_and_not_null::h431b92d216cd5fc7>:
   2bd80:      	subq	$0x18, %rsp
   2bd84:      	movq	%rdi, (%rsp)
   2bd88:      	movq	%rdi, 0x10(%rsp)
   2bd8d:      	movq	0xfb8c(%rip), %rax      # 0x3b920 <zlgk82z0l71lvh9+0x3b920>
   2bd94:      	callq	*%rax
   2bd96:      	testb	$0x1, %al
   2bd98:      	jne	0x2bdaf <core::intrinsics::is_aligned_and_not_null::h431b92d216cd5fc7+0x2f>
   2bd9a:      	movq	(%rsp), %rdi
   2bd9e:      	movq	0xfbc3(%rip), %rax      # 0x3b968 <zlgk82z0l71lvh9+0x3b968>
   2bda5:      	callq	*%rax
   2bda7:      	andb	$0x1, %al
   2bda9:      	movb	%al, 0xf(%rsp)
   2bdad:      	jmp	0x2bdb4 <core::intrinsics::is_aligned_and_not_null::h431b92d216cd5fc7+0x34>
   2bdaf:      	movb	$0x0, 0xf(%rsp)
   2bdb4:      	movb	0xf(%rsp), %al
   2bdb8:      	andb	$0x1, %al
   2bdba:      	movzbl	%al, %eax
   2bdbd:      	addq	$0x18, %rsp
   2bdc1:      	retq
   2bdc2:      	int3
   2bdc3:      	int3
   2bdc4:      	int3
   2bdc5:      	int3
   2bdc6:      	int3
   2bdc7:      	int3
   2bdc8:      	int3
   2bdc9:      	int3
   2bdca:      	int3
   2bdcb:      	int3
   2bdcc:      	int3
   2bdcd:      	int3
   2bdce:      	int3
   2bdcf:      	int3

000000000002bdd0 <core::intrinsics::is_aligned_and_not_null::h6b5b8a394a0576aa>:
   2bdd0:      	subq	$0x18, %rsp
   2bdd4:      	movq	%rdi, (%rsp)
   2bdd8:      	movq	%rdi, 0x10(%rsp)
   2bddd:      	movq	0xfb4c(%rip), %rax      # 0x3b930 <zlgk82z0l71lvh9+0x3b930>
   2bde4:      	callq	*%rax
   2bde6:      	testb	$0x1, %al
   2bde8:      	jne	0x2bdff <core::intrinsics::is_aligned_and_not_null::h6b5b8a394a0576aa+0x2f>
   2bdea:      	movq	(%rsp), %rdi
   2bdee:      	movq	0xfb83(%rip), %rax      # 0x3b978 <zlgk82z0l71lvh9+0x3b978>
   2bdf5:      	callq	*%rax
   2bdf7:      	andb	$0x1, %al
   2bdf9:      	movb	%al, 0xf(%rsp)
   2bdfd:      	jmp	0x2be04 <core::intrinsics::is_aligned_and_not_null::h6b5b8a394a0576aa+0x34>
   2bdff:      	movb	$0x0, 0xf(%rsp)
   2be04:      	movb	0xf(%rsp), %al
   2be08:      	andb	$0x1, %al
   2be0a:      	movzbl	%al, %eax
   2be0d:      	addq	$0x18, %rsp
   2be11:      	retq
   2be12:      	int3
   2be13:      	int3
   2be14:      	int3
   2be15:      	int3
   2be16:      	int3
   2be17:      	int3
   2be18:      	int3
   2be19:      	int3
   2be1a:      	int3
   2be1b:      	int3
   2be1c:      	int3
   2be1d:      	int3
   2be1e:      	int3
   2be1f:      	int3

000000000002be20 <core::intrinsics::is_aligned_and_not_null::h8f01c0f3190aa8c5>:
   2be20:      	subq	$0x18, %rsp
   2be24:      	movq	%rdi, (%rsp)
   2be28:      	movq	%rdi, 0x10(%rsp)
   2be2d:      	movq	0xfae4(%rip), %rax      # 0x3b918 <zlgk82z0l71lvh9+0x3b918>
   2be34:      	callq	*%rax
   2be36:      	testb	$0x1, %al
   2be38:      	jne	0x2be4f <core::intrinsics::is_aligned_and_not_null::h8f01c0f3190aa8c5+0x2f>
   2be3a:      	movq	(%rsp), %rdi
   2be3e:      	movq	0xfb13(%rip), %rax      # 0x3b958 <zlgk82z0l71lvh9+0x3b958>
   2be45:      	callq	*%rax
   2be47:      	andb	$0x1, %al
   2be49:      	movb	%al, 0xf(%rsp)
   2be4d:      	jmp	0x2be54 <core::intrinsics::is_aligned_and_not_null::h8f01c0f3190aa8c5+0x34>
   2be4f:      	movb	$0x0, 0xf(%rsp)
   2be54:      	movb	0xf(%rsp), %al
   2be58:      	andb	$0x1, %al
   2be5a:      	movzbl	%al, %eax
   2be5d:      	addq	$0x18, %rsp
   2be61:      	retq
   2be62:      	int3
   2be63:      	int3
   2be64:      	int3
   2be65:      	int3
   2be66:      	int3
   2be67:      	int3
   2be68:      	int3
   2be69:      	int3
   2be6a:      	int3
   2be6b:      	int3
   2be6c:      	int3
   2be6d:      	int3
   2be6e:      	int3
   2be6f:      	int3

000000000002be70 <core::intrinsics::is_aligned_and_not_null::hd52668bea43c366c>:
   2be70:      	subq	$0x18, %rsp
   2be74:      	movq	%rdi, (%rsp)
   2be78:      	movq	%rdi, 0x10(%rsp)
   2be7d:      	movq	0xfea4(%rip), %rax      # 0x3bd28 <zlgk82z0l71lvh9+0x3bd28>
   2be84:      	callq	*%rax
   2be86:      	testb	$0x1, %al
   2be88:      	jne	0x2be9f <core::intrinsics::is_aligned_and_not_null::hd52668bea43c366c+0x2f>
   2be8a:      	movq	(%rsp), %rdi
   2be8e:      	movq	0xfe9b(%rip), %rax      # 0x3bd30 <zlgk82z0l71lvh9+0x3bd30>
   2be95:      	callq	*%rax
   2be97:      	andb	$0x1, %al
   2be99:      	movb	%al, 0xf(%rsp)
   2be9d:      	jmp	0x2bea4 <core::intrinsics::is_aligned_and_not_null::hd52668bea43c366c+0x34>
   2be9f:      	movb	$0x0, 0xf(%rsp)
   2bea4:      	movb	0xf(%rsp), %al
   2bea8:      	andb	$0x1, %al
   2beaa:      	movzbl	%al, %eax
   2bead:      	addq	$0x18, %rsp
   2beb1:      	retq
   2beb2:      	int3
   2beb3:      	int3
   2beb4:      	int3
   2beb5:      	int3
   2beb6:      	int3
   2beb7:      	int3
   2beb8:      	int3
   2beb9:      	int3
   2beba:      	int3
   2bebb:      	int3
   2bebc:      	int3
   2bebd:      	int3
   2bebe:      	int3
   2bebf:      	int3

000000000002bec0 <core::intrinsics::is_valid_allocation_size::h7b51f2df49d7af85>:
   2bec0:      	subq	$0x10, %rsp
   2bec4:      	movabsq	$0x3ffffffffffffff, %rax # imm = 0x3FFFFFFFFFFFFFF
   2bece:      	movq	%rax, (%rsp)
   2bed2:      	movq	%rdi, 0x8(%rsp)
   2bed7:      	movabsq	$0x3ffffffffffffff, %rax # imm = 0x3FFFFFFFFFFFFFF
   2bee1:      	cmpq	%rax, %rdi
   2bee4:      	setbe	%al
   2bee7:      	andb	$0x1, %al
   2bee9:      	movzbl	%al, %eax
   2beec:      	addq	$0x10, %rsp
   2bef0:      	retq
   2bef1:      	int3
   2bef2:      	int3
   2bef3:      	int3
   2bef4:      	int3
   2bef5:      	int3
   2bef6:      	int3
   2bef7:      	int3
   2bef8:      	int3
   2bef9:      	int3
   2befa:      	int3
   2befb:      	int3
   2befc:      	int3
   2befd:      	int3
   2befe:      	int3
   2beff:      	int3

000000000002bf00 <core::intrinsics::is_valid_allocation_size::h9b3bc9abdd9a705c>:
   2bf00:      	subq	$0x10, %rsp
   2bf04:      	movabsq	$0xfffffffffffffff, %rax # imm = 0xFFFFFFFFFFFFFFF
   2bf0e:      	movq	%rax, (%rsp)
   2bf12:      	movq	%rdi, 0x8(%rsp)
   2bf17:      	movabsq	$0xfffffffffffffff, %rax # imm = 0xFFFFFFFFFFFFFFF
   2bf21:      	cmpq	%rax, %rdi
   2bf24:      	setbe	%al
   2bf27:      	andb	$0x1, %al
   2bf29:      	movzbl	%al, %eax
   2bf2c:      	addq	$0x10, %rsp
   2bf30:      	retq
   2bf31:      	int3
   2bf32:      	int3
   2bf33:      	int3
   2bf34:      	int3
   2bf35:      	int3
   2bf36:      	int3
   2bf37:      	int3
   2bf38:      	int3
   2bf39:      	int3
   2bf3a:      	int3
   2bf3b:      	int3
   2bf3c:      	int3
   2bf3d:      	int3
   2bf3e:      	int3
   2bf3f:      	int3

000000000002bf40 <core::intrinsics::is_valid_allocation_size::hb57646ded6c4f04f>:
   2bf40:      	subq	$0x10, %rsp
   2bf44:      	movabsq	$0x7fffffffffffffff, %rax # imm = 0x7FFFFFFFFFFFFFFF
   2bf4e:      	movq	%rax, (%rsp)
   2bf52:      	movq	%rdi, 0x8(%rsp)
   2bf57:      	movabsq	$0x7fffffffffffffff, %rax # imm = 0x7FFFFFFFFFFFFFFF
   2bf61:      	cmpq	%rax, %rdi
   2bf64:      	setbe	%al
   2bf67:      	andb	$0x1, %al
   2bf69:      	movzbl	%al, %eax
   2bf6c:      	addq	$0x10, %rsp
   2bf70:      	retq
   2bf71:      	int3
   2bf72:      	int3
   2bf73:      	int3
   2bf74:      	int3
   2bf75:      	int3
   2bf76:      	int3
   2bf77:      	int3
   2bf78:      	int3
   2bf79:      	int3
   2bf7a:      	int3
   2bf7b:      	int3
   2bf7c:      	int3
   2bf7d:      	int3
   2bf7e:      	int3
   2bf7f:      	int3

000000000002bf80 <core::intrinsics::is_nonoverlapping::h5d697822f6ca54d0>:
   2bf80:      	subq	$0x78, %rsp
   2bf84:      	movq	%rdx, (%rsp)
   2bf88:      	movq	%rsi, %rax
   2bf8b:      	movq	(%rsp), %rsi
   2bf8f:      	movq	%rax, 0x10(%rsp)
   2bf94:      	movq	%rdi, 0x8(%rsp)
   2bf99:      	movq	%rdi, 0x20(%rsp)
   2bf9e:      	movq	%rax, 0x28(%rsp)
   2bfa3:      	movq	%rsi, 0x30(%rsp)
   2bfa8:      	movq	%rdi, 0x68(%rsp)
   2bfad:      	movq	%rdi, 0x70(%rsp)
   2bfb2:      	movq	%rdi, 0x38(%rsp)
   2bfb7:      	movq	%rax, 0x58(%rsp)
   2bfbc:      	movq	%rax, 0x60(%rsp)
   2bfc1:      	movq	%rax, 0x40(%rsp)
   2bfc6:      	movl	$0x1, %edi
   2bfcb:      	callq	0x216b0 <core::num::<impl usize>::checked_mul::h0ea9e540f8b7d86e>
   2bfd0:      	movq	%rax, %rdi
   2bfd3:      	movq	%rdx, %rsi
   2bfd6:      	leaq	-0x19251(%rip), %rdx    # 0x12d8c <str.1+0x37c>
   2bfdd:      	leaq	0xe5bc(%rip), %r8       # 0x3a5a0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x6a0>
   2bfe4:      	movq	0xf645(%rip), %rax      # 0x3b630 <zlgk82z0l71lvh9+0x3b630>
   2bfeb:      	movl	$0x3d, %ecx
   2bff0:      	callq	*%rax
   2bff2:      	movq	0x8(%rsp), %rdi
   2bff7:      	movq	0x10(%rsp), %rsi
   2bffc:      	movq	%rax, 0x18(%rsp)
   2c001:      	movq	%rax, 0x48(%rsp)
   2c006:      	callq	0x21740 <core::num::<impl usize>::abs_diff::h3a797aecb572ac61>
   2c00b:      	movq	0x18(%rsp), %rcx
   2c010:      	movq	%rax, 0x50(%rsp)
   2c015:      	cmpq	%rcx, %rax
   2c018:      	setae	%al
   2c01b:      	andb	$0x1, %al
   2c01d:      	movzbl	%al, %eax
   2c020:      	addq	$0x78, %rsp
   2c024:      	retq
   2c025:      	int3
   2c026:      	int3
   2c027:      	int3
   2c028:      	int3
   2c029:      	int3
   2c02a:      	int3
   2c02b:      	int3
   2c02c:      	int3
   2c02d:      	int3
   2c02e:      	int3
   2c02f:      	int3

000000000002c030 <core::ptr::const_ptr::<impl *const T>::is_null::hc63df45f8fa9a325>:
   2c030:      	subq	$0x18, %rsp
   2c034:      	movq	%rdi, 0x10(%rsp)
   2c039:      	movq	%rdi, 0x8(%rsp)
   2c03e:      	movq	0x8(%rsp), %rdi
   2c043:      	callq	0x261a0 <core::ptr::const_ptr::<impl *const T>::is_null::runtime_impl::h8f3a6046a61c4e2d>
   2c048:      	andb	$0x1, %al
   2c04a:      	movzbl	%al, %eax
   2c04d:      	addq	$0x18, %rsp
   2c051:      	retq
   2c052:      	int3
   2c053:      	int3
   2c054:      	int3
   2c055:      	int3
   2c056:      	int3
   2c057:      	int3
   2c058:      	int3
   2c059:      	int3
   2c05a:      	int3
   2c05b:      	int3
   2c05c:      	int3
   2c05d:      	int3
   2c05e:      	int3
   2c05f:      	int3

000000000002c060 <core::ptr::const_ptr::<impl *const T>::is_aligned::h4f28f83efc4990da>:
   2c060:      	pushq	%rax
   2c061:      	movq	%rdi, (%rsp)
   2c065:      	movq	0xfcdc(%rip), %rax      # 0x3bd48 <zlgk82z0l71lvh9+0x3bd48>
   2c06c:      	movl	$0x1, %esi
   2c071:      	callq	*%rax
   2c073:      	andb	$0x1, %al
   2c075:      	movzbl	%al, %eax
   2c078:      	popq	%rcx
   2c079:      	retq
   2c07a:      	int3
   2c07b:      	int3
   2c07c:      	int3
   2c07d:      	int3
   2c07e:      	int3
   2c07f:      	int3

000000000002c080 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h2cec6c8be11cad8a>:
   2c080:      	subq	$0x88, %rsp
   2c087:      	movq	%rsi, %rcx
   2c08a:      	movq	%rcx, 0x8(%rsp)
   2c08f:      	movq	%rdi, 0x10(%rsp)
   2c094:      	movq	%rdi, 0x58(%rsp)
   2c099:      	movq	%rcx, 0x60(%rsp)
   2c09e:      	movq	%rcx, 0x70(%rsp)
   2c0a3:      	movq	%rcx, 0x78(%rsp)
   2c0a8:      	movq	%rcx, %rax
   2c0ab:      	shrq	%rax
   2c0ae:      	movabsq	$0x5555555555555555, %rdx # imm = 0x5555555555555555
   2c0b8:      	andq	%rdx, %rax
   2c0bb:      	subq	%rax, %rcx
   2c0be:      	movabsq	$0x3333333333333333, %rdx # imm = 0x3333333333333333
   2c0c8:      	movq	%rcx, %rax
   2c0cb:      	andq	%rdx, %rax
   2c0ce:      	shrq	$0x2, %rcx
   2c0d2:      	andq	%rdx, %rcx
   2c0d5:      	addq	%rcx, %rax
   2c0d8:      	movq	%rax, %rcx
   2c0db:      	shrq	$0x4, %rcx
   2c0df:      	addq	%rcx, %rax
   2c0e2:      	movabsq	$0xf0f0f0f0f0f0f0f, %rcx # imm = 0xF0F0F0F0F0F0F0F
   2c0ec:      	andq	%rcx, %rax
   2c0ef:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   2c0f9:      	imulq	%rcx, %rax
   2c0fd:      	shrq	$0x38, %rax
   2c101:      	movq	%rax, 0x80(%rsp)
   2c109:      	movq	0x80(%rsp), %rax
   2c111:      	cmpl	$0x1, %eax
   2c114:      	je	0x2c146 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::h2cec6c8be11cad8a+0xc6>
   2c116:      	leaq	0xe49b(%rip), %rsi      # 0x3a5b8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x6b8>
   2c11d:      	leaq	0x18(%rsp), %rdi
   2c122:      	movq	%rdi, (%rsp)
   2c126:      	movl	$0x1, %edx
   2c12b:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   2c130:      	movq	(%rsp), %rdi
   2c134:      	leaq	0xe48d(%rip), %rsi      # 0x3a5c8 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x6c8>
   2c13b:      	movq	0xed7e(%rip), %rax      # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2c142:      	callq	*%rax
   2c144:      	ud2
   2c146:      	movq	0x8(%rsp), %rax
   2c14b:      	movq	0x10(%rsp), %rcx
   2c150:      	movq	%rcx, 0x68(%rsp)
   2c155:      	movq	%rcx, 0x48(%rsp)
   2c15a:      	movq	%rax, 0x50(%rsp)
   2c15f:      	movq	0x48(%rsp), %rdi
   2c164:      	movq	0x50(%rsp), %rsi
   2c169:      	callq	0x26800 <core::ptr::const_ptr::<impl *const T>::is_aligned_to::runtime_impl::hc3addf86e19d50d3>
   2c16e:      	andb	$0x1, %al
   2c170:      	movzbl	%al, %eax
   2c173:      	addq	$0x88, %rsp
   2c17a:      	retq
   2c17b:      	int3
   2c17c:      	int3
   2c17d:      	int3
   2c17e:      	int3
   2c17f:      	int3

000000000002c180 <core::ptr::const_ptr::<impl *const [T]>::len::h2dd266fe170c19cb>:
   2c180:      	subq	$0x18, %rsp
   2c184:      	movq	%rdi, 0x8(%rsp)
   2c189:      	movq	%rsi, 0x10(%rsp)
   2c18e:      	movq	0xfbbb(%rip), %rax      # 0x3bd50 <zlgk82z0l71lvh9+0x3bd50>
   2c195:      	callq	*%rax
   2c197:      	addq	$0x18, %rsp
   2c19b:      	retq
   2c19c:      	int3
   2c19d:      	int3
   2c19e:      	int3
   2c19f:      	int3

000000000002c1a0 <core::ptr::const_ptr::<impl *const [T]>::len::h796f165efcc1cb3c>:
   2c1a0:      	subq	$0x18, %rsp
   2c1a4:      	movq	%rdi, 0x8(%rsp)
   2c1a9:      	movq	%rsi, 0x10(%rsp)
   2c1ae:      	movq	0xf063(%rip), %rax      # 0x3b218 <zlgk82z0l71lvh9+0x3b218>
   2c1b5:      	callq	*%rax
   2c1b7:      	addq	$0x18, %rsp
   2c1bb:      	retq
   2c1bc:      	int3
   2c1bd:      	int3
   2c1be:      	int3
   2c1bf:      	int3

000000000002c1c0 <core::ptr::const_ptr::<impl *const [T]>::as_ptr::h79d765c1e9cbfdeb>:
   2c1c0:      	subq	$0x10, %rsp
   2c1c4:      	movq	%rdi, %rax
   2c1c7:      	movq	%rax, (%rsp)
   2c1cb:      	movq	%rsi, 0x8(%rsp)
   2c1d0:      	addq	$0x10, %rsp
   2c1d4:      	retq
   2c1d5:      	int3
   2c1d6:      	int3
   2c1d7:      	int3
   2c1d8:      	int3
   2c1d9:      	int3
   2c1da:      	int3
   2c1db:      	int3
   2c1dc:      	int3
   2c1dd:      	int3
   2c1de:      	int3
   2c1df:      	int3

000000000002c1e0 <core::ptr::const_ptr::<impl *const [T]>::as_ptr::hb6dbd37ab9ce749b>:
   2c1e0:      	subq	$0x10, %rsp
   2c1e4:      	movq	%rdi, %rax
   2c1e7:      	movq	%rax, (%rsp)
   2c1eb:      	movq	%rsi, 0x8(%rsp)
   2c1f0:      	addq	$0x10, %rsp
   2c1f4:      	retq
   2c1f5:      	int3
   2c1f6:      	int3
   2c1f7:      	int3
   2c1f8:      	int3
   2c1f9:      	int3
   2c1fa:      	int3
   2c1fb:      	int3
   2c1fc:      	int3
   2c1fd:      	int3
   2c1fe:      	int3
   2c1ff:      	int3

000000000002c200 <core::ptr::mut_ptr::<impl *mut T>::is_null::h030327c4be3bb7f7>:
   2c200:      	subq	$0x18, %rsp
   2c204:      	movq	%rdi, 0x10(%rsp)
   2c209:      	movq	%rdi, 0x8(%rsp)
   2c20e:      	movq	0x8(%rsp), %rdi
   2c213:      	callq	0x26980 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::hee5b9cb8b4f55a08>
   2c218:      	andb	$0x1, %al
   2c21a:      	movzbl	%al, %eax
   2c21d:      	addq	$0x18, %rsp
   2c221:      	retq
   2c222:      	int3
   2c223:      	int3
   2c224:      	int3
   2c225:      	int3
   2c226:      	int3
   2c227:      	int3
   2c228:      	int3
   2c229:      	int3
   2c22a:      	int3
   2c22b:      	int3
   2c22c:      	int3
   2c22d:      	int3
   2c22e:      	int3
   2c22f:      	int3

000000000002c230 <core::ptr::mut_ptr::<impl *mut T>::is_null::hc01aa0280edc1556>:
   2c230:      	subq	$0x18, %rsp
   2c234:      	movq	%rdi, 0x10(%rsp)
   2c239:      	movq	%rdi, 0x8(%rsp)
   2c23e:      	movq	0x8(%rsp), %rdi
   2c243:      	callq	0x26980 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::hee5b9cb8b4f55a08>
   2c248:      	andb	$0x1, %al
   2c24a:      	movzbl	%al, %eax
   2c24d:      	addq	$0x18, %rsp
   2c251:      	retq
   2c252:      	int3
   2c253:      	int3
   2c254:      	int3
   2c255:      	int3
   2c256:      	int3
   2c257:      	int3
   2c258:      	int3
   2c259:      	int3
   2c25a:      	int3
   2c25b:      	int3
   2c25c:      	int3
   2c25d:      	int3
   2c25e:      	int3
   2c25f:      	int3

000000000002c260 <core::ptr::mut_ptr::<impl *mut T>::is_null::he9084c1b09836744>:
   2c260:      	subq	$0x18, %rsp
   2c264:      	movq	%rdi, 0x10(%rsp)
   2c269:      	movq	%rdi, 0x8(%rsp)
   2c26e:      	movq	0x8(%rsp), %rdi
   2c273:      	callq	0x26980 <core::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl::hee5b9cb8b4f55a08>
   2c278:      	andb	$0x1, %al
   2c27a:      	movzbl	%al, %eax
   2c27d:      	addq	$0x18, %rsp
   2c281:      	retq
   2c282:      	int3
   2c283:      	int3
   2c284:      	int3
   2c285:      	int3
   2c286:      	int3
   2c287:      	int3
   2c288:      	int3
   2c289:      	int3
   2c28a:      	int3
   2c28b:      	int3
   2c28c:      	int3
   2c28d:      	int3
   2c28e:      	int3
   2c28f:      	int3

000000000002c290 <<T as core::any::Any>::type_id::h81fbc9cc66564d3d>:
   2c290:      	pushq	%rax
   2c291:      	movq	%rdi, (%rsp)
   2c295:      	movq	0xf61c(%rip), %rax      # 0x3b8b8 <zlgk82z0l71lvh9+0x3b8b8>
   2c29c:      	callq	*%rax
   2c29e:      	popq	%rcx
   2c29f:      	retq

000000000002c2a0 <core::array::<impl core::iter::traits::collect::IntoIterator for &[T; N]>::into_iter::h58c06a58a43f1c3c>:
   2c2a0:      	pushq	%rax
   2c2a1:      	movq	%rdi, (%rsp)
   2c2a5:      	movq	0xf814(%rip), %rax      # 0x3bac0 <zlgk82z0l71lvh9+0x3bac0>
   2c2ac:      	movl	$0x4, %esi
   2c2b1:      	callq	*%rax
   2c2b3:      	popq	%rcx
   2c2b4:      	retq
   2c2b5:      	int3
   2c2b6:      	int3
   2c2b7:      	int3
   2c2b8:      	int3
   2c2b9:      	int3
   2c2ba:      	int3
   2c2bb:      	int3
   2c2bc:      	int3
   2c2bd:      	int3
   2c2be:      	int3
   2c2bf:      	int3

000000000002c2c0 <core::array::<impl core::ops::index::Index<I> for [T; N]>::index::h2dd4103903d751a7>:
   2c2c0:      	subq	$0x18, %rsp
   2c2c4:      	movq	%rdx, %rcx
   2c2c7:      	movq	%rsi, %rdx
   2c2ca:      	movq	%rdi, 0x8(%rsp)
   2c2cf:      	movq	%rdx, 0x10(%rsp)
   2c2d4:      	movq	0xfa85(%rip), %rax      # 0x3bd60 <zlgk82z0l71lvh9+0x3bd60>
   2c2db:      	movl	$0x80, %esi
   2c2e0:      	callq	*%rax
   2c2e2:      	addq	$0x18, %rsp
   2c2e6:      	retq
   2c2e7:      	int3
   2c2e8:      	int3
   2c2e9:      	int3
   2c2ea:      	int3
   2c2eb:      	int3
   2c2ec:      	int3
   2c2ed:      	int3
   2c2ee:      	int3
   2c2ef:      	int3

000000000002c2f0 <core::array::<impl core::ops::index::Index<I> for [T; N]>::index::h39fadb4c7093dd01>:
   2c2f0:      	subq	$0x18, %rsp
   2c2f4:      	movq	%rcx, %r8
   2c2f7:      	movq	%rdx, %rcx
   2c2fa:      	movq	%rsi, %rdx
   2c2fd:      	movq	%rdi, (%rsp)
   2c301:      	movq	%rdx, 0x8(%rsp)
   2c306:      	movq	%rcx, 0x10(%rsp)
   2c30b:      	movq	0xf336(%rip), %rax      # 0x3b648 <zlgk82z0l71lvh9+0x3b648>
   2c312:      	movl	$0x4, %esi
   2c317:      	callq	*%rax
   2c319:      	addq	$0x18, %rsp
   2c31d:      	retq
   2c31e:      	int3
   2c31f:      	int3

000000000002c320 <core::panic::panic_info::PanicInfo::internal_constructor::h8caf99dc679bd2c1>:
   2c320:      	subq	$0x28, %rsp
   2c324:      	movl	%r8d, 0x4(%rsp)
   2c329:      	movl	%ecx, %eax
   2c32b:      	movl	0x4(%rsp), %ecx
   2c32f:      	movq	%rdx, 0x8(%rsp)
   2c334:      	movq	%rsi, %r8
   2c337:      	movq	0x8(%rsp), %rsi
   2c33c:      	movb	%al, %dl
   2c33e:      	movq	%rdi, %rax
   2c341:      	movq	%r8, 0x10(%rsp)
   2c346:      	movq	%rsi, 0x18(%rsp)
   2c34b:      	movb	%dl, %r9b
   2c34e:      	andb	$0x1, %r9b
   2c352:      	movb	%r9b, 0x26(%rsp)
   2c357:      	movb	%cl, %r9b
   2c35a:      	andb	$0x1, %r9b
   2c35e:      	movb	%r9b, 0x27(%rsp)
   2c363:      	leaq	-0x1947e(%rip), %r9     # 0x12eec <str.1+0x4dc>
   2c36a:      	movq	%r9, (%rdi)
   2c36d:      	leaq	0xe26c(%rip), %r9       # 0x3a5e0 <core::fmt::num::DEC_DIGITS_LUT::hc890bef5e8bcfec3+0x6e0>
   2c374:      	movq	%r9, 0x8(%rdi)
   2c378:      	movq	%r8, 0x10(%rdi)
   2c37c:      	movq	%rsi, 0x18(%rdi)
   2c380:      	andb	$0x1, %dl
   2c383:      	movb	%dl, 0x20(%rdi)
   2c386:      	andb	$0x1, %cl
   2c389:      	movb	%cl, 0x21(%rdi)
   2c38c:      	addq	$0x28, %rsp
   2c390:      	retq
   2c391:      	int3
   2c392:      	int3
   2c393:      	int3
   2c394:      	int3
   2c395:      	int3
   2c396:      	int3
   2c397:      	int3
   2c398:      	int3
   2c399:      	int3
   2c39a:      	int3
   2c39b:      	int3
   2c39c:      	int3
   2c39d:      	int3
   2c39e:      	int3
   2c39f:      	int3

000000000002c3a0 <core::fmt::rt::USIZE_MARKER::{{closure}}::h289c57ab5d70b30d>:
   2c3a0:      	subq	$0x28, %rsp
   2c3a4:      	movq	%rsi, (%rsp)
   2c3a8:      	movq	%rdi, %rax
   2c3ab:      	movq	(%rsp), %rdi
   2c3af:      	movq	%rax, 0x8(%rsp)
   2c3b4:      	movq	%rdi, 0x10(%rsp)
   2c3b9:      	movq	%rdx, 0x18(%rsp)
   2c3be:      	movq	0xf64b(%rip), %rax      # 0x3ba10 <zlgk82z0l71lvh9+0x3ba10>
   2c3c5:      	callq	*%rax
   2c3c7:      	movq	%rax, 0x20(%rsp)
   2c3cc:      	jmp	0x2c3cc <core::fmt::rt::USIZE_MARKER::{{closure}}::h289c57ab5d70b30d+0x2c>
   2c3ce:      	int3
   2c3cf:      	int3

000000000002c3d0 <core::slice::index::<impl core::ops::index::Index<I> for [T]>::index::hdaf0a728ee916f3f>:
   2c3d0:      	subq	$0x28, %rsp
   2c3d4:      	movq	%rdx, 0x8(%rsp)
   2c3d9:      	movq	%rsi, %rdx
   2c3dc:      	movq	%rdi, %rsi
   2c3df:      	movq	0x8(%rsp), %rdi
   2c3e4:      	movq	%rsi, 0x10(%rsp)
   2c3e9:      	movq	%rdx, 0x18(%rsp)
   2c3ee:      	movq	%rdi, 0x20(%rsp)
   2c3f3:      	movq	0xf90e(%rip), %rax      # 0x3bd08 <zlgk82z0l71lvh9+0x3bd08>
   2c3fa:      	callq	*%rax
   2c3fc:      	addq	$0x28, %rsp
   2c400:      	retq
   2c401:      	int3
   2c402:      	int3
   2c403:      	int3
   2c404:      	int3
   2c405:      	int3
   2c406:      	int3
   2c407:      	int3
   2c408:      	int3
   2c409:      	int3
   2c40a:      	int3
   2c40b:      	int3
   2c40c:      	int3
   2c40d:      	int3
   2c40e:      	int3
   2c40f:      	int3

000000000002c410 <core::slice::<impl [T]>::get_unchecked::he51293a832f4a756>:
   2c410:      	subq	$0x28, %rsp
   2c414:      	movq	%rdx, 0x8(%rsp)
   2c419:      	movq	%rsi, %rdx
   2c41c:      	movq	%rdi, %rsi
   2c41f:      	movq	0x8(%rsp), %rdi
   2c424:      	movq	%rsi, 0x10(%rsp)
   2c429:      	movq	%rdx, 0x18(%rsp)
   2c42e:      	movq	%rdi, 0x20(%rsp)
   2c433:      	movq	0xf62e(%rip), %rax      # 0x3ba68 <zlgk82z0l71lvh9+0x3ba68>
   2c43a:      	callq	*%rax
   2c43c:      	addq	$0x28, %rsp
   2c440:      	retq
   2c441:      	int3
   2c442:      	int3
   2c443:      	int3
   2c444:      	int3
   2c445:      	int3
   2c446:      	int3
   2c447:      	int3
   2c448:      	int3
   2c449:      	int3
   2c44a:      	int3
   2c44b:      	int3
   2c44c:      	int3
   2c44d:      	int3
   2c44e:      	int3
   2c44f:      	int3

000000000002c450 <core::slice::<impl [T]>::iter::h24871a345c6737d4>:
   2c450:      	subq	$0x18, %rsp
   2c454:      	movq	%rdi, 0x8(%rsp)
   2c459:      	movq	%rsi, 0x10(%rsp)
   2c45e:      	movq	0xf75b(%rip), %rax      # 0x3bbc0 <zlgk82z0l71lvh9+0x3bbc0>
   2c465:      	callq	*%rax
   2c467:      	addq	$0x18, %rsp
   2c46b:      	retq
   2c46c:      	int3
   2c46d:      	int3
   2c46e:      	int3
   2c46f:      	int3

000000000002c470 <core::slice::<impl [T]>::iter::hadc52e7f7f70e4ce>:
   2c470:      	subq	$0x18, %rsp
   2c474:      	movq	%rdi, 0x8(%rsp)
   2c479:      	movq	%rsi, 0x10(%rsp)
   2c47e:      	movq	0xf75b(%rip), %rax      # 0x3bbe0 <zlgk82z0l71lvh9+0x3bbe0>
   2c485:      	callq	*%rax
   2c487:      	addq	$0x18, %rsp
   2c48b:      	retq
   2c48c:      	int3
   2c48d:      	int3
   2c48e:      	int3
   2c48f:      	int3

000000000002c490 <core::slice::<impl [T]>::iter_mut::hc36437f31b0d965d>:
   2c490:      	subq	$0x18, %rsp
   2c494:      	movq	%rdi, 0x8(%rsp)
   2c499:      	movq	%rsi, 0x10(%rsp)
   2c49e:      	movq	0xf74b(%rip), %rax      # 0x3bbf0 <zlgk82z0l71lvh9+0x3bbf0>
   2c4a5:      	callq	*%rax
   2c4a7:      	addq	$0x18, %rsp
   2c4ab:      	retq
   2c4ac:      	int3
   2c4ad:      	int3
   2c4ae:      	int3
   2c4af:      	int3

000000000002c4b0 <core::fmt::Formatter::new::h843bfa76d95d3cce>:
   2c4b0:      	subq	$0x38, %rsp
   2c4b4:      	movq	%rdi, %rax
   2c4b7:      	movq	%rsi, 0x28(%rsp)
   2c4bc:      	movq	%rdx, 0x30(%rsp)
   2c4c1:      	movb	$0x3, 0x7(%rsp)
   2c4c6:      	movq	$0x0, 0x8(%rsp)
   2c4cf:      	movq	$0x0, 0x18(%rsp)
   2c4d8:      	movl	$0x0, 0x34(%rdi)
   2c4df:      	movl	$0x20, 0x30(%rdi)
   2c4e6:      	movb	0x7(%rsp), %cl
   2c4ea:      	movb	%cl, 0x38(%rdi)
   2c4ed:      	movq	0x8(%rsp), %r8
   2c4f2:      	movq	0x10(%rsp), %rcx
   2c4f7:      	movq	%r8, (%rdi)
   2c4fa:      	movq	%rcx, 0x8(%rdi)
   2c4fe:      	movq	0x18(%rsp), %r8
   2c503:      	movq	0x20(%rsp), %rcx
   2c508:      	movq	%r8, 0x10(%rdi)
   2c50c:      	movq	%rcx, 0x18(%rdi)
   2c510:      	movq	%rsi, 0x20(%rdi)
   2c514:      	movq	%rdx, 0x28(%rdi)
   2c518:      	addq	$0x38, %rsp
   2c51c:      	retq
   2c51d:      	int3
   2c51e:      	int3
   2c51f:      	int3

000000000002c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>:
   2c520:      	subq	$0x78, %rsp
   2c524:      	movq	%rdx, 0x8(%rsp)
   2c529:      	movq	%rsi, 0x10(%rsp)
   2c52e:      	movq	%rdi, 0x18(%rsp)
   2c533:      	movq	%rdi, 0x20(%rsp)
   2c538:      	movq	%rsi, 0x68(%rsp)
   2c53d:      	movq	%rdx, 0x70(%rsp)
   2c542:      	cmpq	$0x1, %rdx
   2c546:      	ja	0x2c596 <core::fmt::Arguments::new_const::h161caa2f1f676b0d+0x76>
   2c548:      	movq	0x20(%rsp), %rax
   2c54d:      	movq	0x18(%rsp), %rcx
   2c552:      	movq	0x8(%rsp), %rdx
   2c557:      	movq	0x10(%rsp), %rsi
   2c55c:      	movq	$0x0, 0x58(%rsp)
   2c565:      	movq	%rsi, (%rcx)
   2c568:      	movq	%rdx, 0x8(%rcx)
   2c56c:      	movq	0x58(%rsp), %rsi
   2c571:      	movq	0x60(%rsp), %rdx
   2c576:      	movq	%rsi, 0x20(%rcx)
   2c57a:      	movq	%rdx, 0x28(%rcx)
   2c57e:      	leaq	-0x19635(%rip), %rdx    # 0x12f50 <str.1+0x20>
   2c585:      	movq	%rdx, 0x10(%rcx)
   2c589:      	movq	$0x0, 0x18(%rcx)
   2c591:      	addq	$0x78, %rsp
   2c595:      	retq
   2c596:      	leaq	0xe06b(%rip), %rsi      # 0x3a608 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x8>
   2c59d:      	leaq	0x28(%rsp), %rdi
   2c5a2:      	movq	%rdi, (%rsp)
   2c5a6:      	movl	$0x1, %edx
   2c5ab:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   2c5b0:      	movq	(%rsp), %rdi
   2c5b4:      	leaq	0xe05d(%rip), %rsi      # 0x3a618 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x18>
   2c5bb:      	movq	0xe8fe(%rip), %rax      # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2c5c2:      	callq	*%rax
   2c5c4:      	ud2
   2c5c6:      	int3
   2c5c7:      	int3
   2c5c8:      	int3
   2c5c9:      	int3
   2c5ca:      	int3
   2c5cb:      	int3
   2c5cc:      	int3
   2c5cd:      	int3
   2c5ce:      	int3
   2c5cf:      	int3

000000000002c5d0 <core::fmt::Arguments::new_v1::h3ea4db8737d14571>:
   2c5d0:      	subq	$0xa8, %rsp
   2c5d7:      	movq	%r8, 0x18(%rsp)
   2c5dc:      	movq	%rcx, 0x20(%rsp)
   2c5e1:      	movq	%rdx, 0x28(%rsp)
   2c5e6:      	movq	%rsi, 0x30(%rsp)
   2c5eb:      	movq	%rdi, 0x38(%rsp)
   2c5f0:      	movq	%rdi, 0x40(%rsp)
   2c5f5:      	movq	%rsi, 0x88(%rsp)
   2c5fd:      	movq	%rdx, 0x90(%rsp)
   2c605:      	movq	%rcx, 0x98(%rsp)
   2c60d:      	movq	%r8, 0xa0(%rsp)
   2c615:      	cmpq	%r8, %rdx
   2c618:      	jb	0x2c631 <core::fmt::Arguments::new_v1::h3ea4db8737d14571+0x61>
   2c61a:      	movq	0x18(%rsp), %rax
   2c61f:      	addq	$0x1, %rax
   2c623:      	movq	%rax, 0x10(%rsp)
   2c628:      	setb	%al
   2c62b:      	testb	$0x1, %al
   2c62d:      	jne	0x2c674 <core::fmt::Arguments::new_v1::h3ea4db8737d14571+0xa4>
   2c62f:      	jmp	0x2c663 <core::fmt::Arguments::new_v1::h3ea4db8737d14571+0x93>
   2c631:      	leaq	0xdfd0(%rip), %rsi      # 0x3a608 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x8>
   2c638:      	leaq	0x48(%rsp), %rdi
   2c63d:      	movq	%rdi, 0x8(%rsp)
   2c642:      	movl	$0x1, %edx
   2c647:      	callq	0x2c520 <core::fmt::Arguments::new_const::h161caa2f1f676b0d>
   2c64c:      	movq	0x8(%rsp), %rdi
   2c651:      	leaq	0xdff0(%rip), %rsi      # 0x3a648 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x48>
   2c658:      	movq	0xe861(%rip), %rax      # 0x3aec0 <zlgk82z0l71lvh9+0x3aec0>
   2c65f:      	callq	*%rax
   2c661:      	ud2
   2c663:      	movq	0x28(%rsp), %rax
   2c668:      	movq	0x10(%rsp), %rcx
   2c66d:      	cmpq	%rcx, %rax
   2c670:      	ja	0x2c631 <core::fmt::Arguments::new_v1::h3ea4db8737d14571+0x61>
   2c672:      	jmp	0x2c692 <core::fmt::Arguments::new_v1::h3ea4db8737d14571+0xc2>
   2c674:      	leaq	-0x1974b(%rip), %rdi    # 0x12f30 <str.1>
   2c67b:      	leaq	0xdfae(%rip), %rdx      # 0x3a630 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x30>
   2c682:      	movq	0xe847(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2c689:      	movl	$0x1c, %esi
   2c68e:      	callq	*%rax
   2c690:      	ud2
   2c692:      	movq	0x40(%rsp), %rax
   2c697:      	movq	0x38(%rsp), %rcx
   2c69c:      	movq	0x18(%rsp), %rdx
   2c6a1:      	movq	0x20(%rsp), %rsi
   2c6a6:      	movq	0x28(%rsp), %rdi
   2c6ab:      	movq	0x30(%rsp), %r8
   2c6b0:      	movq	$0x0, 0x78(%rsp)
   2c6b9:      	movq	%r8, (%rcx)
   2c6bc:      	movq	%rdi, 0x8(%rcx)
   2c6c0:      	movq	0x78(%rsp), %r8
   2c6c5:      	movq	0x80(%rsp), %rdi
   2c6cd:      	movq	%r8, 0x20(%rcx)
   2c6d1:      	movq	%rdi, 0x28(%rcx)
   2c6d5:      	movq	%rsi, 0x10(%rcx)
   2c6d9:      	movq	%rdx, 0x18(%rcx)
   2c6dd:      	addq	$0xa8, %rsp
   2c6e4:      	retq
   2c6e5:      	int3
   2c6e6:      	int3
   2c6e7:      	int3
   2c6e8:      	int3
   2c6e9:      	int3
   2c6ea:      	int3
   2c6eb:      	int3
   2c6ec:      	int3
   2c6ed:      	int3
   2c6ee:      	int3
   2c6ef:      	int3

000000000002c6f0 <<core::fmt::Arguments as core::fmt::Display>::fmt::hb0b2b4fd28a163ed>:
   2c6f0:      	subq	$0x48, %rsp
   2c6f4:      	movq	%rdi, %rcx
   2c6f7:      	movq	%rcx, 0x38(%rsp)
   2c6fc:      	movq	%rsi, 0x40(%rsp)
   2c701:      	movq	0x20(%rsi), %rdi
   2c705:      	movq	0x28(%rsi), %rsi
   2c709:      	movq	0x28(%rcx), %rax
   2c70d:      	movq	%rax, 0x30(%rsp)
   2c712:      	movq	0x20(%rcx), %rax
   2c716:      	movq	%rax, 0x28(%rsp)
   2c71b:      	movq	0x18(%rcx), %rax
   2c71f:      	movq	%rax, 0x20(%rsp)
   2c724:      	movq	0x10(%rcx), %rax
   2c728:      	movq	%rax, 0x18(%rsp)
   2c72d:      	movq	(%rcx), %rax
   2c730:      	movq	0x8(%rcx), %rcx
   2c734:      	movq	%rcx, 0x10(%rsp)
   2c739:      	movq	%rax, 0x8(%rsp)
   2c73e:      	movq	0xeb0b(%rip), %rax      # 0x3b250 <zlgk82z0l71lvh9+0x3b250>
   2c745:      	leaq	0x8(%rsp), %rdx
   2c74a:      	callq	*%rax
   2c74c:      	andb	$0x1, %al
   2c74e:      	movzbl	%al, %eax
   2c751:      	addq	$0x48, %rsp
   2c755:      	retq
   2c756:      	int3
   2c757:      	int3
   2c758:      	int3
   2c759:      	int3
   2c75a:      	int3
   2c75b:      	int3
   2c75c:      	int3
   2c75d:      	int3
   2c75e:      	int3
   2c75f:      	int3

000000000002c760 <core::fmt::write::hd7348ffa6020b6ba>:
   2c760:      	subq	$0x1c8, %rsp            # imm = 0x1C8
   2c767:      	movq	%rdx, 0x30(%rsp)
   2c76c:      	movq	%rsi, %rdx
   2c76f:      	movq	%rdi, %rsi
   2c772:      	movq	%rsi, 0x160(%rsp)
   2c77a:      	movq	%rdx, 0x168(%rsp)
   2c782:      	movq	0xf5f7(%rip), %rax      # 0x3bd80 <zlgk82z0l71lvh9+0x3bd80>
   2c789:      	leaq	0x48(%rsp), %rdi
   2c78e:      	callq	*%rax
   2c790:      	movq	0x30(%rsp), %rdx
   2c795:      	movq	$0x0, 0x88(%rsp)
   2c7a1:      	movq	0x20(%rdx), %rdx
   2c7a5:      	movl	$0x1, %eax
   2c7aa:      	xorl	%ecx, %ecx
   2c7ac:      	cmpq	$0x0, %rdx
   2c7b0:      	cmoveq	%rcx, %rax
   2c7b4:      	cmpq	$0x0, %rax
   2c7b8:      	jne	0x2c832 <core::fmt::write::hd7348ffa6020b6ba+0xd2>
   2c7ba:      	movq	0x30(%rsp), %rax
   2c7bf:      	movq	0x10(%rax), %rdi
   2c7c3:      	movq	0x18(%rax), %rsi
   2c7c7:      	movq	0xf5aa(%rip), %rax      # 0x3bd78 <zlgk82z0l71lvh9+0x3bd78>
   2c7ce:      	callq	*%rax
   2c7d0:      	movq	%rax, %rsi
   2c7d3:      	movq	0xf3b6(%rip), %rax      # 0x3bb90 <zlgk82z0l71lvh9+0x3bb90>
   2c7da:      	leaq	0xa8(%rsp), %rdi
   2c7e2:      	callq	*%rax
   2c7e4:      	movq	0xf59d(%rip), %rax      # 0x3bd88 <zlgk82z0l71lvh9+0x3bd88>
   2c7eb:      	leaq	0x90(%rsp), %rdi
   2c7f3:      	leaq	0xa8(%rsp), %rsi
   2c7fb:      	callq	*%rax
   2c7fd:      	movq	0x90(%rsp), %rax
   2c805:      	movq	%rax, 0xc0(%rsp)
   2c80d:      	movq	0x98(%rsp), %rax
   2c815:      	movq	%rax, 0xc8(%rsp)
   2c81d:      	movq	0xa0(%rsp), %rax
   2c825:      	movq	%rax, 0xd0(%rsp)
   2c82d:      	jmp	0x2c8ba <core::fmt::write::hd7348ffa6020b6ba+0x15a>
   2c832:      	movq	0x30(%rsp), %rax
   2c837:      	movq	0x20(%rax), %rdi
   2c83b:      	movq	0x28(%rax), %rsi
   2c83f:      	movq	%rdi, 0x188(%rsp)
   2c847:      	movq	%rsi, 0x190(%rsp)
   2c84f:      	movq	0xf51a(%rip), %rax      # 0x3bd70 <zlgk82z0l71lvh9+0x3bd70>
   2c856:      	callq	*%rax
   2c858:      	movq	%rax, %rsi
   2c85b:      	movq	0xf316(%rip), %rax      # 0x3bb78 <zlgk82z0l71lvh9+0x3bb78>
   2c862:      	leaq	0x108(%rsp), %rdi
   2c86a:      	callq	*%rax
   2c86c:      	movq	0xf51d(%rip), %rax      # 0x3bd90 <zlgk82z0l71lvh9+0x3bd90>
   2c873:      	leaq	0xf0(%rsp), %rdi
   2c87b:      	leaq	0x108(%rsp), %rsi
   2c883:      	callq	*%rax
   2c885:      	movq	0xf0(%rsp), %rax
   2c88d:      	movq	%rax, 0x120(%rsp)
   2c895:      	movq	0xf8(%rsp), %rax
   2c89d:      	movq	%rax, 0x128(%rsp)
   2c8a5:      	movq	0x100(%rsp), %rax
   2c8ad:      	movq	%rax, 0x130(%rsp)
   2c8b5:      	jmp	0x2caba <core::fmt::write::hd7348ffa6020b6ba+0x35a>
   2c8ba:      	movq	0xf4d7(%rip), %rax      # 0x3bd98 <zlgk82z0l71lvh9+0x3bd98>
   2c8c1:      	leaq	0xc0(%rsp), %rdi
   2c8c9:      	callq	*%rax
   2c8cb:      	movq	%rdx, 0xe0(%rsp)
   2c8d3:      	movq	%rax, 0xd8(%rsp)
   2c8db:      	movq	0xe0(%rsp), %rdx
   2c8e3:      	movl	$0x1, %eax
   2c8e8:      	xorl	%ecx, %ecx
   2c8ea:      	cmpq	$0x0, %rdx
   2c8ee:      	cmoveq	%rcx, %rax
   2c8f2:      	cmpq	$0x0, %rax
   2c8f6:      	jne	0x2c943 <core::fmt::write::hd7348ffa6020b6ba+0x1e3>
   2c8f8:      	movq	0x30(%rsp), %rax
   2c8fd:      	movq	(%rax), %rdi
   2c900:      	movq	0x8(%rax), %rsi
   2c904:      	movq	0x88(%rsp), %rdx
   2c90c:      	movq	0xf185(%rip), %rax      # 0x3ba98 <zlgk82z0l71lvh9+0x3ba98>
   2c913:      	callq	*%rax
   2c915:      	movq	%rax, 0x150(%rsp)
   2c91d:      	movq	0x150(%rsp), %rdx
   2c925:      	movl	$0x1, %eax
   2c92a:      	xorl	%ecx, %ecx
   2c92c:      	cmpq	$0x0, %rdx
   2c930:      	cmoveq	%rcx, %rax
   2c934:      	cmpq	$0x1, %rax
   2c938:      	je	0x2cb59 <core::fmt::write::hd7348ffa6020b6ba+0x3f9>
   2c93e:      	jmp	0x2cba7 <core::fmt::write::hd7348ffa6020b6ba+0x447>
   2c943:      	movq	0x30(%rsp), %rax
   2c948:      	movq	0xd8(%rsp), %rdx
   2c950:      	movq	%rdx, 0x170(%rsp)
   2c958:      	movq	0xe0(%rsp), %rcx
   2c960:      	movq	%rcx, 0x20(%rsp)
   2c965:      	movq	%rcx, 0x178(%rsp)
   2c96d:      	movq	(%rax), %rdi
   2c970:      	movq	0x8(%rax), %rsi
   2c974:      	movq	0xf125(%rip), %rax      # 0x3baa0 <zlgk82z0l71lvh9+0x3baa0>
   2c97b:      	callq	*%rax
   2c97d:      	movq	%rax, 0x28(%rsp)
   2c982:      	movq	%rax, 0x180(%rsp)
   2c98a:      	movq	(%rax), %rdi
   2c98d:      	movq	0x8(%rax), %rsi
   2c991:      	callq	0x2ece0 <core::str::<impl str>::is_empty::hba38a94ab3bb1a41>
   2c996:      	testb	$0x1, %al
   2c998:      	jne	0x2c9dd <core::fmt::write::hd7348ffa6020b6ba+0x27d>
   2c99a:      	movq	0x28(%rsp), %rcx
   2c99f:      	movq	0x68(%rsp), %rdi
   2c9a4:      	movq	0x70(%rsp), %rax
   2c9a9:      	movq	(%rcx), %rsi
   2c9ac:      	movq	0x8(%rcx), %rdx
   2c9b0:      	callq	*0x18(%rax)
   2c9b3:      	movzbl	%al, %edi
   2c9b6:      	andl	$0x1, %edi
   2c9b9:      	movq	0xeb48(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2c9c0:      	callq	*%rax
   2c9c2:      	andb	$0x1, %al
   2c9c4:      	movb	%al, 0xee(%rsp)
   2c9cb:      	movb	0xee(%rsp), %al
   2c9d2:      	andb	$0x1, %al
   2c9d4:      	movzbl	%al, %eax
   2c9d7:      	cmpq	$0x0, %rax
   2c9db:      	jne	0x2ca31 <core::fmt::write::hd7348ffa6020b6ba+0x2d1>
   2c9dd:      	movq	0x20(%rsp), %rcx
   2c9e2:      	movq	%rcx, 0x1b8(%rsp)
   2c9ea:      	leaq	0x48(%rsp), %rax
   2c9ef:      	movq	%rax, 0x1c0(%rsp)
   2c9f7:      	movq	0x8(%rcx), %rax
   2c9fb:      	movq	(%rcx), %rdi
   2c9fe:      	leaq	0x48(%rsp), %rsi
   2ca03:      	callq	*%rax
   2ca05:      	movzbl	%al, %edi
   2ca08:      	andl	$0x1, %edi
   2ca0b:      	movq	0xeaf6(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2ca12:      	callq	*%rax
   2ca14:      	andb	$0x1, %al
   2ca16:      	movb	%al, 0xef(%rsp)
   2ca1d:      	movb	0xef(%rsp), %al
   2ca24:      	andb	$0x1, %al
   2ca26:      	movzbl	%al, %eax
   2ca29:      	cmpq	$0x0, %rax
   2ca2d:      	je	0x2ca58 <core::fmt::write::hd7348ffa6020b6ba+0x2f8>
   2ca2f:      	jmp	0x2ca72 <core::fmt::write::hd7348ffa6020b6ba+0x312>
   2ca31:      	leaq	0xdc28(%rip), %rdi      # 0x3a660 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x60>
   2ca38:      	movq	0xead1(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2ca3f:      	callq	*%rax
   2ca41:      	andb	$0x1, %al
   2ca43:      	movb	%al, 0x47(%rsp)
   2ca47:      	movb	0x47(%rsp), %al
   2ca4b:      	andb	$0x1, %al
   2ca4d:      	movzbl	%al, %eax
   2ca50:      	addq	$0x1c8, %rsp            # imm = 0x1C8
   2ca57:      	retq
   2ca58:      	movq	0x88(%rsp), %rax
   2ca60:      	addq	$0x1, %rax
   2ca64:      	movq	%rax, 0x18(%rsp)
   2ca69:      	setb	%al
   2ca6c:      	testb	$0x1, %al
   2ca6e:      	jne	0x2ca9c <core::fmt::write::hd7348ffa6020b6ba+0x33c>
   2ca70:      	jmp	0x2ca8a <core::fmt::write::hd7348ffa6020b6ba+0x32a>
   2ca72:      	leaq	0xdc17(%rip), %rdi      # 0x3a690 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x90>
   2ca79:      	movq	0xea90(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2ca80:      	callq	*%rax
   2ca82:      	andb	$0x1, %al
   2ca84:      	movb	%al, 0x47(%rsp)
   2ca88:      	jmp	0x2ca47 <core::fmt::write::hd7348ffa6020b6ba+0x2e7>
   2ca8a:      	movq	0x18(%rsp), %rax
   2ca8f:      	movq	%rax, 0x88(%rsp)
   2ca97:      	jmp	0x2c8ba <core::fmt::write::hd7348ffa6020b6ba+0x15a>
   2ca9c:      	leaq	-0x19b73(%rip), %rdi    # 0x12f30 <str.1>
   2caa3:      	leaq	0xdbce(%rip), %rdx      # 0x3a678 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x78>
   2caaa:      	movq	0xe41f(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2cab1:      	movl	$0x1c, %esi
   2cab6:      	callq	*%rax
   2cab8:      	ud2
   2caba:      	movq	0xf2df(%rip), %rax      # 0x3bda0 <zlgk82z0l71lvh9+0x3bda0>
   2cac1:      	leaq	0x120(%rsp), %rdi
   2cac9:      	callq	*%rax
   2cacb:      	movq	%rdx, 0x140(%rsp)
   2cad3:      	movq	%rax, 0x138(%rsp)
   2cadb:      	movq	0x140(%rsp), %rdx
   2cae3:      	movl	$0x1, %eax
   2cae8:      	xorl	%ecx, %ecx
   2caea:      	cmpq	$0x0, %rdx
   2caee:      	cmoveq	%rcx, %rax
   2caf2:      	cmpq	$0x0, %rax
   2caf6:      	je	0x2c8f8 <core::fmt::write::hd7348ffa6020b6ba+0x198>
   2cafc:      	movq	0x30(%rsp), %rax
   2cb01:      	movq	0x138(%rsp), %rdx
   2cb09:      	movq	%rdx, 0x1a0(%rsp)
   2cb11:      	movq	0x140(%rsp), %rcx
   2cb19:      	movq	%rcx, 0x8(%rsp)
   2cb1e:      	movq	%rcx, 0x1a8(%rsp)
   2cb26:      	movq	(%rax), %rdi
   2cb29:      	movq	0x8(%rax), %rsi
   2cb2d:      	movq	0xef6c(%rip), %rax      # 0x3baa0 <zlgk82z0l71lvh9+0x3baa0>
   2cb34:      	callq	*%rax
   2cb36:      	movq	%rax, 0x10(%rsp)
   2cb3b:      	movq	%rax, 0x1b0(%rsp)
   2cb43:      	movq	(%rax), %rdi
   2cb46:      	movq	0x8(%rax), %rsi
   2cb4a:      	callq	0x2ece0 <core::str::<impl str>::is_empty::hba38a94ab3bb1a41>
   2cb4f:      	testb	$0x1, %al
   2cb51:      	jne	0x2cc0f <core::fmt::write::hd7348ffa6020b6ba+0x4af>
   2cb57:      	jmp	0x2cbcc <core::fmt::write::hd7348ffa6020b6ba+0x46c>
   2cb59:      	movq	0x150(%rsp), %rcx
   2cb61:      	movq	%rcx, 0x198(%rsp)
   2cb69:      	movq	0x68(%rsp), %rdi
   2cb6e:      	movq	0x70(%rsp), %rax
   2cb73:      	movq	(%rcx), %rsi
   2cb76:      	movq	0x8(%rcx), %rdx
   2cb7a:      	callq	*0x18(%rax)
   2cb7d:      	movzbl	%al, %edi
   2cb80:      	andl	$0x1, %edi
   2cb83:      	movq	0xe97e(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2cb8a:      	callq	*%rax
   2cb8c:      	andb	$0x1, %al
   2cb8e:      	movb	%al, 0x15f(%rsp)
   2cb95:      	movb	0x15f(%rsp), %al
   2cb9c:      	andb	$0x1, %al
   2cb9e:      	movzbl	%al, %eax
   2cba1:      	cmpq	$0x0, %rax
   2cba5:      	jne	0x2cbb1 <core::fmt::write::hd7348ffa6020b6ba+0x451>
   2cba7:      	movb	$0x0, 0x47(%rsp)
   2cbac:      	jmp	0x2ca47 <core::fmt::write::hd7348ffa6020b6ba+0x2e7>
   2cbb1:      	leaq	0xdaf0(%rip), %rdi      # 0x3a6a8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0xa8>
   2cbb8:      	movq	0xe951(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2cbbf:      	callq	*%rax
   2cbc1:      	andb	$0x1, %al
   2cbc3:      	movb	%al, 0x47(%rsp)
   2cbc7:      	jmp	0x2ca47 <core::fmt::write::hd7348ffa6020b6ba+0x2e7>
   2cbcc:      	movq	0x10(%rsp), %rcx
   2cbd1:      	movq	0x68(%rsp), %rdi
   2cbd6:      	movq	0x70(%rsp), %rax
   2cbdb:      	movq	(%rcx), %rsi
   2cbde:      	movq	0x8(%rcx), %rdx
   2cbe2:      	callq	*0x18(%rax)
   2cbe5:      	movzbl	%al, %edi
   2cbe8:      	andl	$0x1, %edi
   2cbeb:      	movq	0xe916(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2cbf2:      	callq	*%rax
   2cbf4:      	andb	$0x1, %al
   2cbf6:      	movb	%al, 0x14e(%rsp)
   2cbfd:      	movb	0x14e(%rsp), %al
   2cc04:      	andb	$0x1, %al
   2cc06:      	movzbl	%al, %eax
   2cc09:      	cmpq	$0x0, %rax
   2cc0d:      	jne	0x2cc57 <core::fmt::write::hd7348ffa6020b6ba+0x4f7>
   2cc0f:      	movq	0x8(%rsp), %rsi
   2cc14:      	movq	0x30(%rsp), %rax
   2cc19:      	movq	0x10(%rax), %rdx
   2cc1d:      	movq	0x18(%rax), %rcx
   2cc21:      	leaq	0x48(%rsp), %rdi
   2cc26:      	callq	0x2cce0 <core::fmt::run::h2ba2247691ccff81>
   2cc2b:      	movzbl	%al, %edi
   2cc2e:      	andl	$0x1, %edi
   2cc31:      	movq	0xe8d0(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2cc38:      	callq	*%rax
   2cc3a:      	andb	$0x1, %al
   2cc3c:      	movb	%al, 0x14f(%rsp)
   2cc43:      	movb	0x14f(%rsp), %al
   2cc4a:      	andb	$0x1, %al
   2cc4c:      	movzbl	%al, %eax
   2cc4f:      	cmpq	$0x0, %rax
   2cc53:      	je	0x2cc72 <core::fmt::write::hd7348ffa6020b6ba+0x512>
   2cc55:      	jmp	0x2cc8b <core::fmt::write::hd7348ffa6020b6ba+0x52b>
   2cc57:      	leaq	0xda62(%rip), %rdi      # 0x3a6c0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0xc0>
   2cc5e:      	movq	0xe8ab(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2cc65:      	callq	*%rax
   2cc67:      	andb	$0x1, %al
   2cc69:      	movb	%al, 0x47(%rsp)
   2cc6d:      	jmp	0x2ca47 <core::fmt::write::hd7348ffa6020b6ba+0x2e7>
   2cc72:      	movq	0x88(%rsp), %rax
   2cc7a:      	addq	$0x1, %rax
   2cc7e:      	movq	%rax, (%rsp)
   2cc82:      	setb	%al
   2cc85:      	testb	$0x1, %al
   2cc87:      	jne	0x2ccb7 <core::fmt::write::hd7348ffa6020b6ba+0x557>
   2cc89:      	jmp	0x2cca6 <core::fmt::write::hd7348ffa6020b6ba+0x546>
   2cc8b:      	leaq	0xda5e(%rip), %rdi      # 0x3a6f0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0xf0>
   2cc92:      	movq	0xe877(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2cc99:      	callq	*%rax
   2cc9b:      	andb	$0x1, %al
   2cc9d:      	movb	%al, 0x47(%rsp)
   2cca1:      	jmp	0x2ca47 <core::fmt::write::hd7348ffa6020b6ba+0x2e7>
   2cca6:      	movq	(%rsp), %rax
   2ccaa:      	movq	%rax, 0x88(%rsp)
   2ccb2:      	jmp	0x2caba <core::fmt::write::hd7348ffa6020b6ba+0x35a>
   2ccb7:      	leaq	-0x19d8e(%rip), %rdi    # 0x12f30 <str.1>
   2ccbe:      	leaq	0xda13(%rip), %rdx      # 0x3a6d8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0xd8>
   2ccc5:      	movq	0xe204(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2cccc:      	movl	$0x1c, %esi
   2ccd1:      	callq	*%rax
   2ccd3:      	ud2
   2ccd5:      	int3
   2ccd6:      	int3
   2ccd7:      	int3
   2ccd8:      	int3
   2ccd9:      	int3
   2ccda:      	int3
   2ccdb:      	int3
   2ccdc:      	int3
   2ccdd:      	int3
   2ccde:      	int3
   2ccdf:      	int3

000000000002cce0 <core::fmt::run::h2ba2247691ccff81>:
   2cce0:      	subq	$0x58, %rsp
   2cce4:      	movq	%rcx, 0x8(%rsp)
   2cce9:      	movq	%rdx, (%rsp)
   2cced:      	movq	%rsi, %rdx
   2ccf0:      	movq	0x8(%rsp), %rsi
   2ccf5:      	movq	%rdx, 0x10(%rsp)
   2ccfa:      	movq	%rdi, %rax
   2ccfd:      	movq	(%rsp), %rdi
   2cd01:      	movq	%rax, 0x18(%rsp)
   2cd06:      	movq	%rax, 0x20(%rsp)
   2cd0b:      	movq	%rdx, 0x28(%rsp)
   2cd10:      	movq	%rdi, 0x30(%rsp)
   2cd15:      	movq	%rsi, 0x38(%rsp)
   2cd1a:      	movl	0x28(%rdx), %ecx
   2cd1d:      	movl	%ecx, 0x30(%rax)
   2cd20:      	movb	0x30(%rdx), %cl
   2cd23:      	movb	%cl, 0x38(%rax)
   2cd26:      	movl	0x2c(%rdx), %ecx
   2cd29:      	movl	%ecx, 0x34(%rax)
   2cd2c:      	addq	$0x10, %rdx
   2cd30:      	callq	0x2cde0 <core::fmt::getcount::h7803b9450149073b>
   2cd35:      	movq	(%rsp), %rdi
   2cd39:      	movq	0x8(%rsp), %rsi
   2cd3e:      	movq	%rax, %r8
   2cd41:      	movq	0x18(%rsp), %rax
   2cd46:      	movq	%rdx, %rcx
   2cd49:      	movq	0x10(%rsp), %rdx
   2cd4e:      	movq	%r8, (%rax)
   2cd51:      	movq	%rcx, 0x8(%rax)
   2cd55:      	callq	0x2cde0 <core::fmt::getcount::h7803b9450149073b>
   2cd5a:      	movq	0x18(%rsp), %rdi
   2cd5f:      	movq	%rax, 0x10(%rdi)
   2cd63:      	movq	%rdx, 0x18(%rdi)
   2cd67:      	movb	$0x1, %al
   2cd69:      	testb	$0x1, %al
   2cd6b:      	jne	0x2cdb2 <core::fmt::run::h2ba2247691ccff81+0xd2>
   2cd6d:      	movq	0x8(%rsp), %rsi
   2cd72:      	movq	(%rsp), %rdi
   2cd76:      	movq	0x10(%rsp), %rax
   2cd7b:      	movq	0x20(%rax), %rdx
   2cd7f:      	movq	0xefe2(%rip), %rax      # 0x3bd68 <zlgk82z0l71lvh9+0x3bd68>
   2cd86:      	callq	*%rax
   2cd88:      	movq	0x18(%rsp), %rsi
   2cd8d:      	movq	%rax, %rcx
   2cd90:      	movq	%rcx, 0x40(%rsp)
   2cd95:      	movq	%rcx, 0x48(%rsp)
   2cd9a:      	movq	%rsi, 0x50(%rsp)
   2cd9f:      	movq	0x8(%rcx), %rax
   2cda3:      	movq	(%rcx), %rdi
   2cda6:      	callq	*%rax
   2cda8:      	andb	$0x1, %al
   2cdaa:      	movzbl	%al, %eax
   2cdad:      	addq	$0x58, %rsp
   2cdb1:      	retq
   2cdb2:      	movq	0x10(%rsp), %rax
   2cdb7:      	movq	0x8(%rsp), %rcx
   2cdbc:      	cmpq	%rcx, 0x20(%rax)
   2cdc0:      	jb	0x2cd6d <core::fmt::run::h2ba2247691ccff81+0x8d>
   2cdc2:      	leaq	-0x19df5(%rip), %rdi    # 0x12fd4 <str.1+0xa4>
   2cdc9:      	leaq	0xd938(%rip), %rdx      # 0x3a708 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x108>
   2cdd0:      	movq	0xe0f9(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2cdd7:      	movl	$0x2b, %esi
   2cddc:      	callq	*%rax
   2cdde:      	ud2

000000000002cde0 <core::fmt::getcount::h7803b9450149073b>:
   2cde0:      	subq	$0x88, %rsp
   2cde7:      	movq	%rdx, 0x18(%rsp)
   2cdec:      	movq	%rsi, 0x20(%rsp)
   2cdf1:      	movq	%rdi, 0x28(%rsp)
   2cdf6:      	movq	%rdi, 0x48(%rsp)
   2cdfb:      	movq	%rsi, 0x50(%rsp)
   2ce00:      	movq	%rdx, 0x58(%rsp)
   2ce05:      	movq	(%rdx), %rax
   2ce08:      	movq	%rax, 0x30(%rsp)
   2ce0d:      	testq	%rax, %rax
   2ce10:      	je	0x2ce25 <core::fmt::getcount::h7803b9450149073b+0x45>
   2ce12:      	jmp	0x2ce14 <core::fmt::getcount::h7803b9450149073b+0x34>
   2ce14:      	movq	0x30(%rsp), %rax
   2ce19:      	subq	$0x1, %rax
   2ce1d:      	je	0x2ce43 <core::fmt::getcount::h7803b9450149073b+0x63>
   2ce1f:      	jmp	0x2ce21 <core::fmt::getcount::h7803b9450149073b+0x41>
   2ce21:      	jmp	0x2ce62 <core::fmt::getcount::h7803b9450149073b+0x82>
   2ce23:      	ud2
   2ce25:      	movq	0x18(%rsp), %rax
   2ce2a:      	movq	0x8(%rax), %rax
   2ce2e:      	movq	%rax, 0x60(%rsp)
   2ce33:      	movq	%rax, 0x40(%rsp)
   2ce38:      	movq	$0x1, 0x38(%rsp)
   2ce41:      	jmp	0x2ce6b <core::fmt::getcount::h7803b9450149073b+0x8b>
   2ce43:      	movq	0x18(%rsp), %rax
   2ce48:      	movq	0x8(%rax), %rax
   2ce4c:      	movq	%rax, 0x10(%rsp)
   2ce51:      	movq	%rax, 0x68(%rsp)
   2ce56:      	movb	$0x1, %al
   2ce58:      	testb	$0x1, %al
   2ce5a:      	jne	0x2cef5 <core::fmt::getcount::h7803b9450149073b+0x115>
   2ce60:      	jmp	0x2ce7d <core::fmt::getcount::h7803b9450149073b+0x9d>
   2ce62:      	movq	$0x0, 0x38(%rsp)
   2ce6b:      	movq	0x38(%rsp), %rax
   2ce70:      	movq	0x40(%rsp), %rdx
   2ce75:      	addq	$0x88, %rsp
   2ce7c:      	retq
   2ce7d:      	movq	0x10(%rsp), %rdx
   2ce82:      	movq	0x20(%rsp), %rsi
   2ce87:      	movq	0x28(%rsp), %rdi
   2ce8c:      	movq	0xeed5(%rip), %rax      # 0x3bd68 <zlgk82z0l71lvh9+0x3bd68>
   2ce93:      	callq	*%rax
   2ce95:      	movq	%rax, %rcx
   2ce98:      	movq	%rcx, 0x8(%rsp)
   2ce9d:      	movq	%rax, 0x80(%rsp)
   2cea5:      	movq	0x8(%rax), %rax
   2cea9:      	movq	0xec88(%rip), %rcx      # 0x3bb38 <zlgk82z0l71lvh9+0x3bb38>
   2ceb0:      	movq	(%rcx), %rcx
   2ceb3:      	cmpq	%rcx, %rax
   2ceb6:      	je	0x2cec3 <core::fmt::getcount::h7803b9450149073b+0xe3>
   2ceb8:      	movq	$0x0, 0x70(%rsp)
   2cec1:      	jmp	0x2cedc <core::fmt::getcount::h7803b9450149073b+0xfc>
   2cec3:      	movq	0x8(%rsp), %rax
   2cec8:      	movq	(%rax), %rax
   2cecb:      	movq	(%rax), %rax
   2cece:      	movq	%rax, 0x78(%rsp)
   2ced3:      	movq	$0x1, 0x70(%rsp)
   2cedc:      	movq	0x70(%rsp), %rax
   2cee1:      	movq	0x78(%rsp), %rcx
   2cee6:      	movq	%rcx, 0x40(%rsp)
   2ceeb:      	movq	%rax, 0x38(%rsp)
   2cef0:      	jmp	0x2ce6b <core::fmt::getcount::h7803b9450149073b+0x8b>
   2cef5:      	movq	0x10(%rsp), %rax
   2cefa:      	movq	0x20(%rsp), %rcx
   2ceff:      	cmpq	%rcx, %rax
   2cf02:      	jb	0x2ce7d <core::fmt::getcount::h7803b9450149073b+0x9d>
   2cf08:      	leaq	-0x1b439(%rip), %rdi    # 0x11ad6 <str.3+0xa6>
   2cf0f:      	leaq	0xd80a(%rip), %rdx      # 0x3a720 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x120>
   2cf16:      	movq	0xdfb3(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2cf1d:      	movl	$0x20, %esi
   2cf22:      	callq	*%rax
   2cf24:      	ud2
   2cf26:      	int3
   2cf27:      	int3
   2cf28:      	int3
   2cf29:      	int3
   2cf2a:      	int3
   2cf2b:      	int3
   2cf2c:      	int3
   2cf2d:      	int3
   2cf2e:      	int3
   2cf2f:      	int3

000000000002cf30 <core::fmt::PostPadding::new::h28d2783a0ba850c4>:
   2cf30:      	subq	$0x20, %rsp
   2cf34:      	movl	%edi, 0x14(%rsp)
   2cf38:      	movq	%rsi, 0x18(%rsp)
   2cf3d:      	movl	%edi, 0x8(%rsp)
   2cf41:      	movq	%rsi, (%rsp)
   2cf45:      	movq	(%rsp), %rax
   2cf49:      	movl	0x8(%rsp), %edx
   2cf4d:      	addq	$0x20, %rsp
   2cf51:      	retq
   2cf52:      	int3
   2cf53:      	int3
   2cf54:      	int3
   2cf55:      	int3
   2cf56:      	int3
   2cf57:      	int3
   2cf58:      	int3
   2cf59:      	int3
   2cf5a:      	int3
   2cf5b:      	int3
   2cf5c:      	int3
   2cf5d:      	int3
   2cf5e:      	int3
   2cf5f:      	int3

000000000002cf60 <core::fmt::PostPadding::write::h851a3c73ce096721>:
   2cf60:      	subq	$0x68, %rsp
   2cf64:      	movq	%rdx, 0x8(%rsp)
   2cf69:      	movl	%esi, 0x10(%rsp)
   2cf6d:      	movq	%rdi, 0x50(%rsp)
   2cf72:      	movl	%esi, 0x58(%rsp)
   2cf76:      	movq	%rdx, 0x60(%rsp)
   2cf7b:      	movq	$0x0, 0x18(%rsp)
   2cf84:      	movq	%rdi, 0x20(%rsp)
   2cf89:      	movq	0x18(%rsp), %rdi
   2cf8e:      	movq	0x20(%rsp), %rsi
   2cf93:      	movq	0xe3d6(%rip), %rax      # 0x3b370 <zlgk82z0l71lvh9+0x3b370>
   2cf9a:      	callq	*%rax
   2cf9c:      	movq	%rax, 0x28(%rsp)
   2cfa1:      	movq	%rdx, 0x30(%rsp)
   2cfa6:      	movq	0xe3cb(%rip), %rax      # 0x3b378 <zlgk82z0l71lvh9+0x3b378>
   2cfad:      	leaq	0x28(%rsp), %rdi
   2cfb2:      	callq	*%rax
   2cfb4:      	movq	%rdx, 0x40(%rsp)
   2cfb9:      	movq	%rax, 0x38(%rsp)
   2cfbe:      	cmpq	$0x0, 0x38(%rsp)
   2cfc4:      	jne	0x2cfcd <core::fmt::PostPadding::write::h851a3c73ce096721+0x6d>
   2cfc6:      	movb	$0x0, 0x17(%rsp)
   2cfcb:      	jmp	0x2d007 <core::fmt::PostPadding::write::h851a3c73ce096721+0xa7>
   2cfcd:      	movl	0x10(%rsp), %esi
   2cfd1:      	movq	0x8(%rsp), %rax
   2cfd6:      	movq	0x20(%rax), %rdi
   2cfda:      	movq	0x28(%rax), %rax
   2cfde:      	callq	*0x20(%rax)
   2cfe1:      	movzbl	%al, %edi
   2cfe4:      	andl	$0x1, %edi
   2cfe7:      	movq	0xe51a(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2cfee:      	callq	*%rax
   2cff0:      	andb	$0x1, %al
   2cff2:      	movb	%al, 0x4f(%rsp)
   2cff6:      	movb	0x4f(%rsp), %al
   2cffa:      	andb	$0x1, %al
   2cffc:      	movzbl	%al, %eax
   2cfff:      	cmpq	$0x0, %rax
   2d003:      	je	0x2cfa6 <core::fmt::PostPadding::write::h851a3c73ce096721+0x46>
   2d005:      	jmp	0x2d015 <core::fmt::PostPadding::write::h851a3c73ce096721+0xb5>
   2d007:      	movb	0x17(%rsp), %al
   2d00b:      	andb	$0x1, %al
   2d00d:      	movzbl	%al, %eax
   2d010:      	addq	$0x68, %rsp
   2d014:      	retq
   2d015:      	leaq	0xd71c(%rip), %rdi      # 0x3a738 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x138>
   2d01c:      	movq	0xe4ed(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d023:      	callq	*%rax
   2d025:      	andb	$0x1, %al
   2d027:      	movb	%al, 0x17(%rsp)
   2d02b:      	jmp	0x2d007 <core::fmt::PostPadding::write::h851a3c73ce096721+0xa7>
   2d02d:      	int3
   2d02e:      	int3
   2d02f:      	int3

000000000002d030 <core::fmt::Formatter::wrap_buf::hfccee8d385c451c1>:
   2d030:      	pushq	%rbp
   2d031:      	pushq	%rbx
   2d032:      	subq	$0x58, %rsp
   2d036:      	movq	%rcx, 0x8(%rsp)
   2d03b:      	movq	%rdx, 0x10(%rsp)
   2d040:      	movq	%rsi, %rax
   2d043:      	movq	0x8(%rsp), %rsi
   2d048:      	movq	%rax, 0x18(%rsp)
   2d04d:      	movq	%rdi, %rcx
   2d050:      	movq	0x10(%rsp), %rdi
   2d055:      	movq	%rcx, 0x20(%rsp)
   2d05a:      	movq	%rcx, 0x28(%rsp)
   2d05f:      	movq	%rax, 0x40(%rsp)
   2d064:      	movq	%rdi, 0x48(%rsp)
   2d069:      	movq	%rsi, 0x50(%rsp)
   2d06e:      	movq	0x20(%rax), %rcx
   2d072:      	movq	0x28(%rax), %rax
   2d076:      	movq	%rcx, 0x30(%rsp)
   2d07b:      	movq	%rax, 0x38(%rsp)
   2d080:      	movq	0x30(%rsp), %rdx
   2d085:      	movq	0x38(%rsp), %rcx
   2d08a:      	callq	0x2fd80 <core::fmt::builders::PadAdapter::wrap::{{closure}}::ha2ae83696301a826>
   2d08f:      	movq	0x18(%rsp), %rsi
   2d094:      	movq	0x20(%rsp), %rdi
   2d099:      	movq	%rax, %rcx
   2d09c:      	movq	0x28(%rsp), %rax
   2d0a1:      	movl	0x34(%rsi), %ebp
   2d0a4:      	movl	0x30(%rsi), %ebx
   2d0a7:      	movb	0x38(%rsi), %r11b
   2d0ab:      	movq	(%rsi), %r10
   2d0ae:      	movq	0x8(%rsi), %r9
   2d0b2:      	movq	0x10(%rsi), %r8
   2d0b6:      	movq	0x18(%rsi), %rsi
   2d0ba:      	movl	%ebp, 0x34(%rdi)
   2d0bd:      	movl	%ebx, 0x30(%rdi)
   2d0c0:      	movb	%r11b, 0x38(%rdi)
   2d0c4:      	movq	%r10, (%rdi)
   2d0c7:      	movq	%r9, 0x8(%rdi)
   2d0cb:      	movq	%r8, 0x10(%rdi)
   2d0cf:      	movq	%rsi, 0x18(%rdi)
   2d0d3:      	movq	%rcx, 0x20(%rdi)
   2d0d7:      	movq	%rdx, 0x28(%rdi)
   2d0db:      	addq	$0x58, %rsp
   2d0df:      	popq	%rbx
   2d0e0:      	popq	%rbp
   2d0e1:      	retq
   2d0e2:      	int3
   2d0e3:      	int3
   2d0e4:      	int3
   2d0e5:      	int3
   2d0e6:      	int3
   2d0e7:      	int3
   2d0e8:      	int3
   2d0e9:      	int3
   2d0ea:      	int3
   2d0eb:      	int3
   2d0ec:      	int3
   2d0ed:      	int3
   2d0ee:      	int3
   2d0ef:      	int3

000000000002d0f0 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a>:
   2d0f0:      	subq	$0x178, %rsp            # imm = 0x178
   2d0f7:      	movq	%r9, 0x68(%rsp)
   2d0fc:      	movq	%r8, 0x70(%rsp)
   2d101:      	movq	%rcx, 0x58(%rsp)
   2d106:      	movq	%rdx, 0x60(%rsp)
   2d10b:      	movl	%esi, %eax
   2d10d:      	movq	0x68(%rsp), %rsi
   2d112:      	movq	%rdi, %r8
   2d115:      	movq	0x70(%rsp), %rdi
   2d11a:      	movq	%r8, 0x78(%rsp)
   2d11f:      	movb	%al, 0x86(%rsp)
   2d126:      	movq	%r8, 0xf8(%rsp)
   2d12e:      	andb	$0x1, %al
   2d130:      	movb	%al, 0x107(%rsp)
   2d137:      	movq	%rdx, 0x108(%rsp)
   2d13f:      	movq	%rcx, 0x110(%rsp)
   2d147:      	movq	%rdi, 0x118(%rsp)
   2d14f:      	movq	%rsi, 0x120(%rsp)
   2d157:      	callq	0x2ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>
   2d15c:      	movq	%rax, %rcx
   2d15f:      	movb	0x86(%rsp), %al
   2d166:      	movq	%rcx, 0x98(%rsp)
   2d16e:      	movl	$0x110000, 0xa4(%rsp)   # imm = 0x110000
   2d179:      	testb	$0x1, %al
   2d17b:      	jne	0x2d1b0 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0xc0>
   2d17d:      	movl	$0x2d, 0xa8(%rsp)
   2d188:      	movl	0xa8(%rsp), %eax
   2d18f:      	movl	%eax, 0xa4(%rsp)
   2d196:      	movq	0x98(%rsp), %rax
   2d19e:      	addq	$0x1, %rax
   2d1a2:      	movq	%rax, 0x50(%rsp)
   2d1a7:      	setb	%al
   2d1aa:      	testb	$0x1, %al
   2d1ac:      	jne	0x2d1d3 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0xe3>
   2d1ae:      	jmp	0x2d1c4 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0xd4>
   2d1b0:      	movq	0x78(%rsp), %rdi
   2d1b5:      	movq	0xe614(%rip), %rax      # 0x3b7d0 <zlgk82z0l71lvh9+0x3b7d0>
   2d1bc:      	callq	*%rax
   2d1be:      	testb	$0x1, %al
   2d1c0:      	jne	0x2d205 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x115>
   2d1c2:      	jmp	0x2d1f1 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x101>
   2d1c4:      	movq	0x50(%rsp), %rax
   2d1c9:      	movq	%rax, 0x98(%rsp)
   2d1d1:      	jmp	0x2d1f1 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x101>
   2d1d3:      	leaq	-0x1a2aa(%rip), %rdi    # 0x12f30 <str.1>
   2d1da:      	leaq	0xd56f(%rip), %rdx      # 0x3a750 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x150>
   2d1e1:      	movq	0xdce8(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2d1e8:      	movl	$0x1c, %esi
   2d1ed:      	callq	*%rax
   2d1ef:      	ud2
   2d1f1:      	movq	0x78(%rsp), %rdi
   2d1f6:      	movq	0xebab(%rip), %rax      # 0x3bda8 <zlgk82z0l71lvh9+0x3bda8>
   2d1fd:      	callq	*%rax
   2d1ff:      	testb	$0x1, %al
   2d201:      	jne	0x2d271 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x181>
   2d203:      	jmp	0x2d263 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x173>
   2d205:      	movl	$0x2b, 0xac(%rsp)
   2d210:      	movl	0xac(%rsp), %eax
   2d217:      	movl	%eax, 0xa4(%rsp)
   2d21e:      	movq	0x98(%rsp), %rax
   2d226:      	addq	$0x1, %rax
   2d22a:      	movq	%rax, 0x48(%rsp)
   2d22f:      	setb	%al
   2d232:      	testb	$0x1, %al
   2d234:      	jne	0x2d245 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x155>
   2d236:      	movq	0x48(%rsp), %rax
   2d23b:      	movq	%rax, 0x98(%rsp)
   2d243:      	jmp	0x2d1f1 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x101>
   2d245:      	leaq	-0x1a31c(%rip), %rdi    # 0x12f30 <str.1>
   2d24c:      	leaq	0xd515(%rip), %rdx      # 0x3a768 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x168>
   2d253:      	movq	0xdc76(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2d25a:      	movl	$0x1c, %esi
   2d25f:      	callq	*%rax
   2d261:      	ud2
   2d263:      	movq	$0x0, 0xb0(%rsp)
   2d26f:      	jmp	0x2d2a1 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x1b1>
   2d271:      	movq	0x58(%rsp), %rsi
   2d276:      	movq	0x60(%rsp), %rdi
   2d27b:      	callq	0x2ee40 <core::str::<impl str>::chars::hac05c2fcb19a790a>
   2d280:      	movq	%rax, %rdi
   2d283:      	movq	%rdx, %rsi
   2d286:      	callq	0x2b660 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::count::h90b6e8d639e5c332>
   2d28b:      	addq	0x98(%rsp), %rax
   2d293:      	movq	%rax, 0x40(%rsp)
   2d298:      	setb	%al
   2d29b:      	testb	$0x1, %al
   2d29d:      	jne	0x2d2da <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x1ea>
   2d29f:      	jmp	0x2d2b1 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x1c1>
   2d2a1:      	movq	0x78(%rsp), %rax
   2d2a6:      	cmpq	$0x0, (%rax)
   2d2aa:      	je	0x2d2f8 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x208>
   2d2ac:      	jmp	0x2d345 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x255>
   2d2b1:      	movq	0x58(%rsp), %rax
   2d2b6:      	movq	0x60(%rsp), %rcx
   2d2bb:      	movq	0x40(%rsp), %rdx
   2d2c0:      	movq	%rdx, 0x98(%rsp)
   2d2c8:      	movq	%rcx, 0xb0(%rsp)
   2d2d0:      	movq	%rax, 0xb8(%rsp)
   2d2d8:      	jmp	0x2d2a1 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x1b1>
   2d2da:      	leaq	-0x1a3b1(%rip), %rdi    # 0x12f30 <str.1>
   2d2e1:      	leaq	0xd498(%rip), %rdx      # 0x3a780 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x180>
   2d2e8:      	movq	0xdbe1(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2d2ef:      	movl	$0x1c, %esi
   2d2f4:      	callq	*%rax
   2d2f6:      	ud2
   2d2f8:      	movq	0x78(%rsp), %rdi
   2d2fd:      	movl	0xa4(%rsp), %esi
   2d304:      	movq	0xb0(%rsp), %rdx
   2d30c:      	movq	0xb8(%rsp), %rcx
   2d314:      	callq	0x2d910 <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687>
   2d319:      	movzbl	%al, %edi
   2d31c:      	andl	$0x1, %edi
   2d31f:      	movq	0xe1e2(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d326:      	callq	*%rax
   2d328:      	andb	$0x1, %al
   2d32a:      	movb	%al, 0xc4(%rsp)
   2d331:      	movb	0xc4(%rsp), %al
   2d338:      	andb	$0x1, %al
   2d33a:      	movzbl	%al, %eax
   2d33d:      	cmpq	$0x0, %rax
   2d341:      	je	0x2d369 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x279>
   2d343:      	jmp	0x2d38e <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x29e>
   2d345:      	movq	0x78(%rsp), %rcx
   2d34a:      	movq	%rcx, %rax
   2d34d:      	addq	$0x8, %rax
   2d351:      	movq	%rax, 0x128(%rsp)
   2d359:      	movq	0x98(%rsp), %rax
   2d361:      	cmpq	0x8(%rcx), %rax
   2d365:      	jae	0x2d3e2 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2f2>
   2d367:      	jmp	0x2d3bb <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2cb>
   2d369:      	movq	0x68(%rsp), %rdx
   2d36e:      	movq	0x70(%rsp), %rsi
   2d373:      	movq	0x78(%rsp), %rax
   2d378:      	movq	0x20(%rax), %rdi
   2d37c:      	movq	0x28(%rax), %rax
   2d380:      	callq	*0x18(%rax)
   2d383:      	andb	$0x1, %al
   2d385:      	movb	%al, 0x97(%rsp)
   2d38c:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d38e:      	leaq	0xd403(%rip), %rdi      # 0x3a798 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x198>
   2d395:      	movq	0xe174(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d39c:      	callq	*%rax
   2d39e:      	andb	$0x1, %al
   2d3a0:      	movb	%al, 0x97(%rsp)
   2d3a7:      	movb	0x97(%rsp), %al
   2d3ae:      	andb	$0x1, %al
   2d3b0:      	movzbl	%al, %eax
   2d3b3:      	addq	$0x178, %rsp            # imm = 0x178
   2d3ba:      	retq
   2d3bb:      	movq	0x78(%rsp), %rdi
   2d3c0:      	movq	%rdi, %rax
   2d3c3:      	addq	$0x8, %rax
   2d3c7:      	movq	%rax, 0x130(%rsp)
   2d3cf:      	movq	0xe9da(%rip), %rax      # 0x3bdb0 <zlgk82z0l71lvh9+0x3bdb0>
   2d3d6:      	callq	*%rax
   2d3d8:      	testb	$0x1, %al
   2d3da:      	jne	0x2d479 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x389>
   2d3e0:      	jmp	0x2d442 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x352>
   2d3e2:      	movq	0x78(%rsp), %rdi
   2d3e7:      	movq	0x8(%rdi), %rax
   2d3eb:      	movq	%rax, 0x170(%rsp)
   2d3f3:      	movl	0xa4(%rsp), %esi
   2d3fa:      	movq	0xb0(%rsp), %rdx
   2d402:      	movq	0xb8(%rsp), %rcx
   2d40a:      	callq	0x2d910 <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687>
   2d40f:      	movzbl	%al, %edi
   2d412:      	andl	$0x1, %edi
   2d415:      	movq	0xe0ec(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d41c:      	callq	*%rax
   2d41e:      	andb	$0x1, %al
   2d420:      	movb	%al, 0xc5(%rsp)
   2d427:      	movb	0xc5(%rsp), %al
   2d42e:      	andb	$0x1, %al
   2d430:      	movzbl	%al, %eax
   2d433:      	cmpq	$0x0, %rax
   2d437:      	je	0x2d8c0 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x7d0>
   2d43d:      	jmp	0x2d8e8 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x7f8>
   2d442:      	movq	0x78(%rsp), %rax
   2d447:      	movq	0x8(%rax), %rax
   2d44b:      	movq	%rax, 0x138(%rsp)
   2d453:      	movq	0x98(%rsp), %rcx
   2d45b:      	movq	%rax, %rdx
   2d45e:      	subq	%rcx, %rdx
   2d461:      	movq	%rdx, 0x38(%rsp)
   2d466:      	cmpq	%rcx, %rax
   2d469:      	setb	%al
   2d46c:      	testb	$0x1, %al
   2d46e:      	jne	0x2d58c <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x49c>
   2d474:      	jmp	0x2d52f <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x43f>
   2d479:      	movq	0x78(%rsp), %rdi
   2d47e:      	movq	0x8(%rdi), %rax
   2d482:      	movq	%rax, 0x28(%rsp)
   2d487:      	movq	%rax, 0x150(%rsp)
   2d48f:      	addq	$0x30, %rdi
   2d493:      	movq	0xe44e(%rip), %rax      # 0x3b8e8 <zlgk82z0l71lvh9+0x3b8e8>
   2d49a:      	movl	$0x30, %esi
   2d49f:      	callq	*%rax
   2d4a1:      	movq	0x78(%rsp), %rdi
   2d4a6:      	movl	%eax, 0x30(%rsp)
   2d4aa:      	movl	%eax, 0x158(%rsp)
   2d4b1:      	addq	$0x38, %rdi
   2d4b5:      	movb	$0x1, 0xc6(%rsp)
   2d4bd:      	movb	0xc6(%rsp), %al
   2d4c4:      	movzbl	%al, %esi
   2d4c7:      	movq	0xe432(%rip), %rax      # 0x3b900 <zlgk82z0l71lvh9+0x3b900>
   2d4ce:      	callq	*%rax
   2d4d0:      	movq	0x78(%rsp), %rdi
   2d4d5:      	movb	%al, 0x37(%rsp)
   2d4d9:      	movb	%al, 0x15f(%rsp)
   2d4e0:      	movl	0xa4(%rsp), %esi
   2d4e7:      	movq	0xb0(%rsp), %rdx
   2d4ef:      	movq	0xb8(%rsp), %rcx
   2d4f7:      	callq	0x2d910 <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687>
   2d4fc:      	movzbl	%al, %edi
   2d4ff:      	andl	$0x1, %edi
   2d502:      	movq	0xdfff(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d509:      	callq	*%rax
   2d50b:      	andb	$0x1, %al
   2d50d:      	movb	%al, 0xc7(%rsp)
   2d514:      	movb	0xc7(%rsp), %al
   2d51b:      	andb	$0x1, %al
   2d51d:      	movzbl	%al, %eax
   2d520:      	cmpq	$0x0, %rax
   2d524:      	je	0x2d6df <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x5ef>
   2d52a:      	jmp	0x2d703 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x613>
   2d52f:      	movq	0x38(%rsp), %rsi
   2d534:      	movq	0x78(%rsp), %rdi
   2d539:      	movb	$0x1, 0xf5(%rsp)
   2d541:      	movzbl	0xf5(%rsp), %edx
   2d549:      	callq	0x2dd70 <core::fmt::Formatter::padding::he8c470903cfc1e6e>
   2d54e:      	movq	%rax, %rdi
   2d551:      	movl	%edx, %esi
   2d553:      	movq	0xe336(%rip), %rax      # 0x3b890 <zlgk82z0l71lvh9+0x3b890>
   2d55a:      	callq	*%rax
   2d55c:      	movl	%edx, 0xe8(%rsp)
   2d563:      	movq	%rax, 0xe0(%rsp)
   2d56b:      	xorl	%eax, %eax
   2d56d:      	movl	$0x1, %ecx
   2d572:      	cmpl	$0x110000, 0xe8(%rsp)   # imm = 0x110000
   2d57d:      	cmoveq	%rcx, %rax
   2d581:      	cmpq	$0x0, %rax
   2d585:      	je	0x2d5aa <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x4ba>
   2d587:      	jmp	0x2d61e <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x52e>
   2d58c:      	leaq	-0x1a693(%rip), %rdi    # 0x12f00 <str.0>
   2d593:      	leaq	0xd216(%rip), %rdx      # 0x3a7b0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x1b0>
   2d59a:      	movq	0xd92f(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2d5a1:      	movl	$0x21, %esi
   2d5a6:      	callq	*%rax
   2d5a8:      	ud2
   2d5aa:      	movq	0x78(%rsp), %rdi
   2d5af:      	movq	0xe0(%rsp), %rcx
   2d5b7:      	movq	%rcx, 0x18(%rsp)
   2d5bc:      	movl	0xe8(%rsp), %eax
   2d5c3:      	movl	%eax, 0x24(%rsp)
   2d5c7:      	movq	%rcx, 0x140(%rsp)
   2d5cf:      	movl	%eax, 0x148(%rsp)
   2d5d6:      	movl	0xa4(%rsp), %esi
   2d5dd:      	movq	0xb0(%rsp), %rdx
   2d5e5:      	movq	0xb8(%rsp), %rcx
   2d5ed:      	callq	0x2d910 <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687>
   2d5f2:      	movzbl	%al, %edi
   2d5f5:      	andl	$0x1, %edi
   2d5f8:      	movq	0xdf09(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d5ff:      	callq	*%rax
   2d601:      	andb	$0x1, %al
   2d603:      	movb	%al, 0xf6(%rsp)
   2d60a:      	movb	0xf6(%rsp), %al
   2d611:      	andb	$0x1, %al
   2d613:      	movzbl	%al, %eax
   2d616:      	cmpq	$0x0, %rax
   2d61a:      	je	0x2d63c <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x54c>
   2d61c:      	jmp	0x2d682 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x592>
   2d61e:      	leaq	0xd1d3(%rip), %rdi      # 0x3a7f8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x1f8>
   2d625:      	movq	0xdee4(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d62c:      	callq	*%rax
   2d62e:      	andb	$0x1, %al
   2d630:      	movb	%al, 0x97(%rsp)
   2d637:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d63c:      	movq	0x68(%rsp), %rdx
   2d641:      	movq	0x70(%rsp), %rsi
   2d646:      	movq	0x78(%rsp), %rax
   2d64b:      	movq	0x20(%rax), %rdi
   2d64f:      	movq	0x28(%rax), %rax
   2d653:      	callq	*0x18(%rax)
   2d656:      	movzbl	%al, %edi
   2d659:      	andl	$0x1, %edi
   2d65c:      	movq	0xdea5(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d663:      	callq	*%rax
   2d665:      	andb	$0x1, %al
   2d667:      	movb	%al, 0xf7(%rsp)
   2d66e:      	movb	0xf7(%rsp), %al
   2d675:      	andb	$0x1, %al
   2d677:      	movzbl	%al, %eax
   2d67a:      	cmpq	$0x0, %rax
   2d67e:      	je	0x2d6a0 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x5b0>
   2d680:      	jmp	0x2d6c1 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x5d1>
   2d682:      	leaq	0xd157(%rip), %rdi      # 0x3a7e0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x1e0>
   2d689:      	movq	0xde80(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d690:      	callq	*%rax
   2d692:      	andb	$0x1, %al
   2d694:      	movb	%al, 0x97(%rsp)
   2d69b:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d6a0:      	movq	0x78(%rsp), %rdx
   2d6a5:      	movl	0x24(%rsp), %esi
   2d6a9:      	movq	0x18(%rsp), %rdi
   2d6ae:      	callq	0x2cf60 <core::fmt::PostPadding::write::h851a3c73ce096721>
   2d6b3:      	andb	$0x1, %al
   2d6b5:      	movb	%al, 0x97(%rsp)
   2d6bc:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d6c1:      	leaq	0xd100(%rip), %rdi      # 0x3a7c8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x1c8>
   2d6c8:      	movq	0xde41(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d6cf:      	callq	*%rax
   2d6d1:      	andb	$0x1, %al
   2d6d3:      	movb	%al, 0x97(%rsp)
   2d6da:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d6df:      	movq	0x28(%rsp), %rax
   2d6e4:      	movq	0x98(%rsp), %rcx
   2d6ec:      	movq	%rax, %rdx
   2d6ef:      	subq	%rcx, %rdx
   2d6f2:      	movq	%rdx, 0x10(%rsp)
   2d6f7:      	cmpq	%rcx, %rax
   2d6fa:      	setb	%al
   2d6fd:      	testb	$0x1, %al
   2d6ff:      	jne	0x2d77e <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x68e>
   2d701:      	jmp	0x2d721 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x631>
   2d703:      	leaq	0xd166(%rip), %rdi      # 0x3a870 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x270>
   2d70a:      	movq	0xddff(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d711:      	callq	*%rax
   2d713:      	andb	$0x1, %al
   2d715:      	movb	%al, 0x97(%rsp)
   2d71c:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d721:      	movq	0x10(%rsp), %rsi
   2d726:      	movq	0x78(%rsp), %rdi
   2d72b:      	movb	$0x1, 0xdd(%rsp)
   2d733:      	movzbl	0xdd(%rsp), %edx
   2d73b:      	callq	0x2dd70 <core::fmt::Formatter::padding::he8c470903cfc1e6e>
   2d740:      	movq	%rax, %rdi
   2d743:      	movl	%edx, %esi
   2d745:      	movq	0xe144(%rip), %rax      # 0x3b890 <zlgk82z0l71lvh9+0x3b890>
   2d74c:      	callq	*%rax
   2d74e:      	movl	%edx, 0xd0(%rsp)
   2d755:      	movq	%rax, 0xc8(%rsp)
   2d75d:      	xorl	%eax, %eax
   2d75f:      	movl	$0x1, %ecx
   2d764:      	cmpl	$0x110000, 0xd0(%rsp)   # imm = 0x110000
   2d76f:      	cmoveq	%rcx, %rax
   2d773:      	cmpq	$0x0, %rax
   2d777:      	je	0x2d79c <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x6ac>
   2d779:      	jmp	0x2d808 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x718>
   2d77e:      	leaq	-0x1a885(%rip), %rdi    # 0x12f00 <str.0>
   2d785:      	leaq	0xd084(%rip), %rdx      # 0x3a810 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x210>
   2d78c:      	movq	0xd73d(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2d793:      	movl	$0x21, %esi
   2d798:      	callq	*%rax
   2d79a:      	ud2
   2d79c:      	movq	0x68(%rsp), %rdx
   2d7a1:      	movq	0x70(%rsp), %rsi
   2d7a6:      	movq	0x78(%rsp), %rax
   2d7ab:      	movq	0xc8(%rsp), %rdi
   2d7b3:      	movq	%rdi, (%rsp)
   2d7b7:      	movl	0xd0(%rsp), %ecx
   2d7be:      	movl	%ecx, 0xc(%rsp)
   2d7c2:      	movq	%rdi, 0x160(%rsp)
   2d7ca:      	movl	%ecx, 0x168(%rsp)
   2d7d1:      	movq	0x20(%rax), %rdi
   2d7d5:      	movq	0x28(%rax), %rax
   2d7d9:      	callq	*0x18(%rax)
   2d7dc:      	movzbl	%al, %edi
   2d7df:      	andl	$0x1, %edi
   2d7e2:      	movq	0xdd1f(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d7e9:      	callq	*%rax
   2d7eb:      	andb	$0x1, %al
   2d7ed:      	movb	%al, 0xde(%rsp)
   2d7f4:      	movb	0xde(%rsp), %al
   2d7fb:      	andb	$0x1, %al
   2d7fd:      	movzbl	%al, %eax
   2d800:      	cmpq	$0x0, %rax
   2d804:      	je	0x2d826 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x736>
   2d806:      	jmp	0x2d864 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x774>
   2d808:      	leaq	0xd049(%rip), %rdi      # 0x3a858 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x258>
   2d80f:      	movq	0xdcfa(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d816:      	callq	*%rax
   2d818:      	andb	$0x1, %al
   2d81a:      	movb	%al, 0x97(%rsp)
   2d821:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d826:      	movq	0x78(%rsp), %rdx
   2d82b:      	movl	0xc(%rsp), %esi
   2d82f:      	movq	(%rsp), %rdi
   2d833:      	callq	0x2cf60 <core::fmt::PostPadding::write::h851a3c73ce096721>
   2d838:      	movzbl	%al, %edi
   2d83b:      	andl	$0x1, %edi
   2d83e:      	movq	0xdcc3(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d845:      	callq	*%rax
   2d847:      	andb	$0x1, %al
   2d849:      	movb	%al, 0xdf(%rsp)
   2d850:      	movb	0xdf(%rsp), %al
   2d857:      	andb	$0x1, %al
   2d859:      	movzbl	%al, %eax
   2d85c:      	cmpq	$0x0, %rax
   2d860:      	je	0x2d882 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x792>
   2d862:      	jmp	0x2d8a2 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x7b2>
   2d864:      	leaq	0xcfd5(%rip), %rdi      # 0x3a840 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x240>
   2d86b:      	movq	0xdc9e(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d872:      	callq	*%rax
   2d874:      	andb	$0x1, %al
   2d876:      	movb	%al, 0x97(%rsp)
   2d87d:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d882:      	movq	0x78(%rsp), %rax
   2d887:      	movb	0x37(%rsp), %cl
   2d88b:      	movl	0x30(%rsp), %edx
   2d88f:      	movl	%edx, 0x30(%rax)
   2d892:      	movb	%cl, 0x38(%rax)
   2d895:      	movb	$0x0, 0x97(%rsp)
   2d89d:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d8a2:      	leaq	0xcf7f(%rip), %rdi      # 0x3a828 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x228>
   2d8a9:      	movq	0xdc60(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d8b0:      	callq	*%rax
   2d8b2:      	andb	$0x1, %al
   2d8b4:      	movb	%al, 0x97(%rsp)
   2d8bb:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d8c0:      	movq	0x68(%rsp), %rdx
   2d8c5:      	movq	0x70(%rsp), %rsi
   2d8ca:      	movq	0x78(%rsp), %rax
   2d8cf:      	movq	0x20(%rax), %rdi
   2d8d3:      	movq	0x28(%rax), %rax
   2d8d7:      	callq	*0x18(%rax)
   2d8da:      	andb	$0x1, %al
   2d8dc:      	movb	%al, 0x97(%rsp)
   2d8e3:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d8e8:      	leaq	0xcf99(%rip), %rdi      # 0x3a888 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x288>
   2d8ef:      	movq	0xdc1a(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d8f6:      	callq	*%rax
   2d8f8:      	andb	$0x1, %al
   2d8fa:      	movb	%al, 0x97(%rsp)
   2d901:      	jmp	0x2d3a7 <core::fmt::Formatter::pad_integral::hc1f128fb0eb8df0a+0x2b7>
   2d906:      	int3
   2d907:      	int3
   2d908:      	int3
   2d909:      	int3
   2d90a:      	int3
   2d90b:      	int3
   2d90c:      	int3
   2d90d:      	int3
   2d90e:      	int3
   2d90f:      	int3

000000000002d910 <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687>:
   2d910:      	subq	$0x48, %rsp
   2d914:      	movq	%rdi, (%rsp)
   2d918:      	movl	%esi, 0xc(%rsp)
   2d91c:      	movq	%rdx, 0x10(%rsp)
   2d921:      	movq	%rcx, 0x18(%rsp)
   2d926:      	movq	%rdi, 0x28(%rsp)
   2d92b:      	movl	$0x1, %eax
   2d930:      	xorl	%ecx, %ecx
   2d932:      	cmpl	$0x110000, 0xc(%rsp)    # imm = 0x110000
   2d93a:      	cmoveq	%rcx, %rax
   2d93e:      	cmpq	$0x1, %rax
   2d942:      	jne	0x2d97f <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687+0x6f>
   2d944:      	movq	(%rsp), %rax
   2d948:      	movl	0xc(%rsp), %esi
   2d94c:      	movl	%esi, 0x34(%rsp)
   2d950:      	movq	0x20(%rax), %rdi
   2d954:      	movq	0x28(%rax), %rax
   2d958:      	callq	*0x20(%rax)
   2d95b:      	movzbl	%al, %edi
   2d95e:      	andl	$0x1, %edi
   2d961:      	movq	0xdba0(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2d968:      	callq	*%rax
   2d96a:      	andb	$0x1, %al
   2d96c:      	movb	%al, 0x27(%rsp)
   2d970:      	movb	0x27(%rsp), %al
   2d974:      	andb	$0x1, %al
   2d976:      	movzbl	%al, %eax
   2d979:      	cmpq	$0x0, %rax
   2d97d:      	jne	0x2d99b <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687+0x8b>
   2d97f:      	movq	0x10(%rsp), %rdx
   2d984:      	movl	$0x1, %eax
   2d989:      	xorl	%ecx, %ecx
   2d98b:      	cmpq	$0x0, %rdx
   2d98f:      	cmoveq	%rcx, %rax
   2d993:      	cmpq	$0x1, %rax
   2d997:      	je	0x2d9bf <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687+0xaf>
   2d999:      	jmp	0x2d9ea <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687+0xda>
   2d99b:      	leaq	0xcefe(%rip), %rdi      # 0x3a8a0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x2a0>
   2d9a2:      	movq	0xdb67(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2d9a9:      	callq	*%rax
   2d9ab:      	andb	$0x1, %al
   2d9ad:      	movb	%al, 0x26(%rsp)
   2d9b1:      	movb	0x26(%rsp), %al
   2d9b5:      	andb	$0x1, %al
   2d9b7:      	movzbl	%al, %eax
   2d9ba:      	addq	$0x48, %rsp
   2d9be:      	retq
   2d9bf:      	movq	(%rsp), %rax
   2d9c3:      	movq	0x10(%rsp), %rsi
   2d9c8:      	movq	0x18(%rsp), %rdx
   2d9cd:      	movq	%rsi, 0x38(%rsp)
   2d9d2:      	movq	%rdx, 0x40(%rsp)
   2d9d7:      	movq	0x20(%rax), %rdi
   2d9db:      	movq	0x28(%rax), %rax
   2d9df:      	callq	*0x18(%rax)
   2d9e2:      	andb	$0x1, %al
   2d9e4:      	movb	%al, 0x26(%rsp)
   2d9e8:      	jmp	0x2d9b1 <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687+0xa1>
   2d9ea:      	movb	$0x0, 0x26(%rsp)
   2d9ef:      	jmp	0x2d9b1 <core::fmt::Formatter::pad_integral::write_prefix::h46b979729bc71687+0xa1>
   2d9f1:      	int3
   2d9f2:      	int3
   2d9f3:      	int3
   2d9f4:      	int3
   2d9f5:      	int3
   2d9f6:      	int3
   2d9f7:      	int3
   2d9f8:      	int3
   2d9f9:      	int3
   2d9fa:      	int3
   2d9fb:      	int3
   2d9fc:      	int3
   2d9fd:      	int3
   2d9fe:      	int3
   2d9ff:      	int3

000000000002da00 <core::fmt::Formatter::pad::he9390e24038c4c0c>:
   2da00:      	subq	$0xf8, %rsp
   2da07:      	movq	%rdi, 0x38(%rsp)
   2da0c:      	movq	%rsi, 0x48(%rsp)
   2da11:      	movq	%rdx, 0x50(%rsp)
   2da16:      	movq	%rdi, 0xc0(%rsp)
   2da1e:      	movq	0xd9f3(%rip), %rax      # 0x3b418 <zlgk82z0l71lvh9+0x3b418>
   2da25:      	callq	*%rax
   2da27:      	testb	$0x1, %al
   2da29:      	jne	0x2da3c <core::fmt::Formatter::pad::he9390e24038c4c0c+0x3c>
   2da2b:      	movq	0x38(%rsp), %rax
   2da30:      	cmpq	$0x1, 0x10(%rax)
   2da35:      	je	0x2da79 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x79>
   2da37:      	jmp	0x2dae2 <core::fmt::Formatter::pad::he9390e24038c4c0c+0xe2>
   2da3c:      	movq	0x38(%rsp), %rdi
   2da41:      	addq	$0x10, %rdi
   2da45:      	movq	0xd9cc(%rip), %rax      # 0x3b418 <zlgk82z0l71lvh9+0x3b418>
   2da4c:      	callq	*%rax
   2da4e:      	testb	$0x1, %al
   2da50:      	jne	0x2da54 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x54>
   2da52:      	jmp	0x2da2b <core::fmt::Formatter::pad::he9390e24038c4c0c+0x2b>
   2da54:      	movq	0x38(%rsp), %rax
   2da59:      	movq	0x20(%rax), %rdi
   2da5d:      	movq	0x28(%rax), %rax
   2da61:      	movq	0x48(%rsp), %rsi
   2da66:      	movq	0x50(%rsp), %rdx
   2da6b:      	callq	*0x18(%rax)
   2da6e:      	andb	$0x1, %al
   2da70:      	movb	%al, 0x5f(%rsp)
   2da74:      	jmp	0x2dbd7 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x1d7>
   2da79:      	movq	0x38(%rsp), %rax
   2da7e:      	movq	0x18(%rax), %rax
   2da82:      	movq	%rax, 0x30(%rsp)
   2da87:      	movq	%rax, 0xc8(%rsp)
   2da8f:      	movq	0x48(%rsp), %rsi
   2da94:      	movq	0x50(%rsp), %rdx
   2da99:      	leaq	0x80(%rsp), %rdi
   2daa1:      	movq	%rdi, 0x28(%rsp)
   2daa6:      	callq	0x2ee80 <core::str::<impl str>::char_indices::h45896e5a0bb7eb31>
   2daab:      	movq	0x28(%rsp), %rdi
   2dab0:      	movq	0x30(%rsp), %rsi
   2dab5:      	movq	0xe21c(%rip), %rax      # 0x3bcd8 <zlgk82z0l71lvh9+0x3bcd8>
   2dabc:      	callq	*%rax
   2dabe:      	movl	%edx, 0x78(%rsp)
   2dac2:      	movq	%rax, 0x70(%rsp)
   2dac7:      	movl	$0x1, %eax
   2dacc:      	xorl	%ecx, %ecx
   2dace:      	cmpl	$0x110000, 0x78(%rsp)   # imm = 0x110000
   2dad6:      	cmoveq	%rcx, %rax
   2dada:      	cmpq	$0x1, %rax
   2dade:      	je	0x2daf8 <core::fmt::Formatter::pad::he9390e24038c4c0c+0xf8>
   2dae0:      	jmp	0x2db4d <core::fmt::Formatter::pad::he9390e24038c4c0c+0x14d>
   2dae2:      	movq	0x48(%rsp), %rcx
   2dae7:      	movq	0x50(%rsp), %rax
   2daec:      	movq	%rcx, 0x60(%rsp)
   2daf1:      	movq	%rax, 0x68(%rsp)
   2daf6:      	jmp	0x2db61 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x161>
   2daf8:      	movq	0x70(%rsp), %rax
   2dafd:      	movq	%rax, 0xd0(%rsp)
   2db05:      	movq	0x48(%rsp), %rdi
   2db0a:      	movq	0x50(%rsp), %rsi
   2db0f:      	movq	%rax, 0x98(%rsp)
   2db17:      	movq	0x98(%rsp), %rdx
   2db1f:      	movq	0xe292(%rip), %rax      # 0x3bdb8 <zlgk82z0l71lvh9+0x3bdb8>
   2db26:      	callq	*%rax
   2db28:      	movq	%rax, %rdi
   2db2b:      	movq	%rdx, %rsi
   2db2e:      	movq	0x48(%rsp), %rdx
   2db33:      	movq	0x50(%rsp), %rcx
   2db38:      	movq	0xdcc9(%rip), %rax      # 0x3b808 <zlgk82z0l71lvh9+0x3b808>
   2db3f:      	callq	*%rax
   2db41:      	movq	%rdx, 0x68(%rsp)
   2db46:      	movq	%rax, 0x60(%rsp)
   2db4b:      	jmp	0x2db61 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x161>
   2db4d:      	movq	0x48(%rsp), %rcx
   2db52:      	movq	0x50(%rsp), %rax
   2db57:      	movq	%rcx, 0x60(%rsp)
   2db5c:      	movq	%rax, 0x68(%rsp)
   2db61:      	movq	0x38(%rsp), %rax
   2db66:      	cmpq	$0x0, (%rax)
   2db6a:      	jne	0x2db8e <core::fmt::Formatter::pad::he9390e24038c4c0c+0x18e>
   2db6c:      	movq	0x38(%rsp), %rax
   2db71:      	movq	0x20(%rax), %rdi
   2db75:      	movq	0x28(%rax), %rax
   2db79:      	movq	0x60(%rsp), %rsi
   2db7e:      	movq	0x68(%rsp), %rdx
   2db83:      	callq	*0x18(%rax)
   2db86:      	andb	$0x1, %al
   2db88:      	movb	%al, 0x5f(%rsp)
   2db8c:      	jmp	0x2dbd7 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x1d7>
   2db8e:      	movq	0x38(%rsp), %rax
   2db93:      	movq	0x8(%rax), %rax
   2db97:      	movq	%rax, 0x18(%rsp)
   2db9c:      	movq	%rax, 0xd8(%rsp)
   2dba4:      	movq	0x60(%rsp), %rdi
   2dba9:      	movq	0x68(%rsp), %rsi
   2dbae:      	callq	0x2ee40 <core::str::<impl str>::chars::hac05c2fcb19a790a>
   2dbb3:      	movq	%rax, %rdi
   2dbb6:      	movq	%rdx, %rsi
   2dbb9:      	callq	0x2b660 <<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::count::h90b6e8d639e5c332>
   2dbbe:      	movq	0x18(%rsp), %rcx
   2dbc3:      	movq	%rax, 0x20(%rsp)
   2dbc8:      	movq	%rax, 0xe0(%rsp)
   2dbd0:      	cmpq	%rcx, %rax
   2dbd3:      	jae	0x2dc11 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x211>
   2dbd5:      	jmp	0x2dbe8 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x1e8>
   2dbd7:      	movb	0x5f(%rsp), %al
   2dbdb:      	andb	$0x1, %al
   2dbdd:      	movzbl	%al, %eax
   2dbe0:      	addq	$0xf8, %rsp
   2dbe7:      	retq
   2dbe8:      	movq	0x18(%rsp), %rax
   2dbed:      	movq	0x20(%rsp), %rcx
   2dbf2:      	movb	$0x0, 0xa7(%rsp)
   2dbfa:      	movq	%rax, %rdx
   2dbfd:      	subq	%rcx, %rdx
   2dc00:      	movq	%rdx, 0x10(%rsp)
   2dc05:      	cmpq	%rcx, %rax
   2dc08:      	setb	%al
   2dc0b:      	testb	$0x1, %al
   2dc0d:      	jne	0x2dc88 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x288>
   2dc0f:      	jmp	0x2dc33 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x233>
   2dc11:      	movq	0x38(%rsp), %rax
   2dc16:      	movq	0x20(%rax), %rdi
   2dc1a:      	movq	0x28(%rax), %rax
   2dc1e:      	movq	0x60(%rsp), %rsi
   2dc23:      	movq	0x68(%rsp), %rdx
   2dc28:      	callq	*0x18(%rax)
   2dc2b:      	andb	$0x1, %al
   2dc2d:      	movb	%al, 0x5f(%rsp)
   2dc31:      	jmp	0x2dbd7 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x1d7>
   2dc33:      	movq	0x10(%rsp), %rsi
   2dc38:      	movq	0x38(%rsp), %rdi
   2dc3d:      	movzbl	0xa7(%rsp), %edx
   2dc45:      	callq	0x2dd70 <core::fmt::Formatter::padding::he8c470903cfc1e6e>
   2dc4a:      	movq	%rax, %rdi
   2dc4d:      	movl	%edx, %esi
   2dc4f:      	movq	0xdc3a(%rip), %rax      # 0x3b890 <zlgk82z0l71lvh9+0x3b890>
   2dc56:      	callq	*%rax
   2dc58:      	movl	%edx, 0xb0(%rsp)
   2dc5f:      	movq	%rax, 0xa8(%rsp)
   2dc67:      	xorl	%eax, %eax
   2dc69:      	movl	$0x1, %ecx
   2dc6e:      	cmpl	$0x110000, 0xb0(%rsp)   # imm = 0x110000
   2dc79:      	cmoveq	%rcx, %rax
   2dc7d:      	cmpq	$0x0, %rax
   2dc81:      	je	0x2dca6 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x2a6>
   2dc83:      	jmp	0x2dd12 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x312>
   2dc88:      	leaq	-0x1ad8f(%rip), %rdi    # 0x12f00 <str.0>
   2dc8f:      	leaq	0xcc22(%rip), %rdx      # 0x3a8b8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x2b8>
   2dc96:      	movq	0xd233(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2dc9d:      	movl	$0x21, %esi
   2dca2:      	callq	*%rax
   2dca4:      	ud2
   2dca6:      	movq	0x38(%rsp), %rax
   2dcab:      	movq	0xa8(%rsp), %rdx
   2dcb3:      	movq	%rdx, (%rsp)
   2dcb7:      	movl	0xb0(%rsp), %ecx
   2dcbe:      	movl	%ecx, 0xc(%rsp)
   2dcc2:      	movq	%rdx, 0xe8(%rsp)
   2dcca:      	movl	%ecx, 0xf0(%rsp)
   2dcd1:      	movq	0x20(%rax), %rdi
   2dcd5:      	movq	0x28(%rax), %rax
   2dcd9:      	movq	0x60(%rsp), %rsi
   2dcde:      	movq	0x68(%rsp), %rdx
   2dce3:      	callq	*0x18(%rax)
   2dce6:      	movzbl	%al, %edi
   2dce9:      	andl	$0x1, %edi
   2dcec:      	movq	0xd815(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2dcf3:      	callq	*%rax
   2dcf5:      	andb	$0x1, %al
   2dcf7:      	movb	%al, 0xbf(%rsp)
   2dcfe:      	movb	0xbf(%rsp), %al
   2dd05:      	andb	$0x1, %al
   2dd07:      	movzbl	%al, %eax
   2dd0a:      	cmpq	$0x0, %rax
   2dd0e:      	je	0x2dd2d <core::fmt::Formatter::pad::he9390e24038c4c0c+0x32d>
   2dd10:      	jmp	0x2dd4a <core::fmt::Formatter::pad::he9390e24038c4c0c+0x34a>
   2dd12:      	leaq	0xcbcf(%rip), %rdi      # 0x3a8e8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x2e8>
   2dd19:      	movq	0xd7f0(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2dd20:      	callq	*%rax
   2dd22:      	andb	$0x1, %al
   2dd24:      	movb	%al, 0x5f(%rsp)
   2dd28:      	jmp	0x2dbd7 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x1d7>
   2dd2d:      	movq	0x38(%rsp), %rdx
   2dd32:      	movl	0xc(%rsp), %esi
   2dd36:      	movq	(%rsp), %rdi
   2dd3a:      	callq	0x2cf60 <core::fmt::PostPadding::write::h851a3c73ce096721>
   2dd3f:      	andb	$0x1, %al
   2dd41:      	movb	%al, 0x5f(%rsp)
   2dd45:      	jmp	0x2dbd7 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x1d7>
   2dd4a:      	leaq	0xcb7f(%rip), %rdi      # 0x3a8d0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x2d0>
   2dd51:      	movq	0xd7b8(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2dd58:      	callq	*%rax
   2dd5a:      	andb	$0x1, %al
   2dd5c:      	movb	%al, 0x5f(%rsp)
   2dd60:      	jmp	0x2dbd7 <core::fmt::Formatter::pad::he9390e24038c4c0c+0x1d7>
   2dd65:      	int3
   2dd66:      	int3
   2dd67:      	int3
   2dd68:      	int3
   2dd69:      	int3
   2dd6a:      	int3
   2dd6b:      	int3
   2dd6c:      	int3
   2dd6d:      	int3
   2dd6e:      	int3
   2dd6f:      	int3

000000000002dd70 <core::fmt::Formatter::padding::he8c470903cfc1e6e>:
   2dd70:      	subq	$0xd8, %rsp
   2dd77:      	movq	%rsi, 0x28(%rsp)
   2dd7c:      	movq	%rdi, 0x30(%rsp)
   2dd81:      	movb	%dl, %al
   2dd83:      	movb	%al, 0x3f(%rsp)
   2dd87:      	movq	%rdi, 0xb0(%rsp)
   2dd8f:      	movq	%rsi, 0xb8(%rsp)
   2dd97:      	movb	%al, 0xc7(%rsp)
   2dd9e:      	movzbl	0x38(%rdi), %eax
   2dda2:      	movq	%rax, 0x40(%rsp)
   2dda7:      	movq	0x40(%rsp), %rax
   2ddac:      	leaq	-0x1aec7(%rip), %rcx    # 0x12eec <str.1+0x4dc>
   2ddb3:      	movslq	(%rcx,%rax,4), %rax
   2ddb7:      	addq	%rcx, %rax
   2ddba:      	jmpq	*%rax
   2ddbc:      	ud2
   2ddbe:      	movb	$0x0, 0x67(%rsp)
   2ddc3:      	jmp	0x2dddb <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x6b>
   2ddc5:      	movb	$0x1, 0x67(%rsp)
   2ddca:      	jmp	0x2dddb <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x6b>
   2ddcc:      	movb	$0x2, 0x67(%rsp)
   2ddd1:      	jmp	0x2dddb <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x6b>
   2ddd3:      	movb	0x3f(%rsp), %al
   2ddd7:      	movb	%al, 0x67(%rsp)
   2dddb:      	movzbl	0x67(%rsp), %eax
   2dde0:      	movq	%rax, 0x20(%rsp)
   2dde5:      	testq	%rax, %rax
   2dde8:      	je	0x2ddfb <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x8b>
   2ddea:      	jmp	0x2ddec <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x7c>
   2ddec:      	movq	0x20(%rsp), %rax
   2ddf1:      	subq	$0x1, %rax
   2ddf5:      	je	0x2de10 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0xa0>
   2ddf7:      	jmp	0x2ddf9 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x89>
   2ddf9:      	jmp	0x2de25 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0xb5>
   2ddfb:      	movq	0x28(%rsp), %rax
   2de00:      	movq	$0x0, 0x68(%rsp)
   2de09:      	movq	%rax, 0x70(%rsp)
   2de0e:      	jmp	0x2de47 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0xd7>
   2de10:      	movq	0x28(%rsp), %rax
   2de15:      	movq	%rax, 0x68(%rsp)
   2de1a:      	movq	$0x0, 0x70(%rsp)
   2de23:      	jmp	0x2de47 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0xd7>
   2de25:      	movq	0x28(%rsp), %rax
   2de2a:      	movq	%rax, %rcx
   2de2d:      	shrq	%rcx
   2de30:      	movq	%rcx, 0x10(%rsp)
   2de35:      	addq	$0x1, %rax
   2de39:      	movq	%rax, 0x18(%rsp)
   2de3e:      	setb	%al
   2de41:      	testb	$0x1, %al
   2de43:      	jne	0x2deb8 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x148>
   2de45:      	jmp	0x2de9f <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x12f>
   2de47:      	movq	0x68(%rsp), %rax
   2de4c:      	movq	%rax, 0xc8(%rsp)
   2de54:      	movq	0x70(%rsp), %rcx
   2de59:      	movq	%rcx, 0x8(%rsp)
   2de5e:      	movq	%rcx, 0xd0(%rsp)
   2de66:      	movq	$0x0, 0x78(%rsp)
   2de6f:      	movq	%rax, 0x80(%rsp)
   2de77:      	movq	0x78(%rsp), %rdi
   2de7c:      	movq	0x80(%rsp), %rsi
   2de84:      	movq	0xd4e5(%rip), %rax      # 0x3b370 <zlgk82z0l71lvh9+0x3b370>
   2de8b:      	callq	*%rax
   2de8d:      	movq	%rax, 0x88(%rsp)
   2de95:      	movq	%rdx, 0x90(%rsp)
   2de9d:      	jmp	0x2ded6 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x166>
   2de9f:      	movq	0x10(%rsp), %rcx
   2dea4:      	movq	0x18(%rsp), %rax
   2dea9:      	shrq	%rax
   2deac:      	movq	%rcx, 0x68(%rsp)
   2deb1:      	movq	%rax, 0x70(%rsp)
   2deb6:      	jmp	0x2de47 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0xd7>
   2deb8:      	leaq	-0x1af8f(%rip), %rdi    # 0x12f30 <str.1>
   2debf:      	leaq	0xca3a(%rip), %rdx      # 0x3a900 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x300>
   2dec6:      	movq	0xd003(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2decd:      	movl	$0x1c, %esi
   2ded2:      	callq	*%rax
   2ded4:      	ud2
   2ded6:      	movq	0xd49b(%rip), %rax      # 0x3b378 <zlgk82z0l71lvh9+0x3b378>
   2dedd:      	leaq	0x88(%rsp), %rdi
   2dee5:      	callq	*%rax
   2dee7:      	movq	%rdx, 0xa0(%rsp)
   2deef:      	movq	%rax, 0x98(%rsp)
   2def7:      	cmpq	$0x0, 0x98(%rsp)
   2df00:      	jne	0x2df1f <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x1af>
   2df02:      	movq	0x8(%rsp), %rsi
   2df07:      	movq	0x30(%rsp), %rax
   2df0c:      	movl	0x30(%rax), %edi
   2df0f:      	callq	0x2cf30 <core::fmt::PostPadding::new::h28d2783a0ba850c4>
   2df14:      	movq	%rax, 0x50(%rsp)
   2df19:      	movl	%edx, 0x58(%rsp)
   2df1d:      	jmp	0x2df62 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x1f2>
   2df1f:      	movq	0x30(%rsp), %rcx
   2df24:      	movq	0x20(%rcx), %rdi
   2df28:      	movq	0x28(%rcx), %rax
   2df2c:      	movl	0x30(%rcx), %esi
   2df2f:      	callq	*0x20(%rax)
   2df32:      	movzbl	%al, %edi
   2df35:      	andl	$0x1, %edi
   2df38:      	movq	0xd5c9(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2df3f:      	callq	*%rax
   2df41:      	andb	$0x1, %al
   2df43:      	movb	%al, 0xaf(%rsp)
   2df4a:      	movb	0xaf(%rsp), %al
   2df51:      	andb	$0x1, %al
   2df53:      	movzbl	%al, %eax
   2df56:      	cmpq	$0x0, %rax
   2df5a:      	je	0x2ded6 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x166>
   2df60:      	jmp	0x2df73 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x203>
   2df62:      	movq	0x50(%rsp), %rax
   2df67:      	movl	0x58(%rsp), %edx
   2df6b:      	addq	$0xd8, %rsp
   2df72:      	retq
   2df73:      	leaq	0xc99e(%rip), %rdi      # 0x3a918 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x318>
   2df7a:      	movq	0xd917(%rip), %rax      # 0x3b898 <zlgk82z0l71lvh9+0x3b898>
   2df81:      	callq	*%rax
   2df83:      	movl	%edx, 0x58(%rsp)
   2df87:      	movq	%rax, 0x50(%rsp)
   2df8c:      	jmp	0x2df62 <core::fmt::Formatter::padding::he8c470903cfc1e6e+0x1f2>
   2df8e:      	int3
   2df8f:      	int3

000000000002df90 <core::fmt::Formatter::write_str::h5966a17960d309cb>:
   2df90:      	subq	$0x18, %rsp
   2df94:      	movq	%rdi, %rax
   2df97:      	movq	%rax, (%rsp)
   2df9b:      	movq	%rsi, 0x8(%rsp)
   2dfa0:      	movq	%rdx, 0x10(%rsp)
   2dfa5:      	movq	0x20(%rax), %rdi
   2dfa9:      	movq	0x28(%rax), %rax
   2dfad:      	callq	*0x18(%rax)
   2dfb0:      	andb	$0x1, %al
   2dfb2:      	movzbl	%al, %eax
   2dfb5:      	addq	$0x18, %rsp
   2dfb9:      	retq
   2dfba:      	int3
   2dfbb:      	int3
   2dfbc:      	int3
   2dfbd:      	int3
   2dfbe:      	int3
   2dfbf:      	int3

000000000002dfc0 <core::fmt::Formatter::sign_plus::ha323b3369fad1c9f>:
   2dfc0:      	pushq	%rax
   2dfc1:      	movq	%rdi, (%rsp)
   2dfc5:      	movl	0x34(%rdi), %eax
   2dfc8:      	andl	$0x1, %eax
   2dfcb:      	cmpl	$0x0, %eax
   2dfce:      	setne	%al
   2dfd1:      	andb	$0x1, %al
   2dfd3:      	movzbl	%al, %eax
   2dfd6:      	popq	%rcx
   2dfd7:      	retq
   2dfd8:      	int3
   2dfd9:      	int3
   2dfda:      	int3
   2dfdb:      	int3
   2dfdc:      	int3
   2dfdd:      	int3
   2dfde:      	int3
   2dfdf:      	int3

000000000002dfe0 <core::fmt::Formatter::alternate::h9ceb8d7ce41c6fa3>:
   2dfe0:      	pushq	%rax
   2dfe1:      	movq	%rdi, (%rsp)
   2dfe5:      	movl	0x34(%rdi), %eax
   2dfe8:      	andl	$0x4, %eax
   2dfeb:      	cmpl	$0x0, %eax
   2dfee:      	setne	%al
   2dff1:      	andb	$0x1, %al
   2dff3:      	movzbl	%al, %eax
   2dff6:      	popq	%rcx
   2dff7:      	retq
   2dff8:      	int3
   2dff9:      	int3
   2dffa:      	int3
   2dffb:      	int3
   2dffc:      	int3
   2dffd:      	int3
   2dffe:      	int3
   2dfff:      	int3

000000000002e000 <core::fmt::Formatter::sign_aware_zero_pad::hb60ee45c0f96bf1b>:
   2e000:      	pushq	%rax
   2e001:      	movq	%rdi, (%rsp)
   2e005:      	movl	0x34(%rdi), %eax
   2e008:      	andl	$0x8, %eax
   2e00b:      	cmpl	$0x0, %eax
   2e00e:      	setne	%al
   2e011:      	andb	$0x1, %al
   2e013:      	movzbl	%al, %eax
   2e016:      	popq	%rcx
   2e017:      	retq
   2e018:      	int3
   2e019:      	int3
   2e01a:      	int3
   2e01b:      	int3
   2e01c:      	int3
   2e01d:      	int3
   2e01e:      	int3
   2e01f:      	int3

000000000002e020 <core::fmt::Formatter::debug_lower_hex::had957b44e419f0f0>:
   2e020:      	pushq	%rax
   2e021:      	movq	%rdi, (%rsp)
   2e025:      	movl	0x34(%rdi), %eax
   2e028:      	andl	$0x10, %eax
   2e02b:      	cmpl	$0x0, %eax
   2e02e:      	setne	%al
   2e031:      	andb	$0x1, %al
   2e033:      	movzbl	%al, %eax
   2e036:      	popq	%rcx
   2e037:      	retq
   2e038:      	int3
   2e039:      	int3
   2e03a:      	int3
   2e03b:      	int3
   2e03c:      	int3
   2e03d:      	int3
   2e03e:      	int3
   2e03f:      	int3

000000000002e040 <core::fmt::Formatter::debug_upper_hex::h9ee68ec0b3ad12b4>:
   2e040:      	pushq	%rax
   2e041:      	movq	%rdi, (%rsp)
   2e045:      	movl	0x34(%rdi), %eax
   2e048:      	andl	$0x20, %eax
   2e04b:      	cmpl	$0x0, %eax
   2e04e:      	setne	%al
   2e051:      	andb	$0x1, %al
   2e053:      	movzbl	%al, %eax
   2e056:      	popq	%rcx
   2e057:      	retq
   2e058:      	int3
   2e059:      	int3
   2e05a:      	int3
   2e05b:      	int3
   2e05c:      	int3
   2e05d:      	int3
   2e05e:      	int3
   2e05f:      	int3

000000000002e060 <core::fmt::Formatter::debug_struct_field1_finish::hee321e6fb0a7fc5b>:
   2e060:      	subq	$0x68, %rsp
   2e064:      	movq	%r9, 0x10(%rsp)
   2e069:      	movq	%r8, 0x8(%rsp)
   2e06e:      	movq	%rcx, (%rsp)
   2e072:      	movq	%rdx, %rcx
   2e075:      	movq	%rsi, %rdx
   2e078:      	movq	%rdi, %rsi
   2e07b:      	movq	(%rsp), %rdi
   2e07f:      	movq	0x70(%rsp), %rax
   2e084:      	movq	%rax, 0x18(%rsp)
   2e089:      	movq	%rsi, 0x30(%rsp)
   2e08e:      	movq	%rdx, 0x38(%rsp)
   2e093:      	movq	%rcx, 0x40(%rsp)
   2e098:      	movq	%rdi, 0x48(%rsp)
   2e09d:      	movq	%r8, 0x50(%rsp)
   2e0a2:      	movq	%r9, 0x58(%rsp)
   2e0a7:      	movq	%rax, 0x60(%rsp)
   2e0ac:      	leaq	0x20(%rsp), %rdi
   2e0b1:      	callq	0x2ffc0 <core::fmt::builders::debug_struct_new::h549cd91b3c959628>
   2e0b6:      	movq	(%rsp), %rsi
   2e0ba:      	movq	0x8(%rsp), %rdx
   2e0bf:      	movq	0x10(%rsp), %rcx
   2e0c4:      	movq	0x18(%rsp), %r8
   2e0c9:      	movq	0xd508(%rip), %rax      # 0x3b5d8 <zlgk82z0l71lvh9+0x3b5d8>
   2e0d0:      	leaq	0x20(%rsp), %rdi
   2e0d5:      	callq	*%rax
   2e0d7:      	movq	0xd502(%rip), %rax      # 0x3b5e0 <zlgk82z0l71lvh9+0x3b5e0>
   2e0de:      	leaq	0x20(%rsp), %rdi
   2e0e3:      	callq	*%rax
   2e0e5:      	andb	$0x1, %al
   2e0e7:      	movzbl	%al, %eax
   2e0ea:      	addq	$0x68, %rsp
   2e0ee:      	retq
   2e0ef:      	int3

000000000002e0f0 <core::fmt::Formatter::debug_struct_field3_finish::h4187bafbe9465162>:
   2e0f0:      	pushq	%rbp
   2e0f1:      	pushq	%r15
   2e0f3:      	pushq	%r14
   2e0f5:      	pushq	%r13
   2e0f7:      	pushq	%r12
   2e0f9:      	pushq	%rbx
   2e0fa:      	subq	$0xe8, %rsp
   2e101:      	movq	%r9, %r12
   2e104:      	movq	%r12, 0x10(%rsp)
   2e109:      	movq	%r8, %r13
   2e10c:      	movq	%r13, 0x8(%rsp)
   2e111:      	movq	%rcx, %rbp
   2e114:      	movq	%rbp, (%rsp)
   2e118:      	movq	%rdx, %rcx
   2e11b:      	movq	%rsi, %rdx
   2e11e:      	movq	%rdi, %rsi
   2e121:      	movq	0x160(%rsp), %rax
   2e129:      	movq	%rax, 0x58(%rsp)
   2e12e:      	movq	0x158(%rsp), %rdi
   2e136:      	movq	%rdi, 0x50(%rsp)
   2e13b:      	movq	0x150(%rsp), %r8
   2e143:      	movq	%r8, 0x48(%rsp)
   2e148:      	movq	0x148(%rsp), %r9
   2e150:      	movq	%r9, 0x40(%rsp)
   2e155:      	movq	0x140(%rsp), %r10
   2e15d:      	movq	%r10, 0x38(%rsp)
   2e162:      	movq	0x138(%rsp), %r11
   2e16a:      	movq	%r11, 0x30(%rsp)
   2e16f:      	movq	0x130(%rsp), %rbx
   2e177:      	movq	%rbx, 0x28(%rsp)
   2e17c:      	movq	0x128(%rsp), %r14
   2e184:      	movq	%r14, 0x20(%rsp)
   2e189:      	movq	0x120(%rsp), %r15
   2e191:      	movq	%r15, 0x18(%rsp)
   2e196:      	movq	%rsi, 0x70(%rsp)
   2e19b:      	movq	%rdx, 0x78(%rsp)
   2e1a0:      	movq	%rcx, 0x80(%rsp)
   2e1a8:      	movq	%rbp, 0x88(%rsp)
   2e1b0:      	movq	%r13, 0x90(%rsp)
   2e1b8:      	movq	%r12, 0x98(%rsp)
   2e1c0:      	movq	%r15, 0xa0(%rsp)
   2e1c8:      	movq	%r14, 0xa8(%rsp)
   2e1d0:      	movq	%rbx, 0xb0(%rsp)
   2e1d8:      	movq	%r11, 0xb8(%rsp)
   2e1e0:      	movq	%r10, 0xc0(%rsp)
   2e1e8:      	movq	%r9, 0xc8(%rsp)
   2e1f0:      	movq	%r8, 0xd0(%rsp)
   2e1f8:      	movq	%rdi, 0xd8(%rsp)
   2e200:      	movq	%rax, 0xe0(%rsp)
   2e208:      	leaq	0x60(%rsp), %rdi
   2e20d:      	callq	0x2ffc0 <core::fmt::builders::debug_struct_new::h549cd91b3c959628>
   2e212:      	movq	(%rsp), %rsi
   2e216:      	movq	0x8(%rsp), %rdx
   2e21b:      	movq	0x10(%rsp), %rcx
   2e220:      	movq	0x18(%rsp), %r8
   2e225:      	movq	0xd3ac(%rip), %rax      # 0x3b5d8 <zlgk82z0l71lvh9+0x3b5d8>
   2e22c:      	leaq	0x60(%rsp), %rdi
   2e231:      	callq	*%rax
   2e233:      	movq	0x20(%rsp), %rsi
   2e238:      	movq	0x28(%rsp), %rdx
   2e23d:      	movq	0x30(%rsp), %rcx
   2e242:      	movq	0x38(%rsp), %r8
   2e247:      	movq	0xd38a(%rip), %rax      # 0x3b5d8 <zlgk82z0l71lvh9+0x3b5d8>
   2e24e:      	leaq	0x60(%rsp), %rdi
   2e253:      	callq	*%rax
   2e255:      	movq	0x40(%rsp), %rsi
   2e25a:      	movq	0x48(%rsp), %rdx
   2e25f:      	movq	0x50(%rsp), %rcx
   2e264:      	movq	0x58(%rsp), %r8
   2e269:      	movq	0xd368(%rip), %rax      # 0x3b5d8 <zlgk82z0l71lvh9+0x3b5d8>
   2e270:      	leaq	0x60(%rsp), %rdi
   2e275:      	callq	*%rax
   2e277:      	movq	0xd362(%rip), %rax      # 0x3b5e0 <zlgk82z0l71lvh9+0x3b5e0>
   2e27e:      	leaq	0x60(%rsp), %rdi
   2e283:      	callq	*%rax
   2e285:      	andb	$0x1, %al
   2e287:      	movzbl	%al, %eax
   2e28a:      	addq	$0xe8, %rsp
   2e291:      	popq	%rbx
   2e292:      	popq	%r12
   2e294:      	popq	%r13
   2e296:      	popq	%r14
   2e298:      	popq	%r15
   2e29a:      	popq	%rbp
   2e29b:      	retq
   2e29c:      	int3
   2e29d:      	int3
   2e29e:      	int3
   2e29f:      	int3

000000000002e2a0 <core::fmt::Formatter::debug_tuple_field1_finish::hb1a70e4dde736734>:
   2e2a0:      	subq	$0x58, %rsp
   2e2a4:      	movq	%r8, 0x10(%rsp)
   2e2a9:      	movq	%rcx, %rax
   2e2ac:      	movq	%rax, 0x8(%rsp)
   2e2b1:      	movq	%rdx, %rcx
   2e2b4:      	movq	%rsi, %rdx
   2e2b7:      	movq	%rdi, %rsi
   2e2ba:      	movq	%rsi, 0x30(%rsp)
   2e2bf:      	movq	%rdx, 0x38(%rsp)
   2e2c4:      	movq	%rcx, 0x40(%rsp)
   2e2c9:      	movq	%rax, 0x48(%rsp)
   2e2ce:      	movq	%r8, 0x50(%rsp)
   2e2d3:      	leaq	0x18(%rsp), %rdi
   2e2d8:      	callq	0x30540 <core::fmt::builders::debug_tuple_new::h3435392deb24360c>
   2e2dd:      	movq	0x8(%rsp), %rsi
   2e2e2:      	movq	0x10(%rsp), %rdx
   2e2e7:      	movq	0xd392(%rip), %rax      # 0x3b680 <zlgk82z0l71lvh9+0x3b680>
   2e2ee:      	leaq	0x18(%rsp), %rdi
   2e2f3:      	callq	*%rax
   2e2f5:      	movq	0xd38c(%rip), %rax      # 0x3b688 <zlgk82z0l71lvh9+0x3b688>
   2e2fc:      	leaq	0x18(%rsp), %rdi
   2e301:      	callq	*%rax
   2e303:      	andb	$0x1, %al
   2e305:      	movzbl	%al, %eax
   2e308:      	addq	$0x58, %rsp
   2e30c:      	retq
   2e30d:      	int3
   2e30e:      	int3
   2e30f:      	int3

000000000002e310 <<str as core::fmt::Display>::fmt::h7c56097523e1d1c3>:
   2e310:      	subq	$0x28, %rsp
   2e314:      	movq	%rdx, 0x8(%rsp)
   2e319:      	movq	%rsi, %rdx
   2e31c:      	movq	%rdi, %rsi
   2e31f:      	movq	0x8(%rsp), %rdi
   2e324:      	movq	%rsi, 0x10(%rsp)
   2e329:      	movq	%rdx, 0x18(%rsp)
   2e32e:      	movq	%rdi, 0x20(%rsp)
   2e333:      	movq	0xd20e(%rip), %rax      # 0x3b548 <zlgk82z0l71lvh9+0x3b548>
   2e33a:      	callq	*%rax
   2e33c:      	andb	$0x1, %al
   2e33e:      	movzbl	%al, %eax
   2e341:      	addq	$0x28, %rsp
   2e345:      	retq
   2e346:      	int3
   2e347:      	int3
   2e348:      	int3
   2e349:      	int3
   2e34a:      	int3
   2e34b:      	int3
   2e34c:      	int3
   2e34d:      	int3
   2e34e:      	int3
   2e34f:      	int3

000000000002e350 <core::fmt::pointer_fmt_inner::h023399a0028b5a17>:
   2e350:      	subq	$0x68, %rsp
   2e354:      	movq	%rsi, 0x10(%rsp)
   2e359:      	movq	%rdi, %rax
   2e35c:      	movq	0x10(%rsp), %rdi
   2e361:      	movq	%rax, 0x30(%rsp)
   2e366:      	movq	%rdi, 0x48(%rsp)
   2e36b:      	movq	(%rdi), %rcx
   2e36e:      	movq	%rcx, 0x18(%rsp)
   2e373:      	movq	0x8(%rdi), %rax
   2e377:      	movq	%rax, 0x20(%rsp)
   2e37c:      	movq	%rcx, 0x50(%rsp)
   2e381:      	movq	%rax, 0x58(%rsp)
   2e386:      	movl	0x34(%rdi), %eax
   2e389:      	movl	%eax, 0x2c(%rsp)
   2e38d:      	movl	%eax, 0x60(%rsp)
   2e391:      	movq	0xda10(%rip), %rax      # 0x3bda8 <zlgk82z0l71lvh9+0x3bda8>
   2e398:      	callq	*%rax
   2e39a:      	testb	$0x1, %al
   2e39c:      	jne	0x2e3ed <core::fmt::pointer_fmt_inner::h023399a0028b5a17+0x9d>
   2e39e:      	movq	0x10(%rsp), %rsi
   2e3a3:      	movl	0x34(%rsi), %eax
   2e3a6:      	orl	$0x4, %eax
   2e3a9:      	movl	%eax, 0x34(%rsi)
   2e3ac:      	movq	0xd1ed(%rip), %rax      # 0x3b5a0 <zlgk82z0l71lvh9+0x3b5a0>
   2e3b3:      	leaq	0x30(%rsp), %rdi
   2e3b8:      	callq	*%rax
   2e3ba:      	movq	0x18(%rsp), %rdi
   2e3bf:      	movq	0x20(%rsp), %rsi
   2e3c4:      	movl	0x2c(%rsp), %edx
   2e3c8:      	movq	0x10(%rsp), %rcx
   2e3cd:      	movb	%al, %r8b
   2e3d0:      	andb	$0x1, %r8b
   2e3d4:      	movb	%r8b, 0x67(%rsp)
   2e3d9:      	movq	%rdi, (%rcx)
   2e3dc:      	movq	%rsi, 0x8(%rcx)
   2e3e0:      	movl	%edx, 0x34(%rcx)
   2e3e3:      	andb	$0x1, %al
   2e3e5:      	movzbl	%al, %eax
   2e3e8:      	addq	$0x68, %rsp
   2e3ec:      	retq
   2e3ed:      	movq	0x10(%rsp), %rdi
   2e3f2:      	movl	0x34(%rdi), %eax
   2e3f5:      	orl	$0x8, %eax
   2e3f8:      	movl	%eax, 0x34(%rdi)
   2e3fb:      	movq	0xd016(%rip), %rax      # 0x3b418 <zlgk82z0l71lvh9+0x3b418>
   2e402:      	callq	*%rax
   2e404:      	testb	$0x1, %al
   2e406:      	jne	0x2e40a <core::fmt::pointer_fmt_inner::h023399a0028b5a17+0xba>
   2e408:      	jmp	0x2e39e <core::fmt::pointer_fmt_inner::h023399a0028b5a17+0x4e>
   2e40a:      	movl	$0x10, %eax
   2e40f:      	addq	$0x2, %rax
   2e413:      	movq	%rax, 0x8(%rsp)
   2e418:      	setb	%al
   2e41b:      	testb	$0x1, %al
   2e41d:      	jne	0x2e44d <core::fmt::pointer_fmt_inner::h023399a0028b5a17+0xfd>
   2e41f:      	movq	0x10(%rsp), %rax
   2e424:      	movq	0x8(%rsp), %rcx
   2e429:      	movq	%rcx, 0x40(%rsp)
   2e42e:      	movq	$0x1, 0x38(%rsp)
   2e437:      	movq	0x38(%rsp), %rdx
   2e43c:      	movq	0x40(%rsp), %rcx
   2e441:      	movq	%rdx, (%rax)
   2e444:      	movq	%rcx, 0x8(%rax)
   2e448:      	jmp	0x2e39e <core::fmt::pointer_fmt_inner::h023399a0028b5a17+0x4e>
   2e44d:      	leaq	-0x1b524(%rip), %rdi    # 0x12f30 <str.1>
   2e454:      	leaq	0xc4d5(%rip), %rdx      # 0x3a930 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x330>
   2e45b:      	movq	0xca6e(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2e462:      	movl	$0x1c, %esi
   2e467:      	callq	*%rax
   2e469:      	ud2
   2e46b:      	int3
   2e46c:      	int3
   2e46d:      	int3
   2e46e:      	int3
   2e46f:      	int3

000000000002e470 <<() as core::fmt::Debug>::fmt::h31ab3df901292eff>:
   2e470:      	subq	$0x18, %rsp
   2e474:      	movq	%rsi, (%rsp)
   2e478:      	movq	%rdi, %rax
   2e47b:      	movq	(%rsp), %rdi
   2e47f:      	movq	%rax, 0x8(%rsp)
   2e484:      	movq	%rdi, 0x10(%rsp)
   2e489:      	leaq	-0x1b491(%rip), %rsi    # 0x12fff <str.1+0xcf>
   2e490:      	movq	0xd0b1(%rip), %rax      # 0x3b548 <zlgk82z0l71lvh9+0x3b548>
   2e497:      	movl	$0x2, %edx
   2e49c:      	callq	*%rax
   2e49e:      	andb	$0x1, %al
   2e4a0:      	movzbl	%al, %eax
   2e4a3:      	addq	$0x18, %rsp
   2e4a7:      	retq
   2e4a8:      	int3
   2e4a9:      	int3
   2e4aa:      	int3
   2e4ab:      	int3
   2e4ac:      	int3
   2e4ad:      	int3
   2e4ae:      	int3
   2e4af:      	int3

000000000002e4b0 <core::str::count::count_chars::hef3e3a51fbb574f7>:
   2e4b0:      	subq	$0x48, %rsp
   2e4b4:      	movq	%rsi, (%rsp)
   2e4b8:      	movq	%rdi, 0x8(%rsp)
   2e4bd:      	movq	%rdi, 0x28(%rsp)
   2e4c2:      	movq	%rsi, 0x30(%rsp)
   2e4c7:      	callq	0x2ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>
   2e4cc:      	movq	%rax, 0x10(%rsp)
   2e4d1:      	movl	$0x8, %eax
   2e4d6:      	movl	$0x4, %ecx
   2e4db:      	mulq	%rcx
   2e4de:      	movq	%rax, 0x18(%rsp)
   2e4e3:      	seto	%al
   2e4e6:      	testb	$0x1, %al
   2e4e8:      	jne	0x2e4fb <core::str::count::count_chars::hef3e3a51fbb574f7+0x4b>
   2e4ea:      	movq	0x10(%rsp), %rax
   2e4ef:      	movq	0x18(%rsp), %rcx
   2e4f4:      	cmpq	%rcx, %rax
   2e4f7:      	jb	0x2e532 <core::str::count::count_chars::hef3e3a51fbb574f7+0x82>
   2e4f9:      	jmp	0x2e519 <core::str::count::count_chars::hef3e3a51fbb574f7+0x69>
   2e4fb:      	leaq	-0x1b482(%rip), %rdi    # 0x13080 <str.2>
   2e502:      	leaq	0xc43f(%rip), %rdx      # 0x3a948 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x348>
   2e509:      	movq	0xc9c0(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2e510:      	movl	$0x21, %esi
   2e515:      	callq	*%rax
   2e517:      	ud2
   2e519:      	movq	(%rsp), %rsi
   2e51d:      	movq	0x8(%rsp), %rdi
   2e522:      	movq	0xd897(%rip), %rax      # 0x3bdc0 <zlgk82z0l71lvh9+0x3bdc0>
   2e529:      	callq	*%rax
   2e52b:      	movq	%rax, 0x20(%rsp)
   2e530:      	jmp	0x2e553 <core::str::count::count_chars::hef3e3a51fbb574f7+0xa3>
   2e532:      	movq	0x8(%rsp), %rdi
   2e537:      	movq	(%rsp), %rsi
   2e53b:      	movq	%rdi, 0x38(%rsp)
   2e540:      	movq	%rsi, 0x40(%rsp)
   2e545:      	movq	0xd87c(%rip), %rax      # 0x3bdc8 <zlgk82z0l71lvh9+0x3bdc8>
   2e54c:      	callq	*%rax
   2e54e:      	movq	%rax, 0x20(%rsp)
   2e553:      	movq	0x20(%rsp), %rax
   2e558:      	addq	$0x48, %rsp
   2e55c:      	retq
   2e55d:      	int3
   2e55e:      	int3
   2e55f:      	int3

000000000002e560 <core::str::count::do_count_chars::he4c508157f6693c1>:
   2e560:      	subq	$0x248, %rsp            # imm = 0x248
   2e567:      	movq	%rsi, %rdx
   2e56a:      	movq	%rdx, 0x40(%rsp)
   2e56f:      	movq	%rdi, %rsi
   2e572:      	movq	%rsi, 0x48(%rsp)
   2e577:      	movq	%rsi, 0x198(%rsp)
   2e57f:      	movq	%rdx, 0x1a0(%rsp)
   2e587:      	movq	%rsi, 0x238(%rsp)
   2e58f:      	movq	%rdx, 0x240(%rsp)
   2e597:      	movq	0xd58a(%rip), %rax      # 0x3bb28 <zlgk82z0l71lvh9+0x3bb28>
   2e59e:      	leaq	0x88(%rsp), %rdi
   2e5a6:      	callq	*%rax
   2e5a8:      	movq	0x88(%rsp), %rcx
   2e5b0:      	movq	%rcx, 0x50(%rsp)
   2e5b5:      	movq	0x90(%rsp), %rax
   2e5bd:      	movq	%rax, 0x58(%rsp)
   2e5c2:      	movq	%rcx, 0x1a8(%rsp)
   2e5ca:      	movq	%rax, 0x1b0(%rsp)
   2e5d2:      	movq	0x98(%rsp), %rdi
   2e5da:      	movq	%rdi, 0x60(%rsp)
   2e5df:      	movq	0xa0(%rsp), %rsi
   2e5e7:      	movq	%rsi, 0x68(%rsp)
   2e5ec:      	movq	%rdi, 0x1b8(%rsp)
   2e5f4:      	movq	%rsi, 0x1c0(%rsp)
   2e5fc:      	movq	0xa8(%rsp), %rcx
   2e604:      	movq	%rcx, 0x70(%rsp)
   2e609:      	movq	0xb0(%rsp), %rax
   2e611:      	movq	%rax, 0x78(%rsp)
   2e616:      	movq	%rcx, 0x1c8(%rsp)
   2e61e:      	movq	%rax, 0x1d0(%rsp)
   2e626:      	movq	0xd453(%rip), %rax      # 0x3ba80 <zlgk82z0l71lvh9+0x3ba80>
   2e62d:      	callq	*%rax
   2e62f:      	testb	$0x1, %al
   2e631:      	jne	0x2e63e <core::str::count::do_count_chars::he4c508157f6693c1+0xde>
   2e633:      	movq	0x58(%rsp), %rax
   2e638:      	cmpq	$0x8, %rax
   2e63c:      	jbe	0x2e648 <core::str::count::do_count_chars::he4c508157f6693c1+0xe8>
   2e63e:      	movb	$0x1, 0xbf(%rsp)
   2e646:      	jmp	0x2e65d <core::str::count::do_count_chars::he4c508157f6693c1+0xfd>
   2e648:      	movq	0x78(%rsp), %rax
   2e64d:      	cmpq	$0x8, %rax
   2e651:      	seta	%al
   2e654:      	andb	$0x1, %al
   2e656:      	movb	%al, 0xbf(%rsp)
   2e65d:      	movb	0xbf(%rsp), %al
   2e664:      	andb	$0x1, %al
   2e666:      	movb	%al, 0x1df(%rsp)
   2e66d:      	testb	$0x1, 0x1df(%rsp)
   2e675:      	jne	0x2e6bf <core::str::count::do_count_chars::he4c508157f6693c1+0x15f>
   2e677:      	movq	0x58(%rsp), %rsi
   2e67c:      	movq	0x50(%rsp), %rdi
   2e681:      	movq	0xd740(%rip), %rax      # 0x3bdc8 <zlgk82z0l71lvh9+0x3bdc8>
   2e688:      	callq	*%rax
   2e68a:      	movq	0x70(%rsp), %rdi
   2e68f:      	movq	0x78(%rsp), %rsi
   2e694:      	movq	%rax, 0x30(%rsp)
   2e699:      	movq	0xd728(%rip), %rax      # 0x3bdc8 <zlgk82z0l71lvh9+0x3bdc8>
   2e6a0:      	callq	*%rax
   2e6a2:      	movq	%rax, %rcx
   2e6a5:      	movq	0x30(%rsp), %rax
   2e6aa:      	addq	%rcx, %rax
   2e6ad:      	movq	%rax, 0x38(%rsp)
   2e6b2:      	setb	%al
   2e6b5:      	testb	$0x1, %al
   2e6b7:      	jne	0x2e76e <core::str::count::do_count_chars::he4c508157f6693c1+0x20e>
   2e6bd:      	jmp	0x2e6ef <core::str::count::do_count_chars::he4c508157f6693c1+0x18f>
   2e6bf:      	movq	0x48(%rsp), %rdi
   2e6c4:      	movq	0x40(%rsp), %rsi
   2e6c9:      	movq	%rdi, 0x228(%rsp)
   2e6d1:      	movq	%rsi, 0x230(%rsp)
   2e6d9:      	movq	0xd6e8(%rip), %rax      # 0x3bdc8 <zlgk82z0l71lvh9+0x3bdc8>
   2e6e0:      	callq	*%rax
   2e6e2:      	movq	%rax, 0x80(%rsp)
   2e6ea:      	jmp	0x2ea3b <core::str::count::do_count_chars::he4c508157f6693c1+0x4db>
   2e6ef:      	movq	0x68(%rsp), %rdx
   2e6f4:      	movq	0x60(%rsp), %rsi
   2e6f9:      	movq	0x38(%rsp), %rax
   2e6fe:      	movq	%rax, 0xc0(%rsp)
   2e706:      	leaq	0xc26b(%rip), %r8       # 0x3a978 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x378>
   2e70d:      	movq	0xd3c4(%rip), %rax      # 0x3bad8 <zlgk82z0l71lvh9+0x3bad8>
   2e714:      	leaq	0xe0(%rsp), %rdi
   2e71c:      	movl	$0xc0, %ecx
   2e721:      	callq	*%rax
   2e723:      	movq	0xd426(%rip), %rax      # 0x3bb50 <zlgk82z0l71lvh9+0x3bb50>
   2e72a:      	leaq	0xc8(%rsp), %rdi
   2e732:      	leaq	0xe0(%rsp), %rsi
   2e73a:      	callq	*%rax
   2e73c:      	movq	0xc8(%rsp), %rax
   2e744:      	movq	%rax, 0xf8(%rsp)
   2e74c:      	movq	0xd0(%rsp), %rax
   2e754:      	movq	%rax, 0x100(%rsp)
   2e75c:      	movq	0xd8(%rsp), %rax
   2e764:      	movq	%rax, 0x108(%rsp)
   2e76c:      	jmp	0x2e78c <core::str::count::do_count_chars::he4c508157f6693c1+0x22c>
   2e76e:      	leaq	-0x1b845(%rip), %rdi    # 0x12f30 <str.1>
   2e775:      	leaq	0xc1e4(%rip), %rdx      # 0x3a960 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x360>
   2e77c:      	movq	0xc74d(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2e783:      	movl	$0x1c, %esi
   2e788:      	callq	*%rax
   2e78a:      	ud2
   2e78c:      	movq	0xd46d(%rip), %rax      # 0x3bc00 <zlgk82z0l71lvh9+0x3bc00>
   2e793:      	leaq	0xf8(%rsp), %rdi
   2e79b:      	callq	*%rax
   2e79d:      	movq	%rdx, 0x118(%rsp)
   2e7a5:      	movq	%rax, 0x110(%rsp)
   2e7ad:      	movq	0x110(%rsp), %rdx
   2e7b5:      	movl	$0x1, %eax
   2e7ba:      	xorl	%ecx, %ecx
   2e7bc:      	cmpq	$0x0, %rdx
   2e7c0:      	cmoveq	%rcx, %rax
   2e7c4:      	cmpq	$0x0, %rax
   2e7c8:      	jne	0x2e7df <core::str::count::do_count_chars::he4c508157f6693c1+0x27f>
   2e7ca:      	movq	0xc0(%rsp), %rax
   2e7d2:      	movq	%rax, 0x80(%rsp)
   2e7da:      	jmp	0x2ea3b <core::str::count::do_count_chars::he4c508157f6693c1+0x4db>
   2e7df:      	movq	0x110(%rsp), %rsi
   2e7e7:      	movq	0x118(%rsp), %rdx
   2e7ef:      	movq	%rsi, 0x1e0(%rsp)
   2e7f7:      	movq	%rdx, 0x1e8(%rsp)
   2e7ff:      	movq	$0x0, 0x120(%rsp)
   2e80b:      	leaq	0xc17e(%rip), %rcx      # 0x3a990 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x390>
   2e812:      	movq	0xd2df(%rip), %rax      # 0x3baf8 <zlgk82z0l71lvh9+0x3baf8>
   2e819:      	leaq	0x128(%rsp), %rdi
   2e821:      	callq	*%rax
   2e823:      	movq	0x128(%rsp), %rdi
   2e82b:      	movq	0x130(%rsp), %rsi
   2e833:      	movq	%rdi, 0x1f0(%rsp)
   2e83b:      	movq	%rsi, 0x1f8(%rsp)
   2e843:      	movq	0x138(%rsp), %rcx
   2e84b:      	movq	%rcx, 0x20(%rsp)
   2e850:      	movq	0x140(%rsp), %rax
   2e858:      	movq	%rax, 0x28(%rsp)
   2e85d:      	movq	%rcx, 0x200(%rsp)
   2e865:      	movq	%rax, 0x208(%rsp)
   2e86d:      	movq	0xd32c(%rip), %rax      # 0x3bba0 <zlgk82z0l71lvh9+0x3bba0>
   2e874:      	callq	*%rax
   2e876:      	movq	%rax, 0x148(%rsp)
   2e87e:      	movq	%rdx, 0x150(%rsp)
   2e886:      	movq	0xd38b(%rip), %rax      # 0x3bc18 <zlgk82z0l71lvh9+0x3bc18>
   2e88d:      	leaq	0x148(%rsp), %rdi
   2e895:      	callq	*%rax
   2e897:      	movq	%rax, 0x158(%rsp)
   2e89f:      	movq	0x158(%rsp), %rdx
   2e8a7:      	movl	$0x1, %eax
   2e8ac:      	xorl	%ecx, %ecx
   2e8ae:      	cmpq	$0x0, %rdx
   2e8b2:      	cmoveq	%rcx, %rax
   2e8b6:      	cmpq	$0x0, %rax
   2e8ba:      	jne	0x2e8df <core::str::count::do_count_chars::he4c508157f6693c1+0x37f>
   2e8bc:      	movq	0x120(%rsp), %rdi
   2e8c4:      	callq	0x2eb40 <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea>
   2e8c9:      	addq	0xc0(%rsp), %rax
   2e8d1:      	movq	%rax, 0x18(%rsp)
   2e8d6:      	setb	%al
   2e8d9:      	testb	$0x1, %al
   2e8db:      	jne	0x2e937 <core::str::count::do_count_chars::he4c508157f6693c1+0x3d7>
   2e8dd:      	jmp	0x2e90d <core::str::count::do_count_chars::he4c508157f6693c1+0x3ad>
   2e8df:      	movq	0x158(%rsp), %rdi
   2e8e7:      	movq	%rdi, 0x218(%rsp)
   2e8ef:      	movq	0xd462(%rip), %rax      # 0x3bd58 <zlgk82z0l71lvh9+0x3bd58>
   2e8f6:      	callq	*%rax
   2e8f8:      	movq	%rax, 0x160(%rsp)
   2e900:      	movq	%rdx, 0x168(%rsp)
   2e908:      	jmp	0x2ea7b <core::str::count::do_count_chars::he4c508157f6693c1+0x51b>
   2e90d:      	movq	0x28(%rsp), %rsi
   2e912:      	movq	0x20(%rsp), %rdi
   2e917:      	movq	0x18(%rsp), %rax
   2e91c:      	movq	%rax, 0xc0(%rsp)
   2e924:      	movq	0xd155(%rip), %rax      # 0x3ba80 <zlgk82z0l71lvh9+0x3ba80>
   2e92b:      	callq	*%rax
   2e92d:      	testb	$0x1, %al
   2e92f:      	jne	0x2e78c <core::str::count::do_count_chars::he4c508157f6693c1+0x22c>
   2e935:      	jmp	0x2e955 <core::str::count::do_count_chars::he4c508157f6693c1+0x3f5>
   2e937:      	leaq	-0x1ba0e(%rip), %rdi    # 0x12f30 <str.1>
   2e93e:      	leaq	0xc063(%rip), %rdx      # 0x3a9a8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x3a8>
   2e945:      	movq	0xc584(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2e94c:      	movl	$0x1c, %esi
   2e951:      	callq	*%rax
   2e953:      	ud2
   2e955:      	movq	0x28(%rsp), %rsi
   2e95a:      	movq	0x20(%rsp), %rdi
   2e95f:      	movq	$0x0, 0x178(%rsp)
   2e96b:      	movq	0xd236(%rip), %rax      # 0x3bba8 <zlgk82z0l71lvh9+0x3bba8>
   2e972:      	callq	*%rax
   2e974:      	movq	%rax, 0x180(%rsp)
   2e97c:      	movq	%rdx, 0x188(%rsp)
   2e984:      	movq	0xd2d5(%rip), %rax      # 0x3bc60 <zlgk82z0l71lvh9+0x3bc60>
   2e98b:      	leaq	0x180(%rsp), %rdi
   2e993:      	callq	*%rax
   2e995:      	movq	%rax, 0x190(%rsp)
   2e99d:      	movq	0x190(%rsp), %rdx
   2e9a5:      	movl	$0x1, %eax
   2e9aa:      	xorl	%ecx, %ecx
   2e9ac:      	cmpq	$0x0, %rdx
   2e9b0:      	cmoveq	%rcx, %rax
   2e9b4:      	cmpq	$0x0, %rax
   2e9b8:      	jne	0x2e9dd <core::str::count::do_count_chars::he4c508157f6693c1+0x47d>
   2e9ba:      	movq	0x178(%rsp), %rdi
   2e9c2:      	callq	0x2eb40 <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea>
   2e9c7:      	addq	0xc0(%rsp), %rax
   2e9cf:      	movq	%rax, 0x10(%rsp)
   2e9d4:      	setb	%al
   2e9d7:      	testb	$0x1, %al
   2e9d9:      	jne	0x2ea1d <core::str::count::do_count_chars::he4c508157f6693c1+0x4bd>
   2e9db:      	jmp	0x2ea0b <core::str::count::do_count_chars::he4c508157f6693c1+0x4ab>
   2e9dd:      	movq	0x190(%rsp), %rax
   2e9e5:      	movq	(%rax), %rdi
   2e9e8:      	movq	%rdi, 0x210(%rsp)
   2e9f0:      	callq	0x2eb10 <core::str::count::contains_non_continuation_byte::h1a2cb8798db990e2>
   2e9f5:      	addq	0x178(%rsp), %rax
   2e9fd:      	movq	%rax, 0x8(%rsp)
   2ea02:      	setb	%al
   2ea05:      	testb	$0x1, %al
   2ea07:      	jne	0x2ea5d <core::str::count::do_count_chars::he4c508157f6693c1+0x4fd>
   2ea09:      	jmp	0x2ea4b <core::str::count::do_count_chars::he4c508157f6693c1+0x4eb>
   2ea0b:      	movq	0x10(%rsp), %rax
   2ea10:      	movq	%rax, 0xc0(%rsp)
   2ea18:      	jmp	0x2e7ca <core::str::count::do_count_chars::he4c508157f6693c1+0x26a>
   2ea1d:      	leaq	-0x1baf4(%rip), %rdi    # 0x12f30 <str.1>
   2ea24:      	leaq	0xbf95(%rip), %rdx      # 0x3a9c0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x3c0>
   2ea2b:      	movq	0xc49e(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2ea32:      	movl	$0x1c, %esi
   2ea37:      	callq	*%rax
   2ea39:      	ud2
   2ea3b:      	movq	0x80(%rsp), %rax
   2ea43:      	addq	$0x248, %rsp            # imm = 0x248
   2ea4a:      	retq
   2ea4b:      	movq	0x8(%rsp), %rax
   2ea50:      	movq	%rax, 0x178(%rsp)
   2ea58:      	jmp	0x2e984 <core::str::count::do_count_chars::he4c508157f6693c1+0x424>
   2ea5d:      	leaq	-0x1bb34(%rip), %rdi    # 0x12f30 <str.1>
   2ea64:      	leaq	0xbf6d(%rip), %rdx      # 0x3a9d8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x3d8>
   2ea6b:      	movq	0xc45e(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2ea72:      	movl	$0x1c, %esi
   2ea77:      	callq	*%rax
   2ea79:      	ud2
   2ea7b:      	movq	0xd1de(%rip), %rax      # 0x3bc60 <zlgk82z0l71lvh9+0x3bc60>
   2ea82:      	leaq	0x160(%rsp), %rdi
   2ea8a:      	callq	*%rax
   2ea8c:      	movq	%rax, 0x170(%rsp)
   2ea94:      	movq	0x170(%rsp), %rdx
   2ea9c:      	movl	$0x1, %eax
   2eaa1:      	xorl	%ecx, %ecx
   2eaa3:      	cmpq	$0x0, %rdx
   2eaa7:      	cmoveq	%rcx, %rax
   2eaab:      	cmpq	$0x0, %rax
   2eaaf:      	je	0x2e886 <core::str::count::do_count_chars::he4c508157f6693c1+0x326>
   2eab5:      	movq	0x170(%rsp), %rax
   2eabd:      	movq	(%rax), %rdi
   2eac0:      	movq	%rdi, 0x220(%rsp)
   2eac8:      	callq	0x2eb10 <core::str::count::contains_non_continuation_byte::h1a2cb8798db990e2>
   2eacd:      	addq	0x120(%rsp), %rax
   2ead5:      	movq	%rax, (%rsp)
   2ead9:      	setb	%al
   2eadc:      	testb	$0x1, %al
   2eade:      	jne	0x2eaee <core::str::count::do_count_chars::he4c508157f6693c1+0x58e>
   2eae0:      	movq	(%rsp), %rax
   2eae4:      	movq	%rax, 0x120(%rsp)
   2eaec:      	jmp	0x2ea7b <core::str::count::do_count_chars::he4c508157f6693c1+0x51b>
   2eaee:      	leaq	-0x1bbc5(%rip), %rdi    # 0x12f30 <str.1>
   2eaf5:      	leaq	0xbef4(%rip), %rdx      # 0x3a9f0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x3f0>
   2eafc:      	movq	0xc3cd(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2eb03:      	movl	$0x1c, %esi
   2eb08:      	callq	*%rax
   2eb0a:      	ud2
   2eb0c:      	int3
   2eb0d:      	int3
   2eb0e:      	int3
   2eb0f:      	int3

000000000002eb10 <core::str::count::contains_non_continuation_byte::h1a2cb8798db990e2>:
   2eb10:      	pushq	%rax
   2eb11:      	movq	%rdi, (%rsp)
   2eb15:      	movq	%rdi, %rax
   2eb18:      	xorq	$-0x1, %rax
   2eb1c:      	shrq	$0x7, %rax
   2eb20:      	shrq	$0x6, %rdi
   2eb24:      	orq	%rdi, %rax
   2eb27:      	movabsq	$0x101010101010101, %rcx # imm = 0x101010101010101
   2eb31:      	andq	%rcx, %rax
   2eb34:      	popq	%rcx
   2eb35:      	retq
   2eb36:      	int3
   2eb37:      	int3
   2eb38:      	int3
   2eb39:      	int3
   2eb3a:      	int3
   2eb3b:      	int3
   2eb3c:      	int3
   2eb3d:      	int3
   2eb3e:      	int3
   2eb3f:      	int3

000000000002eb40 <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea>:
   2eb40:      	subq	$0x38, %rsp
   2eb44:      	movq	%rdi, %rcx
   2eb47:      	movq	%rcx, 0x18(%rsp)
   2eb4c:      	movabsq	$0xff00ff00ff00ff, %rdx # imm = 0xFF00FF00FF00FF
   2eb56:      	movq	%rcx, %rax
   2eb59:      	andq	%rdx, %rax
   2eb5c:      	shrq	$0x8, %rcx
   2eb60:      	movabsq	$0xff00ff00ff00ff, %rdx # imm = 0xFF00FF00FF00FF
   2eb6a:      	andq	%rdx, %rcx
   2eb6d:      	addq	%rcx, %rax
   2eb70:      	movq	%rax, 0x10(%rsp)
   2eb75:      	setb	%al
   2eb78:      	testb	$0x1, %al
   2eb7a:      	jne	0x2ebc7 <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea+0x87>
   2eb7c:      	movq	0x10(%rsp), %rax
   2eb81:      	movq	%rax, 0x20(%rsp)
   2eb86:      	movq	%rax, 0x28(%rsp)
   2eb8b:      	movabsq	$0x1000100010001, %rcx  # imm = 0x1000100010001
   2eb95:      	movq	%rcx, 0x30(%rsp)
   2eb9a:      	movabsq	$0x1000100010001, %rcx  # imm = 0x1000100010001
   2eba4:      	imulq	%rcx, %rax
   2eba8:      	movq	%rax, (%rsp)
   2ebac:      	movl	$0x6, %eax
   2ebb1:      	movl	$0x8, %ecx
   2ebb6:      	mulq	%rcx
   2ebb9:      	movq	%rax, 0x8(%rsp)
   2ebbe:      	seto	%al
   2ebc1:      	testb	$0x1, %al
   2ebc3:      	jne	0x2ebf7 <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea+0xb7>
   2ebc5:      	jmp	0x2ebe5 <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea+0xa5>
   2ebc7:      	leaq	-0x1bc9e(%rip), %rdi    # 0x12f30 <str.1>
   2ebce:      	leaq	0xbe33(%rip), %rdx      # 0x3aa08 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x408>
   2ebd5:      	movq	0xc2f4(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2ebdc:      	movl	$0x1c, %esi
   2ebe1:      	callq	*%rax
   2ebe3:      	ud2
   2ebe5:      	movq	0x8(%rsp), %rax
   2ebea:      	cmpq	$0x40, %rax
   2ebee:      	setb	%al
   2ebf1:      	testb	$0x1, %al
   2ebf3:      	jne	0x2ec15 <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea+0xd5>
   2ebf5:      	jmp	0x2ec2a <core::str::count::sum_bytes_in_usize::h70ff8846049c95ea+0xea>
   2ebf7:      	leaq	-0x1bb7e(%rip), %rdi    # 0x13080 <str.2>
   2ebfe:      	leaq	0xbe1b(%rip), %rdx      # 0x3aa20 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x420>
   2ec05:      	movq	0xc2c4(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2ec0c:      	movl	$0x21, %esi
   2ec11:      	callq	*%rax
   2ec13:      	ud2
   2ec15:      	movq	(%rsp), %rax
   2ec19:      	movq	0x8(%rsp), %rcx
   2ec1e:      	andq	$0x3f, %rcx
   2ec22:      	shrq	%cl, %rax
   2ec25:      	addq	$0x38, %rsp
   2ec29:      	retq
   2ec2a:      	leaq	-0x1bb81(%rip), %rdi    # 0x130b0 <str.3>
   2ec31:      	leaq	0xbe00(%rip), %rdx      # 0x3aa38 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x438>
   2ec38:      	movq	0xc291(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2ec3f:      	movl	$0x24, %esi
   2ec44:      	callq	*%rax
   2ec46:      	ud2
   2ec48:      	int3
   2ec49:      	int3
   2ec4a:      	int3
   2ec4b:      	int3
   2ec4c:      	int3
   2ec4d:      	int3
   2ec4e:      	int3
   2ec4f:      	int3

000000000002ec50 <core::str::count::char_count_general_case::h56b77e164d39822b>:
   2ec50:      	subq	$0x18, %rsp
   2ec54:      	movq	%rdi, 0x8(%rsp)
   2ec59:      	movq	%rsi, 0x10(%rsp)
   2ec5e:      	movq	0xc643(%rip), %rax      # 0x3b2a8 <zlgk82z0l71lvh9+0x3b2a8>
   2ec65:      	callq	*%rax
   2ec67:      	movq	%rax, %rdi
   2ec6a:      	movq	%rdx, %rsi
   2ec6d:      	movq	0xcef4(%rip), %rax      # 0x3bb68 <zlgk82z0l71lvh9+0x3bb68>
   2ec74:      	callq	*%rax
   2ec76:      	movq	%rax, %rdi
   2ec79:      	movq	%rdx, %rsi
   2ec7c:      	movq	0xd14d(%rip), %rax      # 0x3bdd0 <zlgk82z0l71lvh9+0x3bdd0>
   2ec83:      	callq	*%rax
   2ec85:      	addq	$0x18, %rsp
   2ec89:      	retq
   2ec8a:      	int3
   2ec8b:      	int3
   2ec8c:      	int3
   2ec8d:      	int3
   2ec8e:      	int3
   2ec8f:      	int3

000000000002ec90 <core::str::count::char_count_general_case::{{closure}}::hb2fff9e2af4ccc71>:
   2ec90:      	subq	$0x18, %rsp
   2ec94:      	movq	%rdi, (%rsp)
   2ec98:      	movq	%rsi, 0x8(%rsp)
   2ec9d:      	movq	(%rsi), %rax
   2eca0:      	movb	(%rax), %al
   2eca2:      	movb	%al, 0x17(%rsp)
   2eca6:      	movzbl	%al, %edi
   2eca9:      	callq	0x30dc0 <core::str::validations::utf8_is_cont_byte::h98c16a0928ae7551>
   2ecae:      	xorb	$-0x1, %al
   2ecb0:      	andb	$0x1, %al
   2ecb2:      	movzbl	%al, %eax
   2ecb5:      	addq	$0x18, %rsp
   2ecb9:      	retq
   2ecba:      	int3
   2ecbb:      	int3
   2ecbc:      	int3
   2ecbd:      	int3
   2ecbe:      	int3
   2ecbf:      	int3

000000000002ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>:
   2ecc0:      	subq	$0x20, %rsp
   2ecc4:      	movq	%rsi, %rax
   2ecc7:      	movq	%rdi, (%rsp)
   2eccb:      	movq	%rax, 0x8(%rsp)
   2ecd0:      	movq	%rdi, 0x10(%rsp)
   2ecd5:      	movq	%rax, 0x18(%rsp)
   2ecda:      	addq	$0x20, %rsp
   2ecde:      	retq
   2ecdf:      	int3

000000000002ece0 <core::str::<impl str>::is_empty::hba38a94ab3bb1a41>:
   2ece0:      	subq	$0x18, %rsp
   2ece4:      	movq	%rdi, 0x8(%rsp)
   2ece9:      	movq	%rsi, 0x10(%rsp)
   2ecee:      	callq	0x2ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>
   2ecf3:      	cmpq	$0x0, %rax
   2ecf7:      	sete	%al
   2ecfa:      	andb	$0x1, %al
   2ecfc:      	movzbl	%al, %eax
   2ecff:      	addq	$0x18, %rsp
   2ed03:      	retq
   2ed04:      	int3
   2ed05:      	int3
   2ed06:      	int3
   2ed07:      	int3
   2ed08:      	int3
   2ed09:      	int3
   2ed0a:      	int3
   2ed0b:      	int3
   2ed0c:      	int3
   2ed0d:      	int3
   2ed0e:      	int3
   2ed0f:      	int3

000000000002ed10 <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc>:
   2ed10:      	subq	$0x58, %rsp
   2ed14:      	movq	%rdx, (%rsp)
   2ed18:      	movq	%rsi, 0x8(%rsp)
   2ed1d:      	movq	%rdi, 0x10(%rsp)
   2ed22:      	movq	%rdi, 0x28(%rsp)
   2ed27:      	movq	%rsi, 0x30(%rsp)
   2ed2c:      	movq	%rdx, 0x38(%rsp)
   2ed31:      	cmpq	$0x0, %rdx
   2ed35:      	jne	0x2ed3e <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc+0x2e>
   2ed37:      	movb	$0x1, 0x1f(%rsp)
   2ed3c:      	jmp	0x2ed80 <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc+0x70>
   2ed3e:      	movq	(%rsp), %rdx
   2ed42:      	movq	0x10(%rsp), %rdi
   2ed47:      	movq	0x8(%rsp), %rsi
   2ed4c:      	movq	%rdi, 0x48(%rsp)
   2ed51:      	movq	%rsi, 0x50(%rsp)
   2ed56:      	movq	0xcd33(%rip), %rax      # 0x3ba90 <zlgk82z0l71lvh9+0x3ba90>
   2ed5d:      	callq	*%rax
   2ed5f:      	movq	%rax, 0x20(%rsp)
   2ed64:      	movq	0x20(%rsp), %rdx
   2ed69:      	movl	$0x1, %eax
   2ed6e:      	xorl	%ecx, %ecx
   2ed70:      	cmpq	$0x0, %rdx
   2ed74:      	cmoveq	%rcx, %rax
   2ed78:      	cmpq	$0x0, %rax
   2ed7c:      	je	0x2ed8e <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc+0x7e>
   2ed7e:      	jmp	0x2edb2 <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc+0xa2>
   2ed80:      	movb	0x1f(%rsp), %al
   2ed84:      	andb	$0x1, %al
   2ed86:      	movzbl	%al, %eax
   2ed89:      	addq	$0x58, %rsp
   2ed8d:      	retq
   2ed8e:      	movq	0x8(%rsp), %rsi
   2ed93:      	movq	0x10(%rsp), %rdi
   2ed98:      	callq	0x2ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>
   2ed9d:      	movq	%rax, %rcx
   2eda0:      	movq	(%rsp), %rax
   2eda4:      	cmpq	%rcx, %rax
   2eda7:      	sete	%al
   2edaa:      	andb	$0x1, %al
   2edac:      	movb	%al, 0x1f(%rsp)
   2edb0:      	jmp	0x2ed80 <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc+0x70>
   2edb2:      	movq	0x20(%rsp), %rax
   2edb7:      	movb	(%rax), %al
   2edb9:      	movb	%al, 0x47(%rsp)
   2edbd:      	movzbl	%al, %edi
   2edc0:      	callq	0x21620 <core::num::<impl u8>::is_utf8_char_boundary::h1301bf9b3fca3003>
   2edc5:      	andb	$0x1, %al
   2edc7:      	movb	%al, 0x1f(%rsp)
   2edcb:      	jmp	0x2ed80 <core::str::<impl str>::is_char_boundary::h9d049616bf6a49cc+0x70>
   2edcd:      	int3
   2edce:      	int3
   2edcf:      	int3

000000000002edd0 <core::str::<impl str>::get::hbee5a33ed24030c0>:
   2edd0:      	subq	$0x28, %rsp
   2edd4:      	movq	%rdx, 0x8(%rsp)
   2edd9:      	movq	%rsi, %rdx
   2eddc:      	movq	%rdi, %rsi
   2eddf:      	movq	0x8(%rsp), %rdi
   2ede4:      	movq	%rsi, 0x10(%rsp)
   2ede9:      	movq	%rdx, 0x18(%rsp)
   2edee:      	movq	%rdi, 0x20(%rsp)
   2edf3:      	callq	0x2bc10 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::RangeTo<usize>>::get::hd412c7721f1f9ecb>
   2edf8:      	addq	$0x28, %rsp
   2edfc:      	retq
   2edfd:      	int3
   2edfe:      	int3
   2edff:      	int3

000000000002ee00 <core::str::<impl str>::get_unchecked::h3ab7bf7b85cdf2aa>:
   2ee00:      	subq	$0x38, %rsp
   2ee04:      	movq	%rcx, 0x8(%rsp)
   2ee09:      	movq	%rdx, 0x10(%rsp)
   2ee0e:      	movq	%rsi, %rcx
   2ee11:      	movq	0x8(%rsp), %rsi
   2ee16:      	movq	%rdi, %rdx
   2ee19:      	movq	0x10(%rsp), %rdi
   2ee1e:      	movq	%rdx, 0x18(%rsp)
   2ee23:      	movq	%rcx, 0x20(%rsp)
   2ee28:      	movq	%rdi, 0x28(%rsp)
   2ee2d:      	movq	%rsi, 0x30(%rsp)
   2ee32:      	callq	0x2ba60 <core::str::traits::<impl core::slice::index::SliceIndex<str> for core::ops::range::Range<usize>>::get_unchecked::hf22e28f98f75d9d5>
   2ee37:      	addq	$0x38, %rsp
   2ee3b:      	retq
   2ee3c:      	int3
   2ee3d:      	int3
   2ee3e:      	int3
   2ee3f:      	int3

000000000002ee40 <core::str::<impl str>::chars::hac05c2fcb19a790a>:
   2ee40:      	subq	$0x38, %rsp
   2ee44:      	movq	%rdi, 0x18(%rsp)
   2ee49:      	movq	%rsi, 0x20(%rsp)
   2ee4e:      	movq	%rdi, 0x28(%rsp)
   2ee53:      	movq	%rsi, 0x30(%rsp)
   2ee58:      	movq	0xc449(%rip), %rax      # 0x3b2a8 <zlgk82z0l71lvh9+0x3b2a8>
   2ee5f:      	callq	*%rax
   2ee61:      	movq	%rax, 0x8(%rsp)
   2ee66:      	movq	%rdx, 0x10(%rsp)
   2ee6b:      	movq	0x8(%rsp), %rax
   2ee70:      	movq	0x10(%rsp), %rdx
   2ee75:      	addq	$0x38, %rsp
   2ee79:      	retq
   2ee7a:      	int3
   2ee7b:      	int3
   2ee7c:      	int3
   2ee7d:      	int3
   2ee7e:      	int3
   2ee7f:      	int3

000000000002ee80 <core::str::<impl str>::char_indices::h45896e5a0bb7eb31>:
   2ee80:      	subq	$0x38, %rsp
   2ee84:      	movq	%rdx, 0x8(%rsp)
   2ee89:      	movq	%rsi, %rax
   2ee8c:      	movq	0x8(%rsp), %rsi
   2ee91:      	movq	%rax, 0x10(%rsp)
   2ee96:      	movq	%rdi, %rax
   2ee99:      	movq	0x10(%rsp), %rdi
   2ee9e:      	movq	%rax, 0x18(%rsp)
   2eea3:      	movq	%rax, 0x20(%rsp)
   2eea8:      	movq	%rdi, 0x28(%rsp)
   2eead:      	movq	%rsi, 0x30(%rsp)
   2eeb2:      	callq	0x2ee40 <core::str::<impl str>::chars::hac05c2fcb19a790a>
   2eeb7:      	movq	0x18(%rsp), %rdi
   2eebc:      	movq	%rax, %rcx
   2eebf:      	movq	0x20(%rsp), %rax
   2eec4:      	movq	$0x0, 0x10(%rdi)
   2eecc:      	movq	%rcx, (%rdi)
   2eecf:      	movq	%rdx, 0x8(%rdi)
   2eed3:      	addq	$0x38, %rsp
   2eed7:      	retq
   2eed8:      	int3
   2eed9:      	int3
   2eeda:      	int3
   2eedb:      	int3
   2eedc:      	int3
   2eedd:      	int3
   2eede:      	int3
   2eedf:      	int3

000000000002eee0 <core::str::<impl str>::ends_with::h230237570fe81ef2>:
   2eee0:      	subq	$0x28, %rsp
   2eee4:      	movl	%edx, 0xc(%rsp)
   2eee8:      	movq	%rsi, %rdx
   2eeeb:      	movq	%rdi, %rsi
   2eeee:      	movl	0xc(%rsp), %edi
   2eef2:      	movq	%rsi, 0x10(%rsp)
   2eef7:      	movq	%rdx, 0x18(%rsp)
   2eefc:      	movl	%edi, 0x24(%rsp)
   2ef00:      	callq	0x28c40 <<char as core::str::pattern::Pattern>::is_suffix_of::h099b0a80f17621a2>
   2ef05:      	andb	$0x1, %al
   2ef07:      	movzbl	%al, %eax
   2ef0a:      	addq	$0x28, %rsp
   2ef0e:      	retq
   2ef0f:      	int3

000000000002ef10 <core::str::<impl str>::split_inclusive::h1e26e8ca4a122c47>:
   2ef10:      	subq	$0xc8, %rsp
   2ef17:      	movl	%ecx, 0xc(%rsp)
   2ef1b:      	movq	%rdx, 0x18(%rsp)
   2ef20:      	movq	%rsi, %rax
   2ef23:      	movq	0x18(%rsp), %rsi
   2ef28:      	movq	%rax, 0x10(%rsp)
   2ef2d:      	movq	%rdi, %rax
   2ef30:      	movq	0x10(%rsp), %rdi
   2ef35:      	movq	%rax, 0x28(%rsp)
   2ef3a:      	movq	%rax, 0x30(%rsp)
   2ef3f:      	movq	%rdi, 0xb0(%rsp)
   2ef47:      	movq	%rsi, 0xb8(%rsp)
   2ef4f:      	movl	%ecx, 0xc4(%rsp)
   2ef56:      	callq	0x2ecc0 <core::str::<impl str>::len::h2226fb42c6cdf0cd>
   2ef5b:      	movl	0xc(%rsp), %esi
   2ef5f:      	movq	0x10(%rsp), %rdx
   2ef64:      	movq	0x18(%rsp), %rcx
   2ef69:      	movq	%rax, 0x20(%rsp)
   2ef6e:      	leaq	0x80(%rsp), %rdi
   2ef76:      	callq	0x28b40 <<char as core::str::pattern::Pattern>::into_searcher::ha4d9ce77b1891659>
   2ef7b:      	movq	0x20(%rsp), %rcx
   2ef80:      	movq	0x28(%rsp), %rdi
   2ef85:      	movq	0x30(%rsp), %rax
   2ef8a:      	movq	$0x0, 0x38(%rsp)
   2ef93:      	movq	%rcx, 0x40(%rsp)
   2ef98:      	leaq	0x38(%rsp), %rcx
   2ef9d:      	addq	$0x10, %rcx
   2efa1:      	movq	0xa8(%rsp), %rdx
   2efa9:      	movq	%rdx, 0x28(%rcx)
   2efad:      	movq	0xa0(%rsp), %rdx
   2efb5:      	movq	%rdx, 0x20(%rcx)
   2efb9:      	movq	0x98(%rsp), %rdx
   2efc1:      	movq	%rdx, 0x18(%rcx)
   2efc5:      	movq	0x90(%rsp), %rdx
   2efcd:      	movq	%rdx, 0x10(%rcx)
   2efd1:      	movq	0x80(%rsp), %rdx
   2efd9:      	movq	0x88(%rsp), %rsi
   2efe1:      	movq	%rsi, 0x8(%rcx)
   2efe5:      	movq	%rdx, (%rcx)
   2efe8:      	movb	$0x0, 0x78(%rsp)
   2efed:      	movb	$0x0, 0x79(%rsp)
   2eff2:      	movl	$0x9, %ecx
   2eff7:      	leaq	0x38(%rsp), %rsi
   2effc:      	rep		movsq	(%rsi), %es:(%rdi)
   2efff:      	addq	$0xc8, %rsp
   2f006:      	retq
   2f007:      	int3
   2f008:      	int3
   2f009:      	int3
   2f00a:      	int3
   2f00b:      	int3
   2f00c:      	int3
   2f00d:      	int3
   2f00e:      	int3
   2f00f:      	int3

000000000002f010 <<core::fmt::Error as core::fmt::Debug>::fmt::h2a5f90642f6dc2d5>:
   2f010:      	subq	$0x18, %rsp
   2f014:      	movq	%rsi, (%rsp)
   2f018:      	movq	%rdi, %rax
   2f01b:      	movq	(%rsp), %rdi
   2f01f:      	movq	%rax, 0x8(%rsp)
   2f024:      	movq	%rdi, 0x10(%rsp)
   2f029:      	leaq	-0x1bf5c(%rip), %rsi    # 0x130d4 <str.3+0x24>
   2f030:      	movq	0xc061(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   2f037:      	movl	$0x5, %edx
   2f03c:      	callq	*%rax
   2f03e:      	andb	$0x1, %al
   2f040:      	movzbl	%al, %eax
   2f043:      	addq	$0x18, %rsp
   2f047:      	retq
   2f048:      	int3
   2f049:      	int3
   2f04a:      	int3
   2f04b:      	int3
   2f04c:      	int3
   2f04d:      	int3
   2f04e:      	int3
   2f04f:      	int3

000000000002f050 <<&T as core::fmt::Debug>::fmt::h0b7ec0ac2ed91853>:
   2f050:      	subq	$0x18, %rsp
   2f054:      	movq	%rdi, 0x8(%rsp)
   2f059:      	movq	%rsi, 0x10(%rsp)
   2f05e:      	movq	(%rdi), %rdi
   2f061:      	callq	0x2e470 <<() as core::fmt::Debug>::fmt::h31ab3df901292eff>
   2f066:      	andb	$0x1, %al
   2f068:      	movzbl	%al, %eax
   2f06b:      	addq	$0x18, %rsp
   2f06f:      	retq

000000000002f070 <<&T as core::fmt::Debug>::fmt::h17cd60c44d542402>:
   2f070:      	subq	$0x18, %rsp
   2f074:      	movq	%rdi, %rax
   2f077:      	movq	%rax, 0x8(%rsp)
   2f07c:      	movq	%rsi, 0x10(%rsp)
   2f081:      	movq	(%rax), %rdi
   2f084:      	movq	0x8(%rax), %rax
   2f088:      	callq	*0x18(%rax)
   2f08b:      	andb	$0x1, %al
   2f08d:      	movzbl	%al, %eax
   2f090:      	addq	$0x18, %rsp
   2f094:      	retq
   2f095:      	int3
   2f096:      	int3
   2f097:      	int3
   2f098:      	int3
   2f099:      	int3
   2f09a:      	int3
   2f09b:      	int3
   2f09c:      	int3
   2f09d:      	int3
   2f09e:      	int3
   2f09f:      	int3

000000000002f0a0 <<&T as core::fmt::Debug>::fmt::ha547b303e63caae5>:
   2f0a0:      	subq	$0x18, %rsp
   2f0a4:      	movq	%rdi, 0x8(%rsp)
   2f0a9:      	movq	%rsi, 0x10(%rsp)
   2f0ae:      	movq	(%rdi), %rdi
   2f0b1:      	callq	0x23c20 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt::hc7a1478787852acc>
   2f0b6:      	andb	$0x1, %al
   2f0b8:      	movzbl	%al, %eax
   2f0bb:      	addq	$0x18, %rsp
   2f0bf:      	retq

000000000002f0c0 <<&T as core::fmt::Debug>::fmt::hc2a0221d0dc2b472>:
   2f0c0:      	subq	$0x18, %rsp
   2f0c4:      	movq	%rdi, 0x8(%rsp)
   2f0c9:      	movq	%rsi, 0x10(%rsp)
   2f0ce:      	movq	(%rdi), %rdi
   2f0d1:      	callq	0x23cc0 <core::fmt::num::<impl core::fmt::Debug for u64>::fmt::hde03d4a9e432bbfe>
   2f0d6:      	andb	$0x1, %al
   2f0d8:      	movzbl	%al, %eax
   2f0db:      	addq	$0x18, %rsp
   2f0df:      	retq

000000000002f0e0 <<&T as core::fmt::Display>::fmt::h7f48b38b5a21ee08>:
   2f0e0:      	subq	$0x18, %rsp
   2f0e4:      	movq	%rsi, %rdx
   2f0e7:      	movq	%rdi, %rax
   2f0ea:      	movq	%rax, 0x8(%rsp)
   2f0ef:      	movq	%rdx, 0x10(%rsp)
   2f0f4:      	movq	(%rax), %rdi
   2f0f7:      	movq	0x8(%rax), %rsi
   2f0fb:      	movq	0xc5b6(%rip), %rax      # 0x3b6b8 <zlgk82z0l71lvh9+0x3b6b8>
   2f102:      	callq	*%rax
   2f104:      	andb	$0x1, %al
   2f106:      	movzbl	%al, %eax
   2f109:      	addq	$0x18, %rsp
   2f10d:      	retq
   2f10e:      	int3
   2f10f:      	int3

000000000002f110 <core::iter::adapters::enumerate::Enumerate<I>::new::h1a4cc9400e5df12e>:
   2f110:      	subq	$0x10, %rsp
   2f114:      	movq	%rdi, %rax
   2f117:      	movq	%rsi, (%rsp)
   2f11b:      	movq	%rdx, 0x8(%rsp)
   2f120:      	movq	%rsi, (%rdi)
   2f123:      	movq	%rdx, 0x8(%rdi)
   2f127:      	movq	$0x0, 0x10(%rdi)
   2f12f:      	addq	$0x10, %rsp
   2f133:      	retq
   2f134:      	int3
   2f135:      	int3
   2f136:      	int3
   2f137:      	int3
   2f138:      	int3
   2f139:      	int3
   2f13a:      	int3
   2f13b:      	int3
   2f13c:      	int3
   2f13d:      	int3
   2f13e:      	int3
   2f13f:      	int3

000000000002f140 <core::iter::adapters::enumerate::Enumerate<I>::new::h823a0a868e878664>:
   2f140:      	subq	$0x10, %rsp
   2f144:      	movq	%rdi, %rax
   2f147:      	movq	%rsi, (%rsp)
   2f14b:      	movq	%rdx, 0x8(%rsp)
   2f150:      	movq	%rsi, (%rdi)
   2f153:      	movq	%rdx, 0x8(%rdi)
   2f157:      	movq	$0x0, 0x10(%rdi)
   2f15f:      	addq	$0x10, %rsp
   2f163:      	retq
   2f164:      	int3
   2f165:      	int3
   2f166:      	int3
   2f167:      	int3
   2f168:      	int3
   2f169:      	int3
   2f16a:      	int3
   2f16b:      	int3
   2f16c:      	int3
   2f16d:      	int3
   2f16e:      	int3
   2f16f:      	int3

000000000002f170 <core::iter::adapters::enumerate::Enumerate<I>::new::h91f06e74a7230682>:
   2f170:      	subq	$0x10, %rsp
   2f174:      	movq	%rdi, %rax
   2f177:      	movq	%rsi, (%rsp)
   2f17b:      	movq	%rdx, 0x8(%rsp)
   2f180:      	movq	%rsi, (%rdi)
   2f183:      	movq	%rdx, 0x8(%rdi)
   2f187:      	movq	$0x0, 0x10(%rdi)
   2f18f:      	addq	$0x10, %rsp
   2f193:      	retq
   2f194:      	int3
   2f195:      	int3
   2f196:      	int3
   2f197:      	int3
   2f198:      	int3
   2f199:      	int3
   2f19a:      	int3
   2f19b:      	int3
   2f19c:      	int3
   2f19d:      	int3
   2f19e:      	int3
   2f19f:      	int3

000000000002f1a0 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::h479f72150e605281>:
   2f1a0:      	subq	$0x68, %rsp
   2f1a4:      	movq	%rdi, 0x18(%rsp)
   2f1a9:      	movq	%rdi, 0x50(%rsp)
   2f1ae:      	movq	0xca93(%rip), %rax      # 0x3bc48 <zlgk82z0l71lvh9+0x3bc48>
   2f1b5:      	callq	*%rax
   2f1b7:      	movq	%rax, %rdi
   2f1ba:      	movq	0xc667(%rip), %rax      # 0x3b828 <zlgk82z0l71lvh9+0x3b828>
   2f1c1:      	callq	*%rax
   2f1c3:      	movq	%rax, 0x38(%rsp)
   2f1c8:      	movq	0x38(%rsp), %rdx
   2f1cd:      	xorl	%eax, %eax
   2f1cf:      	movl	$0x1, %ecx
   2f1d4:      	cmpq	$0x0, %rdx
   2f1d8:      	cmoveq	%rcx, %rax
   2f1dc:      	cmpq	$0x0, %rax
   2f1e0:      	jne	0x2f219 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::h479f72150e605281+0x79>
   2f1e2:      	movq	0x18(%rsp), %rax
   2f1e7:      	movq	0x38(%rsp), %rcx
   2f1ec:      	movq	%rcx, (%rsp)
   2f1f0:      	movq	%rcx, 0x58(%rsp)
   2f1f5:      	movq	0x10(%rax), %rcx
   2f1f9:      	movq	%rcx, 0x8(%rsp)
   2f1fe:      	movq	%rcx, 0x60(%rsp)
   2f203:      	movq	0x10(%rax), %rax
   2f207:      	addq	$0x1, %rax
   2f20b:      	movq	%rax, 0x10(%rsp)
   2f210:      	setb	%al
   2f213:      	testb	$0x1, %al
   2f215:      	jne	0x2f265 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::h479f72150e605281+0xc5>
   2f217:      	jmp	0x2f22e <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::h479f72150e605281+0x8e>
   2f219:      	movq	0xc630(%rip), %rax      # 0x3b850 <zlgk82z0l71lvh9+0x3b850>
   2f220:      	callq	*%rax
   2f222:      	movq	%rdx, 0x30(%rsp)
   2f227:      	movq	%rax, 0x28(%rsp)
   2f22c:      	jmp	0x2f283 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::h479f72150e605281+0xe3>
   2f22e:      	movq	(%rsp), %rax
   2f232:      	movq	0x8(%rsp), %rcx
   2f237:      	movq	0x18(%rsp), %rdx
   2f23c:      	movq	0x10(%rsp), %rsi
   2f241:      	movq	%rsi, 0x10(%rdx)
   2f245:      	movq	%rcx, 0x40(%rsp)
   2f24a:      	movq	%rax, 0x48(%rsp)
   2f24f:      	movq	0x40(%rsp), %rcx
   2f254:      	movq	0x48(%rsp), %rax
   2f259:      	movq	%rcx, 0x28(%rsp)
   2f25e:      	movq	%rax, 0x30(%rsp)
   2f263:      	jmp	0x2f283 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::h479f72150e605281+0xe3>
   2f265:      	leaq	-0x1c18c(%rip), %rdi    # 0x130e0 <str.1>
   2f26c:      	leaq	0xb7dd(%rip), %rdx      # 0x3aa50 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x450>
   2f273:      	movq	0xbc56(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f27a:      	movl	$0x1c, %esi
   2f27f:      	callq	*%rax
   2f281:      	ud2
   2f283:      	movq	0x28(%rsp), %rax
   2f288:      	movq	0x30(%rsp), %rdx
   2f28d:      	addq	$0x68, %rsp
   2f291:      	retq
   2f292:      	int3
   2f293:      	int3
   2f294:      	int3
   2f295:      	int3
   2f296:      	int3
   2f297:      	int3
   2f298:      	int3
   2f299:      	int3
   2f29a:      	int3
   2f29b:      	int3
   2f29c:      	int3
   2f29d:      	int3
   2f29e:      	int3
   2f29f:      	int3

000000000002f2a0 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hbc38ca4a57ba7435>:
   2f2a0:      	subq	$0x68, %rsp
   2f2a4:      	movq	%rdi, 0x18(%rsp)
   2f2a9:      	movq	%rdi, 0x50(%rsp)
   2f2ae:      	movq	0xc97b(%rip), %rax      # 0x3bc30 <zlgk82z0l71lvh9+0x3bc30>
   2f2b5:      	callq	*%rax
   2f2b7:      	movq	%rax, %rdi
   2f2ba:      	movq	0xc56f(%rip), %rax      # 0x3b830 <zlgk82z0l71lvh9+0x3b830>
   2f2c1:      	callq	*%rax
   2f2c3:      	movq	%rax, 0x38(%rsp)
   2f2c8:      	movq	0x38(%rsp), %rdx
   2f2cd:      	xorl	%eax, %eax
   2f2cf:      	movl	$0x1, %ecx
   2f2d4:      	cmpq	$0x0, %rdx
   2f2d8:      	cmoveq	%rcx, %rax
   2f2dc:      	cmpq	$0x0, %rax
   2f2e0:      	jne	0x2f319 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hbc38ca4a57ba7435+0x79>
   2f2e2:      	movq	0x18(%rsp), %rax
   2f2e7:      	movq	0x38(%rsp), %rcx
   2f2ec:      	movq	%rcx, (%rsp)
   2f2f0:      	movq	%rcx, 0x58(%rsp)
   2f2f5:      	movq	0x10(%rax), %rcx
   2f2f9:      	movq	%rcx, 0x8(%rsp)
   2f2fe:      	movq	%rcx, 0x60(%rsp)
   2f303:      	movq	0x10(%rax), %rax
   2f307:      	addq	$0x1, %rax
   2f30b:      	movq	%rax, 0x10(%rsp)
   2f310:      	setb	%al
   2f313:      	testb	$0x1, %al
   2f315:      	jne	0x2f365 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hbc38ca4a57ba7435+0xc5>
   2f317:      	jmp	0x2f32e <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hbc38ca4a57ba7435+0x8e>
   2f319:      	movq	0xc528(%rip), %rax      # 0x3b848 <zlgk82z0l71lvh9+0x3b848>
   2f320:      	callq	*%rax
   2f322:      	movq	%rdx, 0x30(%rsp)
   2f327:      	movq	%rax, 0x28(%rsp)
   2f32c:      	jmp	0x2f383 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hbc38ca4a57ba7435+0xe3>
   2f32e:      	movq	(%rsp), %rax
   2f332:      	movq	0x8(%rsp), %rcx
   2f337:      	movq	0x18(%rsp), %rdx
   2f33c:      	movq	0x10(%rsp), %rsi
   2f341:      	movq	%rsi, 0x10(%rdx)
   2f345:      	movq	%rcx, 0x40(%rsp)
   2f34a:      	movq	%rax, 0x48(%rsp)
   2f34f:      	movq	0x40(%rsp), %rcx
   2f354:      	movq	0x48(%rsp), %rax
   2f359:      	movq	%rcx, 0x28(%rsp)
   2f35e:      	movq	%rax, 0x30(%rsp)
   2f363:      	jmp	0x2f383 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hbc38ca4a57ba7435+0xe3>
   2f365:      	leaq	-0x1c28c(%rip), %rdi    # 0x130e0 <str.1>
   2f36c:      	leaq	0xb6dd(%rip), %rdx      # 0x3aa50 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x450>
   2f373:      	movq	0xbb56(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f37a:      	movl	$0x1c, %esi
   2f37f:      	callq	*%rax
   2f381:      	ud2
   2f383:      	movq	0x28(%rsp), %rax
   2f388:      	movq	0x30(%rsp), %rdx
   2f38d:      	addq	$0x68, %rsp
   2f391:      	retq
   2f392:      	int3
   2f393:      	int3
   2f394:      	int3
   2f395:      	int3
   2f396:      	int3
   2f397:      	int3
   2f398:      	int3
   2f399:      	int3
   2f39a:      	int3
   2f39b:      	int3
   2f39c:      	int3
   2f39d:      	int3
   2f39e:      	int3
   2f39f:      	int3

000000000002f3a0 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hcd60d86386283fe7>:
   2f3a0:      	subq	$0x68, %rsp
   2f3a4:      	movq	%rdi, 0x18(%rsp)
   2f3a9:      	movq	%rdi, 0x50(%rsp)
   2f3ae:      	movq	0xc12b(%rip), %rax      # 0x3b4e0 <zlgk82z0l71lvh9+0x3b4e0>
   2f3b5:      	callq	*%rax
   2f3b7:      	movq	%rax, %rdi
   2f3ba:      	movq	0xc237(%rip), %rax      # 0x3b5f8 <zlgk82z0l71lvh9+0x3b5f8>
   2f3c1:      	callq	*%rax
   2f3c3:      	movq	%rax, 0x38(%rsp)
   2f3c8:      	movq	0x38(%rsp), %rdx
   2f3cd:      	xorl	%eax, %eax
   2f3cf:      	movl	$0x1, %ecx
   2f3d4:      	cmpq	$0x0, %rdx
   2f3d8:      	cmoveq	%rcx, %rax
   2f3dc:      	cmpq	$0x0, %rax
   2f3e0:      	jne	0x2f419 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hcd60d86386283fe7+0x79>
   2f3e2:      	movq	0x18(%rsp), %rax
   2f3e7:      	movq	0x38(%rsp), %rcx
   2f3ec:      	movq	%rcx, (%rsp)
   2f3f0:      	movq	%rcx, 0x58(%rsp)
   2f3f5:      	movq	0x10(%rax), %rcx
   2f3f9:      	movq	%rcx, 0x8(%rsp)
   2f3fe:      	movq	%rcx, 0x60(%rsp)
   2f403:      	movq	0x10(%rax), %rax
   2f407:      	addq	$0x1, %rax
   2f40b:      	movq	%rax, 0x10(%rsp)
   2f410:      	setb	%al
   2f413:      	testb	$0x1, %al
   2f415:      	jne	0x2f465 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hcd60d86386283fe7+0xc5>
   2f417:      	jmp	0x2f42e <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hcd60d86386283fe7+0x8e>
   2f419:      	movq	0xc420(%rip), %rax      # 0x3b840 <zlgk82z0l71lvh9+0x3b840>
   2f420:      	callq	*%rax
   2f422:      	movq	%rdx, 0x30(%rsp)
   2f427:      	movq	%rax, 0x28(%rsp)
   2f42c:      	jmp	0x2f483 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hcd60d86386283fe7+0xe3>
   2f42e:      	movq	(%rsp), %rax
   2f432:      	movq	0x8(%rsp), %rcx
   2f437:      	movq	0x18(%rsp), %rdx
   2f43c:      	movq	0x10(%rsp), %rsi
   2f441:      	movq	%rsi, 0x10(%rdx)
   2f445:      	movq	%rcx, 0x40(%rsp)
   2f44a:      	movq	%rax, 0x48(%rsp)
   2f44f:      	movq	0x40(%rsp), %rcx
   2f454:      	movq	0x48(%rsp), %rax
   2f459:      	movq	%rcx, 0x28(%rsp)
   2f45e:      	movq	%rax, 0x30(%rsp)
   2f463:      	jmp	0x2f483 <<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next::hcd60d86386283fe7+0xe3>
   2f465:      	leaq	-0x1c38c(%rip), %rdi    # 0x130e0 <str.1>
   2f46c:      	leaq	0xb5dd(%rip), %rdx      # 0x3aa50 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x450>
   2f473:      	movq	0xba56(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f47a:      	movl	$0x1c, %esi
   2f47f:      	callq	*%rax
   2f481:      	ud2
   2f483:      	movq	0x28(%rsp), %rax
   2f488:      	movq	0x30(%rsp), %rdx
   2f48d:      	addq	$0x68, %rsp
   2f491:      	retq
   2f492:      	int3
   2f493:      	int3
   2f494:      	int3
   2f495:      	int3
   2f496:      	int3
   2f497:      	int3
   2f498:      	int3
   2f499:      	int3
   2f49a:      	int3
   2f49b:      	int3
   2f49c:      	int3
   2f49d:      	int3
   2f49e:      	int3
   2f49f:      	int3

000000000002f4a0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h1f3fe9ea9e4f3bf0>:
   2f4a0:      	movq	%rdi, %rax
   2f4a3:      	movq	(%rsi), %rcx
   2f4a6:      	movq	%rcx, (%rdi)
   2f4a9:      	movq	0x8(%rsi), %rcx
   2f4ad:      	movq	%rcx, 0x8(%rdi)
   2f4b1:      	movq	0x10(%rsi), %rcx
   2f4b5:      	movq	%rcx, 0x10(%rdi)
   2f4b9:      	retq
   2f4ba:      	int3
   2f4bb:      	int3
   2f4bc:      	int3
   2f4bd:      	int3
   2f4be:      	int3
   2f4bf:      	int3

000000000002f4c0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h229ad41284007cb8>:
   2f4c0:      	movq	%rdi, %rax
   2f4c3:      	movq	(%rsi), %rcx
   2f4c6:      	movq	%rcx, (%rdi)
   2f4c9:      	movq	0x8(%rsi), %rcx
   2f4cd:      	movq	%rcx, 0x8(%rdi)
   2f4d1:      	movq	0x10(%rsi), %rcx
   2f4d5:      	movq	%rcx, 0x10(%rdi)
   2f4d9:      	retq
   2f4da:      	int3
   2f4db:      	int3
   2f4dc:      	int3
   2f4dd:      	int3
   2f4de:      	int3
   2f4df:      	int3

000000000002f4e0 <<I as core::iter::traits::collect::IntoIterator>::into_iter::h5076fa3acd430370>:
   2f4e0:      	movq	%rdi, %rax
   2f4e3:      	movq	(%rsi), %rcx
   2f4e6:      	movq	%rcx, (%rdi)
   2f4e9:      	movq	0x8(%rsi), %rcx
   2f4ed:      	movq	%rcx, 0x8(%rdi)
   2f4f1:      	movq	0x10(%rsi), %rcx
   2f4f5:      	movq	%rcx, 0x10(%rdi)
   2f4f9:      	retq
   2f4fa:      	int3
   2f4fb:      	int3
   2f4fc:      	int3
   2f4fd:      	int3
   2f4fe:      	int3
   2f4ff:      	int3

000000000002f500 <core::ptr::metadata::metadata::h301e3a2ffc2eb2c9>:
   2f500:      	subq	$0x20, %rsp
   2f504:      	movq	%rdi, 0x10(%rsp)
   2f509:      	movq	%rsi, 0x18(%rsp)
   2f50e:      	movq	%rdi, (%rsp)
   2f512:      	movq	%rsi, 0x8(%rsp)
   2f517:      	movq	0x8(%rsp), %rax
   2f51c:      	addq	$0x20, %rsp
   2f520:      	retq
   2f521:      	int3
   2f522:      	int3
   2f523:      	int3
   2f524:      	int3
   2f525:      	int3
   2f526:      	int3
   2f527:      	int3
   2f528:      	int3
   2f529:      	int3
   2f52a:      	int3
   2f52b:      	int3
   2f52c:      	int3
   2f52d:      	int3
   2f52e:      	int3
   2f52f:      	int3

000000000002f530 <core::ptr::metadata::metadata::h490255de86f66401>:
   2f530:      	subq	$0x20, %rsp
   2f534:      	movq	%rdi, 0x10(%rsp)
   2f539:      	movq	%rsi, 0x18(%rsp)
   2f53e:      	movq	%rdi, (%rsp)
   2f542:      	movq	%rsi, 0x8(%rsp)
   2f547:      	movq	0x8(%rsp), %rax
   2f54c:      	addq	$0x20, %rsp
   2f550:      	retq
   2f551:      	int3
   2f552:      	int3
   2f553:      	int3
   2f554:      	int3
   2f555:      	int3
   2f556:      	int3
   2f557:      	int3
   2f558:      	int3
   2f559:      	int3
   2f55a:      	int3
   2f55b:      	int3
   2f55c:      	int3
   2f55d:      	int3
   2f55e:      	int3
   2f55f:      	int3

000000000002f560 <core::ptr::metadata::metadata::h4b2c14324fe08d0d>:
   2f560:      	subq	$0x20, %rsp
   2f564:      	movq	%rdi, 0x10(%rsp)
   2f569:      	movq	%rsi, 0x18(%rsp)
   2f56e:      	movq	%rdi, (%rsp)
   2f572:      	movq	%rsi, 0x8(%rsp)
   2f577:      	movq	0x8(%rsp), %rax
   2f57c:      	addq	$0x20, %rsp
   2f580:      	retq
   2f581:      	int3
   2f582:      	int3
   2f583:      	int3
   2f584:      	int3
   2f585:      	int3
   2f586:      	int3
   2f587:      	int3
   2f588:      	int3
   2f589:      	int3
   2f58a:      	int3
   2f58b:      	int3
   2f58c:      	int3
   2f58d:      	int3
   2f58e:      	int3
   2f58f:      	int3

000000000002f590 <core::ptr::metadata::metadata::h6c0908fa89455da2>:
   2f590:      	subq	$0x20, %rsp
   2f594:      	movq	%rdi, 0x10(%rsp)
   2f599:      	movq	%rsi, 0x18(%rsp)
   2f59e:      	movq	%rdi, (%rsp)
   2f5a2:      	movq	%rsi, 0x8(%rsp)
   2f5a7:      	movq	0x8(%rsp), %rax
   2f5ac:      	addq	$0x20, %rsp
   2f5b0:      	retq
   2f5b1:      	int3
   2f5b2:      	int3
   2f5b3:      	int3
   2f5b4:      	int3
   2f5b5:      	int3
   2f5b6:      	int3
   2f5b7:      	int3
   2f5b8:      	int3
   2f5b9:      	int3
   2f5ba:      	int3
   2f5bb:      	int3
   2f5bc:      	int3
   2f5bd:      	int3
   2f5be:      	int3
   2f5bf:      	int3

000000000002f5c0 <core::ptr::metadata::from_raw_parts::h3a7a5da685d80f6c>:
   2f5c0:      	subq	$0x30, %rsp
   2f5c4:      	movq	%rdi, 0x20(%rsp)
   2f5c9:      	movq	%rsi, 0x28(%rsp)
   2f5ce:      	movq	%rdi, 0x10(%rsp)
   2f5d3:      	movq	%rsi, 0x18(%rsp)
   2f5d8:      	movq	0x10(%rsp), %rcx
   2f5dd:      	movq	0x18(%rsp), %rax
   2f5e2:      	movq	%rcx, (%rsp)
   2f5e6:      	movq	%rax, 0x8(%rsp)
   2f5eb:      	movq	(%rsp), %rax
   2f5ef:      	movq	0x8(%rsp), %rdx
   2f5f4:      	addq	$0x30, %rsp
   2f5f8:      	retq
   2f5f9:      	int3
   2f5fa:      	int3
   2f5fb:      	int3
   2f5fc:      	int3
   2f5fd:      	int3
   2f5fe:      	int3
   2f5ff:      	int3

000000000002f600 <core::ptr::metadata::from_raw_parts::h8b0ada4115dc9a84>:
   2f600:      	subq	$0x30, %rsp
   2f604:      	movq	%rdi, 0x20(%rsp)
   2f609:      	movq	%rsi, 0x28(%rsp)
   2f60e:      	movq	%rdi, 0x10(%rsp)
   2f613:      	movq	%rsi, 0x18(%rsp)
   2f618:      	movq	0x10(%rsp), %rcx
   2f61d:      	movq	0x18(%rsp), %rax
   2f622:      	movq	%rcx, (%rsp)
   2f626:      	movq	%rax, 0x8(%rsp)
   2f62b:      	movq	(%rsp), %rax
   2f62f:      	movq	0x8(%rsp), %rdx
   2f634:      	addq	$0x30, %rsp
   2f638:      	retq
   2f639:      	int3
   2f63a:      	int3
   2f63b:      	int3
   2f63c:      	int3
   2f63d:      	int3
   2f63e:      	int3
   2f63f:      	int3

000000000002f640 <core::ptr::metadata::from_raw_parts::hac5d664c5a4dd20d>:
   2f640:      	subq	$0x30, %rsp
   2f644:      	movq	%rdi, 0x20(%rsp)
   2f649:      	movq	%rsi, 0x28(%rsp)
   2f64e:      	movq	%rdi, 0x10(%rsp)
   2f653:      	movq	%rsi, 0x18(%rsp)
   2f658:      	movq	0x10(%rsp), %rcx
   2f65d:      	movq	0x18(%rsp), %rax
   2f662:      	movq	%rcx, (%rsp)
   2f666:      	movq	%rax, 0x8(%rsp)
   2f66b:      	movq	(%rsp), %rax
   2f66f:      	movq	0x8(%rsp), %rdx
   2f674:      	addq	$0x30, %rsp
   2f678:      	retq
   2f679:      	int3
   2f67a:      	int3
   2f67b:      	int3
   2f67c:      	int3
   2f67d:      	int3
   2f67e:      	int3
   2f67f:      	int3

000000000002f680 <core::ptr::metadata::from_raw_parts::hd9de457dbd9dc5ee>:
   2f680:      	subq	$0x30, %rsp
   2f684:      	movq	%rdi, 0x20(%rsp)
   2f689:      	movq	%rsi, 0x28(%rsp)
   2f68e:      	movq	%rdi, 0x10(%rsp)
   2f693:      	movq	%rsi, 0x18(%rsp)
   2f698:      	movq	0x10(%rsp), %rcx
   2f69d:      	movq	0x18(%rsp), %rax
   2f6a2:      	movq	%rcx, (%rsp)
   2f6a6:      	movq	%rax, 0x8(%rsp)
   2f6ab:      	movq	(%rsp), %rax
   2f6af:      	movq	0x8(%rsp), %rdx
   2f6b4:      	addq	$0x30, %rsp
   2f6b8:      	retq
   2f6b9:      	int3
   2f6ba:      	int3
   2f6bb:      	int3
   2f6bc:      	int3
   2f6bd:      	int3
   2f6be:      	int3
   2f6bf:      	int3

000000000002f6c0 <core::ptr::metadata::from_raw_parts_mut::hd18a404b635bc0d7>:
   2f6c0:      	subq	$0x30, %rsp
   2f6c4:      	movq	%rdi, 0x20(%rsp)
   2f6c9:      	movq	%rsi, 0x28(%rsp)
   2f6ce:      	movq	%rdi, 0x10(%rsp)
   2f6d3:      	movq	%rsi, 0x18(%rsp)
   2f6d8:      	movq	0x10(%rsp), %rcx
   2f6dd:      	movq	0x18(%rsp), %rax
   2f6e2:      	movq	%rcx, (%rsp)
   2f6e6:      	movq	%rax, 0x8(%rsp)
   2f6eb:      	movq	(%rsp), %rax
   2f6ef:      	movq	0x8(%rsp), %rdx
   2f6f4:      	addq	$0x30, %rsp
   2f6f8:      	retq
   2f6f9:      	int3
   2f6fa:      	int3
   2f6fb:      	int3
   2f6fc:      	int3
   2f6fd:      	int3
   2f6fe:      	int3
   2f6ff:      	int3

000000000002f700 <core::iter::adapters::filter::Filter<I,P>::new::hdecdd1c2f5cc1f55>:
   2f700:      	subq	$0x28, %rsp
   2f704:      	movq	%rdi, 0x10(%rsp)
   2f709:      	movq	%rsi, 0x18(%rsp)
   2f70e:      	movq	%rdi, (%rsp)
   2f712:      	movq	%rsi, 0x8(%rsp)
   2f717:      	movq	(%rsp), %rax
   2f71b:      	movq	0x8(%rsp), %rdx
   2f720:      	addq	$0x28, %rsp
   2f724:      	retq
   2f725:      	int3
   2f726:      	int3
   2f727:      	int3
   2f728:      	int3
   2f729:      	int3
   2f72a:      	int3
   2f72b:      	int3
   2f72c:      	int3
   2f72d:      	int3
   2f72e:      	int3
   2f72f:      	int3

000000000002f730 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count::he9f712e6789bc1a0>:
   2f730:      	subq	$0x28, %rsp
   2f734:      	movq	%rsi, 0x10(%rsp)
   2f739:      	movq	%rdi, 0x8(%rsp)
   2f73e:      	movq	%rdi, 0x18(%rsp)
   2f743:      	movq	%rsi, 0x20(%rsp)
   2f748:      	movq	0xc699(%rip), %rax      # 0x3bde8 <zlgk82z0l71lvh9+0x3bde8>
   2f74f:      	callq	*%rax
   2f751:      	movq	0x8(%rsp), %rdi
   2f756:      	movq	0x10(%rsp), %rsi
   2f75b:      	movq	0xc3f6(%rip), %rax      # 0x3bb58 <zlgk82z0l71lvh9+0x3bb58>
   2f762:      	callq	*%rax
   2f764:      	movq	%rax, %rdi
   2f767:      	movq	%rdx, %rsi
   2f76a:      	movq	0xc67f(%rip), %rax      # 0x3bdf0 <zlgk82z0l71lvh9+0x3bdf0>
   2f771:      	callq	*%rax
   2f773:      	addq	$0x28, %rsp
   2f777:      	retq
   2f778:      	int3
   2f779:      	int3
   2f77a:      	int3
   2f77b:      	int3
   2f77c:      	int3
   2f77d:      	int3
   2f77e:      	int3
   2f77f:      	int3

000000000002f780 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count::to_usize::ha519be8f7143206e>:
   2f780:      	subq	$0x1, %rsp
   2f784:      	addq	$0x1, %rsp
   2f788:      	retq
   2f789:      	int3
   2f78a:      	int3
   2f78b:      	int3
   2f78c:      	int3
   2f78d:      	int3
   2f78e:      	int3
   2f78f:      	int3

000000000002f790 <<core::iter::adapters::filter::Filter<I,P> as core::iter::traits::iterator::Iterator>::count::to_usize::{{closure}}::h59921e707df48968>:
   2f790:      	subq	$0x18, %rsp
   2f794:      	movq	%rsi, (%rsp)
   2f798:      	movq	%rdi, 0x10(%rsp)
   2f79d:      	movq	%rsp, %rax
   2f7a0:      	movq	%rax, 0x8(%rsp)
   2f7a5:      	movq	0x8(%rsp), %rsi
   2f7aa:      	callq	0x2ec90 <core::str::count::char_count_general_case::{{closure}}::hb2fff9e2af4ccc71>
   2f7af:      	andb	$0x1, %al
   2f7b1:      	movzbl	%al, %eax
   2f7b4:      	addq	$0x18, %rsp
   2f7b8:      	retq
   2f7b9:      	int3
   2f7ba:      	int3
   2f7bb:      	int3
   2f7bc:      	int3
   2f7bd:      	int3
   2f7be:      	int3
   2f7bf:      	int3

000000000002f7c0 <<usize as core::ops::arith::Sub>::sub::hc5a3d01df045b7e0>:
   2f7c0:      	subq	$0x18, %rsp
   2f7c4:      	movq	%rdi, 0x8(%rsp)
   2f7c9:      	movq	%rsi, 0x10(%rsp)
   2f7ce:      	movq	%rdi, %rax
   2f7d1:      	subq	%rsi, %rax
   2f7d4:      	movq	%rax, (%rsp)
   2f7d8:      	cmpq	%rsi, %rdi
   2f7db:      	setb	%al
   2f7de:      	testb	$0x1, %al
   2f7e0:      	jne	0x2f7eb <<usize as core::ops::arith::Sub>::sub::hc5a3d01df045b7e0+0x2b>
   2f7e2:      	movq	(%rsp), %rax
   2f7e6:      	addq	$0x18, %rsp
   2f7ea:      	retq
   2f7eb:      	leaq	-0x1c662(%rip), %rdi    # 0x13190 <str.0>
   2f7f2:      	leaq	0xb26f(%rip), %rdx      # 0x3aa68 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x468>
   2f7f9:      	movq	0xb6d0(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f800:      	movl	$0x21, %esi
   2f805:      	callq	*%rax
   2f807:      	ud2
   2f809:      	int3
   2f80a:      	int3
   2f80b:      	int3
   2f80c:      	int3
   2f80d:      	int3
   2f80e:      	int3
   2f80f:      	int3

000000000002f810 <<u8 as core::ops::arith::Sub>::sub::h1e779299b457b7b4>:
   2f810:      	pushq	%rax
   2f811:      	movb	%sil, %cl
   2f814:      	movb	%dil, %al
   2f817:      	movb	%al, 0x6(%rsp)
   2f81b:      	movb	%cl, 0x7(%rsp)
   2f81f:      	movb	%al, %dl
   2f821:      	subb	%cl, %dl
   2f823:      	movb	%dl, 0x5(%rsp)
   2f827:      	cmpb	%cl, %al
   2f829:      	setb	%al
   2f82c:      	testb	$0x1, %al
   2f82e:      	jne	0x2f836 <<u8 as core::ops::arith::Sub>::sub::h1e779299b457b7b4+0x26>
   2f830:      	movb	0x5(%rsp), %al
   2f834:      	popq	%rcx
   2f835:      	retq
   2f836:      	leaq	-0x1c6ad(%rip), %rdi    # 0x13190 <str.0>
   2f83d:      	leaq	0xb224(%rip), %rdx      # 0x3aa68 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x468>
   2f844:      	movq	0xb685(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f84b:      	movl	$0x21, %esi
   2f850:      	callq	*%rax
   2f852:      	ud2
   2f854:      	int3
   2f855:      	int3
   2f856:      	int3
   2f857:      	int3
   2f858:      	int3
   2f859:      	int3
   2f85a:      	int3
   2f85b:      	int3
   2f85c:      	int3
   2f85d:      	int3
   2f85e:      	int3
   2f85f:      	int3

000000000002f860 <<u32 as core::ops::arith::Sub>::sub::hc260d332fd620640>:
   2f860:      	subq	$0x18, %rsp
   2f864:      	movl	%edi, 0x10(%rsp)
   2f868:      	movl	%esi, 0x14(%rsp)
   2f86c:      	movl	%edi, %eax
   2f86e:      	subl	%esi, %eax
   2f870:      	movl	%eax, 0xc(%rsp)
   2f874:      	cmpl	%esi, %edi
   2f876:      	setb	%al
   2f879:      	testb	$0x1, %al
   2f87b:      	jne	0x2f886 <<u32 as core::ops::arith::Sub>::sub::hc260d332fd620640+0x26>
   2f87d:      	movl	0xc(%rsp), %eax
   2f881:      	addq	$0x18, %rsp
   2f885:      	retq
   2f886:      	leaq	-0x1c6fd(%rip), %rdi    # 0x13190 <str.0>
   2f88d:      	leaq	0xb1d4(%rip), %rdx      # 0x3aa68 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x468>
   2f894:      	movq	0xb635(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f89b:      	movl	$0x21, %esi
   2f8a0:      	callq	*%rax
   2f8a2:      	ud2
   2f8a4:      	int3
   2f8a5:      	int3
   2f8a6:      	int3
   2f8a7:      	int3
   2f8a8:      	int3
   2f8a9:      	int3
   2f8aa:      	int3
   2f8ab:      	int3
   2f8ac:      	int3
   2f8ad:      	int3
   2f8ae:      	int3
   2f8af:      	int3

000000000002f8b0 <<u64 as core::ops::arith::Sub>::sub::h56ef233acba06873>:
   2f8b0:      	subq	$0x18, %rsp
   2f8b4:      	movq	%rdi, 0x8(%rsp)
   2f8b9:      	movq	%rsi, 0x10(%rsp)
   2f8be:      	movq	%rdi, %rax
   2f8c1:      	subq	%rsi, %rax
   2f8c4:      	movq	%rax, (%rsp)
   2f8c8:      	cmpq	%rsi, %rdi
   2f8cb:      	setb	%al
   2f8ce:      	testb	$0x1, %al
   2f8d0:      	jne	0x2f8db <<u64 as core::ops::arith::Sub>::sub::h56ef233acba06873+0x2b>
   2f8d2:      	movq	(%rsp), %rax
   2f8d6:      	addq	$0x18, %rsp
   2f8da:      	retq
   2f8db:      	leaq	-0x1c752(%rip), %rdi    # 0x13190 <str.0>
   2f8e2:      	leaq	0xb17f(%rip), %rdx      # 0x3aa68 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x468>
   2f8e9:      	movq	0xb5e0(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f8f0:      	movl	$0x21, %esi
   2f8f5:      	callq	*%rax
   2f8f7:      	ud2
   2f8f9:      	int3
   2f8fa:      	int3
   2f8fb:      	int3
   2f8fc:      	int3
   2f8fd:      	int3
   2f8fe:      	int3
   2f8ff:      	int3

000000000002f900 <<usize as core::ops::arith::Div>::div::h82f69659cfa15bfe>:
   2f900:      	subq	$0x28, %rsp
   2f904:      	movq	%rsi, 0x8(%rsp)
   2f909:      	movq	%rdi, 0x10(%rsp)
   2f90e:      	movq	%rdi, 0x18(%rsp)
   2f913:      	movq	%rsi, 0x20(%rsp)
   2f918:      	cmpq	$0x0, %rsi
   2f91c:      	sete	%al
   2f91f:      	testb	$0x1, %al
   2f921:      	jne	0x2f937 <<usize as core::ops::arith::Div>::div::h82f69659cfa15bfe+0x37>
   2f923:      	movq	0x8(%rsp), %rcx
   2f928:      	movq	0x10(%rsp), %rax
   2f92d:      	xorl	%edx, %edx
   2f92f:      	divq	%rcx
   2f932:      	addq	$0x28, %rsp
   2f936:      	retq
   2f937:      	leaq	-0x1c70e(%rip), %rdi    # 0x13230 <str.5>
   2f93e:      	leaq	0xb13b(%rip), %rdx      # 0x3aa80 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x480>
   2f945:      	movq	0xb584(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f94c:      	movl	$0x19, %esi
   2f951:      	callq	*%rax
   2f953:      	ud2
   2f955:      	int3
   2f956:      	int3
   2f957:      	int3
   2f958:      	int3
   2f959:      	int3
   2f95a:      	int3
   2f95b:      	int3
   2f95c:      	int3
   2f95d:      	int3
   2f95e:      	int3
   2f95f:      	int3

000000000002f960 <<u8 as core::ops::arith::Div>::div::ha800a8b9398cee7b>:
   2f960:      	pushq	%rax
   2f961:      	movb	%sil, %al
   2f964:      	movb	%al, 0x4(%rsp)
   2f968:      	movb	%dil, %cl
   2f96b:      	movb	%cl, 0x5(%rsp)
   2f96f:      	movb	%cl, 0x6(%rsp)
   2f973:      	movb	%al, 0x7(%rsp)
   2f977:      	cmpb	$0x0, %al
   2f979:      	sete	%al
   2f97c:      	testb	$0x1, %al
   2f97e:      	jne	0x2f990 <<u8 as core::ops::arith::Div>::div::ha800a8b9398cee7b+0x30>
   2f980:      	movb	0x4(%rsp), %cl
   2f984:      	movb	0x5(%rsp), %al
   2f988:      	movzbw	%al, %ax
   2f98c:      	divb	%cl
   2f98e:      	popq	%rcx
   2f98f:      	retq
   2f990:      	leaq	-0x1c767(%rip), %rdi    # 0x13230 <str.5>
   2f997:      	leaq	0xb0e2(%rip), %rdx      # 0x3aa80 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x480>
   2f99e:      	movq	0xb52b(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f9a5:      	movl	$0x19, %esi
   2f9aa:      	callq	*%rax
   2f9ac:      	ud2
   2f9ae:      	int3
   2f9af:      	int3

000000000002f9b0 <<u32 as core::ops::arith::Div>::div::h3e00c19ee333945a>:
   2f9b0:      	subq	$0x18, %rsp
   2f9b4:      	movl	%esi, 0x8(%rsp)
   2f9b8:      	movl	%edi, 0xc(%rsp)
   2f9bc:      	movl	%edi, 0x10(%rsp)
   2f9c0:      	movl	%esi, 0x14(%rsp)
   2f9c4:      	cmpl	$0x0, %esi
   2f9c7:      	sete	%al
   2f9ca:      	testb	$0x1, %al
   2f9cc:      	jne	0x2f9df <<u32 as core::ops::arith::Div>::div::h3e00c19ee333945a+0x2f>
   2f9ce:      	movl	0x8(%rsp), %ecx
   2f9d2:      	movl	0xc(%rsp), %eax
   2f9d6:      	xorl	%edx, %edx
   2f9d8:      	divl	%ecx
   2f9da:      	addq	$0x18, %rsp
   2f9de:      	retq
   2f9df:      	leaq	-0x1c7b6(%rip), %rdi    # 0x13230 <str.5>
   2f9e6:      	leaq	0xb093(%rip), %rdx      # 0x3aa80 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x480>
   2f9ed:      	movq	0xb4dc(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2f9f4:      	movl	$0x19, %esi
   2f9f9:      	callq	*%rax
   2f9fb:      	ud2
   2f9fd:      	int3
   2f9fe:      	int3
   2f9ff:      	int3

000000000002fa00 <<u64 as core::ops::arith::Div>::div::hc8d4786271e1fa7b>:
   2fa00:      	subq	$0x28, %rsp
   2fa04:      	movq	%rsi, 0x8(%rsp)
   2fa09:      	movq	%rdi, 0x10(%rsp)
   2fa0e:      	movq	%rdi, 0x18(%rsp)
   2fa13:      	movq	%rsi, 0x20(%rsp)
   2fa18:      	cmpq	$0x0, %rsi
   2fa1c:      	sete	%al
   2fa1f:      	testb	$0x1, %al
   2fa21:      	jne	0x2fa37 <<u64 as core::ops::arith::Div>::div::hc8d4786271e1fa7b+0x37>
   2fa23:      	movq	0x8(%rsp), %rcx
   2fa28:      	movq	0x10(%rsp), %rax
   2fa2d:      	xorl	%edx, %edx
   2fa2f:      	divq	%rcx
   2fa32:      	addq	$0x28, %rsp
   2fa36:      	retq
   2fa37:      	leaq	-0x1c80e(%rip), %rdi    # 0x13230 <str.5>
   2fa3e:      	leaq	0xb03b(%rip), %rdx      # 0x3aa80 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x480>
   2fa45:      	movq	0xb484(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2fa4c:      	movl	$0x19, %esi
   2fa51:      	callq	*%rax
   2fa53:      	ud2
   2fa55:      	int3
   2fa56:      	int3
   2fa57:      	int3
   2fa58:      	int3
   2fa59:      	int3
   2fa5a:      	int3
   2fa5b:      	int3
   2fa5c:      	int3
   2fa5d:      	int3
   2fa5e:      	int3
   2fa5f:      	int3

000000000002fa60 <<usize as core::ops::arith::Rem>::rem::hc48f557f0608a0c1>:
   2fa60:      	subq	$0x28, %rsp
   2fa64:      	movq	%rsi, 0x8(%rsp)
   2fa69:      	movq	%rdi, 0x10(%rsp)
   2fa6e:      	movq	%rdi, 0x18(%rsp)
   2fa73:      	movq	%rsi, 0x20(%rsp)
   2fa78:      	cmpq	$0x0, %rsi
   2fa7c:      	sete	%al
   2fa7f:      	testb	$0x1, %al
   2fa81:      	jne	0x2fa9a <<usize as core::ops::arith::Rem>::rem::hc48f557f0608a0c1+0x3a>
   2fa83:      	movq	0x8(%rsp), %rcx
   2fa88:      	movq	0x10(%rsp), %rax
   2fa8d:      	xorl	%edx, %edx
   2fa8f:      	divq	%rcx
   2fa92:      	movq	%rdx, %rax
   2fa95:      	addq	$0x28, %rsp
   2fa99:      	retq
   2fa9a:      	leaq	-0x1c851(%rip), %rdi    # 0x13250 <str.6>
   2faa1:      	leaq	0xaff0(%rip), %rdx      # 0x3aa98 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x498>
   2faa8:      	movq	0xb421(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2faaf:      	movl	$0x39, %esi
   2fab4:      	callq	*%rax
   2fab6:      	ud2
   2fab8:      	int3
   2fab9:      	int3
   2faba:      	int3
   2fabb:      	int3
   2fabc:      	int3
   2fabd:      	int3
   2fabe:      	int3
   2fabf:      	int3

000000000002fac0 <<u8 as core::ops::arith::Rem>::rem::h0ff1b38ff5e2f387>:
   2fac0:      	pushq	%rax
   2fac1:      	movb	%sil, %al
   2fac4:      	movb	%al, 0x4(%rsp)
   2fac8:      	movb	%dil, %cl
   2facb:      	movb	%cl, 0x5(%rsp)
   2facf:      	movb	%cl, 0x6(%rsp)
   2fad3:      	movb	%al, 0x7(%rsp)
   2fad7:      	cmpb	$0x0, %al
   2fad9:      	sete	%al
   2fadc:      	testb	$0x1, %al
   2fade:      	jne	0x2faf4 <<u8 as core::ops::arith::Rem>::rem::h0ff1b38ff5e2f387+0x34>
   2fae0:      	movb	0x4(%rsp), %cl
   2fae4:      	movb	0x5(%rsp), %al
   2fae8:      	movzbw	%al, %ax
   2faec:      	divb	%cl
   2faee:      	shrw	$0x8, %ax
   2faf2:      	popq	%rcx
   2faf3:      	retq
   2faf4:      	leaq	-0x1c8ab(%rip), %rdi    # 0x13250 <str.6>
   2fafb:      	leaq	0xaf96(%rip), %rdx      # 0x3aa98 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x498>
   2fb02:      	movq	0xb3c7(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2fb09:      	movl	$0x39, %esi
   2fb0e:      	callq	*%rax
   2fb10:      	ud2
   2fb12:      	int3
   2fb13:      	int3
   2fb14:      	int3
   2fb15:      	int3
   2fb16:      	int3
   2fb17:      	int3
   2fb18:      	int3
   2fb19:      	int3
   2fb1a:      	int3
   2fb1b:      	int3
   2fb1c:      	int3
   2fb1d:      	int3
   2fb1e:      	int3
   2fb1f:      	int3

000000000002fb20 <<u32 as core::ops::arith::Rem>::rem::h20d945228922c7a4>:
   2fb20:      	subq	$0x18, %rsp
   2fb24:      	movl	%esi, 0x8(%rsp)
   2fb28:      	movl	%edi, 0xc(%rsp)
   2fb2c:      	movl	%edi, 0x10(%rsp)
   2fb30:      	movl	%esi, 0x14(%rsp)
   2fb34:      	cmpl	$0x0, %esi
   2fb37:      	sete	%al
   2fb3a:      	testb	$0x1, %al
   2fb3c:      	jne	0x2fb51 <<u32 as core::ops::arith::Rem>::rem::h20d945228922c7a4+0x31>
   2fb3e:      	movl	0x8(%rsp), %ecx
   2fb42:      	movl	0xc(%rsp), %eax
   2fb46:      	xorl	%edx, %edx
   2fb48:      	divl	%ecx
   2fb4a:      	movl	%edx, %eax
   2fb4c:      	addq	$0x18, %rsp
   2fb50:      	retq
   2fb51:      	leaq	-0x1c908(%rip), %rdi    # 0x13250 <str.6>
   2fb58:      	leaq	0xaf39(%rip), %rdx      # 0x3aa98 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x498>
   2fb5f:      	movq	0xb36a(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2fb66:      	movl	$0x39, %esi
   2fb6b:      	callq	*%rax
   2fb6d:      	ud2
   2fb6f:      	int3

000000000002fb70 <<u64 as core::ops::arith::Rem>::rem::hd286ea914da001dd>:
   2fb70:      	subq	$0x28, %rsp
   2fb74:      	movq	%rsi, 0x8(%rsp)
   2fb79:      	movq	%rdi, 0x10(%rsp)
   2fb7e:      	movq	%rdi, 0x18(%rsp)
   2fb83:      	movq	%rsi, 0x20(%rsp)
   2fb88:      	cmpq	$0x0, %rsi
   2fb8c:      	sete	%al
   2fb8f:      	testb	$0x1, %al
   2fb91:      	jne	0x2fbaa <<u64 as core::ops::arith::Rem>::rem::hd286ea914da001dd+0x3a>
   2fb93:      	movq	0x8(%rsp), %rcx
   2fb98:      	movq	0x10(%rsp), %rax
   2fb9d:      	xorl	%edx, %edx
   2fb9f:      	divq	%rcx
   2fba2:      	movq	%rdx, %rax
   2fba5:      	addq	$0x28, %rsp
   2fba9:      	retq
   2fbaa:      	leaq	-0x1c961(%rip), %rdi    # 0x13250 <str.6>
   2fbb1:      	leaq	0xaee0(%rip), %rdx      # 0x3aa98 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x498>
   2fbb8:      	movq	0xb311(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   2fbbf:      	movl	$0x39, %esi
   2fbc4:      	callq	*%rax
   2fbc6:      	ud2
   2fbc8:      	int3
   2fbc9:      	int3
   2fbca:      	int3
   2fbcb:      	int3
   2fbcc:      	int3
   2fbcd:      	int3
   2fbce:      	int3
   2fbcf:      	int3

000000000002fbd0 <core::cmp::impls::<impl core::cmp::PartialEq<&B> for &A>::eq::hdc074d24d8cca2a0>:
   2fbd0:      	subq	$0x18, %rsp
   2fbd4:      	movq	%rsi, %rax
   2fbd7:      	movq	%rdi, %rcx
   2fbda:      	movq	%rcx, 0x8(%rsp)
   2fbdf:      	movq	%rax, 0x10(%rsp)
   2fbe4:      	movq	(%rcx), %rdi
   2fbe7:      	movq	0x8(%rcx), %rsi
   2fbeb:      	movq	(%rax), %rdx
   2fbee:      	movq	0x8(%rax), %rcx
   2fbf2:      	movq	0xbccf(%rip), %rax      # 0x3b8c8 <zlgk82z0l71lvh9+0x3b8c8>
   2fbf9:      	callq	*%rax
   2fbfb:      	andb	$0x1, %al
   2fbfd:      	movzbl	%al, %eax
   2fc00:      	addq	$0x18, %rsp
   2fc04:      	retq
   2fc05:      	int3
   2fc06:      	int3
   2fc07:      	int3
   2fc08:      	int3
   2fc09:      	int3
   2fc0a:      	int3
   2fc0b:      	int3
   2fc0c:      	int3
   2fc0d:      	int3
   2fc0e:      	int3
   2fc0f:      	int3

000000000002fc10 <core::iter::adapters::map::Map<I,F>::new::hd03b0cf5515bfd74>:
   2fc10:      	subq	$0x28, %rsp
   2fc14:      	movq	%rdi, 0x10(%rsp)
   2fc19:      	movq	%rsi, 0x18(%rsp)
   2fc1e:      	movq	%rdi, (%rsp)
   2fc22:      	movq	%rsi, 0x8(%rsp)
   2fc27:      	movq	(%rsp), %rax
   2fc2b:      	movq	0x8(%rsp), %rdx
   2fc30:      	addq	$0x28, %rsp
   2fc34:      	retq
   2fc35:      	int3
   2fc36:      	int3
   2fc37:      	int3
   2fc38:      	int3
   2fc39:      	int3
   2fc3a:      	int3
   2fc3b:      	int3
   2fc3c:      	int3
   2fc3d:      	int3
   2fc3e:      	int3
   2fc3f:      	int3

000000000002fc40 <core::iter::adapters::map::map_fold::h07ea740fb6f845ec>:
   2fc40:      	subq	$0x2, %rsp
   2fc44:      	addq	$0x2, %rsp
   2fc48:      	retq
   2fc49:      	int3
   2fc4a:      	int3
   2fc4b:      	int3
   2fc4c:      	int3
   2fc4d:      	int3
   2fc4e:      	int3
   2fc4f:      	int3

000000000002fc50 <core::iter::adapters::map::map_fold::{{closure}}::h5381f6bf1da2a25d>:
   2fc50:      	subq	$0x48, %rsp
   2fc54:      	movq	%rsi, 0x8(%rsp)
   2fc59:      	movq	%rdi, 0x10(%rsp)
   2fc5e:      	movq	%rdi, 0x30(%rsp)
   2fc63:      	movq	%rsi, 0x38(%rsp)
   2fc68:      	movq	%rdx, 0x40(%rsp)
   2fc6d:      	movq	%rdx, 0x28(%rsp)
   2fc72:      	movq	0x28(%rsp), %rsi
   2fc77:      	movq	0xc17a(%rip), %rax      # 0x3bdf8 <zlgk82z0l71lvh9+0x3bdf8>
   2fc7e:      	callq	*%rax
   2fc80:      	movq	0x8(%rsp), %rsi
   2fc85:      	movq	0x10(%rsp), %rdi
   2fc8a:      	movq	%rsi, 0x18(%rsp)
   2fc8f:      	movq	%rax, 0x20(%rsp)
   2fc94:      	movq	0x18(%rsp), %rsi
   2fc99:      	movq	0x20(%rsp), %rdx
   2fc9e:      	movq	0xbc0b(%rip), %rax      # 0x3b8b0 <zlgk82z0l71lvh9+0x3b8b0>
   2fca5:      	callq	*%rax
   2fca7:      	addq	$0x48, %rsp
   2fcab:      	retq
   2fcac:      	int3
   2fcad:      	int3
   2fcae:      	int3
   2fcaf:      	int3

000000000002fcb0 <<core::iter::adapters::map::Map<I,F> as core::iter::traits::iterator::Iterator>::fold::h0e0aae2912053843>:
   2fcb0:      	subq	$0x38, %rsp
   2fcb4:      	movq	%rdx, 0x10(%rsp)
   2fcb9:      	movq	%rsi, 0x8(%rsp)
   2fcbe:      	movq	%rdi, (%rsp)
   2fcc2:      	movq	%rdi, 0x18(%rsp)
   2fcc7:      	movq	%rsi, 0x20(%rsp)
   2fccc:      	movq	%rdx, 0x28(%rsp)
   2fcd1:      	movq	0xc128(%rip), %rax      # 0x3be00 <zlgk82z0l71lvh9+0x3be00>
   2fcd8:      	callq	*%rax
   2fcda:      	movq	(%rsp), %rdi
   2fcde:      	movq	0x8(%rsp), %rsi
   2fce3:      	movq	0x10(%rsp), %rdx
   2fce8:      	movq	0xbf89(%rip), %rax      # 0x3bc78 <zlgk82z0l71lvh9+0x3bc78>
   2fcef:      	callq	*%rax
   2fcf1:      	addq	$0x38, %rsp
   2fcf5:      	retq
   2fcf6:      	int3
   2fcf7:      	int3
   2fcf8:      	int3
   2fcf9:      	int3
   2fcfa:      	int3
   2fcfb:      	int3
   2fcfc:      	int3
   2fcfd:      	int3
   2fcfe:      	int3
   2fcff:      	int3

000000000002fd00 <core::iter::traits::iterator::Iterator::sum::hfe4f324f1a69ad14>:
   2fd00:      	subq	$0x18, %rsp
   2fd04:      	movq	%rdi, 0x8(%rsp)
   2fd09:      	movq	%rsi, 0x10(%rsp)
   2fd0e:      	movq	0xbb8b(%rip), %rax      # 0x3b8a0 <zlgk82z0l71lvh9+0x3b8a0>
   2fd15:      	callq	*%rax
   2fd17:      	addq	$0x18, %rsp
   2fd1b:      	retq
   2fd1c:      	int3
   2fd1d:      	int3
   2fd1e:      	int3
   2fd1f:      	int3

000000000002fd20 <<core::fmt::builders::PadAdapterState as core::default::Default>::default::h39943362e7d43a18>:
   2fd20:      	subq	$0x1, %rsp
   2fd24:      	movb	$0x1, (%rsp)
   2fd28:      	movb	(%rsp), %al
   2fd2b:      	andb	$0x1, %al
   2fd2d:      	movzbl	%al, %eax
   2fd30:      	addq	$0x1, %rsp
   2fd34:      	retq
   2fd35:      	int3
   2fd36:      	int3
   2fd37:      	int3
   2fd38:      	int3
   2fd39:      	int3
   2fd3a:      	int3
   2fd3b:      	int3
   2fd3c:      	int3
   2fd3d:      	int3
   2fd3e:      	int3
   2fd3f:      	int3

000000000002fd40 <core::fmt::builders::PadAdapter::wrap::h92f5cd5c1288800f>:
   2fd40:      	subq	$0x38, %rsp
   2fd44:      	movq	%rdi, %rax
   2fd47:      	movq	%rax, 0x8(%rsp)
   2fd4c:      	movq	%rsi, 0x20(%rsp)
   2fd51:      	movq	%rdx, 0x28(%rsp)
   2fd56:      	movq	%rcx, 0x30(%rsp)
   2fd5b:      	movq	%rdx, 0x10(%rsp)
   2fd60:      	movq	%rcx, 0x18(%rsp)
   2fd65:      	movq	0x10(%rsp), %rdx
   2fd6a:      	movq	0x18(%rsp), %rcx
   2fd6f:      	callq	0x2d030 <core::fmt::Formatter::wrap_buf::hfccee8d385c451c1>
   2fd74:      	movq	0x8(%rsp), %rax
   2fd79:      	addq	$0x38, %rsp
   2fd7d:      	retq
   2fd7e:      	int3
   2fd7f:      	int3

000000000002fd80 <core::fmt::builders::PadAdapter::wrap::{{closure}}::ha2ae83696301a826>:
   2fd80:      	subq	$0x38, %rsp
   2fd84:      	movq	%rdi, (%rsp)
   2fd88:      	movq	%rsi, 0x8(%rsp)
   2fd8d:      	movq	%rdx, 0x28(%rsp)
   2fd92:      	movq	%rcx, 0x30(%rsp)
   2fd97:      	movq	(%rsp), %rdi
   2fd9b:      	movq	0x8(%rsp), %rax
   2fda0:      	movq	%rdx, 0x10(%rsp)
   2fda5:      	movq	%rcx, 0x18(%rsp)
   2fdaa:      	movq	%rax, 0x20(%rsp)
   2fdaf:      	movq	0xba6a(%rip), %rax      # 0x3b820 <zlgk82z0l71lvh9+0x3b820>
   2fdb6:      	leaq	0x10(%rsp), %rsi
   2fdbb:      	callq	*%rax
   2fdbd:      	leaq	0xacec(%rip), %rdx      # 0x3aab0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x4b0>
   2fdc4:      	addq	$0x38, %rsp
   2fdc8:      	retq
   2fdc9:      	int3
   2fdca:      	int3
   2fdcb:      	int3
   2fdcc:      	int3
   2fdcd:      	int3
   2fdce:      	int3
   2fdcf:      	int3

000000000002fdd0 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50>:
   2fdd0:      	subq	$0x138, %rsp            # imm = 0x138
   2fdd7:      	movq	%rdi, 0x10(%rsp)
   2fddc:      	movq	%rdi, 0x110(%rsp)
   2fde4:      	movq	%rsi, 0x118(%rsp)
   2fdec:      	movq	%rdx, 0x120(%rsp)
   2fdf4:      	movq	0xbfe5(%rip), %rax      # 0x3bde0 <zlgk82z0l71lvh9+0x3bde0>
   2fdfb:      	leaq	0x68(%rsp), %rdi
   2fe00:      	movl	$0xa, %ecx
   2fe05:      	callq	*%rax
   2fe07:      	movq	0xbeba(%rip), %rax      # 0x3bcc8 <zlgk82z0l71lvh9+0x3bcc8>
   2fe0e:      	leaq	0x20(%rsp), %rdi
   2fe13:      	leaq	0x68(%rsp), %rsi
   2fe18:      	callq	*%rax
   2fe1a:      	movl	$0x9, %ecx
   2fe1f:      	leaq	0xb0(%rsp), %rdi
   2fe27:      	leaq	0x20(%rsp), %rsi
   2fe2c:      	rep		movsq	(%rsi), %es:(%rdi)
   2fe2f:      	movq	0xbee2(%rip), %rax      # 0x3bd18 <zlgk82z0l71lvh9+0x3bd18>
   2fe36:      	leaq	0xb0(%rsp), %rdi
   2fe3e:      	callq	*%rax
   2fe40:      	movq	%rdx, 0x100(%rsp)
   2fe48:      	movq	%rax, 0xf8(%rsp)
   2fe50:      	movq	0xf8(%rsp), %rdx
   2fe58:      	movl	$0x1, %eax
   2fe5d:      	xorl	%ecx, %ecx
   2fe5f:      	cmpq	$0x0, %rdx
   2fe63:      	cmoveq	%rcx, %rax
   2fe67:      	cmpq	$0x0, %rax
   2fe6b:      	jne	0x2fe74 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0xa4>
   2fe6d:      	movb	$0x0, 0x1f(%rsp)
   2fe72:      	jmp	0x2feb1 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0xe1>
   2fe74:      	movq	0x10(%rsp), %rax
   2fe79:      	movq	0xf8(%rsp), %rdx
   2fe81:      	movq	%rdx, (%rsp)
   2fe85:      	movq	0x100(%rsp), %rcx
   2fe8d:      	movq	%rcx, 0x8(%rsp)
   2fe92:      	movq	%rdx, 0x128(%rsp)
   2fe9a:      	movq	%rcx, 0x130(%rsp)
   2fea2:      	movq	0x10(%rax), %rax
   2fea6:      	testb	$0x1, (%rax)
   2fea9:      	jne	0x2ff2f <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0x15f>
   2feaf:      	jmp	0x2fec2 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0xf2>
   2feb1:      	movb	0x1f(%rsp), %al
   2feb5:      	andb	$0x1, %al
   2feb7:      	movzbl	%al, %eax
   2feba:      	addq	$0x138, %rsp            # imm = 0x138
   2fec1:      	retq
   2fec2:      	movq	0x8(%rsp), %rsi
   2fec7:      	movq	(%rsp), %rdi
   2fecb:      	movq	0xbf06(%rip), %rax      # 0x3bdd8 <zlgk82z0l71lvh9+0x3bdd8>
   2fed2:      	movl	$0xa, %edx
   2fed7:      	callq	*%rax
   2fed9:      	movq	(%rsp), %rsi
   2fedd:      	movq	0x8(%rsp), %rdx
   2fee2:      	movb	%al, %dil
   2fee5:      	movq	0x10(%rsp), %rax
   2feea:      	movq	0x10(%rax), %rcx
   2feee:      	andb	$0x1, %dil
   2fef2:      	movb	%dil, (%rcx)
   2fef5:      	movq	(%rax), %rdi
   2fef8:      	movq	0x8(%rax), %rax
   2fefc:      	callq	*0x18(%rax)
   2feff:      	movzbl	%al, %edi
   2ff02:      	andl	$0x1, %edi
   2ff05:      	movq	0xb5fc(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2ff0c:      	callq	*%rax
   2ff0e:      	andb	$0x1, %al
   2ff10:      	movb	%al, 0x10f(%rsp)
   2ff17:      	movb	0x10f(%rsp), %al
   2ff1e:      	andb	$0x1, %al
   2ff20:      	movzbl	%al, %eax
   2ff23:      	cmpq	$0x0, %rax
   2ff27:      	je	0x2fe2f <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0x5f>
   2ff2d:      	jmp	0x2ff96 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0x1c6>
   2ff2f:      	movq	0x10(%rsp), %rax
   2ff34:      	movq	(%rax), %rdi
   2ff37:      	movq	0x8(%rax), %rax
   2ff3b:      	movq	0x18(%rax), %rax
   2ff3f:      	leaq	-0x1ec2e(%rip), %rsi    # 0x11318 <str.0+0x218>
   2ff46:      	movl	$0x4, %edx
   2ff4b:      	callq	*%rax
   2ff4d:      	movzbl	%al, %edi
   2ff50:      	andl	$0x1, %edi
   2ff53:      	movq	0xb5ae(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   2ff5a:      	callq	*%rax
   2ff5c:      	andb	$0x1, %al
   2ff5e:      	movb	%al, 0x10e(%rsp)
   2ff65:      	movb	0x10e(%rsp), %al
   2ff6c:      	andb	$0x1, %al
   2ff6e:      	movzbl	%al, %eax
   2ff71:      	cmpq	$0x0, %rax
   2ff75:      	je	0x2fec2 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0xf2>
   2ff7b:      	leaq	0xab76(%rip), %rdi      # 0x3aaf8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x4f8>
   2ff82:      	movq	0xb587(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2ff89:      	callq	*%rax
   2ff8b:      	andb	$0x1, %al
   2ff8d:      	movb	%al, 0x1f(%rsp)
   2ff91:      	jmp	0x2feb1 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0xe1>
   2ff96:      	leaq	0xab43(%rip), %rdi      # 0x3aae0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x4e0>
   2ff9d:      	movq	0xb56c(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   2ffa4:      	callq	*%rax
   2ffa6:      	andb	$0x1, %al
   2ffa8:      	movb	%al, 0x1f(%rsp)
   2ffac:      	jmp	0x2feb1 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str::h498307e10ac06b50+0xe1>
   2ffb1:      	int3
   2ffb2:      	int3
   2ffb3:      	int3
   2ffb4:      	int3
   2ffb5:      	int3
   2ffb6:      	int3
   2ffb7:      	int3
   2ffb8:      	int3
   2ffb9:      	int3
   2ffba:      	int3
   2ffbb:      	int3
   2ffbc:      	int3
   2ffbd:      	int3
   2ffbe:      	int3
   2ffbf:      	int3

000000000002ffc0 <core::fmt::builders::debug_struct_new::h549cd91b3c959628>:
   2ffc0:      	subq	$0x48, %rsp
   2ffc4:      	movq	%rcx, (%rsp)
   2ffc8:      	movq	%rdx, %rax
   2ffcb:      	movq	(%rsp), %rdx
   2ffcf:      	movq	%rax, 0x8(%rsp)
   2ffd4:      	movq	%rsi, %rax
   2ffd7:      	movq	0x8(%rsp), %rsi
   2ffdc:      	movq	%rax, 0x10(%rsp)
   2ffe1:      	movq	%rdi, %rax
   2ffe4:      	movq	0x10(%rsp), %rdi
   2ffe9:      	movq	%rax, 0x18(%rsp)
   2ffee:      	movq	%rax, 0x20(%rsp)
   2fff3:      	movq	%rdi, 0x28(%rsp)
   2fff8:      	movq	%rsi, 0x30(%rsp)
   2fffd:      	movq	%rdx, 0x38(%rsp)
   30002:      	movq	0xb08f(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30009:      	callq	*%rax
   3000b:      	movq	0x10(%rsp), %rsi
   30010:      	movq	0x18(%rsp), %rdi
   30015:      	movb	%al, %cl
   30017:      	movq	0x20(%rsp), %rax
   3001c:      	movb	%cl, %dl
   3001e:      	andb	$0x1, %dl
   30021:      	movb	%dl, 0x47(%rsp)
   30025:      	movq	%rsi, (%rdi)
   30028:      	andb	$0x1, %cl
   3002b:      	movb	%cl, 0x8(%rdi)
   3002e:      	movb	$0x0, 0x9(%rdi)
   30032:      	addq	$0x48, %rsp
   30036:      	retq
   30037:      	int3
   30038:      	int3
   30039:      	int3
   3003a:      	int3
   3003b:      	int3
   3003c:      	int3
   3003d:      	int3
   3003e:      	int3
   3003f:      	int3

0000000000030040 <core::fmt::builders::DebugStruct::field::h386b52b54402e6cf>:
   30040:      	subq	$0x58, %rsp
   30044:      	movq	%rdi, (%rsp)
   30048:      	movq	%rdi, 0x30(%rsp)
   3004d:      	movq	%rsi, 0x38(%rsp)
   30052:      	movq	%rdx, 0x40(%rsp)
   30057:      	movq	%rcx, 0x48(%rsp)
   3005c:      	movq	%r8, 0x50(%rsp)
   30061:      	movb	0x8(%rdi), %al
   30064:      	movq	%rdi, 0x8(%rsp)
   30069:      	movq	%rsi, 0x10(%rsp)
   3006e:      	movq	%rdx, 0x18(%rsp)
   30073:      	movq	%rcx, 0x20(%rsp)
   30078:      	movq	%r8, 0x28(%rsp)
   3007d:      	movzbl	%al, %edi
   30080:      	andl	$0x1, %edi
   30083:      	movq	0xb7f6(%rip), %rax      # 0x3b880 <zlgk82z0l71lvh9+0x3b880>
   3008a:      	leaq	0x8(%rsp), %rsi
   3008f:      	callq	*%rax
   30091:      	movb	%al, %cl
   30093:      	movq	(%rsp), %rax
   30097:      	andb	$0x1, %cl
   3009a:      	movb	%cl, 0x8(%rax)
   3009d:      	movb	$0x1, 0x9(%rax)
   300a1:      	addq	$0x58, %rsp
   300a5:      	retq
   300a6:      	int3
   300a7:      	int3
   300a8:      	int3
   300a9:      	int3
   300aa:      	int3
   300ab:      	int3
   300ac:      	int3
   300ad:      	int3
   300ae:      	int3
   300af:      	int3

00000000000300b0 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a>:
   300b0:      	subq	$0x98, %rsp
   300b7:      	movq	%rdi, (%rsp)
   300bb:      	movq	(%rdi), %rdi
   300be:      	callq	0x30520 <core::fmt::builders::DebugStruct::is_pretty::h92feafde96ad854a>
   300c3:      	testb	$0x1, %al
   300c5:      	jne	0x300d6 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x26>
   300c7:      	movq	(%rsp), %rax
   300cb:      	movq	(%rax), %rax
   300ce:      	testb	$0x1, 0x9(%rax)
   300d2:      	jne	0x30109 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x59>
   300d4:      	jmp	0x300ec <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x3c>
   300d6:      	movq	(%rsp), %rax
   300da:      	movq	(%rax), %rax
   300dd:      	testb	$0x1, 0x9(%rax)
   300e1:      	jne	0x302bd <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x20d>
   300e7:      	jmp	0x3027a <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1ca>
   300ec:      	leaq	-0x1cdca(%rip), %rax    # 0x13329 <str.0+0x99>
   300f3:      	movq	%rax, 0x80(%rsp)
   300fb:      	movq	$0x3, 0x88(%rsp)
   30107:      	jmp	0x30124 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x74>
   30109:      	leaq	-0x1cde4(%rip), %rax    # 0x1332c <str.0+0x9c>
   30110:      	movq	%rax, 0x80(%rsp)
   30118:      	movq	$0x2, 0x88(%rsp)
   30124:      	movq	(%rsp), %rax
   30128:      	movq	(%rax), %rax
   3012b:      	movq	(%rax), %rdi
   3012e:      	movq	0x80(%rsp), %rsi
   30136:      	movq	0x88(%rsp), %rdx
   3013e:      	movq	0xaf53(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30145:      	callq	*%rax
   30147:      	movzbl	%al, %edi
   3014a:      	andl	$0x1, %edi
   3014d:      	movq	0xb3b4(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   30154:      	callq	*%rax
   30156:      	andb	$0x1, %al
   30158:      	movb	%al, 0x94(%rsp)
   3015f:      	movb	0x94(%rsp), %al
   30166:      	andb	$0x1, %al
   30168:      	movzbl	%al, %eax
   3016b:      	cmpq	$0x0, %rax
   3016f:      	jne	0x301b8 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x108>
   30171:      	movq	(%rsp), %rax
   30175:      	movq	(%rax), %rcx
   30178:      	movq	(%rcx), %rdi
   3017b:      	movq	0x8(%rax), %rsi
   3017f:      	movq	0x10(%rax), %rdx
   30183:      	movq	0xaf0e(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   3018a:      	callq	*%rax
   3018c:      	movzbl	%al, %edi
   3018f:      	andl	$0x1, %edi
   30192:      	movq	0xb36f(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   30199:      	callq	*%rax
   3019b:      	andb	$0x1, %al
   3019d:      	movb	%al, 0x95(%rsp)
   301a4:      	movb	0x95(%rsp), %al
   301ab:      	andb	$0x1, %al
   301ad:      	movzbl	%al, %eax
   301b0:      	cmpq	$0x0, %rax
   301b4:      	je	0x301d3 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x123>
   301b6:      	jmp	0x3021e <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x16e>
   301b8:      	leaq	0xa981(%rip), %rdi      # 0x3ab40 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x540>
   301bf:      	movq	0xb34a(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   301c6:      	callq	*%rax
   301c8:      	andb	$0x1, %al
   301ca:      	movb	%al, 0x16(%rsp)
   301ce:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   301d3:      	movq	(%rsp), %rax
   301d7:      	movq	(%rax), %rax
   301da:      	movq	(%rax), %rdi
   301dd:      	leaq	-0x1ceb6(%rip), %rsi    # 0x1332e <str.0+0x9e>
   301e4:      	movq	0xaead(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   301eb:      	movl	$0x2, %edx
   301f0:      	callq	*%rax
   301f2:      	movzbl	%al, %edi
   301f5:      	andl	$0x1, %edi
   301f8:      	movq	0xb309(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   301ff:      	callq	*%rax
   30201:      	andb	$0x1, %al
   30203:      	movb	%al, 0x96(%rsp)
   3020a:      	movb	0x96(%rsp), %al
   30211:      	andb	$0x1, %al
   30213:      	movzbl	%al, %eax
   30216:      	cmpq	$0x0, %rax
   3021a:      	je	0x30236 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x186>
   3021c:      	jmp	0x30253 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1a3>
   3021e:      	leaq	0xa903(%rip), %rdi      # 0x3ab28 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x528>
   30225:      	movq	0xb2e4(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   3022c:      	callq	*%rax
   3022e:      	andb	$0x1, %al
   30230:      	movb	%al, 0x16(%rsp)
   30234:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   30236:      	movq	(%rsp), %rcx
   3023a:      	movq	0x18(%rcx), %rdi
   3023e:      	movq	0x20(%rcx), %rax
   30242:      	movq	(%rcx), %rcx
   30245:      	movq	(%rcx), %rsi
   30248:      	callq	*0x18(%rax)
   3024b:      	andb	$0x1, %al
   3024d:      	movb	%al, 0x16(%rsp)
   30251:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   30253:      	leaq	0xa8b6(%rip), %rdi      # 0x3ab10 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x510>
   3025a:      	movq	0xb2af(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   30261:      	callq	*%rax
   30263:      	andb	$0x1, %al
   30265:      	movb	%al, 0x16(%rsp)
   30269:      	movb	0x16(%rsp), %al
   3026d:      	andb	$0x1, %al
   3026f:      	movzbl	%al, %eax
   30272:      	addq	$0x98, %rsp
   30279:      	retq
   3027a:      	movq	(%rsp), %rax
   3027e:      	movq	(%rax), %rax
   30281:      	movq	(%rax), %rdi
   30284:      	leaq	-0x1cf5b(%rip), %rsi    # 0x13330 <str.0+0xa0>
   3028b:      	movq	0xae06(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30292:      	movl	$0x3, %edx
   30297:      	callq	*%rax
   30299:      	movzbl	%al, %edi
   3029c:      	andl	$0x1, %edi
   3029f:      	movq	0xb262(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   302a6:      	callq	*%rax
   302a8:      	andb	$0x1, %al
   302aa:      	movb	%al, 0x17(%rsp)
   302ae:      	movb	0x17(%rsp), %al
   302b2:      	andb	$0x1, %al
   302b4:      	movzbl	%al, %eax
   302b7:      	cmpq	$0x0, %rax
   302bb:      	jne	0x30336 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x286>
   302bd:      	movq	$0x0, 0x18(%rsp)
   302c6:      	movq	0xbb3b(%rip), %rax      # 0x3be08 <zlgk82z0l71lvh9+0x3be08>
   302cd:      	callq	*%rax
   302cf:      	movb	%al, %cl
   302d1:      	movq	(%rsp), %rax
   302d5:      	andb	$0x1, %cl
   302d8:      	movb	%cl, 0x37(%rsp)
   302dc:      	movq	(%rax), %rax
   302df:      	movq	(%rax), %rsi
   302e2:      	leaq	0x38(%rsp), %rdi
   302e7:      	leaq	0x18(%rsp), %rdx
   302ec:      	leaq	0x37(%rsp), %rcx
   302f1:      	callq	0x2fd40 <core::fmt::builders::PadAdapter::wrap::h92f5cd5c1288800f>
   302f6:      	movq	(%rsp), %rax
   302fa:      	movq	0x8(%rax), %rsi
   302fe:      	movq	0x10(%rax), %rdx
   30302:      	movq	0xad8f(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30309:      	leaq	0x38(%rsp), %rdi
   3030e:      	callq	*%rax
   30310:      	movzbl	%al, %edi
   30313:      	andl	$0x1, %edi
   30316:      	movq	0xb1eb(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   3031d:      	callq	*%rax
   3031f:      	andb	$0x1, %al
   30321:      	movb	%al, 0x7d(%rsp)
   30325:      	movb	0x7d(%rsp), %al
   30329:      	andb	$0x1, %al
   3032b:      	movzbl	%al, %eax
   3032e:      	cmpq	$0x0, %rax
   30332:      	je	0x30351 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x2a1>
   30334:      	jmp	0x30391 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x2e1>
   30336:      	leaq	0xa81b(%rip), %rdi      # 0x3ab58 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x558>
   3033d:      	movq	0xb1cc(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   30344:      	callq	*%rax
   30346:      	andb	$0x1, %al
   30348:      	movb	%al, 0x16(%rsp)
   3034c:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   30351:      	leaq	-0x1d02a(%rip), %rsi    # 0x1332e <str.0+0x9e>
   30358:      	movq	0xad39(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   3035f:      	leaq	0x38(%rsp), %rdi
   30364:      	movl	$0x2, %edx
   30369:      	callq	*%rax
   3036b:      	movzbl	%al, %edi
   3036e:      	andl	$0x1, %edi
   30371:      	movq	0xb190(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   30378:      	callq	*%rax
   3037a:      	andb	$0x1, %al
   3037c:      	movb	%al, 0x7e(%rsp)
   30380:      	movb	0x7e(%rsp), %al
   30384:      	andb	$0x1, %al
   30386:      	movzbl	%al, %eax
   30389:      	cmpq	$0x0, %rax
   3038d:      	je	0x303ac <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x2fc>
   3038f:      	jmp	0x303e6 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x336>
   30391:      	leaq	0xa808(%rip), %rdi      # 0x3aba0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x5a0>
   30398:      	movq	0xb171(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   3039f:      	callq	*%rax
   303a1:      	andb	$0x1, %al
   303a3:      	movb	%al, 0x16(%rsp)
   303a7:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   303ac:      	movq	(%rsp), %rax
   303b0:      	movq	0x18(%rax), %rdi
   303b4:      	movq	0x20(%rax), %rax
   303b8:      	leaq	0x38(%rsp), %rsi
   303bd:      	callq	*0x18(%rax)
   303c0:      	movzbl	%al, %edi
   303c3:      	andl	$0x1, %edi
   303c6:      	movq	0xb13b(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   303cd:      	callq	*%rax
   303cf:      	andb	$0x1, %al
   303d1:      	movb	%al, 0x7f(%rsp)
   303d5:      	movb	0x7f(%rsp), %al
   303d9:      	andb	$0x1, %al
   303db:      	movzbl	%al, %eax
   303de:      	cmpq	$0x0, %rax
   303e2:      	je	0x30401 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x351>
   303e4:      	jmp	0x30426 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x376>
   303e6:      	leaq	0xa79b(%rip), %rdi      # 0x3ab88 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x588>
   303ed:      	movq	0xb11c(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   303f4:      	callq	*%rax
   303f6:      	andb	$0x1, %al
   303f8:      	movb	%al, 0x16(%rsp)
   303fc:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   30401:      	leaq	-0x1d0d5(%rip), %rsi    # 0x13333 <str.0+0xa3>
   30408:      	movq	0xac89(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   3040f:      	leaq	0x38(%rsp), %rdi
   30414:      	movl	$0x2, %edx
   30419:      	callq	*%rax
   3041b:      	andb	$0x1, %al
   3041d:      	movb	%al, 0x16(%rsp)
   30421:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   30426:      	leaq	0xa743(%rip), %rdi      # 0x3ab70 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x570>
   3042d:      	movq	0xb0dc(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   30434:      	callq	*%rax
   30436:      	andb	$0x1, %al
   30438:      	movb	%al, 0x16(%rsp)
   3043c:      	jmp	0x30269 <core::fmt::builders::DebugStruct::field::{{closure}}::he4d5cb23a5b9ac6a+0x1b9>
   30441:      	int3
   30442:      	int3
   30443:      	int3
   30444:      	int3
   30445:      	int3
   30446:      	int3
   30447:      	int3
   30448:      	int3
   30449:      	int3
   3044a:      	int3
   3044b:      	int3
   3044c:      	int3
   3044d:      	int3
   3044e:      	int3
   3044f:      	int3

0000000000030450 <core::fmt::builders::DebugStruct::finish::h1c10cc3c93b57033>:
   30450:      	subq	$0x18, %rsp
   30454:      	movq	%rdi, (%rsp)
   30458:      	movq	%rdi, 0x10(%rsp)
   3045d:      	testb	$0x1, 0x9(%rdi)
   30461:      	jne	0x30474 <core::fmt::builders::DebugStruct::finish::h1c10cc3c93b57033+0x24>
   30463:      	movq	(%rsp), %rax
   30467:      	movb	0x8(%rax), %al
   3046a:      	andb	$0x1, %al
   3046c:      	movzbl	%al, %eax
   3046f:      	addq	$0x18, %rsp
   30473:      	retq
   30474:      	movq	(%rsp), %rcx
   30478:      	movb	0x8(%rcx), %al
   3047b:      	movq	%rcx, 0x8(%rsp)
   30480:      	movq	0x8(%rsp), %rsi
   30485:      	movzbl	%al, %edi
   30488:      	andl	$0x1, %edi
   3048b:      	movq	0xb3d6(%rip), %rax      # 0x3b868 <zlgk82z0l71lvh9+0x3b868>
   30492:      	callq	*%rax
   30494:      	movb	%al, %cl
   30496:      	movq	(%rsp), %rax
   3049a:      	andb	$0x1, %cl
   3049d:      	movb	%cl, 0x8(%rax)
   304a0:      	jmp	0x30463 <core::fmt::builders::DebugStruct::finish::h1c10cc3c93b57033+0x13>
   304a2:      	int3
   304a3:      	int3
   304a4:      	int3
   304a5:      	int3
   304a6:      	int3
   304a7:      	int3
   304a8:      	int3
   304a9:      	int3
   304aa:      	int3
   304ab:      	int3
   304ac:      	int3
   304ad:      	int3
   304ae:      	int3
   304af:      	int3

00000000000304b0 <core::fmt::builders::DebugStruct::finish::{{closure}}::h0d25f7a53ef95ae5>:
   304b0:      	subq	$0x18, %rsp
   304b4:      	movq	%rdi, 0x8(%rsp)
   304b9:      	movq	0x8(%rsp), %rdi
   304be:      	callq	0x30520 <core::fmt::builders::DebugStruct::is_pretty::h92feafde96ad854a>
   304c3:      	testb	$0x1, %al
   304c5:      	jne	0x304ec <core::fmt::builders::DebugStruct::finish::{{closure}}::h0d25f7a53ef95ae5+0x3c>
   304c7:      	movq	0x8(%rsp), %rax
   304cc:      	movq	(%rax), %rdi
   304cf:      	leaq	-0x1d1a0(%rip), %rsi    # 0x13336 <str.0+0xa6>
   304d6:      	movq	0xabbb(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   304dd:      	movl	$0x2, %edx
   304e2:      	callq	*%rax
   304e4:      	andb	$0x1, %al
   304e6:      	movb	%al, 0x16(%rsp)
   304ea:      	jmp	0x3050f <core::fmt::builders::DebugStruct::finish::{{closure}}::h0d25f7a53ef95ae5+0x5f>
   304ec:      	movq	0x8(%rsp), %rax
   304f1:      	movq	(%rax), %rdi
   304f4:      	leaq	-0x1d1c6(%rip), %rsi    # 0x13335 <str.0+0xa5>
   304fb:      	movq	0xab96(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30502:      	movl	$0x1, %edx
   30507:      	callq	*%rax
   30509:      	andb	$0x1, %al
   3050b:      	movb	%al, 0x16(%rsp)
   3050f:      	movb	0x16(%rsp), %al
   30513:      	andb	$0x1, %al
   30515:      	movzbl	%al, %eax
   30518:      	addq	$0x18, %rsp
   3051c:      	retq
   3051d:      	int3
   3051e:      	int3
   3051f:      	int3

0000000000030520 <core::fmt::builders::DebugStruct::is_pretty::h92feafde96ad854a>:
   30520:      	pushq	%rax
   30521:      	movq	%rdi, (%rsp)
   30525:      	movq	(%rdi), %rdi
   30528:      	movq	0xb879(%rip), %rax      # 0x3bda8 <zlgk82z0l71lvh9+0x3bda8>
   3052f:      	callq	*%rax
   30531:      	andb	$0x1, %al
   30533:      	movzbl	%al, %eax
   30536:      	popq	%rcx
   30537:      	retq
   30538:      	int3
   30539:      	int3
   3053a:      	int3
   3053b:      	int3
   3053c:      	int3
   3053d:      	int3
   3053e:      	int3
   3053f:      	int3

0000000000030540 <core::fmt::builders::debug_tuple_new::h3435392deb24360c>:
   30540:      	subq	$0x58, %rsp
   30544:      	movq	%rcx, 0x10(%rsp)
   30549:      	movq	%rdx, %rax
   3054c:      	movq	0x10(%rsp), %rdx
   30551:      	movq	%rax, 0x8(%rsp)
   30556:      	movq	%rsi, %rax
   30559:      	movq	0x8(%rsp), %rsi
   3055e:      	movq	%rax, 0x18(%rsp)
   30563:      	movq	%rdi, %rax
   30566:      	movq	0x18(%rsp), %rdi
   3056b:      	movq	%rax, 0x28(%rsp)
   30570:      	movq	%rax, 0x30(%rsp)
   30575:      	movq	%rdi, 0x38(%rsp)
   3057a:      	movq	%rsi, 0x40(%rsp)
   3057f:      	movq	%rdx, 0x48(%rsp)
   30584:      	movq	0xab0d(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   3058b:      	callq	*%rax
   3058d:      	movq	0x8(%rsp), %rdi
   30592:      	movq	0x10(%rsp), %rsi
   30597:      	movb	%al, 0x27(%rsp)
   3059b:      	andb	$0x1, %al
   3059d:      	movb	%al, 0x57(%rsp)
   305a1:      	callq	0x2ece0 <core::str::<impl str>::is_empty::hba38a94ab3bb1a41>
   305a6:      	movq	0x18(%rsp), %rsi
   305ab:      	movb	0x27(%rsp), %dl
   305af:      	movq	0x28(%rsp), %rdi
   305b4:      	movb	%al, %cl
   305b6:      	movq	0x30(%rsp), %rax
   305bb:      	movq	%rsi, 0x8(%rdi)
   305bf:      	andb	$0x1, %dl
   305c2:      	movb	%dl, 0x10(%rdi)
   305c5:      	movq	$0x0, (%rdi)
   305cc:      	andb	$0x1, %cl
   305cf:      	movb	%cl, 0x11(%rdi)
   305d2:      	addq	$0x58, %rsp
   305d6:      	retq
   305d7:      	int3
   305d8:      	int3
   305d9:      	int3
   305da:      	int3
   305db:      	int3
   305dc:      	int3
   305dd:      	int3
   305de:      	int3
   305df:      	int3

00000000000305e0 <core::fmt::builders::DebugTuple::field::h4c1015c583e18fc0>:
   305e0:      	subq	$0x48, %rsp
   305e4:      	movq	%rdi, 0x8(%rsp)
   305e9:      	movq	%rdi, 0x30(%rsp)
   305ee:      	movq	%rsi, 0x38(%rsp)
   305f3:      	movq	%rdx, 0x40(%rsp)
   305f8:      	movb	0x10(%rdi), %al
   305fb:      	movq	%rdi, 0x18(%rsp)
   30600:      	movq	%rsi, 0x20(%rsp)
   30605:      	movq	%rdx, 0x28(%rsp)
   3060a:      	movzbl	%al, %edi
   3060d:      	andl	$0x1, %edi
   30610:      	movq	0xb261(%rip), %rax      # 0x3b878 <zlgk82z0l71lvh9+0x3b878>
   30617:      	leaq	0x18(%rsp), %rsi
   3061c:      	callq	*%rax
   3061e:      	movq	0x8(%rsp), %rdi
   30623:      	andb	$0x1, %al
   30625:      	movb	%al, 0x10(%rdi)
   30628:      	movq	(%rdi), %rax
   3062b:      	addq	$0x1, %rax
   3062f:      	movq	%rax, 0x10(%rsp)
   30634:      	setb	%al
   30637:      	testb	$0x1, %al
   30639:      	jne	0x3064d <core::fmt::builders::DebugTuple::field::h4c1015c583e18fc0+0x6d>
   3063b:      	movq	0x8(%rsp), %rax
   30640:      	movq	0x10(%rsp), %rcx
   30645:      	movq	%rcx, (%rax)
   30648:      	addq	$0x48, %rsp
   3064c:      	retq
   3064d:      	leaq	-0x1d3c4(%rip), %rdi    # 0x13290 <str.0>
   30654:      	leaq	0xa55d(%rip), %rdx      # 0x3abb8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x5b8>
   3065b:      	movq	0xa86e(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   30662:      	movl	$0x1c, %esi
   30667:      	callq	*%rax
   30669:      	ud2
   3066b:      	int3
   3066c:      	int3
   3066d:      	int3
   3066e:      	int3
   3066f:      	int3

0000000000030670 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af>:
   30670:      	subq	$0x98, %rsp
   30677:      	movq	%rdi, 0x8(%rsp)
   3067c:      	movq	(%rdi), %rdi
   3067f:      	callq	0x309c0 <core::fmt::builders::DebugTuple::is_pretty::h5812bea8cbb558dd>
   30684:      	testb	$0x1, %al
   30686:      	jne	0x30698 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x28>
   30688:      	movq	0x8(%rsp), %rax
   3068d:      	movq	(%rax), %rax
   30690:      	cmpq	$0x0, (%rax)
   30694:      	je	0x306af <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x3f>
   30696:      	jmp	0x306cc <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x5c>
   30698:      	movq	0x8(%rsp), %rax
   3069d:      	movq	(%rax), %rax
   306a0:      	cmpq	$0x0, (%rax)
   306a4:      	je	0x3077c <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x10c>
   306aa:      	jmp	0x307c1 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x151>
   306af:      	leaq	-0x1d37e(%rip), %rax    # 0x13338 <str.0+0xa8>
   306b6:      	movq	%rax, 0x80(%rsp)
   306be:      	movq	$0x1, 0x88(%rsp)
   306ca:      	jmp	0x306e7 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x77>
   306cc:      	leaq	-0x1d3a7(%rip), %rax    # 0x1332c <str.0+0x9c>
   306d3:      	movq	%rax, 0x80(%rsp)
   306db:      	movq	$0x2, 0x88(%rsp)
   306e7:      	movq	0x8(%rsp), %rax
   306ec:      	movq	(%rax), %rax
   306ef:      	movq	0x8(%rax), %rdi
   306f3:      	movq	0x80(%rsp), %rsi
   306fb:      	movq	0x88(%rsp), %rdx
   30703:      	movq	0xa98e(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   3070a:      	callq	*%rax
   3070c:      	movzbl	%al, %edi
   3070f:      	andl	$0x1, %edi
   30712:      	movq	0xadef(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   30719:      	callq	*%rax
   3071b:      	andb	$0x1, %al
   3071d:      	movb	%al, 0x96(%rsp)
   30724:      	movb	0x96(%rsp), %al
   3072b:      	andb	$0x1, %al
   3072d:      	movzbl	%al, %eax
   30730:      	cmpq	$0x0, %rax
   30734:      	jne	0x30755 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0xe5>
   30736:      	movq	0x8(%rsp), %rcx
   3073b:      	movq	0x8(%rcx), %rdi
   3073f:      	movq	0x10(%rcx), %rax
   30743:      	movq	(%rcx), %rcx
   30746:      	movq	0x8(%rcx), %rsi
   3074a:      	callq	*0x18(%rax)
   3074d:      	andb	$0x1, %al
   3074f:      	movb	%al, 0x16(%rsp)
   30753:      	jmp	0x3076b <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0xfb>
   30755:      	leaq	0xa474(%rip), %rdi      # 0x3abd0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x5d0>
   3075c:      	movq	0xadad(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   30763:      	callq	*%rax
   30765:      	andb	$0x1, %al
   30767:      	movb	%al, 0x16(%rsp)
   3076b:      	movb	0x16(%rsp), %al
   3076f:      	andb	$0x1, %al
   30771:      	movzbl	%al, %eax
   30774:      	addq	$0x98, %rsp
   3077b:      	retq
   3077c:      	movq	0x8(%rsp), %rax
   30781:      	movq	(%rax), %rax
   30784:      	movq	0x8(%rax), %rdi
   30788:      	leaq	-0x1d456(%rip), %rsi    # 0x13339 <str.0+0xa9>
   3078f:      	movq	0xa902(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30796:      	movl	$0x2, %edx
   3079b:      	callq	*%rax
   3079d:      	movzbl	%al, %edi
   307a0:      	andl	$0x1, %edi
   307a3:      	movq	0xad5e(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   307aa:      	callq	*%rax
   307ac:      	andb	$0x1, %al
   307ae:      	movb	%al, 0x17(%rsp)
   307b2:      	movb	0x17(%rsp), %al
   307b6:      	andb	$0x1, %al
   307b8:      	movzbl	%al, %eax
   307bb:      	cmpq	$0x0, %rax
   307bf:      	jne	0x30837 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x1c7>
   307c1:      	movq	$0x0, 0x18(%rsp)
   307ca:      	movq	0xb637(%rip), %rax      # 0x3be08 <zlgk82z0l71lvh9+0x3be08>
   307d1:      	callq	*%rax
   307d3:      	movb	%al, %cl
   307d5:      	movq	0x8(%rsp), %rax
   307da:      	andb	$0x1, %cl
   307dd:      	movb	%cl, 0x37(%rsp)
   307e1:      	movq	(%rax), %rax
   307e4:      	movq	0x8(%rax), %rsi
   307e8:      	leaq	0x38(%rsp), %rdi
   307ed:      	leaq	0x18(%rsp), %rdx
   307f2:      	leaq	0x37(%rsp), %rcx
   307f7:      	callq	0x2fd40 <core::fmt::builders::PadAdapter::wrap::h92f5cd5c1288800f>
   307fc:      	movq	0x8(%rsp), %rax
   30801:      	movq	0x8(%rax), %rdi
   30805:      	movq	0x10(%rax), %rax
   30809:      	leaq	0x38(%rsp), %rsi
   3080e:      	callq	*0x18(%rax)
   30811:      	movzbl	%al, %edi
   30814:      	andl	$0x1, %edi
   30817:      	movq	0xacea(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   3081e:      	callq	*%rax
   30820:      	andb	$0x1, %al
   30822:      	movb	%al, 0x7f(%rsp)
   30826:      	movb	0x7f(%rsp), %al
   3082a:      	andb	$0x1, %al
   3082c:      	movzbl	%al, %eax
   3082f:      	cmpq	$0x0, %rax
   30833:      	je	0x30852 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x1e2>
   30835:      	jmp	0x30877 <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0x207>
   30837:      	leaq	0xa3aa(%rip), %rdi      # 0x3abe8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x5e8>
   3083e:      	movq	0xaccb(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   30845:      	callq	*%rax
   30847:      	andb	$0x1, %al
   30849:      	movb	%al, 0x16(%rsp)
   3084d:      	jmp	0x3076b <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0xfb>
   30852:      	leaq	-0x1d526(%rip), %rsi    # 0x13333 <str.0+0xa3>
   30859:      	movq	0xa838(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30860:      	leaq	0x38(%rsp), %rdi
   30865:      	movl	$0x2, %edx
   3086a:      	callq	*%rax
   3086c:      	andb	$0x1, %al
   3086e:      	movb	%al, 0x16(%rsp)
   30872:      	jmp	0x3076b <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0xfb>
   30877:      	leaq	0xa382(%rip), %rdi      # 0x3ac00 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x600>
   3087e:      	movq	0xac8b(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   30885:      	callq	*%rax
   30887:      	andb	$0x1, %al
   30889:      	movb	%al, 0x16(%rsp)
   3088d:      	jmp	0x3076b <core::fmt::builders::DebugTuple::field::{{closure}}::h28deec624e4f97af+0xfb>
   30892:      	int3
   30893:      	int3
   30894:      	int3
   30895:      	int3
   30896:      	int3
   30897:      	int3
   30898:      	int3
   30899:      	int3
   3089a:      	int3
   3089b:      	int3
   3089c:      	int3
   3089d:      	int3
   3089e:      	int3
   3089f:      	int3

00000000000308a0 <core::fmt::builders::DebugTuple::finish::he71294c8b0d8bcb3>:
   308a0:      	subq	$0x18, %rsp
   308a4:      	movq	%rdi, (%rsp)
   308a8:      	movq	%rdi, 0x10(%rsp)
   308ad:      	cmpq	$0x0, (%rdi)
   308b1:      	ja	0x308c4 <core::fmt::builders::DebugTuple::finish::he71294c8b0d8bcb3+0x24>
   308b3:      	movq	(%rsp), %rax
   308b7:      	movb	0x10(%rax), %al
   308ba:      	andb	$0x1, %al
   308bc:      	movzbl	%al, %eax
   308bf:      	addq	$0x18, %rsp
   308c3:      	retq
   308c4:      	movq	(%rsp), %rcx
   308c8:      	movb	0x10(%rcx), %al
   308cb:      	movq	%rcx, 0x8(%rsp)
   308d0:      	movq	0x8(%rsp), %rsi
   308d5:      	movzbl	%al, %edi
   308d8:      	andl	$0x1, %edi
   308db:      	movq	0xaf8e(%rip), %rax      # 0x3b870 <zlgk82z0l71lvh9+0x3b870>
   308e2:      	callq	*%rax
   308e4:      	movb	%al, %cl
   308e6:      	movq	(%rsp), %rax
   308ea:      	andb	$0x1, %cl
   308ed:      	movb	%cl, 0x10(%rax)
   308f0:      	jmp	0x308b3 <core::fmt::builders::DebugTuple::finish::he71294c8b0d8bcb3+0x13>
   308f2:      	int3
   308f3:      	int3
   308f4:      	int3
   308f5:      	int3
   308f6:      	int3
   308f7:      	int3
   308f8:      	int3
   308f9:      	int3
   308fa:      	int3
   308fb:      	int3
   308fc:      	int3
   308fd:      	int3
   308fe:      	int3
   308ff:      	int3

0000000000030900 <core::fmt::builders::DebugTuple::finish::{{closure}}::h623e1053cb8d19f8>:
   30900:      	subq	$0x18, %rsp
   30904:      	movq	%rdi, 0x8(%rsp)
   30909:      	movq	0x8(%rsp), %rax
   3090e:      	cmpq	$0x1, (%rax)
   30912:      	jne	0x3091f <core::fmt::builders::DebugTuple::finish::{{closure}}::h623e1053cb8d19f8+0x1f>
   30914:      	movq	0x8(%rsp), %rax
   30919:      	testb	$0x1, 0x11(%rax)
   3091d:      	jne	0x30945 <core::fmt::builders::DebugTuple::finish::{{closure}}::h623e1053cb8d19f8+0x45>
   3091f:      	movq	0x8(%rsp), %rax
   30924:      	movq	0x8(%rax), %rdi
   30928:      	leaq	-0x1d5f3(%rip), %rsi    # 0x1333c <str.0+0xac>
   3092f:      	movq	0xa762(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   30936:      	movl	$0x1, %edx
   3093b:      	callq	*%rax
   3093d:      	andb	$0x1, %al
   3093f:      	movb	%al, 0x15(%rsp)
   30943:      	jmp	0x309ab <core::fmt::builders::DebugTuple::finish::{{closure}}::h623e1053cb8d19f8+0xab>
   30945:      	movq	0x8(%rsp), %rdi
   3094a:      	callq	0x309c0 <core::fmt::builders::DebugTuple::is_pretty::h5812bea8cbb558dd>
   3094f:      	testb	$0x1, %al
   30951:      	jne	0x3091f <core::fmt::builders::DebugTuple::finish::{{closure}}::h623e1053cb8d19f8+0x1f>
   30953:      	movq	0x8(%rsp), %rax
   30958:      	movq	0x8(%rax), %rdi
   3095c:      	leaq	-0x1d628(%rip), %rsi    # 0x1333b <str.0+0xab>
   30963:      	movq	0xa72e(%rip), %rax      # 0x3b098 <zlgk82z0l71lvh9+0x3b098>
   3096a:      	movl	$0x1, %edx
   3096f:      	callq	*%rax
   30971:      	movzbl	%al, %edi
   30974:      	andl	$0x1, %edi
   30977:      	movq	0xab8a(%rip), %rax      # 0x3b508 <zlgk82z0l71lvh9+0x3b508>
   3097e:      	callq	*%rax
   30980:      	andb	$0x1, %al
   30982:      	movb	%al, 0x16(%rsp)
   30986:      	movb	0x16(%rsp), %al
   3098a:      	andb	$0x1, %al
   3098c:      	movzbl	%al, %eax
   3098f:      	cmpq	$0x0, %rax
   30993:      	je	0x3091f <core::fmt::builders::DebugTuple::finish::{{closure}}::h623e1053cb8d19f8+0x1f>
   30995:      	leaq	0xa27c(%rip), %rdi      # 0x3ac18 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x618>
   3099c:      	movq	0xab6d(%rip), %rax      # 0x3b510 <zlgk82z0l71lvh9+0x3b510>
   309a3:      	callq	*%rax
   309a5:      	andb	$0x1, %al
   309a7:      	movb	%al, 0x15(%rsp)
   309ab:      	movb	0x15(%rsp), %al
   309af:      	andb	$0x1, %al
   309b1:      	movzbl	%al, %eax
   309b4:      	addq	$0x18, %rsp
   309b8:      	retq
   309b9:      	int3
   309ba:      	int3
   309bb:      	int3
   309bc:      	int3
   309bd:      	int3
   309be:      	int3
   309bf:      	int3

00000000000309c0 <core::fmt::builders::DebugTuple::is_pretty::h5812bea8cbb558dd>:
   309c0:      	pushq	%rax
   309c1:      	movq	%rdi, (%rsp)
   309c5:      	movq	0x8(%rdi), %rdi
   309c9:      	movq	0xb3d8(%rip), %rax      # 0x3bda8 <zlgk82z0l71lvh9+0x3bda8>
   309d0:      	callq	*%rax
   309d2:      	andb	$0x1, %al
   309d4:      	movzbl	%al, %eax
   309d7:      	popq	%rcx
   309d8:      	retq
   309d9:      	int3
   309da:      	int3
   309db:      	int3
   309dc:      	int3
   309dd:      	int3
   309de:      	int3
   309df:      	int3

00000000000309e0 <core::fmt::Write::write_char::hc92346fb9190fcf0>:
   309e0:      	subq	$0x28, %rsp
   309e4:      	movl	%esi, 0x4(%rsp)
   309e8:      	movq	%rdi, %rax
   309eb:      	movl	0x4(%rsp), %edi
   309ef:      	movq	%rax, 0x8(%rsp)
   309f4:      	movq	%rax, 0x18(%rsp)
   309f9:      	movl	%edi, 0x24(%rsp)
   309fd:      	leaq	0x14(%rsp), %rax
   30a02:      	xorl	%ecx, %ecx
   30a04:      	movl	$0x0, (%rax)
   30a0a:      	leaq	0x14(%rsp), %rsi
   30a0f:      	movl	$0x4, %edx
   30a14:      	callq	0x28e10 <core::char::methods::<impl char>::encode_utf8::hdb88e8bbc89b8b13>
   30a19:      	movq	0x8(%rsp), %rdi
   30a1e:      	movq	%rax, %rsi
   30a21:      	movq	0xb3e8(%rip), %rax      # 0x3be10 <zlgk82z0l71lvh9+0x3be10>
   30a28:      	callq	*%rax
   30a2a:      	andb	$0x1, %al
   30a2c:      	movzbl	%al, %eax
   30a2f:      	addq	$0x28, %rsp
   30a33:      	retq
   30a34:      	int3
   30a35:      	int3
   30a36:      	int3
   30a37:      	int3
   30a38:      	int3
   30a39:      	int3
   30a3a:      	int3
   30a3b:      	int3
   30a3c:      	int3
   30a3d:      	int3
   30a3e:      	int3
   30a3f:      	int3

0000000000030a40 <core::fmt::Write::write_fmt::h6670ab73c244ac55>:
   30a40:      	subq	$0x38, %rsp
   30a44:      	movq	%rdi, (%rsp)
   30a48:      	movq	0x28(%rsi), %rax
   30a4c:      	movq	%rax, 0x30(%rsp)
   30a51:      	movq	0x20(%rsi), %rax
   30a55:      	movq	%rax, 0x28(%rsp)
   30a5a:      	movq	0x18(%rsi), %rax
   30a5e:      	movq	%rax, 0x20(%rsp)
   30a63:      	movq	0x10(%rsi), %rax
   30a67:      	movq	%rax, 0x18(%rsp)
   30a6c:      	movq	(%rsi), %rax
   30a6f:      	movq	0x8(%rsi), %rcx
   30a73:      	movq	%rcx, 0x10(%rsp)
   30a78:      	movq	%rax, 0x8(%rsp)
   30a7d:      	leaq	0xa1ac(%rip), %rsi      # 0x3ac30 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x630>
   30a84:      	movq	0xa7c5(%rip), %rax      # 0x3b250 <zlgk82z0l71lvh9+0x3b250>
   30a8b:      	movq	%rsp, %rdi
   30a8e:      	leaq	0x8(%rsp), %rdx
   30a93:      	callq	*%rax
   30a95:      	andb	$0x1, %al
   30a97:      	movzbl	%al, %eax
   30a9a:      	addq	$0x38, %rsp
   30a9e:      	retq
   30a9f:      	int3

0000000000030aa0 <<&mut W as core::fmt::Write>::write_str::h42c2176417fa22ab>:
   30aa0:      	subq	$0x18, %rsp
   30aa4:      	movq	%rdi, (%rsp)
   30aa8:      	movq	%rsi, 0x8(%rsp)
   30aad:      	movq	%rdx, 0x10(%rsp)
   30ab2:      	movq	(%rdi), %rdi
   30ab5:      	movq	0xb354(%rip), %rax      # 0x3be10 <zlgk82z0l71lvh9+0x3be10>
   30abc:      	callq	*%rax
   30abe:      	andb	$0x1, %al
   30ac0:      	movzbl	%al, %eax
   30ac3:      	addq	$0x18, %rsp
   30ac7:      	retq
   30ac8:      	int3
   30ac9:      	int3
   30aca:      	int3
   30acb:      	int3
   30acc:      	int3
   30acd:      	int3
   30ace:      	int3
   30acf:      	int3

0000000000030ad0 <<&mut W as core::fmt::Write>::write_char::h0ad5a5f12c868181>:
   30ad0:      	subq	$0x18, %rsp
   30ad4:      	movq	%rdi, 0x8(%rsp)
   30ad9:      	movl	%esi, 0x14(%rsp)
   30add:      	movq	(%rdi), %rdi
   30ae0:      	movq	0xb331(%rip), %rax      # 0x3be18 <zlgk82z0l71lvh9+0x3be18>
   30ae7:      	callq	*%rax
   30ae9:      	andb	$0x1, %al
   30aeb:      	movzbl	%al, %eax
   30aee:      	addq	$0x18, %rsp
   30af2:      	retq
   30af3:      	int3
   30af4:      	int3
   30af5:      	int3
   30af6:      	int3
   30af7:      	int3
   30af8:      	int3
   30af9:      	int3
   30afa:      	int3
   30afb:      	int3
   30afc:      	int3
   30afd:      	int3
   30afe:      	int3
   30aff:      	int3

0000000000030b00 <<&mut W as core::fmt::Write>::write_fmt::h46937bb4fbd082f9>:
   30b00:      	subq	$0x38, %rsp
   30b04:      	movq	%rdi, (%rsp)
   30b08:      	movq	(%rdi), %rdi
   30b0b:      	movq	0x28(%rsi), %rax
   30b0f:      	movq	%rax, 0x30(%rsp)
   30b14:      	movq	0x20(%rsi), %rax
   30b18:      	movq	%rax, 0x28(%rsp)
   30b1d:      	movq	0x18(%rsi), %rax
   30b21:      	movq	%rax, 0x20(%rsp)
   30b26:      	movq	0x10(%rsi), %rax
   30b2a:      	movq	%rax, 0x18(%rsp)
   30b2f:      	movq	(%rsi), %rax
   30b32:      	movq	0x8(%rsi), %rcx
   30b36:      	movq	%rcx, 0x10(%rsp)
   30b3b:      	movq	%rax, 0x8(%rsp)
   30b40:      	movq	0xb2d9(%rip), %rax      # 0x3be20 <zlgk82z0l71lvh9+0x3be20>
   30b47:      	leaq	0x8(%rsp), %rsi
   30b4c:      	callq	*%rax
   30b4e:      	andb	$0x1, %al
   30b50:      	movzbl	%al, %eax
   30b53:      	addq	$0x38, %rsp
   30b57:      	retq
   30b58:      	int3
   30b59:      	int3
   30b5a:      	int3
   30b5b:      	int3
   30b5c:      	int3
   30b5d:      	int3
   30b5e:      	int3
   30b5f:      	int3

0000000000030b60 <core::slice::raw::from_raw_parts::h37f6899d047e36cf>:
   30b60:      	subq	$0x48, %rsp
   30b64:      	movq	%rsi, 0x8(%rsp)
   30b69:      	movq	%rdi, 0x10(%rsp)
   30b6e:      	movq	%rdi, 0x28(%rsp)
   30b73:      	movq	%rsi, 0x30(%rsp)
   30b78:      	movb	$0x1, %al
   30b7a:      	testb	$0x1, %al
   30b7c:      	jne	0x30b96 <core::slice::raw::from_raw_parts::h37f6899d047e36cf+0x36>
   30b7e:      	movq	0x8(%rsp), %rsi
   30b83:      	movq	0x10(%rsp), %rdi
   30b88:      	movq	0xab19(%rip), %rax      # 0x3b6a8 <zlgk82z0l71lvh9+0x3b6a8>
   30b8f:      	callq	*%rax
   30b91:      	addq	$0x48, %rsp
   30b95:      	retq
   30b96:      	movq	0x8(%rsp), %rax
   30b9b:      	movq	0x10(%rsp), %rcx
   30ba0:      	movq	%rcx, 0x18(%rsp)
   30ba5:      	movq	%rax, 0x20(%rsp)
   30baa:      	movq	0x18(%rsp), %rdi
   30baf:      	movq	0x20(%rsp), %rax
   30bb4:      	movq	%rax, (%rsp)
   30bb8:      	movq	%rdi, 0x38(%rsp)
   30bbd:      	movq	%rax, 0x40(%rsp)
   30bc2:      	movq	0xa6a7(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   30bc9:      	callq	*%rax
   30bcb:      	testb	$0x1, %al
   30bcd:      	jne	0x30be6 <core::slice::raw::from_raw_parts::h37f6899d047e36cf+0x86>
   30bcf:      	leaq	-0x1d7f2(%rip), %rdi    # 0x133e4 <str.2+0x24>
   30bd6:      	movq	0xa593(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   30bdd:      	movl	$0xa2, %esi
   30be2:      	callq	*%rax
   30be4:      	ud2
   30be6:      	movq	(%rsp), %rdi
   30bea:      	movq	0xaadf(%rip), %rax      # 0x3b6d0 <zlgk82z0l71lvh9+0x3b6d0>
   30bf1:      	callq	*%rax
   30bf3:      	testb	$0x1, %al
   30bf5:      	jne	0x30bf9 <core::slice::raw::from_raw_parts::h37f6899d047e36cf+0x99>
   30bf7:      	jmp	0x30bcf <core::slice::raw::from_raw_parts::h37f6899d047e36cf+0x6f>
   30bf9:      	jmp	0x30b7e <core::slice::raw::from_raw_parts::h37f6899d047e36cf+0x1e>
   30bfb:      	int3
   30bfc:      	int3
   30bfd:      	int3
   30bfe:      	int3
   30bff:      	int3

0000000000030c00 <core::slice::raw::from_raw_parts::h6906955dd6014610>:
   30c00:      	subq	$0x48, %rsp
   30c04:      	movq	%rsi, 0x8(%rsp)
   30c09:      	movq	%rdi, 0x10(%rsp)
   30c0e:      	movq	%rdi, 0x28(%rsp)
   30c13:      	movq	%rsi, 0x30(%rsp)
   30c18:      	movb	$0x1, %al
   30c1a:      	testb	$0x1, %al
   30c1c:      	jne	0x30c36 <core::slice::raw::from_raw_parts::h6906955dd6014610+0x36>
   30c1e:      	movq	0x8(%rsp), %rsi
   30c23:      	movq	0x10(%rsp), %rdi
   30c28:      	movq	0xadb9(%rip), %rax      # 0x3b9e8 <zlgk82z0l71lvh9+0x3b9e8>
   30c2f:      	callq	*%rax
   30c31:      	addq	$0x48, %rsp
   30c35:      	retq
   30c36:      	movq	0x8(%rsp), %rax
   30c3b:      	movq	0x10(%rsp), %rcx
   30c40:      	movq	%rcx, 0x18(%rsp)
   30c45:      	movq	%rax, 0x20(%rsp)
   30c4a:      	movq	0x18(%rsp), %rdi
   30c4f:      	movq	0x20(%rsp), %rax
   30c54:      	movq	%rax, (%rsp)
   30c58:      	movq	%rdi, 0x38(%rsp)
   30c5d:      	movq	%rax, 0x40(%rsp)
   30c62:      	movq	0xadaf(%rip), %rax      # 0x3ba18 <zlgk82z0l71lvh9+0x3ba18>
   30c69:      	callq	*%rax
   30c6b:      	testb	$0x1, %al
   30c6d:      	jne	0x30c86 <core::slice::raw::from_raw_parts::h6906955dd6014610+0x86>
   30c6f:      	leaq	-0x1d892(%rip), %rdi    # 0x133e4 <str.2+0x24>
   30c76:      	movq	0xa4f3(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   30c7d:      	movl	$0xa2, %esi
   30c82:      	callq	*%rax
   30c84:      	ud2
   30c86:      	movq	(%rsp), %rdi
   30c8a:      	movq	0xb0af(%rip), %rax      # 0x3bd40 <zlgk82z0l71lvh9+0x3bd40>
   30c91:      	callq	*%rax
   30c93:      	testb	$0x1, %al
   30c95:      	jne	0x30c99 <core::slice::raw::from_raw_parts::h6906955dd6014610+0x99>
   30c97:      	jmp	0x30c6f <core::slice::raw::from_raw_parts::h6906955dd6014610+0x6f>
   30c99:      	jmp	0x30c1e <core::slice::raw::from_raw_parts::h6906955dd6014610+0x1e>
   30c9b:      	int3
   30c9c:      	int3
   30c9d:      	int3
   30c9e:      	int3
   30c9f:      	int3

0000000000030ca0 <core::slice::raw::from_raw_parts::h8dbe6fee3bec77e5>:
   30ca0:      	subq	$0x48, %rsp
   30ca4:      	movq	%rsi, 0x8(%rsp)
   30ca9:      	movq	%rdi, 0x10(%rsp)
   30cae:      	movq	%rdi, 0x28(%rsp)
   30cb3:      	movq	%rsi, 0x30(%rsp)
   30cb8:      	movb	$0x1, %al
   30cba:      	testb	$0x1, %al
   30cbc:      	jne	0x30cd6 <core::slice::raw::from_raw_parts::h8dbe6fee3bec77e5+0x36>
   30cbe:      	movq	0x8(%rsp), %rsi
   30cc3:      	movq	0x10(%rsp), %rdi
   30cc8:      	movq	0xacf9(%rip), %rax      # 0x3b9c8 <zlgk82z0l71lvh9+0x3b9c8>
   30ccf:      	callq	*%rax
   30cd1:      	addq	$0x48, %rsp
   30cd5:      	retq
   30cd6:      	movq	0x8(%rsp), %rax
   30cdb:      	movq	0x10(%rsp), %rcx
   30ce0:      	movq	%rcx, 0x18(%rsp)
   30ce5:      	movq	%rax, 0x20(%rsp)
   30cea:      	movq	0x18(%rsp), %rdi
   30cef:      	movq	0x20(%rsp), %rax
   30cf4:      	movq	%rax, (%rsp)
   30cf8:      	movq	%rdi, 0x38(%rsp)
   30cfd:      	movq	%rax, 0x40(%rsp)
   30d02:      	movq	0xb017(%rip), %rax      # 0x3bd20 <zlgk82z0l71lvh9+0x3bd20>
   30d09:      	callq	*%rax
   30d0b:      	testb	$0x1, %al
   30d0d:      	jne	0x30d26 <core::slice::raw::from_raw_parts::h8dbe6fee3bec77e5+0x86>
   30d0f:      	leaq	-0x1d932(%rip), %rdi    # 0x133e4 <str.2+0x24>
   30d16:      	movq	0xa453(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   30d1d:      	movl	$0xa2, %esi
   30d22:      	callq	*%rax
   30d24:      	ud2
   30d26:      	movq	(%rsp), %rdi
   30d2a:      	movq	0xb007(%rip), %rax      # 0x3bd38 <zlgk82z0l71lvh9+0x3bd38>
   30d31:      	callq	*%rax
   30d33:      	testb	$0x1, %al
   30d35:      	jne	0x30d39 <core::slice::raw::from_raw_parts::h8dbe6fee3bec77e5+0x99>
   30d37:      	jmp	0x30d0f <core::slice::raw::from_raw_parts::h8dbe6fee3bec77e5+0x6f>
   30d39:      	jmp	0x30cbe <core::slice::raw::from_raw_parts::h8dbe6fee3bec77e5+0x1e>
   30d3b:      	int3
   30d3c:      	int3
   30d3d:      	int3
   30d3e:      	int3
   30d3f:      	int3

0000000000030d40 <core::str::validations::utf8_first_byte::h29dce12d5389aa8e>:
   30d40:      	subq	$0x18, %rsp
   30d44:      	movl	%esi, 0xc(%rsp)
   30d48:      	movb	%dil, %al
   30d4b:      	movb	%al, 0x12(%rsp)
   30d4f:      	movb	%al, 0x13(%rsp)
   30d53:      	movl	%esi, 0x14(%rsp)
   30d57:      	cmpl	$0x8, %esi
   30d5a:      	setb	%al
   30d5d:      	testb	$0x1, %al
   30d5f:      	jne	0x30d63 <core::str::validations::utf8_first_byte::h29dce12d5389aa8e+0x23>
   30d61:      	jmp	0x30d7e <core::str::validations::utf8_first_byte::h29dce12d5389aa8e+0x3e>
   30d63:      	movb	0x12(%rsp), %al
   30d67:      	movl	0xc(%rsp), %ecx
   30d6b:      	andb	$0x7, %cl
   30d6e:      	movb	$0x7f, %dl
   30d70:      	shrb	%cl, %dl
   30d72:      	movb	%dl, %cl
   30d74:      	andb	%cl, %al
   30d76:      	movzbl	%al, %eax
   30d79:      	addq	$0x18, %rsp
   30d7d:      	retq
   30d7e:      	leaq	-0x1d9c5(%rip), %rdi    # 0x133c0 <str.2>
   30d85:      	leaq	0x9ed4(%rip), %rdx      # 0x3ac60 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x660>
   30d8c:      	movq	0xa13d(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   30d93:      	movl	$0x24, %esi
   30d98:      	callq	*%rax
   30d9a:      	ud2
   30d9c:      	int3
   30d9d:      	int3
   30d9e:      	int3
   30d9f:      	int3

0000000000030da0 <core::str::validations::utf8_acc_cont_byte::h75532db796969370>:
   30da0:      	pushq	%rax
   30da1:      	movl	%edi, %eax
   30da3:      	movb	%sil, %cl
   30da6:      	movl	%eax, (%rsp)
   30da9:      	movb	%cl, 0x7(%rsp)
   30dad:      	shll	$0x6, %eax
   30db0:      	andb	$0x3f, %cl
   30db3:      	movzbl	%cl, %ecx
   30db6:      	orl	%ecx, %eax
   30db8:      	popq	%rcx
   30db9:      	retq
   30dba:      	int3
   30dbb:      	int3
   30dbc:      	int3
   30dbd:      	int3
   30dbe:      	int3
   30dbf:      	int3

0000000000030dc0 <core::str::validations::utf8_is_cont_byte::h98c16a0928ae7551>:
   30dc0:      	subq	$0x1, %rsp
   30dc4:      	movb	%dil, %al
   30dc7:      	movb	%al, (%rsp)
   30dca:      	cmpb	$-0x40, %al
   30dcc:      	setl	%al
   30dcf:      	andb	$0x1, %al
   30dd1:      	movzbl	%al, %eax
   30dd4:      	addq	$0x1, %rsp
   30dd8:      	retq
   30dd9:      	int3
   30dda:      	int3
   30ddb:      	int3
   30ddc:      	int3
   30ddd:      	int3
   30dde:      	int3
   30ddf:      	int3

0000000000030de0 <core::str::validations::next_code_point::hada05c662daf552c>:
   30de0:      	subq	$0x68, %rsp
   30de4:      	movq	%rdi, 0x18(%rsp)
   30de9:      	movq	%rdi, 0x40(%rsp)
   30dee:      	movq	0xa6eb(%rip), %rax      # 0x3b4e0 <zlgk82z0l71lvh9+0x3b4e0>
   30df5:      	callq	*%rax
   30df7:      	movq	%rax, %rdi
   30dfa:      	movq	0xa7f7(%rip), %rax      # 0x3b5f8 <zlgk82z0l71lvh9+0x3b5f8>
   30e01:      	callq	*%rax
   30e03:      	movq	%rax, 0x30(%rsp)
   30e08:      	movq	0x30(%rsp), %rdx
   30e0d:      	xorl	%eax, %eax
   30e0f:      	movl	$0x1, %ecx
   30e14:      	cmpq	$0x0, %rdx
   30e18:      	cmoveq	%rcx, %rax
   30e1c:      	cmpq	$0x0, %rax
   30e20:      	jne	0x30e3c <core::str::validations::next_code_point::hada05c662daf552c+0x5c>
   30e22:      	movq	0x30(%rsp), %rax
   30e27:      	movq	%rax, 0x48(%rsp)
   30e2c:      	movb	(%rax), %al
   30e2e:      	movb	%al, 0x17(%rsp)
   30e32:      	movb	%al, 0x57(%rsp)
   30e36:      	cmpb	$-0x80, %al
   30e38:      	jb	0x30eb2 <core::str::validations::next_code_point::hada05c662daf552c+0xd2>
   30e3a:      	jmp	0x30e52 <core::str::validations::next_code_point::hada05c662daf552c+0x72>
   30e3c:      	movq	0xa7bd(%rip), %rax      # 0x3b600 <zlgk82z0l71lvh9+0x3b600>
   30e43:      	callq	*%rax
   30e45:      	movl	%edx, 0x2c(%rsp)
   30e49:      	movl	%eax, 0x28(%rsp)
   30e4d:      	jmp	0x30f89 <core::str::validations::next_code_point::hada05c662daf552c+0x1a9>
   30e52:      	movb	0x17(%rsp), %al
   30e56:      	movzbl	%al, %edi
   30e59:      	movl	$0x2, %esi
   30e5e:      	callq	0x30d40 <core::str::validations::utf8_first_byte::h29dce12d5389aa8e>
   30e63:      	movq	0x18(%rsp), %rdi
   30e68:      	movl	%eax, 0x10(%rsp)
   30e6c:      	movl	%eax, 0x58(%rsp)
   30e70:      	movq	0xa669(%rip), %rax      # 0x3b4e0 <zlgk82z0l71lvh9+0x3b4e0>
   30e77:      	callq	*%rax
   30e79:      	movq	%rax, %rdi
   30e7c:      	leaq	0x9df5(%rip), %rsi      # 0x3ac78 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x678>
   30e83:      	movq	0xa77e(%rip), %rax      # 0x3b608 <zlgk82z0l71lvh9+0x3b608>
   30e8a:      	callq	*%rax
   30e8c:      	movl	0x10(%rsp), %edi
   30e90:      	movb	(%rax), %al
   30e92:      	movb	%al, 0x16(%rsp)
   30e96:      	movb	%al, 0x5e(%rsp)
   30e9a:      	movzbl	%al, %esi
   30e9d:      	callq	0x30da0 <core::str::validations::utf8_acc_cont_byte::h75532db796969370>
   30ea2:      	movl	%eax, %ecx
   30ea4:      	movb	0x17(%rsp), %al
   30ea8:      	movl	%ecx, 0x3c(%rsp)
   30eac:      	cmpb	$-0x20, %al
   30eae:      	jae	0x30edf <core::str::validations::next_code_point::hada05c662daf552c+0xff>
   30eb0:      	jmp	0x30eca <core::str::validations::next_code_point::hada05c662daf552c+0xea>
   30eb2:      	movb	0x17(%rsp), %al
   30eb6:      	movzbl	%al, %eax
   30eb9:      	movl	%eax, 0x2c(%rsp)
   30ebd:      	movl	$0x1, 0x28(%rsp)
   30ec5:      	jmp	0x30f89 <core::str::validations::next_code_point::hada05c662daf552c+0x1a9>
   30eca:      	movl	0x3c(%rsp), %eax
   30ece:      	movl	%eax, 0x2c(%rsp)
   30ed2:      	movl	$0x1, 0x28(%rsp)
   30eda:      	jmp	0x30f89 <core::str::validations::next_code_point::hada05c662daf552c+0x1a9>
   30edf:      	movq	0x18(%rsp), %rdi
   30ee4:      	movq	0xa5f5(%rip), %rax      # 0x3b4e0 <zlgk82z0l71lvh9+0x3b4e0>
   30eeb:      	callq	*%rax
   30eed:      	movq	%rax, %rdi
   30ef0:      	leaq	0x9d99(%rip), %rsi      # 0x3ac90 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x690>
   30ef7:      	movq	0xa70a(%rip), %rax      # 0x3b608 <zlgk82z0l71lvh9+0x3b608>
   30efe:      	callq	*%rax
   30f00:      	movb	0x16(%rsp), %cl
   30f04:      	movb	(%rax), %al
   30f06:      	movb	%al, 0x5f(%rsp)
   30f0a:      	andb	$0x3f, %cl
   30f0d:      	movzbl	%cl, %edi
   30f10:      	movzbl	%al, %esi
   30f13:      	callq	0x30da0 <core::str::validations::utf8_acc_cont_byte::h75532db796969370>
   30f18:      	movl	0x10(%rsp), %ecx
   30f1c:      	movl	%eax, %edx
   30f1e:      	movb	0x17(%rsp), %al
   30f22:      	movl	%edx, 0xc(%rsp)
   30f26:      	movl	%edx, 0x60(%rsp)
   30f2a:      	shll	$0xc, %ecx
   30f2d:      	orl	%edx, %ecx
   30f2f:      	movl	%ecx, 0x3c(%rsp)
   30f33:      	cmpb	$-0x10, %al
   30f35:      	jb	0x30eca <core::str::validations::next_code_point::hada05c662daf552c+0xea>
   30f37:      	movq	0x18(%rsp), %rdi
   30f3c:      	movq	0xa59d(%rip), %rax      # 0x3b4e0 <zlgk82z0l71lvh9+0x3b4e0>
   30f43:      	callq	*%rax
   30f45:      	movq	%rax, %rdi
   30f48:      	leaq	0x9d59(%rip), %rsi      # 0x3aca8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x6a8>
   30f4f:      	movq	0xa6b2(%rip), %rax      # 0x3b608 <zlgk82z0l71lvh9+0x3b608>
   30f56:      	callq	*%rax
   30f58:      	movl	0x10(%rsp), %ecx
   30f5c:      	movl	0xc(%rsp), %edi
   30f60:      	movb	(%rax), %al
   30f62:      	movb	%al, 0x67(%rsp)
   30f66:      	andl	$0x7, %ecx
   30f69:      	shll	$0x12, %ecx
   30f6c:      	movl	%ecx, 0x8(%rsp)
   30f70:      	movzbl	%al, %esi
   30f73:      	callq	0x30da0 <core::str::validations::utf8_acc_cont_byte::h75532db796969370>
   30f78:      	movl	%eax, %ecx
   30f7a:      	movl	0x8(%rsp), %eax
   30f7e:      	orl	%ecx, %eax
   30f80:      	movl	%eax, 0x3c(%rsp)
   30f84:      	jmp	0x30eca <core::str::validations::next_code_point::hada05c662daf552c+0xea>
   30f89:      	movl	0x28(%rsp), %eax
   30f8d:      	movl	0x2c(%rsp), %edx
   30f91:      	addq	$0x68, %rsp
   30f95:      	retq
   30f96:      	int3
   30f97:      	int3
   30f98:      	int3
   30f99:      	int3
   30f9a:      	int3
   30f9b:      	int3
   30f9c:      	int3
   30f9d:      	int3
   30f9e:      	int3
   30f9f:      	int3

0000000000030fa0 <core::cmp::impls::<impl core::cmp::PartialEq for usize>::eq::heb1a1db01a862a79>:
   30fa0:      	subq	$0x10, %rsp
   30fa4:      	movq	%rdi, (%rsp)
   30fa8:      	movq	%rsi, 0x8(%rsp)
   30fad:      	movq	(%rdi), %rax
   30fb0:      	cmpq	(%rsi), %rax
   30fb3:      	sete	%al
   30fb6:      	andb	$0x1, %al
   30fb8:      	movzbl	%al, %eax
   30fbb:      	addq	$0x10, %rsp
   30fbf:      	retq

0000000000030fc0 <core::cmp::impls::<impl core::cmp::PartialEq for u8>::eq::hfa1ee48ca5d9a958>:
   30fc0:      	subq	$0x10, %rsp
   30fc4:      	movq	%rdi, (%rsp)
   30fc8:      	movq	%rsi, 0x8(%rsp)
   30fcd:      	movb	(%rdi), %al
   30fcf:      	cmpb	(%rsi), %al
   30fd1:      	sete	%al
   30fd4:      	andb	$0x1, %al
   30fd6:      	movzbl	%al, %eax
   30fd9:      	addq	$0x10, %rsp
   30fdd:      	retq
   30fde:      	int3
   30fdf:      	int3

0000000000030fe0 <core::cmp::impls::<impl core::cmp::PartialEq for u32>::eq::h8083bd9c761ea911>:
   30fe0:      	subq	$0x10, %rsp
   30fe4:      	movq	%rdi, (%rsp)
   30fe8:      	movq	%rsi, 0x8(%rsp)
   30fed:      	movl	(%rdi), %eax
   30fef:      	cmpl	(%rsi), %eax
   30ff1:      	sete	%al
   30ff4:      	andb	$0x1, %al
   30ff6:      	movzbl	%al, %eax
   30ff9:      	addq	$0x10, %rsp
   30ffd:      	retq
   30ffe:      	int3
   30fff:      	int3

0000000000031000 <core::cmp::impls::<impl core::cmp::PartialEq for u64>::eq::h99b26a78897b40e2>:
   31000:      	subq	$0x10, %rsp
   31004:      	movq	%rdi, (%rsp)
   31008:      	movq	%rsi, 0x8(%rsp)
   3100d:      	movq	(%rdi), %rax
   31010:      	cmpq	(%rsi), %rax
   31013:      	sete	%al
   31016:      	andb	$0x1, %al
   31018:      	movzbl	%al, %eax
   3101b:      	addq	$0x10, %rsp
   3101f:      	retq

0000000000031020 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::h5ed48b10352067fe>:
   31020:      	subq	$0x28, %rsp
   31024:      	movq	%rsi, (%rsp)
   31028:      	movq	%rdi, 0x8(%rsp)
   3102d:      	movq	%rdi, 0x18(%rsp)
   31032:      	movq	%rsi, 0x20(%rsp)
   31037:      	movq	(%rdi), %rax
   3103a:      	cmpq	(%rsi), %rax
   3103d:      	jb	0x31052 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::h5ed48b10352067fe+0x32>
   3103f:      	movq	(%rsp), %rcx
   31043:      	movq	0x8(%rsp), %rax
   31048:      	movq	(%rax), %rax
   3104b:      	cmpq	(%rcx), %rax
   3104e:      	je	0x31060 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::h5ed48b10352067fe+0x40>
   31050:      	jmp	0x31059 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::h5ed48b10352067fe+0x39>
   31052:      	movb	$-0x1, 0x17(%rsp)
   31057:      	jmp	0x31065 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::h5ed48b10352067fe+0x45>
   31059:      	movb	$0x1, 0x17(%rsp)
   3105e:      	jmp	0x31065 <core::cmp::impls::<impl core::cmp::Ord for usize>::cmp::h5ed48b10352067fe+0x45>
   31060:      	movb	$0x0, 0x17(%rsp)
   31065:      	movb	0x17(%rsp), %al
   31069:      	addq	$0x28, %rsp
   3106d:      	retq
   3106e:      	int3
   3106f:      	int3

0000000000031070 <core::ops::function::FnOnce::call_once::h20a315612199f537>:
   31070:      	subq	$0x28, %rsp
   31074:      	movq	%rdi, 0x8(%rsp)
   31079:      	movq	%rsi, 0x10(%rsp)
   3107e:      	movq	%rdx, 0x18(%rsp)
   31083:      	movq	%rcx, 0x20(%rsp)
   31088:      	movq	0x10(%rsp), %rsi
   3108d:      	movq	0x18(%rsp), %rdx
   31092:      	movq	0x20(%rsp), %rcx
   31097:      	leaq	0x8(%rsp), %rdi
   3109c:      	callq	0x31be0 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h97456d4397b56921>
   310a1:      	addq	$0x28, %rsp
   310a5:      	retq
   310a6:      	int3
   310a7:      	int3
   310a8:      	int3
   310a9:      	int3
   310aa:      	int3
   310ab:      	int3
   310ac:      	int3
   310ad:      	int3
   310ae:      	int3
   310af:      	int3

00000000000310b0 <core::ops::function::FnOnce::call_once::h5efb1a3d92e53854>:
   310b0:      	subq	$0x28, %rsp
   310b4:      	movq	%rdi, 0x8(%rsp)
   310b9:      	movq	%rsi, 0x10(%rsp)
   310be:      	movq	%rdx, 0x18(%rsp)
   310c3:      	movq	%rcx, 0x20(%rsp)
   310c8:      	movq	0x10(%rsp), %rsi
   310cd:      	movq	0x18(%rsp), %rdx
   310d2:      	movq	0x20(%rsp), %rcx
   310d7:      	leaq	0x8(%rsp), %rdi
   310dc:      	callq	0x31a20 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hc20c0c603158b685>
   310e1:      	addq	$0x28, %rsp
   310e5:      	retq
   310e6:      	int3
   310e7:      	int3
   310e8:      	int3
   310e9:      	int3
   310ea:      	int3
   310eb:      	int3
   310ec:      	int3
   310ed:      	int3
   310ee:      	int3
   310ef:      	int3

00000000000310f0 <core::ops::function::FnOnce::call_once::h7abd919ab88417ef>:
   310f0:      	subq	$0x28, %rsp
   310f4:      	movq	%rdi, 0x10(%rsp)
   310f9:      	movq	%rsi, 0x18(%rsp)
   310fe:      	movq	%rdx, 0x20(%rsp)
   31103:      	movq	0x10(%rsp), %rsi
   31108:      	movq	0x18(%rsp), %rdx
   3110d:      	movq	0x20(%rsp), %rcx
   31112:      	leaq	0xf(%rsp), %rdi
   31117:      	callq	0x31730 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1>
   3111c:      	addq	$0x28, %rsp
   31120:      	retq
   31121:      	int3
   31122:      	int3
   31123:      	int3
   31124:      	int3
   31125:      	int3
   31126:      	int3
   31127:      	int3
   31128:      	int3
   31129:      	int3
   3112a:      	int3
   3112b:      	int3
   3112c:      	int3
   3112d:      	int3
   3112e:      	int3
   3112f:      	int3

0000000000031130 <core::ops::function::FnOnce::call_once::hedd592f8a841e36c>:
   31130:      	subq	$0x28, %rsp
   31134:      	movq	%rdi, 0x8(%rsp)
   31139:      	movq	%rsi, 0x10(%rsp)
   3113e:      	movq	%rdx, 0x18(%rsp)
   31143:      	movq	%rcx, 0x20(%rsp)
   31148:      	movq	0x10(%rsp), %rsi
   3114d:      	movq	0x18(%rsp), %rdx
   31152:      	movq	0x20(%rsp), %rcx
   31157:      	leaq	0x8(%rsp), %rdi
   3115c:      	callq	0x31880 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h5d169fadb87001c5>
   31161:      	addq	$0x28, %rsp
   31165:      	retq
   31166:      	int3
   31167:      	int3
   31168:      	int3
   31169:      	int3
   3116a:      	int3
   3116b:      	int3
   3116c:      	int3
   3116d:      	int3
   3116e:      	int3
   3116f:      	int3

0000000000031170 <core::cmp::impls::<impl core::cmp::PartialEq for u16>::ne::hac3f0d9dea7f80b2>:
   31170:      	subq	$0x10, %rsp
   31174:      	movq	%rdi, (%rsp)
   31178:      	movq	%rsi, 0x8(%rsp)
   3117d:      	movw	(%rdi), %ax
   31180:      	cmpw	(%rsi), %ax
   31183:      	setne	%al
   31186:      	andb	$0x1, %al
   31188:      	movzbl	%al, %eax
   3118b:      	addq	$0x10, %rsp
   3118f:      	retq

0000000000031190 <core::cmp::impls::<impl core::cmp::PartialEq for u32>::ne::h723f2ed9682bef1b>:
   31190:      	subq	$0x10, %rsp
   31194:      	movq	%rdi, (%rsp)
   31198:      	movq	%rsi, 0x8(%rsp)
   3119d:      	movl	(%rdi), %eax
   3119f:      	cmpl	(%rsi), %eax
   311a1:      	setne	%al
   311a4:      	andb	$0x1, %al
   311a6:      	movzbl	%al, %eax
   311a9:      	addq	$0x10, %rsp
   311ad:      	retq
   311ae:      	int3
   311af:      	int3

00000000000311b0 <core::cmp::impls::<impl core::cmp::PartialEq for u64>::ne::he102811231087234>:
   311b0:      	subq	$0x10, %rsp
   311b4:      	movq	%rdi, (%rsp)
   311b8:      	movq	%rsi, 0x8(%rsp)
   311bd:      	movq	(%rdi), %rax
   311c0:      	cmpq	(%rsi), %rax
   311c3:      	setne	%al
   311c6:      	andb	$0x1, %al
   311c8:      	movzbl	%al, %eax
   311cb:      	addq	$0x10, %rsp
   311cf:      	retq

00000000000311d0 <core::cmp::impls::<impl core::cmp::PartialEq for u128>::ne::hd621a0ea5e682d91>:
   311d0:      	subq	$0x10, %rsp
   311d4:      	movq	%rdi, (%rsp)
   311d8:      	movq	%rsi, 0x8(%rsp)
   311dd:      	movq	(%rdi), %rax
   311e0:      	movq	0x8(%rdi), %rcx
   311e4:      	movq	(%rsi), %rdx
   311e7:      	movq	0x8(%rsi), %rsi
   311eb:      	xorq	%rsi, %rcx
   311ee:      	xorq	%rdx, %rax
   311f1:      	orq	%rcx, %rax
   311f4:      	setne	%al
   311f7:      	andb	$0x1, %al
   311f9:      	movzbl	%al, %eax
   311fc:      	addq	$0x10, %rsp
   31200:      	retq
   31201:      	int3
   31202:      	int3
   31203:      	int3
   31204:      	int3
   31205:      	int3
   31206:      	int3
   31207:      	int3
   31208:      	int3
   31209:      	int3
   3120a:      	int3
   3120b:      	int3
   3120c:      	int3
   3120d:      	int3
   3120e:      	int3
   3120f:      	int3

0000000000031210 <core::ptr::read_unaligned::h5a6c8f7b409175a1>:
   31210:      	subq	$0x98, %rsp
   31217:      	movq	%rdi, 0x8(%rsp)
   3121c:      	movq	%rdi, 0x30(%rsp)
   31221:      	movl	0x90(%rsp), %eax
   31228:      	movl	%eax, 0x2c(%rsp)
   3122c:      	leaq	0x2c(%rsp), %rax
   31231:      	movq	%rax, 0x80(%rsp)
   31239:      	movq	%rdi, 0x50(%rsp)
   3123e:      	leaq	0x2c(%rsp), %rax
   31243:      	movq	%rax, 0x58(%rsp)
   31248:      	movq	$0x4, 0x60(%rsp)
   31251:      	movq	%rdi, 0x38(%rsp)
   31256:      	leaq	0x2c(%rsp), %rax
   3125b:      	movq	%rax, 0x40(%rsp)
   31260:      	movq	$0x4, 0x48(%rsp)
   31269:      	movq	0x38(%rsp), %rdi
   3126e:      	movq	%rdi, 0x10(%rsp)
   31273:      	movq	0x40(%rsp), %rcx
   31278:      	movq	%rcx, 0x18(%rsp)
   3127d:      	movq	0x48(%rsp), %rax
   31282:      	movq	%rax, 0x20(%rsp)
   31287:      	movq	%rdi, 0x68(%rsp)
   3128c:      	movq	%rcx, 0x70(%rsp)
   31291:      	movq	%rax, 0x78(%rsp)
   31296:      	movq	0x9fd3(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   3129d:      	callq	*%rax
   3129f:      	testb	$0x1, %al
   312a1:      	jne	0x312ba <core::ptr::read_unaligned::h5a6c8f7b409175a1+0xaa>
   312a3:      	leaq	-0x1ddf9(%rip), %rdi    # 0x134b1 <str.3+0x21>
   312aa:      	movq	0x9ebf(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   312b1:      	movl	$0xa6, %esi
   312b6:      	callq	*%rax
   312b8:      	ud2
   312ba:      	movq	0x18(%rsp), %rdi
   312bf:      	movq	0x9faa(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   312c6:      	callq	*%rax
   312c8:      	testb	$0x1, %al
   312ca:      	jne	0x312ce <core::ptr::read_unaligned::h5a6c8f7b409175a1+0xbe>
   312cc:      	jmp	0x312a3 <core::ptr::read_unaligned::h5a6c8f7b409175a1+0x93>
   312ce:      	movq	0x20(%rsp), %rdx
   312d3:      	movq	0x18(%rsp), %rsi
   312d8:      	movq	0x10(%rsp), %rdi
   312dd:      	movq	0xa4cc(%rip), %rax      # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   312e4:      	callq	*%rax
   312e6:      	testb	$0x1, %al
   312e8:      	jne	0x312ec <core::ptr::read_unaligned::h5a6c8f7b409175a1+0xdc>
   312ea:      	jmp	0x312a3 <core::ptr::read_unaligned::h5a6c8f7b409175a1+0x93>
   312ec:      	movq	0x8(%rsp), %rax
   312f1:      	movl	(%rax), %eax
   312f3:      	movl	%eax, 0x2c(%rsp)
   312f7:      	movl	0x2c(%rsp), %eax
   312fb:      	movl	%eax, 0x8c(%rsp)
   31302:      	movl	%eax, 0x94(%rsp)
   31309:      	addq	$0x98, %rsp
   31310:      	retq
   31311:      	int3
   31312:      	int3
   31313:      	int3
   31314:      	int3
   31315:      	int3
   31316:      	int3
   31317:      	int3
   31318:      	int3
   31319:      	int3
   3131a:      	int3
   3131b:      	int3
   3131c:      	int3
   3131d:      	int3
   3131e:      	int3
   3131f:      	int3

0000000000031320 <core::ptr::read_unaligned::h9c043620721b6a2d>:
   31320:      	subq	$0x88, %rsp
   31327:      	movq	%rdi, (%rsp)
   3132b:      	movq	%rdi, 0x28(%rsp)
   31330:      	movw	0x84(%rsp), %ax
   31338:      	movw	%ax, 0x26(%rsp)
   3133d:      	leaq	0x26(%rsp), %rax
   31342:      	movq	%rax, 0x78(%rsp)
   31347:      	movq	%rdi, 0x48(%rsp)
   3134c:      	leaq	0x26(%rsp), %rax
   31351:      	movq	%rax, 0x50(%rsp)
   31356:      	movq	$0x2, 0x58(%rsp)
   3135f:      	movq	%rdi, 0x30(%rsp)
   31364:      	leaq	0x26(%rsp), %rax
   31369:      	movq	%rax, 0x38(%rsp)
   3136e:      	movq	$0x2, 0x40(%rsp)
   31377:      	movq	0x30(%rsp), %rdi
   3137c:      	movq	%rdi, 0x8(%rsp)
   31381:      	movq	0x38(%rsp), %rcx
   31386:      	movq	%rcx, 0x10(%rsp)
   3138b:      	movq	0x40(%rsp), %rax
   31390:      	movq	%rax, 0x18(%rsp)
   31395:      	movq	%rdi, 0x60(%rsp)
   3139a:      	movq	%rcx, 0x68(%rsp)
   3139f:      	movq	%rax, 0x70(%rsp)
   313a4:      	movq	0x9ec5(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   313ab:      	callq	*%rax
   313ad:      	testb	$0x1, %al
   313af:      	jne	0x313c8 <core::ptr::read_unaligned::h9c043620721b6a2d+0xa8>
   313b1:      	leaq	-0x1df07(%rip), %rdi    # 0x134b1 <str.3+0x21>
   313b8:      	movq	0x9db1(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   313bf:      	movl	$0xa6, %esi
   313c4:      	callq	*%rax
   313c6:      	ud2
   313c8:      	movq	0x10(%rsp), %rdi
   313cd:      	movq	0x9e9c(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   313d4:      	callq	*%rax
   313d6:      	testb	$0x1, %al
   313d8:      	jne	0x313dc <core::ptr::read_unaligned::h9c043620721b6a2d+0xbc>
   313da:      	jmp	0x313b1 <core::ptr::read_unaligned::h9c043620721b6a2d+0x91>
   313dc:      	movq	0x18(%rsp), %rdx
   313e1:      	movq	0x10(%rsp), %rsi
   313e6:      	movq	0x8(%rsp), %rdi
   313eb:      	movq	0xa3be(%rip), %rax      # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   313f2:      	callq	*%rax
   313f4:      	testb	$0x1, %al
   313f6:      	jne	0x313fa <core::ptr::read_unaligned::h9c043620721b6a2d+0xda>
   313f8:      	jmp	0x313b1 <core::ptr::read_unaligned::h9c043620721b6a2d+0x91>
   313fa:      	movq	(%rsp), %rax
   313fe:      	movw	(%rax), %ax
   31401:      	movw	%ax, 0x26(%rsp)
   31406:      	movw	0x26(%rsp), %ax
   3140b:      	movw	%ax, 0x82(%rsp)
   31413:      	movw	%ax, 0x86(%rsp)
   3141b:      	addq	$0x88, %rsp
   31422:      	retq
   31423:      	int3
   31424:      	int3
   31425:      	int3
   31426:      	int3
   31427:      	int3
   31428:      	int3
   31429:      	int3
   3142a:      	int3
   3142b:      	int3
   3142c:      	int3
   3142d:      	int3
   3142e:      	int3
   3142f:      	int3

0000000000031430 <core::ptr::read_unaligned::hae9cc3431bb4e364>:
   31430:      	subq	$0x98, %rsp
   31437:      	movq	%rdi, (%rsp)
   3143b:      	movq	%rdi, 0x28(%rsp)
   31440:      	movq	0x88(%rsp), %rax
   31448:      	movq	%rax, 0x20(%rsp)
   3144d:      	leaq	0x20(%rsp), %rax
   31452:      	movq	%rax, 0x78(%rsp)
   31457:      	movq	%rdi, 0x48(%rsp)
   3145c:      	leaq	0x20(%rsp), %rax
   31461:      	movq	%rax, 0x50(%rsp)
   31466:      	movq	$0x8, 0x58(%rsp)
   3146f:      	movq	%rdi, 0x30(%rsp)
   31474:      	leaq	0x20(%rsp), %rax
   31479:      	movq	%rax, 0x38(%rsp)
   3147e:      	movq	$0x8, 0x40(%rsp)
   31487:      	movq	0x30(%rsp), %rdi
   3148c:      	movq	%rdi, 0x8(%rsp)
   31491:      	movq	0x38(%rsp), %rcx
   31496:      	movq	%rcx, 0x10(%rsp)
   3149b:      	movq	0x40(%rsp), %rax
   314a0:      	movq	%rax, 0x18(%rsp)
   314a5:      	movq	%rdi, 0x60(%rsp)
   314aa:      	movq	%rcx, 0x68(%rsp)
   314af:      	movq	%rax, 0x70(%rsp)
   314b4:      	movq	0x9db5(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   314bb:      	callq	*%rax
   314bd:      	testb	$0x1, %al
   314bf:      	jne	0x314d8 <core::ptr::read_unaligned::hae9cc3431bb4e364+0xa8>
   314c1:      	leaq	-0x1e017(%rip), %rdi    # 0x134b1 <str.3+0x21>
   314c8:      	movq	0x9ca1(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   314cf:      	movl	$0xa6, %esi
   314d4:      	callq	*%rax
   314d6:      	ud2
   314d8:      	movq	0x10(%rsp), %rdi
   314dd:      	movq	0x9d8c(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   314e4:      	callq	*%rax
   314e6:      	testb	$0x1, %al
   314e8:      	jne	0x314ec <core::ptr::read_unaligned::hae9cc3431bb4e364+0xbc>
   314ea:      	jmp	0x314c1 <core::ptr::read_unaligned::hae9cc3431bb4e364+0x91>
   314ec:      	movq	0x18(%rsp), %rdx
   314f1:      	movq	0x10(%rsp), %rsi
   314f6:      	movq	0x8(%rsp), %rdi
   314fb:      	movq	0xa2ae(%rip), %rax      # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   31502:      	callq	*%rax
   31504:      	testb	$0x1, %al
   31506:      	jne	0x3150a <core::ptr::read_unaligned::hae9cc3431bb4e364+0xda>
   31508:      	jmp	0x314c1 <core::ptr::read_unaligned::hae9cc3431bb4e364+0x91>
   3150a:      	movq	(%rsp), %rax
   3150e:      	movq	(%rax), %rax
   31511:      	movq	%rax, 0x20(%rsp)
   31516:      	movq	0x20(%rsp), %rax
   3151b:      	movq	%rax, 0x80(%rsp)
   31523:      	movq	%rax, 0x90(%rsp)
   3152b:      	addq	$0x98, %rsp
   31532:      	retq
   31533:      	int3
   31534:      	int3
   31535:      	int3
   31536:      	int3
   31537:      	int3
   31538:      	int3
   31539:      	int3
   3153a:      	int3
   3153b:      	int3
   3153c:      	int3
   3153d:      	int3
   3153e:      	int3
   3153f:      	int3

0000000000031540 <core::ptr::read_unaligned::hfb9109d5e5976fb9>:
   31540:      	subq	$0xb8, %rsp
   31547:      	movq	%rdi, (%rsp)
   3154b:      	movq	%rdi, 0x30(%rsp)
   31550:      	movq	0x98(%rsp), %rax
   31558:      	movq	0xa0(%rsp), %rcx
   31560:      	movq	%rcx, 0x28(%rsp)
   31565:      	movq	%rax, 0x20(%rsp)
   3156a:      	leaq	0x20(%rsp), %rax
   3156f:      	movq	%rax, 0x80(%rsp)
   31577:      	movq	%rdi, 0x50(%rsp)
   3157c:      	leaq	0x20(%rsp), %rax
   31581:      	movq	%rax, 0x58(%rsp)
   31586:      	movq	$0x10, 0x60(%rsp)
   3158f:      	movq	%rdi, 0x38(%rsp)
   31594:      	leaq	0x20(%rsp), %rax
   31599:      	movq	%rax, 0x40(%rsp)
   3159e:      	movq	$0x10, 0x48(%rsp)
   315a7:      	movq	0x38(%rsp), %rdi
   315ac:      	movq	%rdi, 0x8(%rsp)
   315b1:      	movq	0x40(%rsp), %rcx
   315b6:      	movq	%rcx, 0x10(%rsp)
   315bb:      	movq	0x48(%rsp), %rax
   315c0:      	movq	%rax, 0x18(%rsp)
   315c5:      	movq	%rdi, 0x68(%rsp)
   315ca:      	movq	%rcx, 0x70(%rsp)
   315cf:      	movq	%rax, 0x78(%rsp)
   315d4:      	movq	0x9c95(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   315db:      	callq	*%rax
   315dd:      	testb	$0x1, %al
   315df:      	jne	0x315f8 <core::ptr::read_unaligned::hfb9109d5e5976fb9+0xb8>
   315e1:      	leaq	-0x1e137(%rip), %rdi    # 0x134b1 <str.3+0x21>
   315e8:      	movq	0x9b81(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   315ef:      	movl	$0xa6, %esi
   315f4:      	callq	*%rax
   315f6:      	ud2
   315f8:      	movq	0x10(%rsp), %rdi
   315fd:      	movq	0x9c6c(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   31604:      	callq	*%rax
   31606:      	testb	$0x1, %al
   31608:      	jne	0x3160c <core::ptr::read_unaligned::hfb9109d5e5976fb9+0xcc>
   3160a:      	jmp	0x315e1 <core::ptr::read_unaligned::hfb9109d5e5976fb9+0xa1>
   3160c:      	movq	0x18(%rsp), %rdx
   31611:      	movq	0x10(%rsp), %rsi
   31616:      	movq	0x8(%rsp), %rdi
   3161b:      	movq	0xa18e(%rip), %rax      # 0x3b7b0 <zlgk82z0l71lvh9+0x3b7b0>
   31622:      	callq	*%rax
   31624:      	testb	$0x1, %al
   31626:      	jne	0x3162a <core::ptr::read_unaligned::hfb9109d5e5976fb9+0xea>
   31628:      	jmp	0x315e1 <core::ptr::read_unaligned::hfb9109d5e5976fb9+0xa1>
   3162a:      	movq	(%rsp), %rcx
   3162e:      	movq	(%rcx), %rax
   31631:      	movq	0x8(%rcx), %rcx
   31635:      	movq	%rcx, 0x28(%rsp)
   3163a:      	movq	%rax, 0x20(%rsp)
   3163f:      	movq	0x20(%rsp), %rax
   31644:      	movq	0x28(%rsp), %rdx
   31649:      	movq	%rdx, 0x90(%rsp)
   31651:      	movq	%rax, 0x88(%rsp)
   31659:      	movq	%rdx, 0xb0(%rsp)
   31661:      	movq	%rax, 0xa8(%rsp)
   31669:      	addq	$0xb8, %rsp
   31670:      	retq
   31671:      	int3
   31672:      	int3
   31673:      	int3
   31674:      	int3
   31675:      	int3
   31676:      	int3
   31677:      	int3
   31678:      	int3
   31679:      	int3
   3167a:      	int3
   3167b:      	int3
   3167c:      	int3
   3167d:      	int3
   3167e:      	int3
   3167f:      	int3

0000000000031680 <core::ptr::read::h30b2e593f08f754d>:
   31680:      	subq	$0x28, %rsp
   31684:      	movq	%rdi, 0x8(%rsp)
   31689:      	movq	%rdi, 0x18(%rsp)
   3168e:      	movb	$0x1, %al
   31690:      	testb	$0x1, %al
   31692:      	jne	0x316a0 <core::ptr::read::h30b2e593f08f754d+0x20>
   31694:      	movq	0x8(%rsp), %rax
   31699:      	movb	(%rax), %al
   3169b:      	addq	$0x28, %rsp
   3169f:      	retq
   316a0:      	movq	0x8(%rsp), %rax
   316a5:      	movq	%rax, 0x10(%rsp)
   316aa:      	movq	0x10(%rsp), %rdi
   316af:      	movq	%rdi, 0x20(%rsp)
   316b4:      	movq	0x9bb5(%rip), %rax      # 0x3b270 <zlgk82z0l71lvh9+0x3b270>
   316bb:      	callq	*%rax
   316bd:      	testb	$0x1, %al
   316bf:      	jne	0x316d8 <core::ptr::read::h30b2e593f08f754d+0x58>
   316c1:      	leaq	-0x1e171(%rip), %rdi    # 0x13557 <str.3+0xc7>
   316c8:      	movq	0x9aa1(%rip), %rax      # 0x3b170 <zlgk82z0l71lvh9+0x3b170>
   316cf:      	movl	$0x65, %esi
   316d4:      	callq	*%rax
   316d6:      	ud2
   316d8:      	jmp	0x31694 <core::ptr::read::h30b2e593f08f754d+0x14>
   316da:      	int3
   316db:      	int3
   316dc:      	int3
   316dd:      	int3
   316de:      	int3
   316df:      	int3

00000000000316e0 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h193bcc981c198647>:
   316e0:      	pushq	%rax
   316e1:      	movq	%rdi, (%rsp)
   316e5:      	callq	0x31540 <core::ptr::read_unaligned::hfb9109d5e5976fb9>
   316ea:      	popq	%rcx
   316eb:      	retq
   316ec:      	int3
   316ed:      	int3
   316ee:      	int3
   316ef:      	int3

00000000000316f0 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h415bc302eacbfd3f>:
   316f0:      	pushq	%rax
   316f1:      	movq	%rdi, (%rsp)
   316f5:      	callq	0x31320 <core::ptr::read_unaligned::h9c043620721b6a2d>
   316fa:      	popq	%rcx
   316fb:      	retq
   316fc:      	int3
   316fd:      	int3
   316fe:      	int3
   316ff:      	int3

0000000000031700 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h5d7d57f8f775179e>:
   31700:      	pushq	%rax
   31701:      	movq	%rdi, (%rsp)
   31705:      	callq	0x31210 <core::ptr::read_unaligned::h5a6c8f7b409175a1>
   3170a:      	popq	%rcx
   3170b:      	retq
   3170c:      	int3
   3170d:      	int3
   3170e:      	int3
   3170f:      	int3

0000000000031710 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h680681c6fe0d7076>:
   31710:      	pushq	%rax
   31711:      	movq	%rdi, (%rsp)
   31715:      	callq	0x31430 <core::ptr::read_unaligned::hae9cc3431bb4e364>
   3171a:      	popq	%rcx
   3171b:      	retq
   3171c:      	int3
   3171d:      	int3
   3171e:      	int3
   3171f:      	int3

0000000000031720 <core::ptr::const_ptr::<impl *const T>::read::h1161cc1f25589ae4>:
   31720:      	pushq	%rax
   31721:      	movq	%rdi, (%rsp)
   31725:      	callq	0x31680 <core::ptr::read::h30b2e593f08f754d>
   3172a:      	popq	%rcx
   3172b:      	retq
   3172c:      	int3
   3172d:      	int3
   3172e:      	int3
   3172f:      	int3

0000000000031730 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1>:
   31730:      	subq	$0x98, %rsp
   31737:      	movq	%rsi, 0x18(%rsp)
   3173c:      	movq	%rdx, 0x20(%rsp)
   31741:      	movq	%rdi, 0x60(%rsp)
   31746:      	movq	%rcx, 0x68(%rsp)
   3174b:      	movq	$0x0, 0x30(%rsp)
   31754:      	movq	%rcx, 0x38(%rsp)
   31759:      	movq	0x30(%rsp), %rdi
   3175e:      	movq	0x38(%rsp), %rsi
   31763:      	movq	0x9c06(%rip), %rax      # 0x3b370 <zlgk82z0l71lvh9+0x3b370>
   3176a:      	callq	*%rax
   3176c:      	movq	%rax, 0x40(%rsp)
   31771:      	movq	%rdx, 0x48(%rsp)
   31776:      	movq	0x9bfb(%rip), %rax      # 0x3b378 <zlgk82z0l71lvh9+0x3b378>
   3177d:      	leaq	0x40(%rsp), %rdi
   31782:      	callq	*%rax
   31784:      	movq	%rdx, 0x58(%rsp)
   31789:      	movq	%rax, 0x50(%rsp)
   3178e:      	cmpq	$0x0, 0x50(%rsp)
   31794:      	jne	0x317a0 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1+0x70>
   31796:      	movl	$0x0, 0x2c(%rsp)
   3179e:      	jmp	0x317c4 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1+0x94>
   317a0:      	movq	0x18(%rsp), %rdi
   317a5:      	callq	0x31720 <core::ptr::const_ptr::<impl *const T>::read::h1161cc1f25589ae4>
   317aa:      	movb	%al, 0x17(%rsp)
   317ae:      	movq	0x20(%rsp), %rdi
   317b3:      	callq	0x31720 <core::ptr::const_ptr::<impl *const T>::read::h1161cc1f25589ae4>
   317b8:      	movb	%al, %cl
   317ba:      	movb	0x17(%rsp), %al
   317be:      	cmpb	%cl, %al
   317c0:      	jne	0x31813 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1+0xe3>
   317c2:      	jmp	0x317d0 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1+0xa0>
   317c4:      	movl	0x2c(%rsp), %eax
   317c8:      	addq	$0x98, %rsp
   317cf:      	retq
   317d0:      	movq	0x18(%rsp), %rax
   317d5:      	movq	%rax, 0x80(%rsp)
   317dd:      	movq	$0x1, 0x88(%rsp)
   317e9:      	addq	$0x1, %rax
   317ed:      	movq	%rax, 0x18(%rsp)
   317f2:      	movq	0x20(%rsp), %rax
   317f7:      	movq	%rax, 0x70(%rsp)
   317fc:      	movq	$0x1, 0x78(%rsp)
   31805:      	addq	$0x1, %rax
   31809:      	movq	%rax, 0x20(%rsp)
   3180e:      	jmp	0x31776 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1+0x46>
   31813:      	movq	0x18(%rsp), %rdi
   31818:      	callq	0x31720 <core::ptr::const_ptr::<impl *const T>::read::h1161cc1f25589ae4>
   3181d:      	movb	%al, 0x97(%rsp)
   31824:      	movzbl	%al, %eax
   31827:      	movl	%eax, 0xc(%rsp)
   3182b:      	movq	0x20(%rsp), %rdi
   31830:      	callq	0x31720 <core::ptr::const_ptr::<impl *const T>::read::h1161cc1f25589ae4>
   31835:      	movb	%al, %cl
   31837:      	movl	0xc(%rsp), %eax
   3183b:      	movb	%cl, 0x96(%rsp)
   31842:      	movzbl	%cl, %ecx
   31845:      	subl	%ecx, %eax
   31847:      	movl	%eax, 0x10(%rsp)
   3184b:      	seto	%al
   3184e:      	testb	$0x1, %al
   31850:      	jne	0x3185f <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1+0x12f>
   31852:      	movl	0x10(%rsp), %eax
   31856:      	movl	%eax, 0x2c(%rsp)
   3185a:      	jmp	0x317c4 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hb00b439e938617e1+0x94>
   3185f:      	leaq	-0x1e3d6(%rip), %rdi    # 0x13490 <str.3>
   31866:      	leaq	0x9453(%rip), %rdx      # 0x3acc0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x6c0>
   3186d:      	movq	0x965c(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   31874:      	movl	$0x21, %esi
   31879:      	callq	*%rax
   3187b:      	ud2
   3187d:      	int3
   3187e:      	int3
   3187f:      	int3

0000000000031880 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h5d169fadb87001c5>:
   31880:      	subq	$0xe8, %rsp
   31887:      	movq	%rcx, 0x8(%rsp)
   3188c:      	movq	%rdi, 0x20(%rsp)
   31891:      	movq	%rsi, 0x28(%rsp)
   31896:      	movq	%rdx, 0x30(%rsp)
   3189b:      	movq	%rcx, 0x38(%rsp)
   318a0:      	movq	%rsi, 0x40(%rsp)
   318a5:      	movq	%rdx, 0x48(%rsp)
   318aa:      	movq	%rcx, 0x88(%rsp)
   318b2:      	movq	0x40(%rsp), %rax
   318b7:      	shrq	%rcx
   318ba:      	movq	%rax, 0xb8(%rsp)
   318c2:      	movq	%rcx, 0xc0(%rsp)
   318ca:      	shlq	%rcx
   318cd:      	addq	%rcx, %rax
   318d0:      	movq	%rax, 0x10(%rsp)
   318d5:      	movq	%rax, 0x90(%rsp)
   318dd:      	movq	0x10(%rsp), %rax
   318e2:      	cmpq	%rax, 0x40(%rsp)
   318e7:      	jne	0x31942 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h5d169fadb87001c5+0xc2>
   318e9:      	movq	0x8(%rsp), %rax
   318ee:      	movq	0x40(%rsp), %rdx
   318f3:      	movq	%rdx, 0xe0(%rsp)
   318fb:      	movq	0x48(%rsp), %rcx
   31900:      	movq	%rcx, 0xd8(%rsp)
   31908:      	andq	$0x1, %rax
   3190c:      	movq	%rdx, 0x70(%rsp)
   31911:      	movq	%rcx, 0x78(%rsp)
   31916:      	movq	%rax, 0x80(%rsp)
   3191e:      	movq	0x70(%rsp), %rdi
   31923:      	movq	0x78(%rsp), %rsi
   31928:      	movq	0x80(%rsp), %rdx
   31930:      	movq	0xa501(%rip), %rax      # 0x3be38 <zlgk82z0l71lvh9+0x3be38>
   31937:      	callq	*%rax
   31939:      	movl	%eax, 0x50(%rsp)
   3193d:      	jmp	0x31a05 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h5d169fadb87001c5+0x185>
   31942:      	movq	0x40(%rsp), %rdi
   31947:      	callq	0x316f0 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h415bc302eacbfd3f>
   3194c:      	movw	%ax, 0x54(%rsp)
   31951:      	movq	0x48(%rsp), %rdi
   31956:      	callq	0x316f0 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h415bc302eacbfd3f>
   3195b:      	movw	%ax, 0x56(%rsp)
   31960:      	leaq	0x54(%rsp), %rdi
   31965:      	leaq	0x56(%rsp), %rsi
   3196a:      	callq	0x31170 <core::cmp::impls::<impl core::cmp::PartialEq for u16>::ne::hac3f0d9dea7f80b2>
   3196f:      	testb	$0x1, %al
   31971:      	jne	0x319bc <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h5d169fadb87001c5+0x13c>
   31973:      	movq	0x40(%rsp), %rax
   31978:      	movq	%rax, 0xa8(%rsp)
   31980:      	movq	$0x1, 0xb0(%rsp)
   3198c:      	addq	$0x2, %rax
   31990:      	movq	%rax, 0x40(%rsp)
   31995:      	movq	0x48(%rsp), %rax
   3199a:      	movq	%rax, 0x98(%rsp)
   319a2:      	movq	$0x1, 0xa0(%rsp)
   319ae:      	addq	$0x2, %rax
   319b2:      	movq	%rax, 0x48(%rsp)
   319b7:      	jmp	0x318dd <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h5d169fadb87001c5+0x5d>
   319bc:      	movq	0x40(%rsp), %rcx
   319c1:      	movq	%rcx, 0xd0(%rsp)
   319c9:      	movq	0x48(%rsp), %rax
   319ce:      	movq	%rax, 0xc8(%rsp)
   319d6:      	movq	%rcx, 0x58(%rsp)
   319db:      	movq	%rax, 0x60(%rsp)
   319e0:      	movq	$0x2, 0x68(%rsp)
   319e9:      	movq	0x58(%rsp), %rdi
   319ee:      	movq	0x60(%rsp), %rsi
   319f3:      	movq	0x68(%rsp), %rdx
   319f8:      	movq	0xa439(%rip), %rax      # 0x3be38 <zlgk82z0l71lvh9+0x3be38>
   319ff:      	callq	*%rax
   31a01:      	movl	%eax, 0x50(%rsp)
   31a05:      	movl	0x50(%rsp), %eax
   31a09:      	addq	$0xe8, %rsp
   31a10:      	retq
   31a11:      	int3
   31a12:      	int3
   31a13:      	int3
   31a14:      	int3
   31a15:      	int3
   31a16:      	int3
   31a17:      	int3
   31a18:      	int3
   31a19:      	int3
   31a1a:      	int3
   31a1b:      	int3
   31a1c:      	int3
   31a1d:      	int3
   31a1e:      	int3
   31a1f:      	int3

0000000000031a20 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hc20c0c603158b685>:
   31a20:      	subq	$0xf8, %rsp
   31a27:      	movq	%rcx, 0x8(%rsp)
   31a2c:      	movq	%rdi, 0x20(%rsp)
   31a31:      	movq	%rsi, 0x28(%rsp)
   31a36:      	movq	%rdx, 0x30(%rsp)
   31a3b:      	movq	%rcx, 0x38(%rsp)
   31a40:      	movq	(%rdi), %rax
   31a43:      	movq	(%rax), %rax
   31a46:      	movq	%rax, 0x10(%rsp)
   31a4b:      	movq	%rsi, 0x40(%rsp)
   31a50:      	movq	%rdx, 0x48(%rsp)
   31a55:      	movq	%rcx, 0x90(%rsp)
   31a5d:      	movq	%rax, 0x98(%rsp)
   31a65:      	movq	0x40(%rsp), %rax
   31a6a:      	shrq	$0x2, %rcx
   31a6e:      	movq	%rax, 0xc8(%rsp)
   31a76:      	movq	%rcx, 0xd0(%rsp)
   31a7e:      	shlq	$0x2, %rcx
   31a82:      	addq	%rcx, %rax
   31a85:      	movq	%rax, 0x18(%rsp)
   31a8a:      	movq	%rax, 0xa0(%rsp)
   31a92:      	movq	0x18(%rsp), %rax
   31a97:      	cmpq	%rax, 0x40(%rsp)
   31a9c:      	jne	0x31b02 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hc20c0c603158b685+0xe2>
   31a9e:      	movq	0x10(%rsp), %rdi
   31aa3:      	movq	0x8(%rsp), %rax
   31aa8:      	movq	0x40(%rsp), %rdx
   31aad:      	movq	%rdx, 0xf0(%rsp)
   31ab5:      	movq	0x48(%rsp), %rcx
   31aba:      	movq	%rcx, 0xe8(%rsp)
   31ac2:      	andq	$0x3, %rax
   31ac6:      	movq	%rdx, 0x78(%rsp)
   31acb:      	movq	%rcx, 0x80(%rsp)
   31ad3:      	movq	%rax, 0x88(%rsp)
   31adb:      	movq	0x78(%rsp), %rsi
   31ae0:      	movq	0x80(%rsp), %rdx
   31ae8:      	movq	0x88(%rsp), %rcx
   31af0:      	movq	0xa349(%rip), %rax      # 0x3be40 <zlgk82z0l71lvh9+0x3be40>
   31af7:      	callq	*%rax
   31af9:      	movl	%eax, 0x54(%rsp)
   31afd:      	jmp	0x31bc8 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hc20c0c603158b685+0x1a8>
   31b02:      	movq	0x40(%rsp), %rdi
   31b07:      	callq	0x31700 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h5d7d57f8f775179e>
   31b0c:      	movl	%eax, 0x58(%rsp)
   31b10:      	movq	0x48(%rsp), %rdi
   31b15:      	callq	0x31700 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h5d7d57f8f775179e>
   31b1a:      	movl	%eax, 0x5c(%rsp)
   31b1e:      	leaq	0x58(%rsp), %rdi
   31b23:      	leaq	0x5c(%rsp), %rsi
   31b28:      	callq	0x31190 <core::cmp::impls::<impl core::cmp::PartialEq for u32>::ne::h723f2ed9682bef1b>
   31b2d:      	testb	$0x1, %al
   31b2f:      	jne	0x31b7a <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hc20c0c603158b685+0x15a>
   31b31:      	movq	0x40(%rsp), %rax
   31b36:      	movq	%rax, 0xb8(%rsp)
   31b3e:      	movq	$0x1, 0xc0(%rsp)
   31b4a:      	addq	$0x4, %rax
   31b4e:      	movq	%rax, 0x40(%rsp)
   31b53:      	movq	0x48(%rsp), %rax
   31b58:      	movq	%rax, 0xa8(%rsp)
   31b60:      	movq	$0x1, 0xb0(%rsp)
   31b6c:      	addq	$0x4, %rax
   31b70:      	movq	%rax, 0x48(%rsp)
   31b75:      	jmp	0x31a92 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hc20c0c603158b685+0x72>
   31b7a:      	movq	0x10(%rsp), %rdi
   31b7f:      	movq	0x40(%rsp), %rcx
   31b84:      	movq	%rcx, 0xe0(%rsp)
   31b8c:      	movq	0x48(%rsp), %rax
   31b91:      	movq	%rax, 0xd8(%rsp)
   31b99:      	movq	%rcx, 0x60(%rsp)
   31b9e:      	movq	%rax, 0x68(%rsp)
   31ba3:      	movq	$0x4, 0x70(%rsp)
   31bac:      	movq	0x60(%rsp), %rsi
   31bb1:      	movq	0x68(%rsp), %rdx
   31bb6:      	movq	0x70(%rsp), %rcx
   31bbb:      	movq	0xa27e(%rip), %rax      # 0x3be40 <zlgk82z0l71lvh9+0x3be40>
   31bc2:      	callq	*%rax
   31bc4:      	movl	%eax, 0x54(%rsp)
   31bc8:      	movl	0x54(%rsp), %eax
   31bcc:      	addq	$0xf8, %rsp
   31bd3:      	retq
   31bd4:      	int3
   31bd5:      	int3
   31bd6:      	int3
   31bd7:      	int3
   31bd8:      	int3
   31bd9:      	int3
   31bda:      	int3
   31bdb:      	int3
   31bdc:      	int3
   31bdd:      	int3
   31bde:      	int3
   31bdf:      	int3

0000000000031be0 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h97456d4397b56921>:
   31be0:      	subq	$0xf8, %rsp
   31be7:      	movq	%rcx, (%rsp)
   31beb:      	movq	%rdi, 0x18(%rsp)
   31bf0:      	movq	%rsi, 0x20(%rsp)
   31bf5:      	movq	%rdx, 0x28(%rsp)
   31bfa:      	movq	%rcx, 0x30(%rsp)
   31bff:      	movq	(%rdi), %rax
   31c02:      	movq	(%rax), %rax
   31c05:      	movq	%rax, 0x8(%rsp)
   31c0a:      	movq	%rsi, 0x38(%rsp)
   31c0f:      	movq	%rdx, 0x40(%rsp)
   31c14:      	movq	%rcx, 0x90(%rsp)
   31c1c:      	movq	%rax, 0x98(%rsp)
   31c24:      	movq	0x38(%rsp), %rax
   31c29:      	shrq	$0x3, %rcx
   31c2d:      	movq	%rax, 0xc8(%rsp)
   31c35:      	movq	%rcx, 0xd0(%rsp)
   31c3d:      	shlq	$0x3, %rcx
   31c41:      	addq	%rcx, %rax
   31c44:      	movq	%rax, 0x10(%rsp)
   31c49:      	movq	%rax, 0xa0(%rsp)
   31c51:      	movq	0x10(%rsp), %rax
   31c56:      	cmpq	%rax, 0x38(%rsp)
   31c5b:      	jne	0x31cc0 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h97456d4397b56921+0xe0>
   31c5d:      	movq	0x8(%rsp), %rdi
   31c62:      	movq	(%rsp), %rax
   31c66:      	movq	0x38(%rsp), %rdx
   31c6b:      	movq	%rdx, 0xf0(%rsp)
   31c73:      	movq	0x40(%rsp), %rcx
   31c78:      	movq	%rcx, 0xe8(%rsp)
   31c80:      	andq	$0x7, %rax
   31c84:      	movq	%rdx, 0x78(%rsp)
   31c89:      	movq	%rcx, 0x80(%rsp)
   31c91:      	movq	%rax, 0x88(%rsp)
   31c99:      	movq	0x78(%rsp), %rsi
   31c9e:      	movq	0x80(%rsp), %rdx
   31ca6:      	movq	0x88(%rsp), %rcx
   31cae:      	movq	0xa17b(%rip), %rax      # 0x3be30 <zlgk82z0l71lvh9+0x3be30>
   31cb5:      	callq	*%rax
   31cb7:      	movl	%eax, 0x4c(%rsp)
   31cbb:      	jmp	0x31d88 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h97456d4397b56921+0x1a8>
   31cc0:      	movq	0x38(%rsp), %rdi
   31cc5:      	callq	0x31710 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h680681c6fe0d7076>
   31cca:      	movq	%rax, 0x50(%rsp)
   31ccf:      	movq	0x40(%rsp), %rdi
   31cd4:      	callq	0x31710 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h680681c6fe0d7076>
   31cd9:      	movq	%rax, 0x58(%rsp)
   31cde:      	leaq	0x50(%rsp), %rdi
   31ce3:      	leaq	0x58(%rsp), %rsi
   31ce8:      	callq	0x311b0 <core::cmp::impls::<impl core::cmp::PartialEq for u64>::ne::he102811231087234>
   31ced:      	testb	$0x1, %al
   31cef:      	jne	0x31d3a <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h97456d4397b56921+0x15a>
   31cf1:      	movq	0x38(%rsp), %rax
   31cf6:      	movq	%rax, 0xb8(%rsp)
   31cfe:      	movq	$0x1, 0xc0(%rsp)
   31d0a:      	addq	$0x8, %rax
   31d0e:      	movq	%rax, 0x38(%rsp)
   31d13:      	movq	0x40(%rsp), %rax
   31d18:      	movq	%rax, 0xa8(%rsp)
   31d20:      	movq	$0x1, 0xb0(%rsp)
   31d2c:      	addq	$0x8, %rax
   31d30:      	movq	%rax, 0x40(%rsp)
   31d35:      	jmp	0x31c51 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::h97456d4397b56921+0x71>
   31d3a:      	movq	0x8(%rsp), %rdi
   31d3f:      	movq	0x38(%rsp), %rcx
   31d44:      	movq	%rcx, 0xe0(%rsp)
   31d4c:      	movq	0x40(%rsp), %rax
   31d51:      	movq	%rax, 0xd8(%rsp)
   31d59:      	movq	%rcx, 0x60(%rsp)
   31d5e:      	movq	%rax, 0x68(%rsp)
   31d63:      	movq	$0x8, 0x70(%rsp)
   31d6c:      	movq	0x60(%rsp), %rsi
   31d71:      	movq	0x68(%rsp), %rdx
   31d76:      	movq	0x70(%rsp), %rcx
   31d7b:      	movq	0xa0ae(%rip), %rax      # 0x3be30 <zlgk82z0l71lvh9+0x3be30>
   31d82:      	callq	*%rax
   31d84:      	movl	%eax, 0x4c(%rsp)
   31d88:      	movl	0x4c(%rsp), %eax
   31d8c:      	addq	$0xf8, %rsp
   31d93:      	retq
   31d94:      	int3
   31d95:      	int3
   31d96:      	int3
   31d97:      	int3
   31d98:      	int3
   31d99:      	int3
   31d9a:      	int3
   31d9b:      	int3
   31d9c:      	int3
   31d9d:      	int3
   31d9e:      	int3
   31d9f:      	int3

0000000000031da0 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hf18c3cc8ee7534d7>:
   31da0:      	subq	$0x108, %rsp            # imm = 0x108
   31da7:      	movq	%rcx, (%rsp)
   31dab:      	movq	%rdi, 0x18(%rsp)
   31db0:      	movq	%rsi, 0x20(%rsp)
   31db5:      	movq	%rdx, 0x28(%rsp)
   31dba:      	movq	%rcx, 0x30(%rsp)
   31dbf:      	movq	(%rdi), %rax
   31dc2:      	movq	(%rax), %rax
   31dc5:      	movq	%rax, 0x8(%rsp)
   31dca:      	movq	%rsi, 0x38(%rsp)
   31dcf:      	movq	%rdx, 0x40(%rsp)
   31dd4:      	movq	%rcx, 0xa0(%rsp)
   31ddc:      	movq	%rax, 0xa8(%rsp)
   31de4:      	movq	0x38(%rsp), %rax
   31de9:      	shrq	$0x4, %rcx
   31ded:      	movq	%rax, 0xd8(%rsp)
   31df5:      	movq	%rcx, 0xe0(%rsp)
   31dfd:      	shlq	$0x4, %rcx
   31e01:      	addq	%rcx, %rax
   31e04:      	movq	%rax, 0x10(%rsp)
   31e09:      	movq	%rax, 0xb0(%rsp)
   31e11:      	movq	0x10(%rsp), %rax
   31e16:      	cmpq	%rax, 0x38(%rsp)
   31e1b:      	jne	0x31e86 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hf18c3cc8ee7534d7+0xe6>
   31e1d:      	movq	0x8(%rsp), %rdi
   31e22:      	movq	(%rsp), %rax
   31e26:      	movq	0x38(%rsp), %rdx
   31e2b:      	movq	%rdx, 0x100(%rsp)
   31e33:      	movq	0x40(%rsp), %rcx
   31e38:      	movq	%rcx, 0xf8(%rsp)
   31e40:      	andq	$0xf, %rax
   31e44:      	movq	%rdx, 0x88(%rsp)
   31e4c:      	movq	%rcx, 0x90(%rsp)
   31e54:      	movq	%rax, 0x98(%rsp)
   31e5c:      	movq	0x88(%rsp), %rsi
   31e64:      	movq	0x90(%rsp), %rdx
   31e6c:      	movq	0x98(%rsp), %rcx
   31e74:      	movq	0x9fad(%rip), %rax      # 0x3be28 <zlgk82z0l71lvh9+0x3be28>
   31e7b:      	callq	*%rax
   31e7d:      	movl	%eax, 0x4c(%rsp)
   31e81:      	jmp	0x31f5e <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hf18c3cc8ee7534d7+0x1be>
   31e86:      	movq	0x38(%rsp), %rdi
   31e8b:      	callq	0x316e0 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h193bcc981c198647>
   31e90:      	movq	%rdx, 0x58(%rsp)
   31e95:      	movq	%rax, 0x50(%rsp)
   31e9a:      	movq	0x40(%rsp), %rdi
   31e9f:      	callq	0x316e0 <core::ptr::const_ptr::<impl *const T>::read_unaligned::h193bcc981c198647>
   31ea4:      	movq	%rdx, 0x68(%rsp)
   31ea9:      	movq	%rax, 0x60(%rsp)
   31eae:      	leaq	0x50(%rsp), %rdi
   31eb3:      	leaq	0x60(%rsp), %rsi
   31eb8:      	callq	0x311d0 <core::cmp::impls::<impl core::cmp::PartialEq for u128>::ne::hd621a0ea5e682d91>
   31ebd:      	testb	$0x1, %al
   31ebf:      	jne	0x31f0a <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hf18c3cc8ee7534d7+0x16a>
   31ec1:      	movq	0x38(%rsp), %rax
   31ec6:      	movq	%rax, 0xc8(%rsp)
   31ece:      	movq	$0x1, 0xd0(%rsp)
   31eda:      	addq	$0x10, %rax
   31ede:      	movq	%rax, 0x38(%rsp)
   31ee3:      	movq	0x40(%rsp), %rax
   31ee8:      	movq	%rax, 0xb8(%rsp)
   31ef0:      	movq	$0x1, 0xc0(%rsp)
   31efc:      	addq	$0x10, %rax
   31f00:      	movq	%rax, 0x40(%rsp)
   31f05:      	jmp	0x31e11 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hf18c3cc8ee7534d7+0x71>
   31f0a:      	movq	0x8(%rsp), %rdi
   31f0f:      	movq	0x38(%rsp), %rcx
   31f14:      	movq	%rcx, 0xf0(%rsp)
   31f1c:      	movq	0x40(%rsp), %rax
   31f21:      	movq	%rax, 0xe8(%rsp)
   31f29:      	movq	%rcx, 0x70(%rsp)
   31f2e:      	movq	%rax, 0x78(%rsp)
   31f33:      	movq	$0x10, 0x80(%rsp)
   31f3f:      	movq	0x70(%rsp), %rsi
   31f44:      	movq	0x78(%rsp), %rdx
   31f49:      	movq	0x80(%rsp), %rcx
   31f51:      	movq	0x9ed0(%rip), %rax      # 0x3be28 <zlgk82z0l71lvh9+0x3be28>
   31f58:      	callq	*%rax
   31f5a:      	movl	%eax, 0x4c(%rsp)
   31f5e:      	movl	0x4c(%rsp), %eax
   31f62:      	addq	$0x108, %rsp            # imm = 0x108
   31f69:      	retq
   31f6a:      	int3
   31f6b:      	int3
   31f6c:      	int3
   31f6d:      	int3
   31f6e:      	int3
   31f6f:      	int3

0000000000031f70 <compiler_builtins::mem::impls::rep_param::hdc286c3dbbb97e5c>:
   31f70:      	subq	$0x58, %rsp
   31f74:      	movq	%rdi, 0x18(%rsp)
   31f79:      	movq	%rdi, 0x20(%rsp)
   31f7e:      	movq	%rdx, 0x30(%rsp)
   31f83:      	movq	%rsi, 0x38(%rsp)
   31f88:      	andq	$0x7, %rsi
   31f8c:      	movl	$0x8, %eax
   31f91:      	subq	%rsi, %rax
   31f94:      	movq	%rax, 0x28(%rsp)
   31f99:      	movl	$0x8, %eax
   31f9e:      	cmpq	%rsi, %rax
   31fa1:      	setb	%al
   31fa4:      	testb	$0x1, %al
   31fa6:      	jne	0x31fe8 <compiler_builtins::mem::impls::rep_param::hdc286c3dbbb97e5c+0x78>
   31fa8:      	movq	0x28(%rsp), %rdi
   31fad:      	andq	$0x7, %rdi
   31fb1:      	movq	0x30(%rsp), %rsi
   31fb6:      	movq	0x9cf3(%rip), %rax      # 0x3bcb0 <zlgk82z0l71lvh9+0x3bcb0>
   31fbd:      	callq	*%rax
   31fbf:      	movq	%rax, %rcx
   31fc2:      	movq	%rcx, 0x8(%rsp)
   31fc7:      	movq	%rcx, 0x40(%rsp)
   31fcc:      	movq	0x30(%rsp), %rax
   31fd1:      	movq	%rax, %rdx
   31fd4:      	subq	%rcx, %rdx
   31fd7:      	movq	%rdx, 0x10(%rsp)
   31fdc:      	cmpq	%rcx, %rax
   31fdf:      	setb	%al
   31fe2:      	testb	$0x1, %al
   31fe4:      	jne	0x3204b <compiler_builtins::mem::impls::rep_param::hdc286c3dbbb97e5c+0xdb>
   31fe6:      	jmp	0x32006 <compiler_builtins::mem::impls::rep_param::hdc286c3dbbb97e5c+0x96>
   31fe8:      	leaq	-0x1eb5f(%rip), %rdi    # 0x13490 <str.3>
   31fef:      	leaq	0x8ce2(%rip), %rdx      # 0x3acd8 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x6d8>
   31ff6:      	movq	0x8ed3(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   31ffd:      	movl	$0x21, %esi
   32002:      	callq	*%rax
   32004:      	ud2
   32006:      	movq	0x20(%rsp), %rax
   3200b:      	movq	0x18(%rsp), %rcx
   32010:      	movq	0x8(%rsp), %rdi
   32015:      	movq	0x10(%rsp), %rdx
   3201a:      	movq	%rdx, 0x30(%rsp)
   3201f:      	movq	0x30(%rsp), %rsi
   32024:      	shrq	$0x3, %rsi
   32028:      	movq	%rsi, 0x48(%rsp)
   3202d:      	movq	0x30(%rsp), %rdx
   32032:      	andq	$0x7, %rdx
   32036:      	movq	%rdx, 0x50(%rsp)
   3203b:      	movq	%rdi, (%rcx)
   3203e:      	movq	%rsi, 0x8(%rcx)
   32042:      	movq	%rdx, 0x10(%rcx)
   32046:      	addq	$0x58, %rsp
   3204a:      	retq
   3204b:      	leaq	-0x1ebc2(%rip), %rdi    # 0x13490 <str.3>
   32052:      	leaq	0x8c97(%rip), %rdx      # 0x3acf0 <core::fmt::rt::USIZE_MARKER::he7d31a6ff947f75f+0x6f0>
   32059:      	movq	0x8e70(%rip), %rax      # 0x3aed0 <zlgk82z0l71lvh9+0x3aed0>
   32060:      	movl	$0x21, %esi
   32065:      	callq	*%rax
   32067:      	ud2
   32069:      	int3
   3206a:      	int3
   3206b:      	int3
   3206c:      	int3
   3206d:      	int3
   3206e:      	int3
   3206f:      	int3

0000000000032070 <memcpy>:
   32070:      	subq	$0x18, %rsp
   32074:      	movq	%rdi, (%rsp)
   32078:      	movq	%rsi, 0x8(%rsp)
   3207d:      	movq	%rdx, 0x10(%rsp)
   32082:      	movq	0x9dbf(%rip), %rax      # 0x3be48 <zlgk82z0l71lvh9+0x3be48>
   32089:      	callq	*%rax
   3208b:      	addq	$0x18, %rsp
   3208f:      	retq

0000000000032090 <memcmp>:
   32090:      	subq	$0x18, %rsp
   32094:      	movq	%rdi, (%rsp)
   32098:      	movq	%rsi, 0x8(%rsp)
   3209d:      	movq	%rdx, 0x10(%rsp)
   320a2:      	movq	0x9da7(%rip), %rax      # 0x3be50 <zlgk82z0l71lvh9+0x3be50>
   320a9:      	callq	*%rax
   320ab:      	addq	$0x18, %rsp
   320af:      	retq

00000000000320b0 <compiler_builtins::mem::memcpy::hfac01cbfc20f5e24>:
   320b0:      	subq	$0x78, %rsp
   320b4:      	movq	%rdi, (%rsp)
   320b8:      	movq	%rdi, 0x18(%rsp)
   320bd:      	movq	%rsi, 0x20(%rsp)
   320c2:      	movq	%rdx, 0x28(%rsp)
   320c7:      	movq	%rdi, 0x30(%rsp)
   320cc:      	movq	%rsi, 0x38(%rsp)
   320d1:      	movq	%rdx, 0x58(%rsp)
   320d6:      	movq	0x30(%rsp), %rsi
   320db:      	leaq	0x40(%rsp), %rdi
   320e0:      	callq	0x31f70 <compiler_builtins::mem::impls::rep_param::hdc286c3dbbb97e5c>
   320e5:      	movq	(%rsp), %rax
   320e9:      	movq	0x40(%rsp), %rcx
   320ee:      	movq	%rcx, 0x60(%rsp)
   320f3:      	movq	0x48(%rsp), %rdx
   320f8:      	movq	%rdx, 0x8(%rsp)
   320fd:      	movq	%rdx, 0x68(%rsp)
   32102:      	movq	0x50(%rsp), %rdx
   32107:      	movq	%rdx, 0x10(%rsp)
   3210c:      	movq	%rdx, 0x70(%rsp)
   32111:      	movq	0x30(%rsp), %rdi
   32116:      	movq	0x38(%rsp), %rsi
   3211b:      	rep		movsb	(%rsi), %es:(%rdi)
   3211d:      	movq	%rcx, %rdx
   32120:      	movq	0x8(%rsp), %rcx
   32125:      	movq	%rdi, 0x30(%rsp)
   3212a:      	movq	%rsi, 0x38(%rsp)
   3212f:      	movq	0x30(%rsp), %rdi
   32134:      	movq	0x38(%rsp), %rsi
   32139:      	rep		movsq	(%rsi), %es:(%rdi)
   3213c:      	movq	%rcx, %rdx
   3213f:      	movq	0x10(%rsp), %rcx
   32144:      	movq	%rdi, 0x30(%rsp)
   32149:      	movq	%rsi, 0x38(%rsp)
   3214e:      	movq	0x30(%rsp), %rdi
   32153:      	movq	0x38(%rsp), %rsi
   32158:      	rep		movsb	(%rsi), %es:(%rdi)
   3215a:      	addq	$0x78, %rsp
   3215e:      	retq
   3215f:      	int3

0000000000032160 <compiler_builtins::mem::memcmp::hb56e5bae6711d89b>:
   32160:      	subq	$0x88, %rsp
   32167:      	movq	%rdi, 0x8(%rsp)
   3216c:      	movq	%rsi, 0x10(%rsp)
   32171:      	movq	%rdx, 0x18(%rsp)
   32176:      	movq	%rdi, 0x60(%rsp)
   3217b:      	movq	%rsi, 0x68(%rsp)
   32180:      	movq	%rdx, 0x70(%rsp)
   32185:      	leaq	0x27(%rsp), %rax
   3218a:      	movq	%rax, 0x28(%rsp)
   3218f:      	leaq	0x28(%rsp), %rax
   32194:      	movq	%rax, 0x30(%rsp)
   32199:      	leaq	0x30(%rsp), %rax
   3219e:      	movq	%rax, 0x38(%rsp)
   321a3:      	leaq	0x38(%rsp), %rax
   321a8:      	movq	%rax, 0x40(%rsp)
   321ad:      	movq	%rdi, 0x80(%rsp)
   321b5:      	movq	%rsi, 0x78(%rsp)
   321ba:      	movq	%rdi, 0x48(%rsp)
   321bf:      	movq	%rsi, 0x50(%rsp)
   321c4:      	movq	%rdx, 0x58(%rsp)
   321c9:      	movq	0x48(%rsp), %rsi
   321ce:      	movq	0x50(%rsp), %rdx
   321d3:      	movq	0x58(%rsp), %rcx
   321d8:      	leaq	0x40(%rsp), %rdi
   321dd:      	callq	0x31da0 <compiler_builtins::mem::impls::compare_bytes::{{closure}}::hf18c3cc8ee7534d7>
   321e2:      	addq	$0x88, %rsp
   321e9:      	retq
